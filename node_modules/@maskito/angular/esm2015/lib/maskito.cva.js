import { Directive, Input } from '@angular/core';
import { DefaultValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';
import { MASKITO_DEFAULT_OPTIONS, maskitoTransform } from '@maskito/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
export class MaskitoCva {
    constructor(accessor) {
        this.accessor = accessor;
        this.maskito = MASKITO_DEFAULT_OPTIONS;
        const original = accessor.writeValue.bind(accessor);
        accessor.writeValue = (value) => {
            var _a;
            original(maskitoTransform(String(value !== null && value !== void 0 ? value : ''), (_a = this.maskito) !== null && _a !== void 0 ? _a : MASKITO_DEFAULT_OPTIONS));
        };
    }
}
MaskitoCva.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: MaskitoCva, deps: [{ token: i1.DefaultValueAccessor }], target: i0.ɵɵFactoryTarget.Directive });
MaskitoCva.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: MaskitoCva, selector: "input[maskito], textarea[maskito]", inputs: { maskito: "maskito" }, host: { listeners: { "input": "$any(this.accessor)._handleInput($event.target.value)", "blur": "accessor.onTouched()", "compositionstart": "$any(this.accessor)._compositionStart()", "compositionend": "$any(this.accessor)._compositionEnd($event.target.value)" } }, providers: [
        DefaultValueAccessor,
        {
            provide: NG_VALUE_ACCESSOR,
            multi: true,
            useExisting: DefaultValueAccessor,
        },
    ], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: MaskitoCva, decorators: [{
            type: Directive,
            args: [{
                    selector: 'input[maskito], textarea[maskito]',
                    providers: [
                        DefaultValueAccessor,
                        {
                            provide: NG_VALUE_ACCESSOR,
                            multi: true,
                            useExisting: DefaultValueAccessor,
                        },
                    ],
                    host: {
                        '(input)': '$any(this.accessor)._handleInput($event.target.value)',
                        '(blur)': 'accessor.onTouched()',
                        '(compositionstart)': '$any(this.accessor)._compositionStart()',
                        '(compositionend)': '$any(this.accessor)._compositionEnd($event.target.value)',
                    },
                }]
        }], ctorParameters: function () { return [{ type: i1.DefaultValueAccessor }]; }, propDecorators: { maskito: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFza2l0by5jdmEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9hbmd1bGFyL3NyYy9saWIvbWFza2l0by5jdmEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxLQUFLLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDL0MsT0FBTyxFQUFDLG9CQUFvQixFQUFFLGlCQUFpQixFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDdkUsT0FBTyxFQUFDLHVCQUF1QixFQUFrQixnQkFBZ0IsRUFBQyxNQUFNLGVBQWUsQ0FBQzs7O0FBbUJ4RixNQUFNLE9BQU8sVUFBVTtJQUluQixZQUFxQixRQUE4QjtRQUE5QixhQUFRLEdBQVIsUUFBUSxDQUFzQjtRQUZuRCxZQUFPLEdBQTBCLHVCQUF1QixDQUFDO1FBR3JELE1BQU0sUUFBUSxHQUFHLFFBQVEsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRXBELFFBQVEsQ0FBQyxVQUFVLEdBQUcsQ0FBQyxLQUFjLEVBQUUsRUFBRTs7WUFDckMsUUFBUSxDQUNKLGdCQUFnQixDQUNaLE1BQU0sQ0FBQyxLQUFLLGFBQUwsS0FBSyxjQUFMLEtBQUssR0FBSSxFQUFFLENBQUMsRUFDbkIsTUFBQSxJQUFJLENBQUMsT0FBTyxtQ0FBSSx1QkFBdUIsQ0FDMUMsQ0FDSixDQUFDO1FBQ04sQ0FBQyxDQUFDO0lBQ04sQ0FBQzs7d0dBZlEsVUFBVTs0RkFBVixVQUFVLG9XQWZSO1FBQ1Asb0JBQW9CO1FBQ3BCO1lBQ0ksT0FBTyxFQUFFLGlCQUFpQjtZQUMxQixLQUFLLEVBQUUsSUFBSTtZQUNYLFdBQVcsRUFBRSxvQkFBb0I7U0FDcEM7S0FDSjs0RkFRUSxVQUFVO2tCQWpCdEIsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsbUNBQW1DO29CQUM3QyxTQUFTLEVBQUU7d0JBQ1Asb0JBQW9CO3dCQUNwQjs0QkFDSSxPQUFPLEVBQUUsaUJBQWlCOzRCQUMxQixLQUFLLEVBQUUsSUFBSTs0QkFDWCxXQUFXLEVBQUUsb0JBQW9CO3lCQUNwQztxQkFDSjtvQkFDRCxJQUFJLEVBQUU7d0JBQ0YsU0FBUyxFQUFFLHVEQUF1RDt3QkFDbEUsUUFBUSxFQUFFLHNCQUFzQjt3QkFDaEMsb0JBQW9CLEVBQUUseUNBQXlDO3dCQUMvRCxrQkFBa0IsRUFBRSwwREFBMEQ7cUJBQ2pGO2lCQUNKOzJHQUdHLE9BQU87c0JBRE4sS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGlyZWN0aXZlLCBJbnB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0RlZmF1bHRWYWx1ZUFjY2Vzc29yLCBOR19WQUxVRV9BQ0NFU1NPUn0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHtNQVNLSVRPX0RFRkFVTFRfT1BUSU9OUywgTWFza2l0b09wdGlvbnMsIG1hc2tpdG9UcmFuc2Zvcm19IGZyb20gJ0BtYXNraXRvL2NvcmUnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ2lucHV0W21hc2tpdG9dLCB0ZXh0YXJlYVttYXNraXRvXScsXG4gICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIERlZmF1bHRWYWx1ZUFjY2Vzc29yLFxuICAgICAgICB7XG4gICAgICAgICAgICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcbiAgICAgICAgICAgIG11bHRpOiB0cnVlLFxuICAgICAgICAgICAgdXNlRXhpc3Rpbmc6IERlZmF1bHRWYWx1ZUFjY2Vzc29yLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgaG9zdDoge1xuICAgICAgICAnKGlucHV0KSc6ICckYW55KHRoaXMuYWNjZXNzb3IpLl9oYW5kbGVJbnB1dCgkZXZlbnQudGFyZ2V0LnZhbHVlKScsXG4gICAgICAgICcoYmx1ciknOiAnYWNjZXNzb3Iub25Ub3VjaGVkKCknLFxuICAgICAgICAnKGNvbXBvc2l0aW9uc3RhcnQpJzogJyRhbnkodGhpcy5hY2Nlc3NvcikuX2NvbXBvc2l0aW9uU3RhcnQoKScsXG4gICAgICAgICcoY29tcG9zaXRpb25lbmQpJzogJyRhbnkodGhpcy5hY2Nlc3NvcikuX2NvbXBvc2l0aW9uRW5kKCRldmVudC50YXJnZXQudmFsdWUpJyxcbiAgICB9LFxufSlcbmV4cG9ydCBjbGFzcyBNYXNraXRvQ3ZhIHtcbiAgICBASW5wdXQoKVxuICAgIG1hc2tpdG86IE1hc2tpdG9PcHRpb25zIHwgbnVsbCA9IE1BU0tJVE9fREVGQVVMVF9PUFRJT05TO1xuXG4gICAgY29uc3RydWN0b3IocmVhZG9ubHkgYWNjZXNzb3I6IERlZmF1bHRWYWx1ZUFjY2Vzc29yKSB7XG4gICAgICAgIGNvbnN0IG9yaWdpbmFsID0gYWNjZXNzb3Iud3JpdGVWYWx1ZS5iaW5kKGFjY2Vzc29yKTtcblxuICAgICAgICBhY2Nlc3Nvci53cml0ZVZhbHVlID0gKHZhbHVlOiB1bmtub3duKSA9PiB7XG4gICAgICAgICAgICBvcmlnaW5hbChcbiAgICAgICAgICAgICAgICBtYXNraXRvVHJhbnNmb3JtKFxuICAgICAgICAgICAgICAgICAgICBTdHJpbmcodmFsdWUgPz8gJycpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1hc2tpdG8gPz8gTUFTS0lUT19ERUZBVUxUX09QVElPTlMsXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH07XG4gICAgfVxufVxuIl19