import { ChangeDetectorRef, ComponentFactoryResolver, Directive, TemplateRef, } from '@angular/core';
import { PolymorpheusComponent } from '../classes/component';
import { PolymorpheusContext } from '../classes/context';
import { PolymorpheusTemplate } from './template';
import * as i0 from "@angular/core";
export class PolymorpheusOutletDirective {
    constructor(vcr, i, t) {
        this.vcr = vcr;
        this.i = i;
        this.t = t;
        this.content = '';
    }
    get template() {
        if (isDirective(this.content)) {
            return this.content.template;
        }
        return this.content instanceof TemplateRef ? this.content : this.t;
    }
    ngOnChanges({ content }) {
        var _a;
        const context = this.getContext();
        (_a = this.c) === null || _a === void 0 ? void 0 : _a.injector.get(ChangeDetectorRef).markForCheck();
        if (!content) {
            return;
        }
        this.vcr.clear();
        const proxy = context &&
            new Proxy(context, {
                get: (_, key) => { var _a; return (_a = this.getContext()) === null || _a === void 0 ? void 0 : _a[key]; },
            });
        if (isComponent(this.content)) {
            this.process(this.content, proxy);
        }
        else if (
        // tslint:disable-next-line:triple-equals
        (context instanceof PolymorpheusContext && context.$implicit) != null) {
            this.vcr.createEmbeddedView(this.template, proxy);
        }
    }
    ngDoCheck() {
        if (isDirective(this.content)) {
            this.content.check();
        }
    }
    static ngTemplateContextGuard(_dir, _ctx) {
        return true;
    }
    getContext() {
        if (isTemplate(this.content) || isComponent(this.content)) {
            return this.context;
        }
        return new PolymorpheusContext(typeof this.content === 'function'
            ? this.content(this.context)
            : this.content);
    }
    process(content, proxy) {
        const injector = content.createInjector(this.i, proxy);
        this.c = this.vcr.createComponent(injector
            .get(ComponentFactoryResolver)
            .resolveComponentFactory(content.component), 0, injector);
    }
}
/** @nocollapse */ PolymorpheusOutletDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: PolymorpheusOutletDirective, deps: [{ token: i0.ViewContainerRef }, { token: i0.Injector }, { token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ PolymorpheusOutletDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: { content: ["polymorpheusOutlet", "content"], context: ["polymorpheusOutletContext", "context"] }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: PolymorpheusOutletDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[polymorpheusOutlet]',
                    inputs: ['content: polymorpheusOutlet', 'context: polymorpheusOutletContext'],
                }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: i0.Injector }, { type: i0.TemplateRef }]; } });
function isDirective(content) {
    return content instanceof PolymorpheusTemplate;
}
function isComponent(content) {
    return content instanceof PolymorpheusComponent;
}
function isTemplate(content) {
    return isDirective(content) || content instanceof TemplateRef;
}
//# sourceMappingURL=data:application/json;base64,