{"version":3,"file":"tinkoff-ng-dompurify.umd.js","sources":["../../../projects/ng-dompurify/src/lib/tokens/dompurify-config.ts","../../../projects/ng-dompurify/src/lib/tokens/dompurify-hooks.ts","../../../projects/ng-dompurify/src/lib/tokens/sanitize-style.ts","../../../projects/ng-dompurify/src/lib/ng-dompurify.service.ts","../../../projects/ng-dompurify/src/lib/ng-dompurify.pipe.ts","../../../projects/ng-dompurify/src/lib/ng-dompurify.module.ts","../../../projects/ng-dompurify/src/public-api.ts","../../../projects/ng-dompurify/src/tinkoff-ng-dompurify.ts"],"sourcesContent":["import {InjectionToken} from '@angular/core';\r\n\r\nimport {NgDompurifyConfig} from '../types/ng-dompurify-config';\r\n\r\n/**\r\n * Token for {@link NgDompurifyConfig}\r\n */\r\nexport const DOMPURIFY_CONFIG = new InjectionToken<NgDompurifyConfig>(\r\n    'Config for DOMPurify',\r\n    {\r\n        factory: () => ({}),\r\n        providedIn: 'root',\r\n    },\r\n);\r\n","import {InjectionToken} from '@angular/core';\r\n\r\nimport {NgDompurifyHook} from '../types/ng-dompurify-hook';\r\n\r\n/**\r\n * Token for adding hooks to DOMPurify, see {@link addHook}\r\n */\r\nexport const DOMPURIFY_HOOKS = new InjectionToken<readonly NgDompurifyHook[]>(\r\n    'Hooks for DOMPurify',\r\n    {\r\n        factory: () => [],\r\n        providedIn: 'root',\r\n    },\r\n);\r\n","import {InjectionToken} from '@angular/core';\r\n\r\nimport {SanitizeStyle} from '../types/sanitize-style';\r\n\r\n/**\r\n * A function that takes style rule value as input and returns a sanitized string\r\n *\r\n * NOTE: Angular 10 removed CSS sanitation so by default this method does nothing\r\n */\r\nexport const SANITIZE_STYLE = new InjectionToken<SanitizeStyle>(\r\n    'A function that sanitizes value for a CSS rule',\r\n    {\r\n        factory: () => value => value,\r\n        providedIn: 'root',\r\n    },\r\n);\r\n","import {DOCUMENT} from '@angular/common';\r\nimport {Inject, Injectable, Sanitizer, SecurityContext} from '@angular/core';\r\nimport dompurify, {DOMPurifyI} from 'dompurify';\r\n\r\nimport {DOMPURIFY_CONFIG} from './tokens/dompurify-config';\r\nimport {DOMPURIFY_HOOKS} from './tokens/dompurify-hooks';\r\nimport {SANITIZE_STYLE} from './tokens/sanitize-style';\r\nimport {NgDompurifyConfig} from './types/ng-dompurify-config';\r\nimport {NgDompurifyHook} from './types/ng-dompurify-hook';\r\nimport {SanitizeStyle} from './types/sanitize-style';\r\n\r\nconst createDOMPurify = dompurify;\r\n\r\n/**\r\n * Implementation of Angular {@link Sanitizer} purifying via DOMPurify\r\n *\r\n * use {@link DOMPURIFY_CONFIG} token to provide config ({@link NgDompurifyConfig})\r\n * use {@link SANITIZE_STYLE} token to provide a style sanitizing method ({@link SanitizeStyle})\r\n * use {@link DOMPURIFY_HOOKS} token to provide a hooks for DOMPurify ({@link addHook})\r\n *\r\n * Ambient type cannot be used without @dynamic https://github.com/angular/angular/issues/23395\r\n * @dynamic\r\n */\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class NgDompurifySanitizer implements Sanitizer {\r\n    private readonly domPurify: DOMPurifyI;\r\n\r\n    constructor(\r\n        @Inject(DOMPURIFY_CONFIG)\r\n        private readonly config: NgDompurifyConfig,\r\n        @Inject(SANITIZE_STYLE)\r\n        private readonly sanitizeStyle: SanitizeStyle,\r\n        @Inject(DOCUMENT) {defaultView}: Document,\r\n        @Inject(DOMPURIFY_HOOKS)\r\n        hooks: readonly NgDompurifyHook[],\r\n    ) {\r\n        this.domPurify = createDOMPurify(defaultView!);\r\n\r\n        hooks.forEach(({name, hook}) => {\r\n            this.domPurify.addHook(name, hook);\r\n        });\r\n    }\r\n\r\n    sanitize(\r\n        context: SecurityContext,\r\n        value: {} | string | null,\r\n        config: NgDompurifyConfig = this.config,\r\n    ): string {\r\n        if (context === SecurityContext.SCRIPT) {\r\n            throw new Error('DOMPurify does not support SCRIPT context');\r\n        }\r\n\r\n        return context === SecurityContext.STYLE\r\n            ? this.sanitizeStyle(String(value))\r\n            : this.domPurify.sanitize(String(value || ''), config);\r\n    }\r\n}\r\n","import {Pipe, PipeTransform, SecurityContext} from '@angular/core';\r\nimport {DomSanitizer, SafeValue} from '@angular/platform-browser';\r\n\r\nimport {NgDompurifySanitizer} from './ng-dompurify.service';\r\nimport {NgDompurifyConfig} from './types/ng-dompurify-config';\r\n\r\n/**\r\n * Pipe that transforms dirty content to clean via {@link NgDompurifySanitizer}\r\n */\r\n@Pipe({name: 'dompurify'})\r\nexport class NgDompurifyPipe implements PipeTransform {\r\n    constructor(\r\n        private readonly sanitizer: NgDompurifySanitizer,\r\n        private readonly domSanitizer: DomSanitizer,\r\n    ) {}\r\n\r\n    transform(\r\n        value: {} | string | null,\r\n        context: SecurityContext = SecurityContext.HTML,\r\n        config?: NgDompurifyConfig,\r\n    ): SafeValue | null {\r\n        return this.bypassSecurityTrust(\r\n            context,\r\n            this.sanitizer.sanitize(context, value, config),\r\n        );\r\n    }\r\n\r\n    private bypassSecurityTrust(\r\n        context: SecurityContext,\r\n        purifiedValue: string,\r\n    ): SafeValue | null {\r\n        switch (context) {\r\n            case SecurityContext.HTML:\r\n                return this.domSanitizer.bypassSecurityTrustHtml(purifiedValue);\r\n            case SecurityContext.STYLE:\r\n                return this.domSanitizer.bypassSecurityTrustStyle(purifiedValue);\r\n            case SecurityContext.URL:\r\n                return this.domSanitizer.bypassSecurityTrustUrl(purifiedValue);\r\n            case SecurityContext.RESOURCE_URL:\r\n                return this.domSanitizer.bypassSecurityTrustResourceUrl(purifiedValue);\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n}\r\n","import {NgModule} from '@angular/core';\r\n\r\nimport {NgDompurifyPipe} from './ng-dompurify.pipe';\r\n\r\n@NgModule({\r\n    declarations: [NgDompurifyPipe],\r\n    exports: [NgDompurifyPipe],\r\n})\r\nexport class NgDompurifyModule {}\r\n","/**\r\n * Public API Surface of @tinkoff/ng-dompurify\r\n */\r\nexport * from './lib/ng-dompurify.module';\r\nexport * from './lib/ng-dompurify.pipe';\r\nexport * from './lib/ng-dompurify.service';\r\nexport * from './lib/tokens/dompurify-config';\r\nexport * from './lib/tokens/dompurify-hooks';\r\nexport * from './lib/tokens/sanitize-style';\r\nexport * from './lib/types/dompurify-hook';\r\nexport * from './lib/types/ng-dompurify-config';\r\nexport * from './lib/types/ng-dompurify-hook';\r\nexport * from './lib/types/sanitize-style';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["InjectionToken","dompurify","SecurityContext","i0","DOCUMENT","Injectable","Inject","i1.NgDompurifySanitizer","i2","Pipe","NgModule"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAIA;;IAEG;QACU,gBAAgB,GAAG,IAAIA,iBAAc,CAC9C,sBAAsB,EACtB;IACI,IAAA,OAAO,EAAE,YAAM,EAAA,QAAC,EAAE,IAAC;IACnB,IAAA,UAAU,EAAE,MAAM;IACrB,CAAA;;ICRL;;IAEG;QACU,eAAe,GAAG,IAAIA,iBAAc,CAC7C,qBAAqB,EACrB;IACI,IAAA,OAAO,EAAE,YAAA,EAAM,OAAA,EAAE,GAAA;IACjB,IAAA,UAAU,EAAE,MAAM;IACrB,CAAA;;ICRL;;;;IAIG;QACU,cAAc,GAAG,IAAIA,iBAAc,CAC5C,gDAAgD,EAChD;QACI,OAAO,EAAE,YAAM,EAAA,OAAA,UAAA,KAAK,EAAI,EAAA,OAAA,KAAK,CAAA,EAAA,CAAA,EAAA;IAC7B,IAAA,UAAU,EAAE,MAAM;IACrB,CAAA;;ICHL,IAAM,eAAe,GAAGC,6BAAS,CAAC;IAElC;;;;;;;;;IASG;AAIH,QAAA,oBAAA,kBAAA,YAAA;IAGI,IAAA,SAAA,oBAAA,CAEqB,MAAyB,EAEzB,aAA4B,EAC3B,EAAuB,EAEzC,KAAiC,EAAA;YAPrC,IAcC,KAAA,GAAA,IAAA,CAAA;IATsB,QAAA,IAAA,WAAW,GAAA,EAAA,CAAA,WAAA,CAAA;IAHb,QAAA,IAAM,CAAA,MAAA,GAAN,MAAM,CAAmB;IAEzB,QAAA,IAAa,CAAA,aAAA,GAAb,aAAa,CAAe;IAK7C,QAAA,IAAI,CAAC,SAAS,GAAG,eAAe,CAAC,WAAY,CAAC,CAAC;IAE/C,QAAA,KAAK,CAAC,OAAO,CAAC,UAAC,EAAY,EAAA;oBAAX,IAAI,GAAA,EAAA,CAAA,IAAA,EAAE,IAAI,GAAA,EAAA,CAAA,IAAA,CAAA;gBACtB,KAAI,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IACvC,SAAC,CAAC,CAAC;SACN;IAED,IAAA,oBAAA,CAAA,SAAA,CAAA,QAAQ,GAAR,UACI,OAAwB,EACxB,KAAyB,EACzB,MAAuC,EAAA;IAAvC,QAAA,IAAA,MAAA,KAAA,KAAA,CAAA,EAAA,EAAA,MAAA,GAA4B,IAAI,CAAC,MAAM,CAAA,EAAA;IAEvC,QAAA,IAAI,OAAO,KAAKC,kBAAe,CAAC,MAAM,EAAE;IACpC,YAAA,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;IAChE,SAAA;IAED,QAAA,OAAO,OAAO,KAAKA,kBAAe,CAAC,KAAK;kBAClC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACnC,cAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,IAAI,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC;SAC9D,CAAA;;;IA/BQ,oBAAA,CAAA,IAAA,GAAAC,aAAA,CAAA,kBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,SAAA,EAAA,QAAA,EAAAA,aAAA,EAAA,IAAA,EAAA,oBAAoB,kBAIjB,gBAAgB,EAAA,EAAA,EAAA,KAAA,EAEhB,cAAc,EAEd,EAAA,EAAA,KAAA,EAAAC,eAAQ,aACR,eAAe,EAAA,CAAA,EAAA,MAAA,EAAAD,aAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA;IATlB,oBAAA,CAAA,KAAA,GAAAA,aAAA,CAAA,qBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,SAAA,EAAA,QAAA,EAAAA,aAAA,EAAA,IAAA,EAAA,oBAAoB,cAFjB,MAAM,EAAA,CAAA,CAAA;sHAET,oBAAoB,EAAA,UAAA,EAAA,CAAA;sBAHhCE,aAAU;IAAC,YAAA,IAAA,EAAA,CAAA;IACR,oBAAA,UAAU,EAAE,MAAM;qBACrB,CAAA;;;kCAKQC,SAAM;mCAAC,gBAAgB,CAAA;;kCAEvBA,SAAM;mCAAC,cAAc,CAAA;sCAEW,QAAQ,EAAA,UAAA,EAAA,CAAA;kCAAxCA,SAAM;mCAACF,eAAQ,CAAA;;kCACfE,SAAM;mCAAC,eAAe,CAAA;;;;IC7B/B;;IAEG;AAEH,QAAA,eAAA,kBAAA,YAAA;QACI,SACqB,eAAA,CAAA,SAA+B,EAC/B,YAA0B,EAAA;IAD1B,QAAA,IAAS,CAAA,SAAA,GAAT,SAAS,CAAsB;IAC/B,QAAA,IAAY,CAAA,YAAA,GAAZ,YAAY,CAAc;SAC3C;IAEJ,IAAA,eAAA,CAAA,SAAA,CAAA,SAAS,GAAT,UACI,KAAyB,EACzB,OAA+C,EAC/C,MAA0B,EAAA;IAD1B,QAAA,IAAA,OAAA,KAAA,KAAA,CAAA,EAAA,EAAA,OAAA,GAA2BJ,kBAAe,CAAC,IAAI,CAAA,EAAA;IAG/C,QAAA,OAAO,IAAI,CAAC,mBAAmB,CAC3B,OAAO,EACP,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,OAAO,EAAE,KAAK,EAAE,MAAM,CAAC,CAClD,CAAC;SACL,CAAA;IAEO,IAAA,eAAA,CAAA,SAAA,CAAA,mBAAmB,GAAnB,UACJ,OAAwB,EACxB,aAAqB,EAAA;IAErB,QAAA,QAAQ,OAAO;gBACX,KAAKA,kBAAe,CAAC,IAAI;oBACrB,OAAO,IAAI,CAAC,YAAY,CAAC,uBAAuB,CAAC,aAAa,CAAC,CAAC;gBACpE,KAAKA,kBAAe,CAAC,KAAK;oBACtB,OAAO,IAAI,CAAC,YAAY,CAAC,wBAAwB,CAAC,aAAa,CAAC,CAAC;gBACrE,KAAKA,kBAAe,CAAC,GAAG;oBACpB,OAAO,IAAI,CAAC,YAAY,CAAC,sBAAsB,CAAC,aAAa,CAAC,CAAC;gBACnE,KAAKA,kBAAe,CAAC,YAAY;oBAC7B,OAAO,IAAI,CAAC,YAAY,CAAC,8BAA8B,CAAC,aAAa,CAAC,CAAC;IAC3E,YAAA;IACI,gBAAA,OAAO,IAAI,CAAC;IACnB,SAAA;SACJ,CAAA;;;uIAjCQ,eAAe,EAAA,IAAA,EAAA,CAAA,EAAA,KAAA,EAAAK,oBAAA,EAAA,EAAA,EAAA,KAAA,EAAAC,aAAA,CAAA,YAAA,EAAA,CAAA,EAAA,MAAA,EAAAL,aAAA,CAAA,eAAA,CAAA,IAAA,EAAA,CAAA,CAAA;qIAAf,eAAe,EAAA,IAAA,EAAA,WAAA,EAAA,CAAA,CAAA;sHAAf,eAAe,EAAA,UAAA,EAAA,CAAA;sBAD3BM,OAAI;uBAAC,EAAC,IAAI,EAAE,WAAW,EAAC,CAAA;;;ACDzB,QAAA,iBAAA,kBAAA,YAAA;IAAA,IAAA,SAAA,iBAAA,GAAA;;;;yIAAa,iBAAiB,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAAN,aAAA,CAAA,eAAA,CAAA,QAAA,EAAA,CAAA,CAAA;0IAAjB,iBAAiB,EAAA,YAAA,EAAA,CAHX,eAAe,CAAA,EAAA,OAAA,EAAA,CACpB,eAAe,CAAA,EAAA,CAAA,CAAA;0IAEhB,iBAAiB,EAAA,CAAA,CAAA;sHAAjB,iBAAiB,EAAA,UAAA,EAAA,CAAA;sBAJ7BO,WAAQ;IAAC,YAAA,IAAA,EAAA,CAAA;wBACN,YAAY,EAAE,CAAC,eAAe,CAAC;wBAC/B,OAAO,EAAE,CAAC,eAAe,CAAC;qBAC7B,CAAA;;;ICPD;;IAEG;;ICFH;;IAEG;;;;;;;;;;;;;;;"}