(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('dompurify'), require('@angular/platform-browser')) :
    typeof define === 'function' && define.amd ? define('@tinkoff/ng-dompurify', ['exports', '@angular/core', '@angular/common', 'dompurify', '@angular/platform-browser'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.tinkoff = global.tinkoff || {}, global.tinkoff["ng-dompurify"] = {}), global.ng.core, global.ng.common, global.dompurify, global.ng.platformBrowser));
})(this, (function (exports, i0, common, dompurify, i2) { 'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var dompurify__default = /*#__PURE__*/_interopDefaultLegacy(dompurify);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);

    /**
     * Token for {@link NgDompurifyConfig}
     */
    var DOMPURIFY_CONFIG = new i0.InjectionToken('Config for DOMPurify', {
        factory: function () { return ({}); },
        providedIn: 'root',
    });

    /**
     * Token for adding hooks to DOMPurify, see {@link addHook}
     */
    var DOMPURIFY_HOOKS = new i0.InjectionToken('Hooks for DOMPurify', {
        factory: function () { return []; },
        providedIn: 'root',
    });

    /**
     * A function that takes style rule value as input and returns a sanitized string
     *
     * NOTE: Angular 10 removed CSS sanitation so by default this method does nothing
     */
    var SANITIZE_STYLE = new i0.InjectionToken('A function that sanitizes value for a CSS rule', {
        factory: function () { return function (value) { return value; }; },
        providedIn: 'root',
    });

    var createDOMPurify = dompurify__default["default"];
    /**
     * Implementation of Angular {@link Sanitizer} purifying via DOMPurify
     *
     * use {@link DOMPURIFY_CONFIG} token to provide config ({@link NgDompurifyConfig})
     * use {@link SANITIZE_STYLE} token to provide a style sanitizing method ({@link SanitizeStyle})
     * use {@link DOMPURIFY_HOOKS} token to provide a hooks for DOMPurify ({@link addHook})
     *
     * Ambient type cannot be used without @dynamic https://github.com/angular/angular/issues/23395
     * @dynamic
     */
    var NgDompurifySanitizer = /** @class */ (function () {
        function NgDompurifySanitizer(config, sanitizeStyle, _a, hooks) {
            var _this = this;
            var defaultView = _a.defaultView;
            this.config = config;
            this.sanitizeStyle = sanitizeStyle;
            this.domPurify = createDOMPurify(defaultView);
            hooks.forEach(function (_a) {
                var name = _a.name, hook = _a.hook;
                _this.domPurify.addHook(name, hook);
            });
        }
        NgDompurifySanitizer.prototype.sanitize = function (context, value, config) {
            if (config === void 0) { config = this.config; }
            if (context === i0.SecurityContext.SCRIPT) {
                throw new Error('DOMPurify does not support SCRIPT context');
            }
            return context === i0.SecurityContext.STYLE
                ? this.sanitizeStyle(String(value))
                : this.domPurify.sanitize(String(value || ''), config);
        };
        return NgDompurifySanitizer;
    }());
    NgDompurifySanitizer.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NgDompurifySanitizer, deps: [{ token: DOMPURIFY_CONFIG }, { token: SANITIZE_STYLE }, { token: common.DOCUMENT }, { token: DOMPURIFY_HOOKS }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    NgDompurifySanitizer.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NgDompurifySanitizer, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NgDompurifySanitizer, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () {
            return [{ type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [DOMPURIFY_CONFIG]
                        }] }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [SANITIZE_STYLE]
                        }] }, { type: Document, decorators: [{
                            type: i0.Inject,
                            args: [common.DOCUMENT]
                        }] }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [DOMPURIFY_HOOKS]
                        }] }];
        } });

    /**
     * Pipe that transforms dirty content to clean via {@link NgDompurifySanitizer}
     */
    var NgDompurifyPipe = /** @class */ (function () {
        function NgDompurifyPipe(sanitizer, domSanitizer) {
            this.sanitizer = sanitizer;
            this.domSanitizer = domSanitizer;
        }
        NgDompurifyPipe.prototype.transform = function (value, context, config) {
            if (context === void 0) { context = i0.SecurityContext.HTML; }
            return this.bypassSecurityTrust(context, this.sanitizer.sanitize(context, value, config));
        };
        NgDompurifyPipe.prototype.bypassSecurityTrust = function (context, purifiedValue) {
            switch (context) {
                case i0.SecurityContext.HTML:
                    return this.domSanitizer.bypassSecurityTrustHtml(purifiedValue);
                case i0.SecurityContext.STYLE:
                    return this.domSanitizer.bypassSecurityTrustStyle(purifiedValue);
                case i0.SecurityContext.URL:
                    return this.domSanitizer.bypassSecurityTrustUrl(purifiedValue);
                case i0.SecurityContext.RESOURCE_URL:
                    return this.domSanitizer.bypassSecurityTrustResourceUrl(purifiedValue);
                default:
                    return null;
            }
        };
        return NgDompurifyPipe;
    }());
    NgDompurifyPipe.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NgDompurifyPipe, deps: [{ token: NgDompurifySanitizer }, { token: i2__namespace.DomSanitizer }], target: i0__namespace.ɵɵFactoryTarget.Pipe });
    NgDompurifyPipe.ɵpipe = i0__namespace.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NgDompurifyPipe, name: "dompurify" });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NgDompurifyPipe, decorators: [{
                type: i0.Pipe,
                args: [{ name: 'dompurify' }]
            }], ctorParameters: function () { return [{ type: NgDompurifySanitizer }, { type: i2__namespace.DomSanitizer }]; } });

    var NgDompurifyModule = /** @class */ (function () {
        function NgDompurifyModule() {
        }
        return NgDompurifyModule;
    }());
    NgDompurifyModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NgDompurifyModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    NgDompurifyModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NgDompurifyModule, declarations: [NgDompurifyPipe], exports: [NgDompurifyPipe] });
    NgDompurifyModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NgDompurifyModule });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NgDompurifyModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [NgDompurifyPipe],
                        exports: [NgDompurifyPipe],
                    }]
            }] });

    /**
     * Public API Surface of @tinkoff/ng-dompurify
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.DOMPURIFY_CONFIG = DOMPURIFY_CONFIG;
    exports.DOMPURIFY_HOOKS = DOMPURIFY_HOOKS;
    exports.NgDompurifyModule = NgDompurifyModule;
    exports.NgDompurifyPipe = NgDompurifyPipe;
    exports.NgDompurifySanitizer = NgDompurifySanitizer;
    exports.SANITIZE_STYLE = SANITIZE_STYLE;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=tinkoff-ng-dompurify.umd.js.map
