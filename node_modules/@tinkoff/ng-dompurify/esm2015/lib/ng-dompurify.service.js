import { DOCUMENT } from '@angular/common';
import { Inject, Injectable, SecurityContext } from '@angular/core';
import dompurify from 'dompurify';
import { DOMPURIFY_CONFIG } from './tokens/dompurify-config';
import { DOMPURIFY_HOOKS } from './tokens/dompurify-hooks';
import { SANITIZE_STYLE } from './tokens/sanitize-style';
import * as i0 from "@angular/core";
const createDOMPurify = dompurify;
/**
 * Implementation of Angular {@link Sanitizer} purifying via DOMPurify
 *
 * use {@link DOMPURIFY_CONFIG} token to provide config ({@link NgDompurifyConfig})
 * use {@link SANITIZE_STYLE} token to provide a style sanitizing method ({@link SanitizeStyle})
 * use {@link DOMPURIFY_HOOKS} token to provide a hooks for DOMPurify ({@link addHook})
 *
 * Ambient type cannot be used without @dynamic https://github.com/angular/angular/issues/23395
 * @dynamic
 */
export class NgDompurifySanitizer {
    constructor(config, sanitizeStyle, { defaultView }, hooks) {
        this.config = config;
        this.sanitizeStyle = sanitizeStyle;
        this.domPurify = createDOMPurify(defaultView);
        hooks.forEach(({ name, hook }) => {
            this.domPurify.addHook(name, hook);
        });
    }
    sanitize(context, value, config = this.config) {
        if (context === SecurityContext.SCRIPT) {
            throw new Error('DOMPurify does not support SCRIPT context');
        }
        return context === SecurityContext.STYLE
            ? this.sanitizeStyle(String(value))
            : this.domPurify.sanitize(String(value || ''), config);
    }
}
NgDompurifySanitizer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: NgDompurifySanitizer, deps: [{ token: DOMPURIFY_CONFIG }, { token: SANITIZE_STYLE }, { token: DOCUMENT }, { token: DOMPURIFY_HOOKS }], target: i0.ɵɵFactoryTarget.Injectable });
NgDompurifySanitizer.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: NgDompurifySanitizer, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: NgDompurifySanitizer, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [DOMPURIFY_CONFIG]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [SANITIZE_STYLE]
                }] }, { type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DOMPURIFY_HOOKS]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctZG9tcHVyaWZ5LnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy1kb21wdXJpZnkvc3JjL2xpYi9uZy1kb21wdXJpZnkuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFDekMsT0FBTyxFQUFDLE1BQU0sRUFBRSxVQUFVLEVBQWEsZUFBZSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzdFLE9BQU8sU0FBdUIsTUFBTSxXQUFXLENBQUM7QUFFaEQsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFDM0QsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLDBCQUEwQixDQUFDO0FBQ3pELE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQzs7QUFLdkQsTUFBTSxlQUFlLEdBQUcsU0FBUyxDQUFDO0FBRWxDOzs7Ozs7Ozs7R0FTRztBQUlILE1BQU0sT0FBTyxvQkFBb0I7SUFHN0IsWUFFcUIsTUFBeUIsRUFFekIsYUFBNEIsRUFDM0IsRUFBQyxXQUFXLEVBQVcsRUFFekMsS0FBaUM7UUFMaEIsV0FBTSxHQUFOLE1BQU0sQ0FBbUI7UUFFekIsa0JBQWEsR0FBYixhQUFhLENBQWU7UUFLN0MsSUFBSSxDQUFDLFNBQVMsR0FBRyxlQUFlLENBQUMsV0FBWSxDQUFDLENBQUM7UUFFL0MsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUMsSUFBSSxFQUFFLElBQUksRUFBQyxFQUFFLEVBQUU7WUFDM0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3ZDLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELFFBQVEsQ0FDSixPQUF3QixFQUN4QixLQUF5QixFQUN6QixTQUE0QixJQUFJLENBQUMsTUFBTTtRQUV2QyxJQUFJLE9BQU8sS0FBSyxlQUFlLENBQUMsTUFBTSxFQUFFO1lBQ3BDLE1BQU0sSUFBSSxLQUFLLENBQUMsMkNBQTJDLENBQUMsQ0FBQztTQUNoRTtRQUVELE9BQU8sT0FBTyxLQUFLLGVBQWUsQ0FBQyxLQUFLO1lBQ3BDLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNuQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUMvRCxDQUFDOztrSEEvQlEsb0JBQW9CLGtCQUlqQixnQkFBZ0IsYUFFaEIsY0FBYyxhQUVkLFFBQVEsYUFDUixlQUFlO3NIQVRsQixvQkFBb0IsY0FGakIsTUFBTTs0RkFFVCxvQkFBb0I7a0JBSGhDLFVBQVU7bUJBQUM7b0JBQ1IsVUFBVSxFQUFFLE1BQU07aUJBQ3JCOzswQkFLUSxNQUFNOzJCQUFDLGdCQUFnQjs7MEJBRXZCLE1BQU07MkJBQUMsY0FBYzs4QkFFVyxRQUFROzBCQUF4QyxNQUFNOzJCQUFDLFFBQVE7OzBCQUNmLE1BQU07MkJBQUMsZUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RE9DVU1FTlR9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcbmltcG9ydCB7SW5qZWN0LCBJbmplY3RhYmxlLCBTYW5pdGl6ZXIsIFNlY3VyaXR5Q29udGV4dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCBkb21wdXJpZnksIHtET01QdXJpZnlJfSBmcm9tICdkb21wdXJpZnknO1xyXG5cclxuaW1wb3J0IHtET01QVVJJRllfQ09ORklHfSBmcm9tICcuL3Rva2Vucy9kb21wdXJpZnktY29uZmlnJztcclxuaW1wb3J0IHtET01QVVJJRllfSE9PS1N9IGZyb20gJy4vdG9rZW5zL2RvbXB1cmlmeS1ob29rcyc7XHJcbmltcG9ydCB7U0FOSVRJWkVfU1RZTEV9IGZyb20gJy4vdG9rZW5zL3Nhbml0aXplLXN0eWxlJztcclxuaW1wb3J0IHtOZ0RvbXB1cmlmeUNvbmZpZ30gZnJvbSAnLi90eXBlcy9uZy1kb21wdXJpZnktY29uZmlnJztcclxuaW1wb3J0IHtOZ0RvbXB1cmlmeUhvb2t9IGZyb20gJy4vdHlwZXMvbmctZG9tcHVyaWZ5LWhvb2snO1xyXG5pbXBvcnQge1Nhbml0aXplU3R5bGV9IGZyb20gJy4vdHlwZXMvc2FuaXRpemUtc3R5bGUnO1xyXG5cclxuY29uc3QgY3JlYXRlRE9NUHVyaWZ5ID0gZG9tcHVyaWZ5O1xyXG5cclxuLyoqXHJcbiAqIEltcGxlbWVudGF0aW9uIG9mIEFuZ3VsYXIge0BsaW5rIFNhbml0aXplcn0gcHVyaWZ5aW5nIHZpYSBET01QdXJpZnlcclxuICpcclxuICogdXNlIHtAbGluayBET01QVVJJRllfQ09ORklHfSB0b2tlbiB0byBwcm92aWRlIGNvbmZpZyAoe0BsaW5rIE5nRG9tcHVyaWZ5Q29uZmlnfSlcclxuICogdXNlIHtAbGluayBTQU5JVElaRV9TVFlMRX0gdG9rZW4gdG8gcHJvdmlkZSBhIHN0eWxlIHNhbml0aXppbmcgbWV0aG9kICh7QGxpbmsgU2FuaXRpemVTdHlsZX0pXHJcbiAqIHVzZSB7QGxpbmsgRE9NUFVSSUZZX0hPT0tTfSB0b2tlbiB0byBwcm92aWRlIGEgaG9va3MgZm9yIERPTVB1cmlmeSAoe0BsaW5rIGFkZEhvb2t9KVxyXG4gKlxyXG4gKiBBbWJpZW50IHR5cGUgY2Fubm90IGJlIHVzZWQgd2l0aG91dCBAZHluYW1pYyBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2lzc3Vlcy8yMzM5NVxyXG4gKiBAZHluYW1pY1xyXG4gKi9cclxuQEluamVjdGFibGUoe1xyXG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmdEb21wdXJpZnlTYW5pdGl6ZXIgaW1wbGVtZW50cyBTYW5pdGl6ZXIge1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBkb21QdXJpZnk6IERPTVB1cmlmeUk7XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgQEluamVjdChET01QVVJJRllfQ09ORklHKVxyXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgY29uZmlnOiBOZ0RvbXB1cmlmeUNvbmZpZyxcclxuICAgICAgICBASW5qZWN0KFNBTklUSVpFX1NUWUxFKVxyXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgc2FuaXRpemVTdHlsZTogU2FuaXRpemVTdHlsZSxcclxuICAgICAgICBASW5qZWN0KERPQ1VNRU5UKSB7ZGVmYXVsdFZpZXd9OiBEb2N1bWVudCxcclxuICAgICAgICBASW5qZWN0KERPTVBVUklGWV9IT09LUylcclxuICAgICAgICBob29rczogcmVhZG9ubHkgTmdEb21wdXJpZnlIb29rW10sXHJcbiAgICApIHtcclxuICAgICAgICB0aGlzLmRvbVB1cmlmeSA9IGNyZWF0ZURPTVB1cmlmeShkZWZhdWx0VmlldyEpO1xyXG5cclxuICAgICAgICBob29rcy5mb3JFYWNoKCh7bmFtZSwgaG9va30pID0+IHtcclxuICAgICAgICAgICAgdGhpcy5kb21QdXJpZnkuYWRkSG9vayhuYW1lLCBob29rKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBzYW5pdGl6ZShcclxuICAgICAgICBjb250ZXh0OiBTZWN1cml0eUNvbnRleHQsXHJcbiAgICAgICAgdmFsdWU6IHt9IHwgc3RyaW5nIHwgbnVsbCxcclxuICAgICAgICBjb25maWc6IE5nRG9tcHVyaWZ5Q29uZmlnID0gdGhpcy5jb25maWcsXHJcbiAgICApOiBzdHJpbmcge1xyXG4gICAgICAgIGlmIChjb250ZXh0ID09PSBTZWN1cml0eUNvbnRleHQuU0NSSVBUKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRE9NUHVyaWZ5IGRvZXMgbm90IHN1cHBvcnQgU0NSSVBUIGNvbnRleHQnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBjb250ZXh0ID09PSBTZWN1cml0eUNvbnRleHQuU1RZTEVcclxuICAgICAgICAgICAgPyB0aGlzLnNhbml0aXplU3R5bGUoU3RyaW5nKHZhbHVlKSlcclxuICAgICAgICAgICAgOiB0aGlzLmRvbVB1cmlmeS5zYW5pdGl6ZShTdHJpbmcodmFsdWUgfHwgJycpLCBjb25maWcpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==