import { Pipe, SecurityContext } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "./ng-dompurify.service";
import * as i2 from "@angular/platform-browser";
/**
 * Pipe that transforms dirty content to clean via {@link NgDompurifySanitizer}
 */
export class NgDompurifyPipe {
    constructor(sanitizer, domSanitizer) {
        this.sanitizer = sanitizer;
        this.domSanitizer = domSanitizer;
    }
    transform(value, context = SecurityContext.HTML, config) {
        return this.bypassSecurityTrust(context, this.sanitizer.sanitize(context, value, config));
    }
    bypassSecurityTrust(context, purifiedValue) {
        switch (context) {
            case SecurityContext.HTML:
                return this.domSanitizer.bypassSecurityTrustHtml(purifiedValue);
            case SecurityContext.STYLE:
                return this.domSanitizer.bypassSecurityTrustStyle(purifiedValue);
            case SecurityContext.URL:
                return this.domSanitizer.bypassSecurityTrustUrl(purifiedValue);
            case SecurityContext.RESOURCE_URL:
                return this.domSanitizer.bypassSecurityTrustResourceUrl(purifiedValue);
            default:
                return null;
        }
    }
}
NgDompurifyPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: NgDompurifyPipe, deps: [{ token: i1.NgDompurifySanitizer }, { token: i2.DomSanitizer }], target: i0.ɵɵFactoryTarget.Pipe });
NgDompurifyPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: NgDompurifyPipe, name: "dompurify" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: NgDompurifyPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'dompurify' }]
        }], ctorParameters: function () { return [{ type: i1.NgDompurifySanitizer }, { type: i2.DomSanitizer }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctZG9tcHVyaWZ5LnBpcGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy1kb21wdXJpZnkvc3JjL2xpYi9uZy1kb21wdXJpZnkucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsSUFBSSxFQUFpQixlQUFlLEVBQUMsTUFBTSxlQUFlLENBQUM7Ozs7QUFNbkU7O0dBRUc7QUFFSCxNQUFNLE9BQU8sZUFBZTtJQUN4QixZQUNxQixTQUErQixFQUMvQixZQUEwQjtRQUQxQixjQUFTLEdBQVQsU0FBUyxDQUFzQjtRQUMvQixpQkFBWSxHQUFaLFlBQVksQ0FBYztJQUM1QyxDQUFDO0lBRUosU0FBUyxDQUNMLEtBQXlCLEVBQ3pCLFVBQTJCLGVBQWUsQ0FBQyxJQUFJLEVBQy9DLE1BQTBCO1FBRTFCLE9BQU8sSUFBSSxDQUFDLG1CQUFtQixDQUMzQixPQUFPLEVBQ1AsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FDbEQsQ0FBQztJQUNOLENBQUM7SUFFTyxtQkFBbUIsQ0FDdkIsT0FBd0IsRUFDeEIsYUFBcUI7UUFFckIsUUFBUSxPQUFPLEVBQUU7WUFDYixLQUFLLGVBQWUsQ0FBQyxJQUFJO2dCQUNyQixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsdUJBQXVCLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDcEUsS0FBSyxlQUFlLENBQUMsS0FBSztnQkFDdEIsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLHdCQUF3QixDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQ3JFLEtBQUssZUFBZSxDQUFDLEdBQUc7Z0JBQ3BCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxzQkFBc0IsQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUNuRSxLQUFLLGVBQWUsQ0FBQyxZQUFZO2dCQUM3QixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsOEJBQThCLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDM0U7Z0JBQ0ksT0FBTyxJQUFJLENBQUM7U0FDbkI7SUFDTCxDQUFDOzs2R0FqQ1EsZUFBZTsyR0FBZixlQUFlOzRGQUFmLGVBQWU7a0JBRDNCLElBQUk7bUJBQUMsRUFBQyxJQUFJLEVBQUUsV0FBVyxFQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtQaXBlLCBQaXBlVHJhbnNmb3JtLCBTZWN1cml0eUNvbnRleHR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge0RvbVNhbml0aXplciwgU2FmZVZhbHVlfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcclxuXHJcbmltcG9ydCB7TmdEb21wdXJpZnlTYW5pdGl6ZXJ9IGZyb20gJy4vbmctZG9tcHVyaWZ5LnNlcnZpY2UnO1xyXG5pbXBvcnQge05nRG9tcHVyaWZ5Q29uZmlnfSBmcm9tICcuL3R5cGVzL25nLWRvbXB1cmlmeS1jb25maWcnO1xyXG5cclxuLyoqXHJcbiAqIFBpcGUgdGhhdCB0cmFuc2Zvcm1zIGRpcnR5IGNvbnRlbnQgdG8gY2xlYW4gdmlhIHtAbGluayBOZ0RvbXB1cmlmeVNhbml0aXplcn1cclxuICovXHJcbkBQaXBlKHtuYW1lOiAnZG9tcHVyaWZ5J30pXHJcbmV4cG9ydCBjbGFzcyBOZ0RvbXB1cmlmeVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgc2FuaXRpemVyOiBOZ0RvbXB1cmlmeVNhbml0aXplcixcclxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGRvbVNhbml0aXplcjogRG9tU2FuaXRpemVyLFxyXG4gICAgKSB7fVxyXG5cclxuICAgIHRyYW5zZm9ybShcclxuICAgICAgICB2YWx1ZToge30gfCBzdHJpbmcgfCBudWxsLFxyXG4gICAgICAgIGNvbnRleHQ6IFNlY3VyaXR5Q29udGV4dCA9IFNlY3VyaXR5Q29udGV4dC5IVE1MLFxyXG4gICAgICAgIGNvbmZpZz86IE5nRG9tcHVyaWZ5Q29uZmlnLFxyXG4gICAgKTogU2FmZVZhbHVlIHwgbnVsbCB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYnlwYXNzU2VjdXJpdHlUcnVzdChcclxuICAgICAgICAgICAgY29udGV4dCxcclxuICAgICAgICAgICAgdGhpcy5zYW5pdGl6ZXIuc2FuaXRpemUoY29udGV4dCwgdmFsdWUsIGNvbmZpZyksXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGJ5cGFzc1NlY3VyaXR5VHJ1c3QoXHJcbiAgICAgICAgY29udGV4dDogU2VjdXJpdHlDb250ZXh0LFxyXG4gICAgICAgIHB1cmlmaWVkVmFsdWU6IHN0cmluZyxcclxuICAgICk6IFNhZmVWYWx1ZSB8IG51bGwge1xyXG4gICAgICAgIHN3aXRjaCAoY29udGV4dCkge1xyXG4gICAgICAgICAgICBjYXNlIFNlY3VyaXR5Q29udGV4dC5IVE1MOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZG9tU2FuaXRpemVyLmJ5cGFzc1NlY3VyaXR5VHJ1c3RIdG1sKHB1cmlmaWVkVmFsdWUpO1xyXG4gICAgICAgICAgICBjYXNlIFNlY3VyaXR5Q29udGV4dC5TVFlMRTpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRvbVNhbml0aXplci5ieXBhc3NTZWN1cml0eVRydXN0U3R5bGUocHVyaWZpZWRWYWx1ZSk7XHJcbiAgICAgICAgICAgIGNhc2UgU2VjdXJpdHlDb250ZXh0LlVSTDpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRvbVNhbml0aXplci5ieXBhc3NTZWN1cml0eVRydXN0VXJsKHB1cmlmaWVkVmFsdWUpO1xyXG4gICAgICAgICAgICBjYXNlIFNlY3VyaXR5Q29udGV4dC5SRVNPVVJDRV9VUkw6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kb21TYW5pdGl6ZXIuYnlwYXNzU2VjdXJpdHlUcnVzdFJlc291cmNlVXJsKHB1cmlmaWVkVmFsdWUpO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiJdfQ==