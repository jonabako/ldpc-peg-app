{"version":3,"file":"tinkoff-ng-dompurify.js","sources":["../../../projects/ng-dompurify/src/lib/tokens/dompurify-config.ts","../../../projects/ng-dompurify/src/lib/tokens/dompurify-hooks.ts","../../../projects/ng-dompurify/src/lib/tokens/sanitize-style.ts","../../../projects/ng-dompurify/src/lib/ng-dompurify.service.ts","../../../projects/ng-dompurify/src/lib/ng-dompurify.pipe.ts","../../../projects/ng-dompurify/src/lib/ng-dompurify.module.ts","../../../projects/ng-dompurify/src/public-api.ts","../../../projects/ng-dompurify/src/tinkoff-ng-dompurify.ts"],"sourcesContent":["import {InjectionToken} from '@angular/core';\r\n\r\nimport {NgDompurifyConfig} from '../types/ng-dompurify-config';\r\n\r\n/**\r\n * Token for {@link NgDompurifyConfig}\r\n */\r\nexport const DOMPURIFY_CONFIG = new InjectionToken<NgDompurifyConfig>(\r\n    'Config for DOMPurify',\r\n    {\r\n        factory: () => ({}),\r\n        providedIn: 'root',\r\n    },\r\n);\r\n","import {InjectionToken} from '@angular/core';\r\n\r\nimport {NgDompurifyHook} from '../types/ng-dompurify-hook';\r\n\r\n/**\r\n * Token for adding hooks to DOMPurify, see {@link addHook}\r\n */\r\nexport const DOMPURIFY_HOOKS = new InjectionToken<readonly NgDompurifyHook[]>(\r\n    'Hooks for DOMPurify',\r\n    {\r\n        factory: () => [],\r\n        providedIn: 'root',\r\n    },\r\n);\r\n","import {InjectionToken} from '@angular/core';\r\n\r\nimport {SanitizeStyle} from '../types/sanitize-style';\r\n\r\n/**\r\n * A function that takes style rule value as input and returns a sanitized string\r\n *\r\n * NOTE: Angular 10 removed CSS sanitation so by default this method does nothing\r\n */\r\nexport const SANITIZE_STYLE = new InjectionToken<SanitizeStyle>(\r\n    'A function that sanitizes value for a CSS rule',\r\n    {\r\n        factory: () => value => value,\r\n        providedIn: 'root',\r\n    },\r\n);\r\n","import {DOCUMENT} from '@angular/common';\r\nimport {Inject, Injectable, Sanitizer, SecurityContext} from '@angular/core';\r\nimport dompurify, {DOMPurifyI} from 'dompurify';\r\n\r\nimport {DOMPURIFY_CONFIG} from './tokens/dompurify-config';\r\nimport {DOMPURIFY_HOOKS} from './tokens/dompurify-hooks';\r\nimport {SANITIZE_STYLE} from './tokens/sanitize-style';\r\nimport {NgDompurifyConfig} from './types/ng-dompurify-config';\r\nimport {NgDompurifyHook} from './types/ng-dompurify-hook';\r\nimport {SanitizeStyle} from './types/sanitize-style';\r\n\r\nconst createDOMPurify = dompurify;\r\n\r\n/**\r\n * Implementation of Angular {@link Sanitizer} purifying via DOMPurify\r\n *\r\n * use {@link DOMPURIFY_CONFIG} token to provide config ({@link NgDompurifyConfig})\r\n * use {@link SANITIZE_STYLE} token to provide a style sanitizing method ({@link SanitizeStyle})\r\n * use {@link DOMPURIFY_HOOKS} token to provide a hooks for DOMPurify ({@link addHook})\r\n *\r\n * Ambient type cannot be used without @dynamic https://github.com/angular/angular/issues/23395\r\n * @dynamic\r\n */\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class NgDompurifySanitizer implements Sanitizer {\r\n    private readonly domPurify: DOMPurifyI;\r\n\r\n    constructor(\r\n        @Inject(DOMPURIFY_CONFIG)\r\n        private readonly config: NgDompurifyConfig,\r\n        @Inject(SANITIZE_STYLE)\r\n        private readonly sanitizeStyle: SanitizeStyle,\r\n        @Inject(DOCUMENT) {defaultView}: Document,\r\n        @Inject(DOMPURIFY_HOOKS)\r\n        hooks: readonly NgDompurifyHook[],\r\n    ) {\r\n        this.domPurify = createDOMPurify(defaultView!);\r\n\r\n        hooks.forEach(({name, hook}) => {\r\n            this.domPurify.addHook(name, hook);\r\n        });\r\n    }\r\n\r\n    sanitize(\r\n        context: SecurityContext,\r\n        value: {} | string | null,\r\n        config: NgDompurifyConfig = this.config,\r\n    ): string {\r\n        if (context === SecurityContext.SCRIPT) {\r\n            throw new Error('DOMPurify does not support SCRIPT context');\r\n        }\r\n\r\n        return context === SecurityContext.STYLE\r\n            ? this.sanitizeStyle(String(value))\r\n            : this.domPurify.sanitize(String(value || ''), config);\r\n    }\r\n}\r\n","import {Pipe, PipeTransform, SecurityContext} from '@angular/core';\r\nimport {DomSanitizer, SafeValue} from '@angular/platform-browser';\r\n\r\nimport {NgDompurifySanitizer} from './ng-dompurify.service';\r\nimport {NgDompurifyConfig} from './types/ng-dompurify-config';\r\n\r\n/**\r\n * Pipe that transforms dirty content to clean via {@link NgDompurifySanitizer}\r\n */\r\n@Pipe({name: 'dompurify'})\r\nexport class NgDompurifyPipe implements PipeTransform {\r\n    constructor(\r\n        private readonly sanitizer: NgDompurifySanitizer,\r\n        private readonly domSanitizer: DomSanitizer,\r\n    ) {}\r\n\r\n    transform(\r\n        value: {} | string | null,\r\n        context: SecurityContext = SecurityContext.HTML,\r\n        config?: NgDompurifyConfig,\r\n    ): SafeValue | null {\r\n        return this.bypassSecurityTrust(\r\n            context,\r\n            this.sanitizer.sanitize(context, value, config),\r\n        );\r\n    }\r\n\r\n    private bypassSecurityTrust(\r\n        context: SecurityContext,\r\n        purifiedValue: string,\r\n    ): SafeValue | null {\r\n        switch (context) {\r\n            case SecurityContext.HTML:\r\n                return this.domSanitizer.bypassSecurityTrustHtml(purifiedValue);\r\n            case SecurityContext.STYLE:\r\n                return this.domSanitizer.bypassSecurityTrustStyle(purifiedValue);\r\n            case SecurityContext.URL:\r\n                return this.domSanitizer.bypassSecurityTrustUrl(purifiedValue);\r\n            case SecurityContext.RESOURCE_URL:\r\n                return this.domSanitizer.bypassSecurityTrustResourceUrl(purifiedValue);\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n}\r\n","import {NgModule} from '@angular/core';\r\n\r\nimport {NgDompurifyPipe} from './ng-dompurify.pipe';\r\n\r\n@NgModule({\r\n    declarations: [NgDompurifyPipe],\r\n    exports: [NgDompurifyPipe],\r\n})\r\nexport class NgDompurifyModule {}\r\n","/**\r\n * Public API Surface of @tinkoff/ng-dompurify\r\n */\r\nexport * from './lib/ng-dompurify.module';\r\nexport * from './lib/ng-dompurify.pipe';\r\nexport * from './lib/ng-dompurify.service';\r\nexport * from './lib/tokens/dompurify-config';\r\nexport * from './lib/tokens/dompurify-hooks';\r\nexport * from './lib/tokens/sanitize-style';\r\nexport * from './lib/types/dompurify-hook';\r\nexport * from './lib/types/ng-dompurify-config';\r\nexport * from './lib/types/ng-dompurify-hook';\r\nexport * from './lib/types/sanitize-style';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1.NgDompurifySanitizer"],"mappings":"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"}