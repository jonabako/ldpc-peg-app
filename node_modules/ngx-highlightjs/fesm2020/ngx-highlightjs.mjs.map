{"version":3,"file":"ngx-highlightjs.mjs","sources":["../../../projects/ngx-highlightjs/src/lib/highlight.model.ts","../../../projects/ngx-highlightjs/src/lib/highlight.loader.ts","../../../projects/ngx-highlightjs/src/lib/highlight.service.ts","../../../projects/ngx-highlightjs/src/lib/highlight.ts","../../../projects/ngx-highlightjs/src/lib/highlight.module.ts","../../../projects/ngx-highlightjs/src/ngx-highlightjs.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\r\n\r\n/**\r\n * Full documentation is available here https://highlightjs.readthedocs.io/en/latest/api.html\r\n */\r\n\r\nexport interface HighlightLibrary {\r\n\r\n  /**\r\n   * Core highlighting function. Accepts the code to highlight (string) and a list of options (object)\r\n   * @param code Accepts the code to highlight\r\n   * @param language must be present and specify the language name or alias of the grammar to be used for highlighting\r\n   * @param ignoreIllegals (optional) when set to true it forces highlighting to finish even in case of detecting illegal syntax for the language instead of throwing an exception.\r\n   */\r\n  highlight(code: string, { language, ignoreIllegals }: { language: string, ignoreIllegals: boolean }): HighlightResult;\r\n\r\n  /**\r\n   * Highlighting with language detection.\r\n   * @param value Accepts a string with the code to highlight\r\n   * @param languageSubset An optional array of language names and aliases restricting detection to only those languages.\r\n   * The subset can also be set with configure, but the local parameter overrides the option if set.\r\n   */\r\n  highlightAuto(value: string, languageSubset: string[]): HighlightAutoResult;\r\n\r\n  /**\r\n   * Applies highlighting to a DOM node containing code.\r\n   * This function is the one to use to apply highlighting dynamically after page load or within initialization code of third-party\r\n   * JavaScript frameworks.\r\n   * The function uses language detection by default but you can specify the language in the class attribute of the DOM node.\r\n   * See the scopes reference for all available language names and scopes.\r\n   * @param element Element to highlight\r\n   */\r\n  highlightElement(element: HTMLElement): void;\r\n\r\n  /**\r\n   * Applies highlighting to all elements on a page matching the configured cssSelector. The default cssSelector value is 'pre code',\r\n   * which highlights all code blocks. This can be called before or after the pageâ€™s onload event has fired.\r\n   */\r\n  highlightAll(): void;\r\n\r\n  /**\r\n   * Configures global options:\r\n   * @param config HighlightJs configuration argument\r\n   */\r\n  configure(config: HighlightConfig): void;\r\n\r\n  /**\r\n   * Adds new language to the library under the specified name. Used mostly internally.\r\n   * @param languageName A string with the name of the language being registered\r\n   * @param languageDefinition A function that returns an object which represents the language definition.\r\n   * The function is passed the hljs object to be able to use common regular expressions defined within it.\r\n   */\r\n  registerLanguage(languageName: string, languageDefinition: () => any): void;\r\n\r\n  /**\r\n   * Removes a language and its aliases from the library. Used mostly internall\r\n   * @param languageName: a string with the name of the language being removed.\r\n   */\r\n  unregisterLanguage(languageName: string): void;\r\n\r\n  /**\r\n   * Adds new language alias or aliases to the library for the specified language name defined under languageName key.\r\n   * @param alias: A string or array with the name of alias being registered\r\n   * @param languageName: the language name as specified by registerLanguage.\r\n   */\r\n  registerAliases(alias: string | string[], { languageName }: { languageName: string }): void;\r\n\r\n  /**\r\n   * @return The languages names list.\r\n   */\r\n  listLanguages(): string[];\r\n\r\n  /**\r\n   * Looks up a language by name or alias.\r\n   * @param name Language name\r\n   * @return The language object if found, undefined otherwise.\r\n   */\r\n  getLanguage(name: string): any;\r\n\r\n  /**\r\n   * Enables safe mode. This is the default mode, providing the most reliable experience for production usage.\r\n   */\r\n  safeMode(): void;\r\n\r\n  /**\r\n   * Enables debug/development mode.\r\n   */\r\n  debugMode(): void;\r\n\r\n  /**\r\n   * Add line numbers to code element\r\n   * @param el Code element\r\n   */\r\n  lineNumbersBlock(el: Element): void;\r\n}\r\n\r\nexport interface HighlightConfig {\r\n  /** classPrefix: a string prefix added before class names in the generated markup, used for backwards compatibility with stylesheets. */\r\n  classPrefix?: string;\r\n  /** languages: an array of language names and aliases restricting auto detection to only these languages. */\r\n  languages?: string[];\r\n  /** languageDetectRe: a regex to configure how CSS class names map to language (allows class names like say color-as-php vs the default of language-php, etc.) */\r\n  languageDetectRe: string;\r\n  /** noHighlightRe: a regex to configure which CSS classes are to be skipped completely. */\r\n  noHighlightRe: string;\r\n  /** a CSS selector to configure which elements are affected by hljs.highlightAll. Defaults to 'pre code'. */\r\n  cssSelector: string;\r\n}\r\n\r\nexport interface HighlightResult {\r\n  language?: string;\r\n  value?: string | undefined;\r\n  relevance?: number;\r\n  top: any;\r\n  code: string;\r\n  illegal: boolean;\r\n}\r\n\r\nexport interface HighlightAutoResult {\r\n  language?: string;\r\n  secondBest?: any;\r\n  value?: string | undefined;\r\n  relevance?: number;\r\n}\r\n\r\nexport interface HighlightOptions {\r\n  config?: HighlightConfig;\r\n  languages?: Record<string, () => Promise<any>>;\r\n  coreLibraryLoader?: () => Promise<any>;\r\n  fullLibraryLoader?: () => Promise<any>;\r\n  lineNumbersLoader?: () => Promise<any>;\r\n  themePath?: string;\r\n}\r\n\r\nexport const HIGHLIGHT_OPTIONS = new InjectionToken<HighlightOptions>('HIGHLIGHT_OPTIONS');\r\n","import { Injectable, Inject, PLATFORM_ID, Optional } from '@angular/core';\r\nimport { DOCUMENT, isPlatformBrowser } from '@angular/common';\r\nimport { BehaviorSubject, Observable, from, EMPTY, zip, throwError } from 'rxjs';\r\nimport { catchError, tap, map, switchMap, filter, take } from 'rxjs/operators';\r\nimport { HIGHLIGHT_OPTIONS, HighlightLibrary, HighlightOptions } from './highlight.model';\r\n\r\n// @dynamic\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HighlightLoader {\r\n  // Stream that emits when hljs library is loaded and ready to use\r\n  private readonly _ready = new BehaviorSubject<HighlightLibrary | null>(null);\r\n  readonly ready: Observable<HighlightLibrary> = this._ready.asObservable().pipe(\r\n    filter((hljs: HighlightLibrary | null) => !!hljs),\r\n    map((hljs: HighlightLibrary | null) => hljs as HighlightLibrary),\r\n    take(1)\r\n  );\r\n\r\n  private _themeLinkElement: HTMLLinkElement;\r\n\r\n  constructor(@Inject(DOCUMENT) private doc: any,\r\n              @Inject(PLATFORM_ID) platformId: object,\r\n              @Optional() @Inject(HIGHLIGHT_OPTIONS) private _options: HighlightOptions) {\r\n    if (isPlatformBrowser(platformId)) {\r\n      // Check if hljs is already available\r\n      if (doc.defaultView.hljs) {\r\n        this._ready.next(doc.defaultView.hljs);\r\n      } else {\r\n        // Load hljs library\r\n        this._loadLibrary().pipe(\r\n          switchMap((hljs: HighlightLibrary) => {\r\n            if (this._options && this._options.lineNumbersLoader) {\r\n              // Make hljs available on window object (required for the line numbers library)\r\n              doc.defaultView.hljs = hljs;\r\n              // Load line numbers library\r\n              return this.loadLineNumbers().pipe(tap(() => this._ready.next(hljs)));\r\n            } else {\r\n              this._ready.next(hljs);\r\n              return EMPTY;\r\n            }\r\n          }),\r\n          catchError((e: any) => {\r\n            console.error('[HLJS] ', e);\r\n            return EMPTY;\r\n          })\r\n        ).subscribe();\r\n      }\r\n\r\n      // Load highlighting theme\r\n      if (this._options?.themePath) {\r\n        this.loadTheme(this._options.themePath);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Lazy-Load highlight.js library\r\n   */\r\n  private _loadLibrary(): Observable<any> {\r\n    if (this._options) {\r\n      if (this._options.fullLibraryLoader && this._options.coreLibraryLoader) {\r\n        return throwError(() => 'The full library and the core library were imported, only one of them should be imported!');\r\n      }\r\n      if (this._options.fullLibraryLoader && this._options.languages) {\r\n        return throwError(() => 'The highlighting languages were imported they are not needed!');\r\n      }\r\n      if (this._options.coreLibraryLoader && !this._options.languages) {\r\n        return throwError(() => 'The highlighting languages were not imported!');\r\n      }\r\n      if (!this._options.coreLibraryLoader && this._options.languages) {\r\n        return throwError(() => 'The core library was not imported!');\r\n      }\r\n      if (this._options.fullLibraryLoader) {\r\n        return this.loadFullLibrary();\r\n      }\r\n      if (this._options.coreLibraryLoader && this._options.languages && Object.keys(this._options.languages).length) {\r\n        return this.loadCoreLibrary().pipe(switchMap((hljs: HighlightLibrary) => this._loadLanguages(hljs)));\r\n      }\r\n    }\r\n    return throwError(() => 'Highlight.js library was not imported!');\r\n  }\r\n\r\n  /**\r\n   * Lazy-load highlight.js languages\r\n   */\r\n  private _loadLanguages(hljs: HighlightLibrary): Observable<any> {\r\n    const languages = Object.entries(this._options.languages).map(([langName, langLoader]: [string, () => Promise<any>]) =>\r\n      importModule(langLoader()).pipe(\r\n        tap((langFunc: any) => hljs.registerLanguage(langName, langFunc))\r\n      )\r\n    );\r\n    return zip(...languages).pipe(map(() => hljs));\r\n  }\r\n\r\n\r\n  /**\r\n   * Import highlight.js core library\r\n   */\r\n  private loadCoreLibrary(): Observable<HighlightLibrary> {\r\n    return importModule(this._options.coreLibraryLoader!());\r\n  }\r\n\r\n  /**\r\n   * Import highlight.js library with all languages\r\n   */\r\n  private loadFullLibrary(): Observable<HighlightLibrary> {\r\n    return importModule(this._options.fullLibraryLoader!());\r\n  }\r\n\r\n  /**\r\n   * Import line numbers library\r\n   */\r\n  private loadLineNumbers(): Observable<any> {\r\n    return importModule(this._options.lineNumbersLoader!());\r\n  }\r\n\r\n  /**\r\n   * Reload theme styles\r\n   */\r\n  setTheme(path: string): void {\r\n    this._themeLinkElement.href = path;\r\n  }\r\n\r\n  /**\r\n   * Load theme\r\n   */\r\n  private loadTheme(path: string): void {\r\n    this._themeLinkElement = this.doc.createElement('link');\r\n    this._themeLinkElement.href = path;\r\n    this._themeLinkElement.type = 'text/css';\r\n    this._themeLinkElement.rel = 'stylesheet';\r\n    this._themeLinkElement.media = 'screen,print';\r\n    this.doc.head.appendChild(this._themeLinkElement);\r\n  }\r\n}\r\n\r\n/**\r\n * Map loader response to module object\r\n */\r\nconst importModule = (moduleLoader: Promise<any>): Observable<any> => {\r\n  return from(moduleLoader).pipe(\r\n    filter((module: any) => !!module && !!module.default),\r\n    map((module: any) => module.default)\r\n  );\r\n};\r\n","import { Injectable, Inject, Optional } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, map, tap } from 'rxjs/operators';\r\nimport {\r\n  HighlightConfig,\r\n  HighlightResult,\r\n  HighlightLibrary,\r\n  HighlightOptions,\r\n  HIGHLIGHT_OPTIONS,\r\n  HighlightAutoResult\r\n} from './highlight.model';\r\nimport { HighlightLoader } from './highlight.loader';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HighlightJS {\r\n\r\n  private _hljs: HighlightLibrary | null = null;\r\n\r\n  // A reference for hljs library\r\n  get hljs(): HighlightLibrary | null {\r\n    return this._hljs;\r\n  }\r\n\r\n  constructor(private _loader: HighlightLoader, @Optional() @Inject(HIGHLIGHT_OPTIONS) options: HighlightOptions) {\r\n    // Load highlight.js library on init\r\n    _loader.ready.subscribe((hljs: HighlightLibrary) => {\r\n      this._hljs = hljs;\r\n      if (options && options.config) {\r\n        // Set global config if present\r\n        hljs.configure(options.config);\r\n        if (hljs.listLanguages().length < 1) {\r\n          console.error('[HighlightJS]: No languages were registered!');\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Core highlighting function. Accepts the code to highlight (string) and a list of options (object)\r\n   * @param code Accepts the code to highlight\r\n   * @param language must be present and specify the language name or alias of the grammar to be used for highlighting\r\n   * @param ignoreIllegals (optional) when set to true it forces highlighting to finish even in case of detecting illegal syntax for the language instead of throwing an exception.\r\n   */\r\n  highlight(code: string, { language, ignoreIllegals }: { language: string, ignoreIllegals: boolean }): Observable<HighlightResult> {\r\n    return this._loader.ready.pipe(\r\n      map((hljs: HighlightLibrary) => hljs.highlight(code, { language, ignoreIllegals }))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Highlighting with language detection.\r\n   * @param value Accepts a string with the code to highlight\r\n   * @param languageSubset An optional array of language names and aliases restricting detection to only those languages.\r\n   * The subset can also be set with configure, but the local parameter overrides the option if set.\r\n   */\r\n  highlightAuto(value: string, languageSubset: string[]): Observable<HighlightAutoResult> {\r\n    return this._loader.ready.pipe(\r\n      map((hljs: HighlightLibrary) => hljs.highlightAuto(value, languageSubset))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Applies highlighting to a DOM node containing code.\r\n   * This function is the one to use to apply highlighting dynamically after page load or within initialization code of third-party JavaScript frameworks.\r\n   * The function uses language detection by default but you can specify the language in the class attribute of the DOM node. See the scopes reference for all available language names and scopes.\r\n   * @param element\r\n   */\r\n  highlightElement(element: HTMLElement): Observable<any> {\r\n    return this._loader.ready.pipe(\r\n      map((hljs: HighlightLibrary) => hljs.highlightElement(element))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Applies highlighting to all elements on a page matching the configured cssSelector. The default cssSelector value is 'pre code',\r\n   * which highlights all code blocks. This can be called before or after the pageâ€™s onload event has fired.\r\n   */\r\n  highlightAll(): Observable<any> {\r\n    return this._loader.ready.pipe(\r\n      map((hljs: HighlightLibrary) => hljs.highlightAll())\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @deprecated in version 12\r\n   * Configures global options:\r\n   * @param config HighlightJs configuration argument\r\n   */\r\n  configure(config: HighlightConfig): Observable<void> {\r\n    return this._loader.ready.pipe(\r\n      map((hljs: HighlightLibrary) => hljs.configure(config))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Adds new language to the library under the specified name. Used mostly internally.\r\n   * @param languageName A string with the name of the language being registered\r\n   * @param languageDefinition A function that returns an object which represents the language definition.\r\n   * The function is passed the hljs object to be able to use common regular expressions defined within it.\r\n   */\r\n  registerLanguage(languageName: string, languageDefinition: () => any): Observable<HighlightLibrary> {\r\n    return this._loader.ready.pipe(\r\n      tap((hljs: HighlightLibrary) => hljs.registerLanguage(languageName, languageDefinition))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Removes a language and its aliases from the library. Used mostly internall\r\n   * @param languageName: a string with the name of the language being removed.\r\n   */\r\n  unregisterLanguage(languageName: string): Observable<any> {\r\n    return this._loader.ready.pipe(\r\n      tap((hljs: HighlightLibrary) => hljs.unregisterLanguage(languageName))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Adds new language alias or aliases to the library for the specified language name defined under languageName key.\r\n   * @param alias: A string or array with the name of alias being registered\r\n   * @param languageName: the language name as specified by registerLanguage.\r\n   */\r\n  registerAliases(alias: string | string[], { languageName }: { languageName: string }): Observable<any> {\r\n    return this._loader.ready.pipe(\r\n      tap((hljs: HighlightLibrary) => hljs.registerAliases(alias, { languageName }))\r\n    );\r\n  }\r\n\r\n\r\n  /**\r\n   * @return The languages names list.\r\n   */\r\n  listLanguages(): Observable<string[] | undefined> {\r\n    return this._loader.ready.pipe(\r\n      map((hljs: HighlightLibrary) => hljs.listLanguages())\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Looks up a language by name or alias.\r\n   * @param name Language name\r\n   * @return The language object if found, undefined otherwise.\r\n   */\r\n  getLanguage(name: string): Observable<any> {\r\n    return this._loader.ready.pipe(\r\n      map((hljs: HighlightLibrary) => hljs.getLanguage(name))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Enables safe mode. This is the default mode, providing the most reliable experience for production usage.\r\n   */\r\n  safeMode(): Observable<any> {\r\n    return this._loader.ready.pipe(\r\n      map((hljs: HighlightLibrary) => hljs.safeMode())\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Enables debug/development mode.\r\n   */\r\n  debugMode(): Observable<any> {\r\n    return this._loader.ready.pipe(\r\n      map((hljs: HighlightLibrary) => hljs.debugMode())\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Display line numbers\r\n   * @param el Code element\r\n   */\r\n  lineNumbersBlock(el: HTMLElement): Observable<any> {\r\n    return this._loader.ready.pipe(\r\n      filter((hljs: HighlightLibrary) => !!hljs.lineNumbersBlock),\r\n      tap((hljs: HighlightLibrary) => hljs.lineNumbersBlock(el))\r\n    );\r\n  }\r\n}\r\n","import {\r\n  Directive,\r\n  Input,\r\n  Output,\r\n  Inject,\r\n  Optional,\r\n  EventEmitter,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  ElementRef,\r\n  SecurityContext\r\n} from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { animationFrameScheduler } from 'rxjs';\r\nimport { HighlightJS } from './highlight.service';\r\nimport { HIGHLIGHT_OPTIONS, HighlightOptions, HighlightAutoResult } from './highlight.model';\r\n\r\n@Directive({\r\n  host: {\r\n    '[class.hljs]': 'true'\r\n  },\r\n  selector: '[highlight]'\r\n})\r\nexport class Highlight implements OnChanges {\r\n\r\n  // Highlighted Code\r\n  private readonly _nativeElement: HTMLElement;\r\n\r\n  // Temp observer to observe when line numbers has been added to code element\r\n  private _lineNumbersObs: any;\r\n\r\n  // Highlight code input\r\n  @Input('highlight') code: string | null;\r\n\r\n  // An optional array of language names and aliases restricting detection to only those languages.\r\n  // The subset can also be set with configure, but the local parameter overrides the option if set.\r\n  @Input() languages!: string[];\r\n\r\n  // Show line numbers\r\n  @Input() lineNumbers!: boolean;\r\n\r\n  // Stream that emits when code string is highlighted\r\n  @Output() highlighted = new EventEmitter<HighlightAutoResult>();\r\n\r\n  constructor(el: ElementRef,\r\n              private _hljs: HighlightJS,\r\n              private _sanitizer: DomSanitizer,\r\n              @Optional() @Inject(HIGHLIGHT_OPTIONS) private _options: HighlightOptions) {\r\n    this._nativeElement = el.nativeElement;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (\r\n      changes?.code?.currentValue !== null &&\r\n      changes.code.currentValue !== changes.code.previousValue\r\n    ) {\r\n      if (this.code) {\r\n        this.highlightElement(this.code, this.languages);\r\n      } else {\r\n        // If string is empty, set the text content to empty\r\n        this.setTextContent('');\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Highlighting with language detection and fix markup.\r\n   * @param code Accepts a string with the code to highlight\r\n   * @param languages An optional array of language names and aliases restricting detection to only those languages.\r\n   * The subset can also be set with configure, but the local parameter overrides the option if set.\r\n   */\r\n  highlightElement(code: string, languages: string[]): void {\r\n    // Set code text before highlighting\r\n    this.setTextContent(code);\r\n    this._hljs.highlightAuto(code, languages).subscribe((res: HighlightAutoResult) => {\r\n      // Set highlighted code\r\n      this.setInnerHTML(res?.value);\r\n      // Check if user want to show line numbers\r\n      if (this.lineNumbers && this._options && this._options.lineNumbersLoader) {\r\n        this.addLineNumbers();\r\n      }\r\n      // Forward highlight response to the highlighted output\r\n      this.highlighted.emit(res);\r\n    });\r\n  }\r\n\r\n  private addLineNumbers() {\r\n    // Clean up line numbers observer\r\n    this.destroyLineNumbersObserver();\r\n    animationFrameScheduler.schedule(() => {\r\n      // Add line numbers\r\n      this._hljs.lineNumbersBlock(this._nativeElement).subscribe();\r\n      // If lines count is 1, the line numbers library will not add numbers\r\n      // Observe changes to add 'hljs-line-numbers' class only when line numbers is added to the code element\r\n      this._lineNumbersObs = new MutationObserver(() => {\r\n        if (this._nativeElement.firstElementChild && this._nativeElement.firstElementChild.tagName.toUpperCase() === 'TABLE') {\r\n          this._nativeElement.classList.add('hljs-line-numbers');\r\n        }\r\n        this.destroyLineNumbersObserver();\r\n      });\r\n      this._lineNumbersObs.observe(this._nativeElement, { childList: true });\r\n    });\r\n  }\r\n\r\n  private destroyLineNumbersObserver() {\r\n    if (this._lineNumbersObs) {\r\n      this._lineNumbersObs.disconnect();\r\n      this._lineNumbersObs = null;\r\n    }\r\n  }\r\n\r\n  private setTextContent(content: string) {\r\n    animationFrameScheduler.schedule(() =>\r\n      this._nativeElement.textContent = content\r\n    );\r\n  }\r\n\r\n  private setInnerHTML(content: string | null) {\r\n    animationFrameScheduler.schedule(() =>\r\n      this._nativeElement.innerHTML = this._sanitizer.sanitize(SecurityContext.HTML, content) || ''\r\n    );\r\n  }\r\n}\r\n\r\n","import { NgModule } from '@angular/core';\r\nimport { Highlight } from './highlight';\r\n\r\n@NgModule({\r\n  declarations: [Highlight],\r\n  exports: [Highlight]\r\n})\r\nexport class HighlightModule {\r\n}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}