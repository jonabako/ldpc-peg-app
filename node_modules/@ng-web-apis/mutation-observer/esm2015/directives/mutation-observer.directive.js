import { Attribute, Directive, ElementRef, EventEmitter, Inject, Output, } from '@angular/core';
import { MUTATION_OBSERVER_INIT } from '../tokens/mutation-observer-init';
import { mutationObserverInitFactory } from '../utils/mutation-observer-init-factory';
import * as i0 from "@angular/core";
export const SafeObserver = typeof MutationObserver !== `undefined`
    ? MutationObserver
    : class {
        observe() { }
        disconnect() { }
        takeRecords() {
            return [];
        }
    };
export class MutationObserverDirective extends SafeObserver {
    constructor({ nativeElement }, config, _1, _2, _3, _4, _5, _6, _7) {
        super(records => {
            this.waMutationObserver.emit(records);
        });
        this.waMutationObserver = new EventEmitter();
        this.observe(nativeElement, config);
    }
    ngOnDestroy() {
        this.disconnect();
    }
}
MutationObserverDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: MutationObserverDirective, deps: [{ token: ElementRef }, { token: MUTATION_OBSERVER_INIT }, { token: 'attributeFilter', attribute: true }, { token: 'attributeOldValue', attribute: true }, { token: 'attributes', attribute: true }, { token: 'characterData', attribute: true }, { token: 'characterDataOldValue', attribute: true }, { token: 'childList', attribute: true }, { token: 'subtree', attribute: true }], target: i0.ɵɵFactoryTarget.Directive });
MutationObserverDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: MutationObserverDirective, selector: "[waMutationObserver]", outputs: { waMutationObserver: "waMutationObserver" }, providers: [
        {
            provide: MUTATION_OBSERVER_INIT,
            deps: [ElementRef],
            useFactory: mutationObserverInitFactory,
        },
    ], exportAs: ["MutationObserver"], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: MutationObserverDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[waMutationObserver]',
                    exportAs: 'MutationObserver',
                    providers: [
                        {
                            provide: MUTATION_OBSERVER_INIT,
                            deps: [ElementRef],
                            useFactory: mutationObserverInitFactory,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [MUTATION_OBSERVER_INIT]
                }] }, { type: undefined, decorators: [{
                    type: Attribute,
                    args: ['attributeFilter']
                }] }, { type: undefined, decorators: [{
                    type: Attribute,
                    args: ['attributeOldValue']
                }] }, { type: undefined, decorators: [{
                    type: Attribute,
                    args: ['attributes']
                }] }, { type: undefined, decorators: [{
                    type: Attribute,
                    args: ['characterData']
                }] }, { type: undefined, decorators: [{
                    type: Attribute,
                    args: ['characterDataOldValue']
                }] }, { type: undefined, decorators: [{
                    type: Attribute,
                    args: ['childList']
                }] }, { type: undefined, decorators: [{
                    type: Attribute,
                    args: ['subtree']
                }] }]; }, propDecorators: { waMutationObserver: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXV0YXRpb24tb2JzZXJ2ZXIuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vbGlicy9tdXRhdGlvbi1vYnNlcnZlci9zcmMvZGlyZWN0aXZlcy9tdXRhdGlvbi1vYnNlcnZlci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNILFNBQVMsRUFDVCxTQUFTLEVBQ1QsVUFBVSxFQUNWLFlBQVksRUFDWixNQUFNLEVBRU4sTUFBTSxHQUNULE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBQyxzQkFBc0IsRUFBQyxNQUFNLGtDQUFrQyxDQUFDO0FBQ3hFLE9BQU8sRUFBQywyQkFBMkIsRUFBQyxNQUFNLHlDQUF5QyxDQUFDOztBQUVwRixNQUFNLENBQUMsTUFBTSxZQUFZLEdBQ3JCLE9BQU8sZ0JBQWdCLEtBQUssV0FBVztJQUNuQyxDQUFDLENBQUMsZ0JBQWdCO0lBQ2xCLENBQUMsQ0FBQztRQUNJLE9BQU8sS0FBVSxDQUFDO1FBQ2xCLFVBQVUsS0FBVSxDQUFDO1FBQ3JCLFdBQVc7WUFDUCxPQUFPLEVBQUUsQ0FBQztRQUNkLENBQUM7S0FDSixDQUFDO0FBYVosTUFBTSxPQUFPLHlCQUEwQixTQUFRLFlBQVk7SUFJdkQsWUFDd0IsRUFBQyxhQUFhLEVBQW1CLEVBQ3JCLE1BQTRCLEVBQzlCLEVBQVcsRUFDVCxFQUFXLEVBQ2xCLEVBQVcsRUFDUixFQUFXLEVBQ0gsRUFBVyxFQUN2QixFQUFXLEVBQ2IsRUFBVztRQUVqQyxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDWixJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzFDLENBQUMsQ0FBQyxDQUFDO1FBZkUsdUJBQWtCLEdBQUcsSUFBSSxZQUFZLEVBQW9CLENBQUM7UUFpQi9ELElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFFRCxXQUFXO1FBQ1AsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ3RCLENBQUM7O3VIQXhCUSx5QkFBeUIsa0JBS3RCLFVBQVUsYUFDVixzQkFBc0IsYUFDbkIsaUJBQWlCLDhCQUNqQixtQkFBbUIsOEJBQ25CLFlBQVksOEJBQ1osZUFBZSw4QkFDZix1QkFBdUIsOEJBQ3ZCLFdBQVcsOEJBQ1gsU0FBUzsyR0FiZix5QkFBeUIsc0dBUnZCO1FBQ1A7WUFDSSxPQUFPLEVBQUUsc0JBQXNCO1lBQy9CLElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQztZQUNsQixVQUFVLEVBQUUsMkJBQTJCO1NBQzFDO0tBQ0o7NEZBRVEseUJBQXlCO2tCQVhyQyxTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSxzQkFBc0I7b0JBQ2hDLFFBQVEsRUFBRSxrQkFBa0I7b0JBQzVCLFNBQVMsRUFBRTt3QkFDUDs0QkFDSSxPQUFPLEVBQUUsc0JBQXNCOzRCQUMvQixJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUM7NEJBQ2xCLFVBQVUsRUFBRSwyQkFBMkI7eUJBQzFDO3FCQUNKO2lCQUNKOzswQkFNUSxNQUFNOzJCQUFDLFVBQVU7OzBCQUNqQixNQUFNOzJCQUFDLHNCQUFzQjs7MEJBQzdCLFNBQVM7MkJBQUMsaUJBQWlCOzswQkFDM0IsU0FBUzsyQkFBQyxtQkFBbUI7OzBCQUM3QixTQUFTOzJCQUFDLFlBQVk7OzBCQUN0QixTQUFTOzJCQUFDLGVBQWU7OzBCQUN6QixTQUFTOzJCQUFDLHVCQUF1Qjs7MEJBQ2pDLFNBQVM7MkJBQUMsV0FBVzs7MEJBQ3JCLFNBQVM7MkJBQUMsU0FBUzs0Q0FYZixrQkFBa0I7c0JBRDFCLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIEF0dHJpYnV0ZSxcbiAgICBEaXJlY3RpdmUsXG4gICAgRWxlbWVudFJlZixcbiAgICBFdmVudEVtaXR0ZXIsXG4gICAgSW5qZWN0LFxuICAgIE9uRGVzdHJveSxcbiAgICBPdXRwdXQsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQge01VVEFUSU9OX09CU0VSVkVSX0lOSVR9IGZyb20gJy4uL3Rva2Vucy9tdXRhdGlvbi1vYnNlcnZlci1pbml0JztcbmltcG9ydCB7bXV0YXRpb25PYnNlcnZlckluaXRGYWN0b3J5fSBmcm9tICcuLi91dGlscy9tdXRhdGlvbi1vYnNlcnZlci1pbml0LWZhY3RvcnknO1xuXG5leHBvcnQgY29uc3QgU2FmZU9ic2VydmVyID1cbiAgICB0eXBlb2YgTXV0YXRpb25PYnNlcnZlciAhPT0gYHVuZGVmaW5lZGBcbiAgICAgICAgPyBNdXRhdGlvbk9ic2VydmVyXG4gICAgICAgIDogY2xhc3MgaW1wbGVtZW50cyBNdXRhdGlvbk9ic2VydmVyIHtcbiAgICAgICAgICAgICAgb2JzZXJ2ZSgpOiB2b2lkIHt9XG4gICAgICAgICAgICAgIGRpc2Nvbm5lY3QoKTogdm9pZCB7fVxuICAgICAgICAgICAgICB0YWtlUmVjb3JkcygpOiBNdXRhdGlvblJlY29yZFtdIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW3dhTXV0YXRpb25PYnNlcnZlcl0nLFxuICAgIGV4cG9ydEFzOiAnTXV0YXRpb25PYnNlcnZlcicsXG4gICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIHByb3ZpZGU6IE1VVEFUSU9OX09CU0VSVkVSX0lOSVQsXG4gICAgICAgICAgICBkZXBzOiBbRWxlbWVudFJlZl0sXG4gICAgICAgICAgICB1c2VGYWN0b3J5OiBtdXRhdGlvbk9ic2VydmVySW5pdEZhY3RvcnksXG4gICAgICAgIH0sXG4gICAgXSxcbn0pXG5leHBvcnQgY2xhc3MgTXV0YXRpb25PYnNlcnZlckRpcmVjdGl2ZSBleHRlbmRzIFNhZmVPYnNlcnZlciBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gICAgQE91dHB1dCgpXG4gICAgcmVhZG9ubHkgd2FNdXRhdGlvbk9ic2VydmVyID0gbmV3IEV2ZW50RW1pdHRlcjxNdXRhdGlvblJlY29yZFtdPigpO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoRWxlbWVudFJlZikge25hdGl2ZUVsZW1lbnR9OiBFbGVtZW50UmVmPE5vZGU+LFxuICAgICAgICBASW5qZWN0KE1VVEFUSU9OX09CU0VSVkVSX0lOSVQpIGNvbmZpZzogTXV0YXRpb25PYnNlcnZlckluaXQsXG4gICAgICAgIEBBdHRyaWJ1dGUoJ2F0dHJpYnV0ZUZpbHRlcicpIF8xOiB1bmtub3duLFxuICAgICAgICBAQXR0cmlidXRlKCdhdHRyaWJ1dGVPbGRWYWx1ZScpIF8yOiB1bmtub3duLFxuICAgICAgICBAQXR0cmlidXRlKCdhdHRyaWJ1dGVzJykgXzM6IHVua25vd24sXG4gICAgICAgIEBBdHRyaWJ1dGUoJ2NoYXJhY3RlckRhdGEnKSBfNDogdW5rbm93bixcbiAgICAgICAgQEF0dHJpYnV0ZSgnY2hhcmFjdGVyRGF0YU9sZFZhbHVlJykgXzU6IHVua25vd24sXG4gICAgICAgIEBBdHRyaWJ1dGUoJ2NoaWxkTGlzdCcpIF82OiB1bmtub3duLFxuICAgICAgICBAQXR0cmlidXRlKCdzdWJ0cmVlJykgXzc6IHVua25vd24sXG4gICAgKSB7XG4gICAgICAgIHN1cGVyKHJlY29yZHMgPT4ge1xuICAgICAgICAgICAgdGhpcy53YU11dGF0aW9uT2JzZXJ2ZXIuZW1pdChyZWNvcmRzKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5vYnNlcnZlKG5hdGl2ZUVsZW1lbnQsIGNvbmZpZyk7XG4gICAgfVxuXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZGlzY29ubmVjdCgpO1xuICAgIH1cbn1cbiJdfQ==