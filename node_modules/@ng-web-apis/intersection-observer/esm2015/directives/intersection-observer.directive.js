import { Attribute, Directive, Inject, Optional, } from '@angular/core';
import { INTERSECTION_ROOT } from '../tokens/intersection-root';
import { rootMarginFactory } from '../utils/root-margin-factory';
import { thresholdFactory } from '../utils/threshold-factory';
import * as i0 from "@angular/core";
const SafeObserver = typeof IntersectionObserver !== `undefined`
    ? IntersectionObserver
    : class {
        constructor() {
            this.root = null;
            this.rootMargin = ``;
            this.thresholds = [];
        }
        observe() { }
        unobserve() { }
        disconnect() { }
        takeRecords() {
            return [];
        }
    };
export class IntersectionObserverDirective extends SafeObserver {
    constructor(root, rootMargin, threshold) {
        super(entries => {
            this.callbacks.forEach((callback, element) => {
                const filtered = entries.filter(({ target }) => target === element);
                return filtered.length && callback(filtered, this);
            });
        }, {
            root: root && root.nativeElement,
            rootMargin: rootMarginFactory(rootMargin),
            threshold: thresholdFactory(threshold),
        });
        this.callbacks = new Map();
    }
    observe(target, callback = () => { }) {
        super.observe(target);
        this.callbacks.set(target, callback);
    }
    unobserve(target) {
        super.unobserve(target);
        this.callbacks.delete(target);
    }
    ngOnDestroy() {
        this.disconnect();
    }
}
IntersectionObserverDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IntersectionObserverDirective, deps: [{ token: INTERSECTION_ROOT, optional: true }, { token: 'waIntersectionRootMargin', attribute: true }, { token: 'waIntersectionThreshold', attribute: true }], target: i0.ɵɵFactoryTarget.Directive });
IntersectionObserverDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: IntersectionObserverDirective, selector: "[waIntersectionObserver]", exportAs: ["IntersectionObserver"], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IntersectionObserverDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[waIntersectionObserver]',
                    exportAs: 'IntersectionObserver',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [INTERSECTION_ROOT]
                }] }, { type: undefined, decorators: [{
                    type: Attribute,
                    args: ['waIntersectionRootMargin']
                }] }, { type: undefined, decorators: [{
                    type: Attribute,
                    args: ['waIntersectionThreshold']
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJzZWN0aW9uLW9ic2VydmVyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYnMvaW50ZXJzZWN0aW9uLW9ic2VydmVyL3NyYy9kaXJlY3RpdmVzL2ludGVyc2VjdGlvbi1vYnNlcnZlci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNILFNBQVMsRUFDVCxTQUFTLEVBRVQsTUFBTSxFQUVOLFFBQVEsR0FDWCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSw2QkFBNkIsQ0FBQztBQUM5RCxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSw4QkFBOEIsQ0FBQztBQUMvRCxPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSw0QkFBNEIsQ0FBQzs7QUFFNUQsTUFBTSxZQUFZLEdBQ2QsT0FBTyxvQkFBb0IsS0FBSyxXQUFXO0lBQ3ZDLENBQUMsQ0FBQyxvQkFBb0I7SUFDdEIsQ0FBQyxDQUFDO1FBQUE7WUFDYSxTQUFJLEdBQUcsSUFBSSxDQUFDO1lBQ1osZUFBVSxHQUFHLEVBQUUsQ0FBQztZQUNoQixlQUFVLEdBQUcsRUFBRSxDQUFDO1FBTzdCLENBQUM7UUFORyxPQUFPLEtBQVUsQ0FBQztRQUNsQixTQUFTLEtBQVUsQ0FBQztRQUNwQixVQUFVLEtBQVUsQ0FBQztRQUNyQixXQUFXO1lBQ1AsT0FBTyxFQUFFLENBQUM7UUFDZCxDQUFDO0tBQ0osQ0FBQztBQU1aLE1BQU0sT0FBTyw2QkFBOEIsU0FBUSxZQUFZO0lBRzNELFlBQzJDLElBQWdDLEVBQ2hDLFVBQXlCLEVBQzFCLFNBQXdCO1FBRTlELEtBQUssQ0FDRCxPQUFPLENBQUMsRUFBRTtZQUNOLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBUSxFQUFFLE9BQU8sRUFBRSxFQUFFO2dCQUN6QyxNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBQyxNQUFNLEVBQUMsRUFBRSxFQUFFLENBQUMsTUFBTSxLQUFLLE9BQU8sQ0FBQyxDQUFDO2dCQUVsRSxPQUFPLFFBQVEsQ0FBQyxNQUFNLElBQUksUUFBUSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUN2RCxDQUFDLENBQUMsQ0FBQztRQUNQLENBQUMsRUFDRDtZQUNJLElBQUksRUFBRSxJQUFJLElBQUksSUFBSSxDQUFDLGFBQWE7WUFDaEMsVUFBVSxFQUFFLGlCQUFpQixDQUFDLFVBQVUsQ0FBQztZQUN6QyxTQUFTLEVBQUUsZ0JBQWdCLENBQUMsU0FBUyxDQUFDO1NBQ3pDLENBQ0osQ0FBQztRQXBCVyxjQUFTLEdBQUcsSUFBSSxHQUFHLEVBQXlDLENBQUM7SUFxQjlFLENBQUM7SUFFUSxPQUFPLENBQUMsTUFBZSxFQUFFLFdBQXlDLEdBQUcsRUFBRSxHQUFFLENBQUM7UUFDL0UsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN0QixJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUVRLFNBQVMsQ0FBQyxNQUFlO1FBQzlCLEtBQUssQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDeEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVELFdBQVc7UUFDUCxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDdEIsQ0FBQzs7MkhBcENRLDZCQUE2QixrQkFJZCxpQkFBaUIsNkJBQzFCLDBCQUEwQiw4QkFDMUIseUJBQXlCOytHQU4vQiw2QkFBNkI7NEZBQTdCLDZCQUE2QjtrQkFKekMsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsMEJBQTBCO29CQUNwQyxRQUFRLEVBQUUsc0JBQXNCO2lCQUNuQzs7MEJBS1EsUUFBUTs7MEJBQUksTUFBTTsyQkFBQyxpQkFBaUI7OzBCQUNwQyxTQUFTOzJCQUFDLDBCQUEwQjs7MEJBQ3BDLFNBQVM7MkJBQUMseUJBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBBdHRyaWJ1dGUsXG4gICAgRGlyZWN0aXZlLFxuICAgIEVsZW1lbnRSZWYsXG4gICAgSW5qZWN0LFxuICAgIE9uRGVzdHJveSxcbiAgICBPcHRpb25hbCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0lOVEVSU0VDVElPTl9ST09UfSBmcm9tICcuLi90b2tlbnMvaW50ZXJzZWN0aW9uLXJvb3QnO1xuaW1wb3J0IHtyb290TWFyZ2luRmFjdG9yeX0gZnJvbSAnLi4vdXRpbHMvcm9vdC1tYXJnaW4tZmFjdG9yeSc7XG5pbXBvcnQge3RocmVzaG9sZEZhY3Rvcnl9IGZyb20gJy4uL3V0aWxzL3RocmVzaG9sZC1mYWN0b3J5JztcblxuY29uc3QgU2FmZU9ic2VydmVyID1cbiAgICB0eXBlb2YgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgIT09IGB1bmRlZmluZWRgXG4gICAgICAgID8gSW50ZXJzZWN0aW9uT2JzZXJ2ZXJcbiAgICAgICAgOiBjbGFzcyBpbXBsZW1lbnRzIEludGVyc2VjdGlvbk9ic2VydmVyIHtcbiAgICAgICAgICAgICAgcmVhZG9ubHkgcm9vdCA9IG51bGw7XG4gICAgICAgICAgICAgIHJlYWRvbmx5IHJvb3RNYXJnaW4gPSBgYDtcbiAgICAgICAgICAgICAgcmVhZG9ubHkgdGhyZXNob2xkcyA9IFtdO1xuICAgICAgICAgICAgICBvYnNlcnZlKCk6IHZvaWQge31cbiAgICAgICAgICAgICAgdW5vYnNlcnZlKCk6IHZvaWQge31cbiAgICAgICAgICAgICAgZGlzY29ubmVjdCgpOiB2b2lkIHt9XG4gICAgICAgICAgICAgIHRha2VSZWNvcmRzKCk6IEludGVyc2VjdGlvbk9ic2VydmVyRW50cnlbXSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1t3YUludGVyc2VjdGlvbk9ic2VydmVyXScsXG4gICAgZXhwb3J0QXM6ICdJbnRlcnNlY3Rpb25PYnNlcnZlcicsXG59KVxuZXhwb3J0IGNsYXNzIEludGVyc2VjdGlvbk9ic2VydmVyRGlyZWN0aXZlIGV4dGVuZHMgU2FmZU9ic2VydmVyIGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGNhbGxiYWNrcyA9IG5ldyBNYXA8RWxlbWVudCwgSW50ZXJzZWN0aW9uT2JzZXJ2ZXJDYWxsYmFjaz4oKTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBAT3B0aW9uYWwoKSBASW5qZWN0KElOVEVSU0VDVElPTl9ST09UKSByb290OiBFbGVtZW50UmVmPEVsZW1lbnQ+IHwgbnVsbCxcbiAgICAgICAgQEF0dHJpYnV0ZSgnd2FJbnRlcnNlY3Rpb25Sb290TWFyZ2luJykgcm9vdE1hcmdpbjogc3RyaW5nIHwgbnVsbCxcbiAgICAgICAgQEF0dHJpYnV0ZSgnd2FJbnRlcnNlY3Rpb25UaHJlc2hvbGQnKSB0aHJlc2hvbGQ6IHN0cmluZyB8IG51bGwsXG4gICAgKSB7XG4gICAgICAgIHN1cGVyKFxuICAgICAgICAgICAgZW50cmllcyA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5jYWxsYmFja3MuZm9yRWFjaCgoY2FsbGJhY2ssIGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmlsdGVyZWQgPSBlbnRyaWVzLmZpbHRlcigoe3RhcmdldH0pID0+IHRhcmdldCA9PT0gZWxlbWVudCk7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZpbHRlcmVkLmxlbmd0aCAmJiBjYWxsYmFjayhmaWx0ZXJlZCwgdGhpcyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJvb3Q6IHJvb3QgJiYgcm9vdC5uYXRpdmVFbGVtZW50LFxuICAgICAgICAgICAgICAgIHJvb3RNYXJnaW46IHJvb3RNYXJnaW5GYWN0b3J5KHJvb3RNYXJnaW4pLFxuICAgICAgICAgICAgICAgIHRocmVzaG9sZDogdGhyZXNob2xkRmFjdG9yeSh0aHJlc2hvbGQpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBvdmVycmlkZSBvYnNlcnZlKHRhcmdldDogRWxlbWVudCwgY2FsbGJhY2s6IEludGVyc2VjdGlvbk9ic2VydmVyQ2FsbGJhY2sgPSAoKSA9PiB7fSkge1xuICAgICAgICBzdXBlci5vYnNlcnZlKHRhcmdldCk7XG4gICAgICAgIHRoaXMuY2FsbGJhY2tzLnNldCh0YXJnZXQsIGNhbGxiYWNrKTtcbiAgICB9XG5cbiAgICBvdmVycmlkZSB1bm9ic2VydmUodGFyZ2V0OiBFbGVtZW50KSB7XG4gICAgICAgIHN1cGVyLnVub2JzZXJ2ZSh0YXJnZXQpO1xuICAgICAgICB0aGlzLmNhbGxiYWNrcy5kZWxldGUodGFyZ2V0KTtcbiAgICB9XG5cbiAgICBuZ09uRGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5kaXNjb25uZWN0KCk7XG4gICAgfVxufVxuIl19