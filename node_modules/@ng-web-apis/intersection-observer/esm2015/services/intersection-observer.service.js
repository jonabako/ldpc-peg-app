import { ElementRef, Inject, Injectable, Optional } from '@angular/core';
import { Observable } from 'rxjs';
import { share } from 'rxjs/operators';
import { INTERSECTION_ROOT } from '../tokens/intersection-root';
import { INTERSECTION_ROOT_MARGIN } from '../tokens/intersection-root-margin';
import { INTERSECTION_THRESHOLD } from '../tokens/intersection-threshold';
import { INTERSECTION_OBSERVER_SUPPORT } from '../tokens/support';
import * as i0 from "@angular/core";
export class IntersectionObserverService extends Observable {
    constructor({ nativeElement }, support, rootMargin, threshold, root) {
        super(subscriber => {
            if (!support) {
                subscriber.error('IntersectionObserver is not supported in your browser');
                return;
            }
            const observer = new IntersectionObserver(entries => {
                subscriber.next(entries);
            }, {
                root: root === null || root === void 0 ? void 0 : root.nativeElement,
                rootMargin,
                threshold,
            });
            observer.observe(nativeElement);
            return () => {
                observer.disconnect();
            };
        });
        return this.pipe(share());
    }
}
IntersectionObserverService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IntersectionObserverService, deps: [{ token: ElementRef }, { token: INTERSECTION_OBSERVER_SUPPORT }, { token: INTERSECTION_ROOT_MARGIN }, { token: INTERSECTION_THRESHOLD }, { token: INTERSECTION_ROOT, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
IntersectionObserverService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IntersectionObserverService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IntersectionObserverService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [INTERSECTION_OBSERVER_SUPPORT]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [INTERSECTION_ROOT_MARGIN]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [INTERSECTION_THRESHOLD]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [INTERSECTION_ROOT]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJzZWN0aW9uLW9ic2VydmVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9saWJzL2ludGVyc2VjdGlvbi1vYnNlcnZlci9zcmMvc2VydmljZXMvaW50ZXJzZWN0aW9uLW9ic2VydmVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFVBQVUsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN2RSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBQ2hDLE9BQU8sRUFBQyxLQUFLLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyQyxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSw2QkFBNkIsQ0FBQztBQUM5RCxPQUFPLEVBQUMsd0JBQXdCLEVBQUMsTUFBTSxvQ0FBb0MsQ0FBQztBQUM1RSxPQUFPLEVBQUMsc0JBQXNCLEVBQUMsTUFBTSxrQ0FBa0MsQ0FBQztBQUN4RSxPQUFPLEVBQUMsNkJBQTZCLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQzs7QUFHaEUsTUFBTSxPQUFPLDJCQUE0QixTQUFRLFVBQXVDO0lBQ3BGLFlBQ3dCLEVBQUMsYUFBYSxFQUFzQixFQUNqQixPQUFnQixFQUNyQixVQUFrQixFQUNwQixTQUE0QixFQUNyQixJQUFnQztRQUV2RSxLQUFLLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDZixJQUFJLENBQUMsT0FBTyxFQUFFO2dCQUNWLFVBQVUsQ0FBQyxLQUFLLENBQUMsdURBQXVELENBQUMsQ0FBQztnQkFFMUUsT0FBTzthQUNWO1lBRUQsTUFBTSxRQUFRLEdBQUcsSUFBSSxvQkFBb0IsQ0FDckMsT0FBTyxDQUFDLEVBQUU7Z0JBQ04sVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUM3QixDQUFDLEVBQ0Q7Z0JBQ0ksSUFBSSxFQUFFLElBQUksYUFBSixJQUFJLHVCQUFKLElBQUksQ0FBRSxhQUFhO2dCQUN6QixVQUFVO2dCQUNWLFNBQVM7YUFDWixDQUNKLENBQUM7WUFFRixRQUFRLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRWhDLE9BQU8sR0FBRyxFQUFFO2dCQUNSLFFBQVEsQ0FBQyxVQUFVLEVBQUUsQ0FBQztZQUMxQixDQUFDLENBQUM7UUFDTixDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQzlCLENBQUM7O3lIQWxDUSwyQkFBMkIsa0JBRXhCLFVBQVUsYUFDViw2QkFBNkIsYUFDN0Isd0JBQXdCLGFBQ3hCLHNCQUFzQixhQUNWLGlCQUFpQjs2SEFOaEMsMkJBQTJCOzRGQUEzQiwyQkFBMkI7a0JBRHZDLFVBQVU7OzBCQUdGLE1BQU07MkJBQUMsVUFBVTs7MEJBQ2pCLE1BQU07MkJBQUMsNkJBQTZCOzswQkFDcEMsTUFBTTsyQkFBQyx3QkFBd0I7OzBCQUMvQixNQUFNOzJCQUFDLHNCQUFzQjs7MEJBQzdCLFFBQVE7OzBCQUFJLE1BQU07MkJBQUMsaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtFbGVtZW50UmVmLCBJbmplY3QsIEluamVjdGFibGUsIE9wdGlvbmFsfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHtzaGFyZX0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQge0lOVEVSU0VDVElPTl9ST09UfSBmcm9tICcuLi90b2tlbnMvaW50ZXJzZWN0aW9uLXJvb3QnO1xyXG5pbXBvcnQge0lOVEVSU0VDVElPTl9ST09UX01BUkdJTn0gZnJvbSAnLi4vdG9rZW5zL2ludGVyc2VjdGlvbi1yb290LW1hcmdpbic7XHJcbmltcG9ydCB7SU5URVJTRUNUSU9OX1RIUkVTSE9MRH0gZnJvbSAnLi4vdG9rZW5zL2ludGVyc2VjdGlvbi10aHJlc2hvbGQnO1xyXG5pbXBvcnQge0lOVEVSU0VDVElPTl9PQlNFUlZFUl9TVVBQT1JUfSBmcm9tICcuLi90b2tlbnMvc3VwcG9ydCc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBJbnRlcnNlY3Rpb25PYnNlcnZlclNlcnZpY2UgZXh0ZW5kcyBPYnNlcnZhYmxlPEludGVyc2VjdGlvbk9ic2VydmVyRW50cnlbXT4ge1xyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgQEluamVjdChFbGVtZW50UmVmKSB7bmF0aXZlRWxlbWVudH06IEVsZW1lbnRSZWY8RWxlbWVudD4sXHJcbiAgICAgICAgQEluamVjdChJTlRFUlNFQ1RJT05fT0JTRVJWRVJfU1VQUE9SVCkgc3VwcG9ydDogYm9vbGVhbixcclxuICAgICAgICBASW5qZWN0KElOVEVSU0VDVElPTl9ST09UX01BUkdJTikgcm9vdE1hcmdpbjogc3RyaW5nLFxyXG4gICAgICAgIEBJbmplY3QoSU5URVJTRUNUSU9OX1RIUkVTSE9MRCkgdGhyZXNob2xkOiBudW1iZXIgfCBudW1iZXJbXSxcclxuICAgICAgICBAT3B0aW9uYWwoKSBASW5qZWN0KElOVEVSU0VDVElPTl9ST09UKSByb290OiBFbGVtZW50UmVmPEVsZW1lbnQ+IHwgbnVsbCxcclxuICAgICkge1xyXG4gICAgICAgIHN1cGVyKHN1YnNjcmliZXIgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIXN1cHBvcnQpIHtcclxuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuZXJyb3IoJ0ludGVyc2VjdGlvbk9ic2VydmVyIGlzIG5vdCBzdXBwb3J0ZWQgaW4geW91ciBicm93c2VyJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBvYnNlcnZlciA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcihcclxuICAgICAgICAgICAgICAgIGVudHJpZXMgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChlbnRyaWVzKTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgcm9vdDogcm9vdD8ubmF0aXZlRWxlbWVudCxcclxuICAgICAgICAgICAgICAgICAgICByb290TWFyZ2luLFxyXG4gICAgICAgICAgICAgICAgICAgIHRocmVzaG9sZCxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICBvYnNlcnZlci5vYnNlcnZlKG5hdGl2ZUVsZW1lbnQpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICAgICAgICAgIG9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGlwZShzaGFyZSgpKTtcclxuICAgIH1cclxufVxyXG4iXX0=