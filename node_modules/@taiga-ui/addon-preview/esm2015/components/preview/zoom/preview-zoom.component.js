import { ChangeDetectionStrategy, Component, EventEmitter, Inject, Input, Output, } from '@angular/core';
import { TUI_PREVIEW_ICONS, TUI_PREVIEW_ZOOM_TEXTS, } from '@taiga-ui/addon-preview/tokens';
import { ALWAYS_FALSE_HANDLER, tuiClamp } from '@taiga-ui/cdk';
import { merge, of, timer } from 'rxjs';
import { map, startWith, switchMap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core";
import * as i2 from "@taiga-ui/kit";
import * as i3 from "@angular/common";
import * as i4 from "../preview-action/preview-action.directive";
import * as i5 from "@angular/forms";
import * as i6 from "rxjs";
const STEP = 0.5;
export class TuiPreviewZoomComponent {
    constructor(icons, zoomTexts$) {
        this.icons = icons;
        this.zoomTexts$ = zoomTexts$;
        this.min = 0.5;
        this.max = 2;
        this.value = 1;
        this.valueChange = new EventEmitter();
        this.reset = new EventEmitter();
        this.hintShow$ = this.valueChange.pipe(switchMap(() => merge(of(true), timer(1000).pipe(map(ALWAYS_FALSE_HANDLER)))), startWith(false));
    }
    get leftButtonDisabled() {
        return this.value === this.min;
    }
    get rightButtonDisabled() {
        return this.value === this.max;
    }
    get collapseVisible() {
        return this.value > this.min;
    }
    onModelChange(value) {
        const clamped = tuiClamp(value, this.min, this.max);
        if (clamped === this.value) {
            return;
        }
        this.value = clamped;
        this.valueChange.emit(clamped);
    }
    onReset() {
        this.reset.emit();
    }
    onMinus() {
        this.onModelChange(this.value - STEP);
    }
    onPlus() {
        this.onModelChange(this.value < 1 ? 1 : this.value + STEP);
    }
}
TuiPreviewZoomComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPreviewZoomComponent, deps: [{ token: TUI_PREVIEW_ICONS }, { token: TUI_PREVIEW_ZOOM_TEXTS }], target: i0.ɵɵFactoryTarget.Component });
TuiPreviewZoomComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiPreviewZoomComponent, selector: "tui-preview-zoom", inputs: { min: "min", max: "max", value: "value" }, outputs: { valueChange: "valueChange", reset: "reset" }, ngImport: i0, template: "<ng-container *ngIf=\"zoomTexts$ | async as texts\">\n    <section class=\"t-zoom\">\n        <button\n            tuiIconButton\n            tuiPreviewAction\n            type=\"button\"\n            class=\"t-sign_minus\"\n            [disabled]=\"leftButtonDisabled\"\n            [icon]=\"icons.zoomOut\"\n            [title]=\"texts.zoomOut\"\n            (click)=\"onMinus()\"\n        ></button>\n        <label tuiSliderThumbLabel>\n            <div\n                tuiHintAppearance=\"onDark\"\n                tuiHintDirection=\"top-right\"\n                [tuiHint]=\"hint\"\n                [tuiHintManual]=\"!!(hintShow$ | async)\"\n            ></div>\n\n            <ng-template #hint>\n                {{ (valueChange | async) || value | percent }}\n            </ng-template>\n\n            <input\n                step=\"any\"\n                tuiSlider\n                type=\"range\"\n                class=\"t-slider\"\n                [max]=\"max\"\n                [min]=\"min\"\n                [ngModel]=\"value\"\n                (ngModelChange)=\"onModelChange($event)\"\n            />\n        </label>\n        <button\n            tuiIconButton\n            tuiPreviewAction\n            type=\"button\"\n            class=\"t-sign_plus\"\n            [disabled]=\"rightButtonDisabled\"\n            [icon]=\"icons.zoomIn\"\n            [title]=\"texts.zoomIn\"\n            (click)=\"onPlus()\"\n        ></button>\n    </section>\n\n    <button\n        tuiHintAppearance=\"onDark\"\n        tuiHintDescribe\n        tuiHintDirection=\"top-right\"\n        tuiIconButton\n        tuiPreviewAction\n        type=\"button\"\n        class=\"t-reset-button\"\n        [class.t-invisible]=\"!collapseVisible\"\n        [icon]=\"icons.zoomReset\"\n        [tuiHint]=\"texts.reset\"\n        (click)=\"onReset()\"\n    ></button>\n</ng-container>\n", styles: [":host{position:relative;display:flex}.t-zoom{border-radius:1rem;background:rgba(104,104,104,.96);color:var(--tui-text-01-night);font:var(--tui-font-text-s);display:flex;justify-content:space-between;align-items:center;width:12rem}.t-slider{width:7.5rem}.t-sign_minus{border-top-right-radius:0;border-bottom-right-radius:0}.t-sign_plus{border-top-left-radius:0;border-bottom-left-radius:0}.t-invisible{visibility:hidden}.t-reset-button{margin-left:.3125rem}\n"], components: [{ type: i1.TuiButtonComponent, selector: "button[tuiButton], button[tuiIconButton], a[tuiButton], a[tuiIconButton]", inputs: ["appearance", "disabled", "icon", "iconRight", "shape", "showLoader", "size"] }, { type: i2.TuiSliderThumbLabelComponent, selector: "[tuiSliderThumbLabel]" }, { type: i2.TuiSliderComponent, selector: "input[type=range][tuiSlider]", inputs: ["size", "segments"] }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.TuiPreviewActionDirective, selector: "[tuiPreviewAction]" }, { type: i1.TuiHintDirective, selector: "[tuiHint]:not(ng-container):not(ng-template)", inputs: ["tuiHint", "tuiHintContext", "tuiHintAppearance"] }, { type: i1.TuiHintDriverDirective, selector: "[tuiHint]:not(ng-container):not(ng-template)" }, { type: i1.TuiHintHoverDirective, selector: "[tuiHint]:not(ng-container):not(ng-template)", inputs: ["tuiHintShowDelay", "tuiHintHideDelay"], exportAs: ["tuiHintHover"] }, { type: i1.TuiHintPositionDirective, selector: "[tuiHint]:not([tuiHintCustomPosition]):not(ng-container):not(ng-template)", inputs: ["tuiHintDirection"] }, { type: i1.TuiHintManualDirective, selector: "[tuiHint][tuiHintManual]", inputs: ["tuiHintManual"] }, { type: i5.RangeValueAccessor, selector: "input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]" }, { type: i5.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i1.TuiHintDescribeDirective, selector: "[tuiHintDescribe]", inputs: ["tuiHintDescribe"] }], pipes: { "async": i3.AsyncPipe, "percent": i3.PercentPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPreviewZoomComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-preview-zoom',
                    templateUrl: './preview-zoom.template.html',
                    styleUrls: ['./preview-zoom.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_PREVIEW_ICONS]
                }] }, { type: i6.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_PREVIEW_ZOOM_TEXTS]
                }] }]; }, propDecorators: { min: [{
                type: Input
            }], max: [{
                type: Input
            }], value: [{
                type: Input
            }], valueChange: [{
                type: Output
            }], reset: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,