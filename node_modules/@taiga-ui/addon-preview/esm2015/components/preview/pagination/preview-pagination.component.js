import { ChangeDetectionStrategy, Component, EventEmitter, HostListener, Inject, Input, Output, } from '@angular/core';
import { TUI_PREVIEW_ICONS } from '@taiga-ui/addon-preview/tokens';
import { tuiClamp } from '@taiga-ui/cdk';
import { TUI_PAGINATION_TEXTS } from '@taiga-ui/kit';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core";
import * as i2 from "@angular/common";
import * as i3 from "../preview-action/preview-action.directive";
import * as i4 from "rxjs";
export class TuiPreviewPaginationComponent {
    constructor(icons, texts$) {
        this.icons = icons;
        this.texts$ = texts$;
        this.length = 1;
        this.index = 0;
        this.indexChange = new EventEmitter();
    }
    get leftButtonDisabled() {
        return this.index === 0;
    }
    get rightButtonDisabled() {
        return this.index === this.length - 1;
    }
    onArrowClick(step) {
        this.updateIndex(tuiClamp(this.index + step, 0, this.length - 1));
    }
    updateIndex(index) {
        if (this.index === index) {
            return;
        }
        this.index = index;
        this.indexChange.emit(index);
    }
}
TuiPreviewPaginationComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPreviewPaginationComponent, deps: [{ token: TUI_PREVIEW_ICONS }, { token: TUI_PAGINATION_TEXTS }], target: i0.ɵɵFactoryTarget.Component });
TuiPreviewPaginationComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiPreviewPaginationComponent, selector: "tui-preview-pagination", inputs: { length: "length", index: "index" }, outputs: { indexChange: "indexChange" }, host: { listeners: { "document:keydown.arrowRight.prevent": "onArrowClick(1)", "document:keydown.arrowLeft.prevent": "onArrowClick(-1)" } }, ngImport: i0, template: "<ng-container *ngIf=\"texts$ | async as texts\">\n    <button\n        tuiIconButton\n        tuiPreviewAction\n        type=\"button\"\n        class=\"t-arrow_left\"\n        [disabled]=\"leftButtonDisabled\"\n        [icon]=\"icons.prev\"\n        [title]=\"texts[0]\"\n        (click)=\"onArrowClick(-1)\"\n    ></button>\n    {{ index + 1 }}/{{ length }}\n    <button\n        tuiIconButton\n        tuiPreviewAction\n        type=\"button\"\n        class=\"t-arrow_right\"\n        [disabled]=\"rightButtonDisabled\"\n        [icon]=\"icons.next\"\n        [title]=\"texts[1]\"\n        (click)=\"onArrowClick(1)\"\n    ></button>\n</ng-container>\n", styles: [":host{border-radius:1rem;background:rgba(104,104,104,.96);color:var(--tui-text-01-night);font:var(--tui-font-text-s);display:flex;justify-content:space-between;align-items:center;width:6.25rem}.t-arrow_left{border-top-right-radius:0;border-bottom-right-radius:0}.t-arrow_right{border-top-left-radius:0;border-bottom-left-radius:0}\n"], components: [{ type: i1.TuiButtonComponent, selector: "button[tuiButton], button[tuiIconButton], a[tuiButton], a[tuiIconButton]", inputs: ["appearance", "disabled", "icon", "iconRight", "shape", "showLoader", "size"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.TuiPreviewActionDirective, selector: "[tuiPreviewAction]" }], pipes: { "async": i2.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPreviewPaginationComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-preview-pagination',
                    templateUrl: './preview-pagination.template.html',
                    styleUrls: ['./preview-pagination.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_PREVIEW_ICONS]
                }] }, { type: i4.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_PAGINATION_TEXTS]
                }] }]; }, propDecorators: { length: [{
                type: Input
            }], index: [{
                type: Input
            }], indexChange: [{
                type: Output
            }], onArrowClick: [{
                type: HostListener,
                args: ['document:keydown.arrowRight.prevent', ['1']]
            }, {
                type: HostListener,
                args: ['document:keydown.arrowLeft.prevent', ['-1']]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJldmlldy1wYWdpbmF0aW9uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FkZG9uLXByZXZpZXcvY29tcG9uZW50cy9wcmV2aWV3L3BhZ2luYXRpb24vcHJldmlldy1wYWdpbmF0aW9uLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FkZG9uLXByZXZpZXcvY29tcG9uZW50cy9wcmV2aWV3L3BhZ2luYXRpb24vcHJldmlldy1wYWdpbmF0aW9uLnRlbXBsYXRlLmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNILHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsWUFBWSxFQUNaLFlBQVksRUFDWixNQUFNLEVBQ04sS0FBSyxFQUNMLE1BQU0sR0FDVCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUMsaUJBQWlCLEVBQWtCLE1BQU0sZ0NBQWdDLENBQUM7QUFDbEYsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUV2QyxPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSxlQUFlLENBQUM7Ozs7OztBQVNuRCxNQUFNLE9BQU8sNkJBQTZCO0lBVXRDLFlBQ3dDLEtBQXNCLEVBRWpELE1BQWdEO1FBRnJCLFVBQUssR0FBTCxLQUFLLENBQWlCO1FBRWpELFdBQU0sR0FBTixNQUFNLENBQTBDO1FBWDdELFdBQU0sR0FBRyxDQUFDLENBQUM7UUFHWCxVQUFLLEdBQUcsQ0FBQyxDQUFDO1FBR0QsZ0JBQVcsR0FBRyxJQUFJLFlBQVksRUFBVSxDQUFDO0lBTS9DLENBQUM7SUFFSixJQUFJLGtCQUFrQjtRQUNsQixPQUFPLElBQUksQ0FBQyxLQUFLLEtBQUssQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFFRCxJQUFJLG1CQUFtQjtRQUNuQixPQUFPLElBQUksQ0FBQyxLQUFLLEtBQUssSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUlELFlBQVksQ0FBQyxJQUFZO1FBQ3JCLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdEUsQ0FBQztJQUVPLFdBQVcsQ0FBQyxLQUFhO1FBQzdCLElBQUksSUFBSSxDQUFDLEtBQUssS0FBSyxLQUFLLEVBQUU7WUFDdEIsT0FBTztTQUNWO1FBRUQsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDakMsQ0FBQzs7MkhBckNRLDZCQUE2QixrQkFXMUIsaUJBQWlCLGFBQ2pCLG9CQUFvQjsrR0FadkIsNkJBQTZCLGtTQ3JCMUMsa3BCQXVCQTs0RkRGYSw2QkFBNkI7a0JBTnpDLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLHdCQUF3QjtvQkFDbEMsV0FBVyxFQUFFLG9DQUFvQztvQkFDakQsU0FBUyxFQUFFLENBQUMsaUNBQWlDLENBQUM7b0JBQzlDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2lCQUNsRDs7MEJBWVEsTUFBTTsyQkFBQyxpQkFBaUI7OzBCQUN4QixNQUFNOzJCQUFDLG9CQUFvQjs0Q0FWaEMsTUFBTTtzQkFETCxLQUFLO2dCQUlOLEtBQUs7c0JBREosS0FBSztnQkFJRyxXQUFXO3NCQURuQixNQUFNO2dCQW1CUCxZQUFZO3NCQUZYLFlBQVk7dUJBQUMscUNBQXFDLEVBQUUsQ0FBQyxHQUFHLENBQUM7O3NCQUN6RCxZQUFZO3VCQUFDLG9DQUFvQyxFQUFFLENBQUMsSUFBSSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgICBDb21wb25lbnQsXG4gICAgRXZlbnRFbWl0dGVyLFxuICAgIEhvc3RMaXN0ZW5lcixcbiAgICBJbmplY3QsXG4gICAgSW5wdXQsXG4gICAgT3V0cHV0LFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7VFVJX1BSRVZJRVdfSUNPTlMsIFR1aVByZXZpZXdJY29uc30gZnJvbSAnQHRhaWdhLXVpL2FkZG9uLXByZXZpZXcvdG9rZW5zJztcbmltcG9ydCB7dHVpQ2xhbXB9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtUdWlMYW5ndWFnZUtpdH0gZnJvbSAnQHRhaWdhLXVpL2kxOG4nO1xuaW1wb3J0IHtUVUlfUEFHSU5BVElPTl9URVhUU30gZnJvbSAnQHRhaWdhLXVpL2tpdCc7XG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ3R1aS1wcmV2aWV3LXBhZ2luYXRpb24nLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9wcmV2aWV3LXBhZ2luYXRpb24udGVtcGxhdGUuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vcHJldmlldy1wYWdpbmF0aW9uLnN0eWxlLmxlc3MnXSxcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbn0pXG5leHBvcnQgY2xhc3MgVHVpUHJldmlld1BhZ2luYXRpb25Db21wb25lbnQge1xuICAgIEBJbnB1dCgpXG4gICAgbGVuZ3RoID0gMTtcblxuICAgIEBJbnB1dCgpXG4gICAgaW5kZXggPSAwO1xuXG4gICAgQE91dHB1dCgpXG4gICAgcmVhZG9ubHkgaW5kZXhDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPG51bWJlcj4oKTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KFRVSV9QUkVWSUVXX0lDT05TKSByZWFkb25seSBpY29uczogVHVpUHJldmlld0ljb25zLFxuICAgICAgICBASW5qZWN0KFRVSV9QQUdJTkFUSU9OX1RFWFRTKVxuICAgICAgICByZWFkb25seSB0ZXh0cyQ6IE9ic2VydmFibGU8VHVpTGFuZ3VhZ2VLaXRbJ3BhZ2luYXRpb24nXT4sXG4gICAgKSB7fVxuXG4gICAgZ2V0IGxlZnRCdXR0b25EaXNhYmxlZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5kZXggPT09IDA7XG4gICAgfVxuXG4gICAgZ2V0IHJpZ2h0QnV0dG9uRGlzYWJsZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmluZGV4ID09PSB0aGlzLmxlbmd0aCAtIDE7XG4gICAgfVxuXG4gICAgQEhvc3RMaXN0ZW5lcignZG9jdW1lbnQ6a2V5ZG93bi5hcnJvd1JpZ2h0LnByZXZlbnQnLCBbJzEnXSlcbiAgICBASG9zdExpc3RlbmVyKCdkb2N1bWVudDprZXlkb3duLmFycm93TGVmdC5wcmV2ZW50JywgWyctMSddKVxuICAgIG9uQXJyb3dDbGljayhzdGVwOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgdGhpcy51cGRhdGVJbmRleCh0dWlDbGFtcCh0aGlzLmluZGV4ICsgc3RlcCwgMCwgdGhpcy5sZW5ndGggLSAxKSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB1cGRhdGVJbmRleChpbmRleDogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLmluZGV4ID09PSBpbmRleCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5pbmRleCA9IGluZGV4O1xuICAgICAgICB0aGlzLmluZGV4Q2hhbmdlLmVtaXQoaW5kZXgpO1xuICAgIH1cbn1cbiIsIjxuZy1jb250YWluZXIgKm5nSWY9XCJ0ZXh0cyQgfCBhc3luYyBhcyB0ZXh0c1wiPlxuICAgIDxidXR0b25cbiAgICAgICAgdHVpSWNvbkJ1dHRvblxuICAgICAgICB0dWlQcmV2aWV3QWN0aW9uXG4gICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICBjbGFzcz1cInQtYXJyb3dfbGVmdFwiXG4gICAgICAgIFtkaXNhYmxlZF09XCJsZWZ0QnV0dG9uRGlzYWJsZWRcIlxuICAgICAgICBbaWNvbl09XCJpY29ucy5wcmV2XCJcbiAgICAgICAgW3RpdGxlXT1cInRleHRzWzBdXCJcbiAgICAgICAgKGNsaWNrKT1cIm9uQXJyb3dDbGljaygtMSlcIlxuICAgID48L2J1dHRvbj5cbiAgICB7eyBpbmRleCArIDEgfX0ve3sgbGVuZ3RoIH19XG4gICAgPGJ1dHRvblxuICAgICAgICB0dWlJY29uQnV0dG9uXG4gICAgICAgIHR1aVByZXZpZXdBY3Rpb25cbiAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgIGNsYXNzPVwidC1hcnJvd19yaWdodFwiXG4gICAgICAgIFtkaXNhYmxlZF09XCJyaWdodEJ1dHRvbkRpc2FibGVkXCJcbiAgICAgICAgW2ljb25dPVwiaWNvbnMubmV4dFwiXG4gICAgICAgIFt0aXRsZV09XCJ0ZXh0c1sxXVwiXG4gICAgICAgIChjbGljayk9XCJvbkFycm93Q2xpY2soMSlcIlxuICAgID48L2J1dHRvbj5cbjwvbmctY29udGFpbmVyPlxuIl19