import { ChangeDetectionStrategy, Component, ElementRef, Inject, Input, } from '@angular/core';
import { TUI_PREVIEW_ICONS, TUI_PREVIEW_TEXTS, } from '@taiga-ui/addon-preview/tokens';
import { ALWAYS_FALSE_HANDLER, tuiClamp, tuiDragAndDropFrom, TuiDragStage, tuiPx, tuiRound, tuiTypedFromEvent, } from '@taiga-ui/cdk';
import { tuiSlideInTop } from '@taiga-ui/core';
import { BehaviorSubject, combineLatest, merge } from 'rxjs';
import { map, startWith } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core";
import * as i2 from "./zoom/preview-zoom.component";
import * as i3 from "@angular/common";
import * as i4 from "@taiga-ui/cdk";
import * as i5 from "@ng-web-apis/mutation-observer";
import * as i6 from "./preview-action/preview-action.directive";
import * as i7 from "rxjs";
const INITIAL_SCALE_COEF = 0.8;
const EMPTY_COORDINATES = [0, 0];
const ROTATION_ANGLE = 90;
export class TuiPreviewComponent {
    constructor(el, icons, texts$) {
        this.el = el;
        this.icons = icons;
        this.texts$ = texts$;
        this.zoomable = true;
        this.rotatable = false;
        this.minZoom = 1;
        this.width = 0;
        this.height = 0;
        this.zoom$ = new BehaviorSubject(this.minZoom);
        this.rotation$ = new BehaviorSubject(0);
        this.coordinates$ = new BehaviorSubject(EMPTY_COORDINATES);
        this.transitioned$ = merge(tuiDragAndDropFrom(this.el.nativeElement).pipe(map(({ stage }) => stage !== TuiDragStage.Continues)), tuiTypedFromEvent(this.el.nativeElement, 'touchmove', {
            passive: true,
        }).pipe(map(ALWAYS_FALSE_HANDLER)), tuiTypedFromEvent(this.el.nativeElement, 'wheel', { passive: true }).pipe(map(ALWAYS_FALSE_HANDLER)));
        this.cursor$ = tuiDragAndDropFrom(this.el.nativeElement).pipe(map(({ stage }) => (stage === TuiDragStage.Continues ? 'grabbing' : 'initial')), startWith('initial'));
        this.wrapperTransform$ = combineLatest([
            this.coordinates$.pipe(map(([x, y]) => `${tuiPx(x)}, ${tuiPx(y)}`)),
            this.zoom$,
            this.rotation$,
        ]).pipe(map(([translate, zoom, rotation]) => `translate(${translate}) scale(${zoom}) rotate(${rotation}deg)`));
    }
    rotate() {
        this.rotation$.next(this.rotation$.value - ROTATION_ANGLE);
    }
    onPan(delta) {
        this.coordinates$.next(this.getGuardedCoordinates(this.coordinates$.value[0] + delta[0], this.coordinates$.value[1] + delta[1]));
    }
    onMutation(contentWrapper) {
        const { clientWidth, clientHeight } = contentWrapper;
        this.refresh(clientWidth, clientHeight);
    }
    onZoom({ clientX, clientY, delta }) {
        if (this.zoomable) {
            this.processZoom(clientX, clientY, delta);
        }
    }
    onResize(contentResizeEntries) {
        if (contentResizeEntries.length === 0) {
            return;
        }
        const { width, height } = contentResizeEntries[0].contentRect;
        this.refresh(width, height);
    }
    reset() {
        this.zoom$.next(this.minZoom);
        this.coordinates$.next(EMPTY_COORDINATES);
    }
    setZoom(zoom) {
        this.zoom$.next(zoom);
        const [x, y] = this.coordinates$.value;
        this.coordinates$.next(this.getGuardedCoordinates(x, y));
    }
    get offsets() {
        const offsetX = ((this.zoom$.value - this.minZoom) * this.width) / 2;
        const offsetY = ((this.zoom$.value - this.minZoom) * this.height) / 2;
        return { offsetX, offsetY };
    }
    calculateMinZoom(contentHeight, contentWidth, boxHeight, boxWidth) {
        const bigSize = contentHeight > boxHeight * INITIAL_SCALE_COEF ||
            contentWidth > boxWidth * INITIAL_SCALE_COEF;
        const { clientHeight, clientWidth } = this.el.nativeElement;
        return bigSize
            ? tuiRound(Math.min((clientHeight * INITIAL_SCALE_COEF) / contentHeight, (clientWidth * INITIAL_SCALE_COEF) / contentWidth), 2)
            : 1;
    }
    refresh(width, height) {
        this.width = width;
        this.height = height;
        this.minZoom = this.calculateMinZoom(height, width, this.el.nativeElement.clientHeight, this.el.nativeElement.clientWidth);
        this.zoom$.next(this.minZoom);
        this.coordinates$.next(EMPTY_COORDINATES);
        this.rotation$.next(0);
    }
    processZoom(clientX, clientY, delta) {
        const oldScale = this.zoom$.value;
        const newScale = tuiClamp(oldScale + delta, this.minZoom, 2);
        const center = this.getScaleCenter({ clientX, clientY }, this.coordinates$.value, this.zoom$.value);
        const moveX = center[0] * oldScale - center[0] * newScale;
        const moveY = center[1] * oldScale - center[1] * newScale;
        this.zoom$.next(newScale);
        this.coordinates$.next(this.getGuardedCoordinates(this.coordinates$.value[0] + moveX, this.coordinates$.value[1] + moveY));
    }
    getGuardedCoordinates(x, y) {
        const { offsetX, offsetY } = this.offsets;
        return [tuiClamp(x, -offsetX, offsetX), tuiClamp(y, -offsetY, offsetY)];
    }
    getScaleCenter({ clientX, clientY }, [x, y], scale) {
        return [
            (clientX - x - this.el.nativeElement.offsetWidth / 2) / scale,
            (clientY - y - this.el.nativeElement.offsetHeight / 2) / scale,
        ];
    }
}
TuiPreviewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPreviewComponent, deps: [{ token: ElementRef }, { token: TUI_PREVIEW_ICONS }, { token: TUI_PREVIEW_TEXTS }], target: i0.ɵɵFactoryTarget.Component });
TuiPreviewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiPreviewComponent, selector: "tui-preview", inputs: { zoomable: "zoomable", rotatable: "rotatable" }, ngImport: i0, template: "<ng-container *ngIf=\"texts$ | async as texts\">\n    <section\n        #contentWrapper\n        attributeFilter=\"src\"\n        characterData\n        childList\n        subtree\n        class=\"t-wrapper\"\n        [class.t-not-interactive-content]=\"zoomable\"\n        [class.t-transitive]=\"transitioned$ | async\"\n        [style.cursor]=\"cursor$ | async\"\n        [style.transform]=\"wrapperTransform$ | async\"\n        (tuiPan)=\"onPan($event)\"\n        (tuiResize)=\"onResize($event)\"\n        (tuiZoom)=\"onZoom($event)\"\n        (waMutationObserver)=\"onMutation(contentWrapper)\"\n    >\n        <ng-content></ng-content>\n    </section>\n\n    <header class=\"t-header\">\n        <div class=\"t-title\">\n            <ng-content select=\"tui-preview-title\"></ng-content>\n        </div>\n\n        <ng-content select=\"tui-preview-pagination\"></ng-content>\n\n        <div class=\"t-actions\">\n            <ng-content select=\"[tuiPreviewAction]\"></ng-content>\n        </div>\n    </header>\n\n    <footer class=\"t-footer\">\n        <button\n            *ngIf=\"rotatable\"\n            tuiHintAppearance=\"onDark\"\n            tuiHintDescribe\n            tuiHintDirection=\"top-right\"\n            tuiIconButton\n            tuiPreviewAction\n            type=\"button\"\n            class=\"t-rotate-button\"\n            [icon]=\"icons.rotate\"\n            [tuiHint]=\"texts.rotate\"\n            (click)=\"rotate()\"\n        ></button>\n\n        <tui-preview-zoom\n            *ngIf=\"zoomable\"\n            [min]=\"minZoom\"\n            [value]=\"(zoom$ | async) || 1\"\n            (reset)=\"reset()\"\n            (valueChange)=\"setZoom($event)\"\n        ></tui-preview-zoom>\n    </footer>\n</ng-container>\n", styles: [":host{position:relative;display:flex;justify-content:center;align-items:center;width:100%;height:100%;-webkit-user-select:none;-moz-user-select:none;user-select:none}.t-header{position:fixed;top:1rem;display:flex;width:100%;padding:0 1rem;box-sizing:border-box}.t-footer{position:absolute;bottom:1rem;display:flex;width:100%;padding:0 1rem;box-sizing:border-box;justify-content:center}.t-actions{display:flex;flex:1;justify-content:flex-end}.t-actions ::ng-deep>*{margin-left:.625rem}.t-rotate-button{margin-right:.3125rem}.t-title{flex:1}:host-context(tui-root._mobile) .t-title{display:none}.t-not-interactive-content ::ng-deep>*{pointer-events:none}.t-wrapper{will-change:transform}.t-transitive{transition-duration:.3s}\n"], components: [{ type: i1.TuiButtonComponent, selector: "button[tuiButton], button[tuiIconButton], a[tuiButton], a[tuiIconButton]", inputs: ["appearance", "disabled", "icon", "iconRight", "shape", "showLoader", "size"] }, { type: i2.TuiPreviewZoomComponent, selector: "tui-preview-zoom", inputs: ["min", "max", "value"], outputs: ["valueChange", "reset"] }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.TuiPanDirective, selector: "[tuiPan]", outputs: ["tuiPan"] }, { type: i4.TuiResizeDirective, selector: "[tuiResize]", outputs: ["tuiResize"] }, { type: i4.TuiZoomDirective, selector: "[tuiZoom]", outputs: ["tuiZoom"] }, { type: i5.MutationObserverDirective, selector: "[waMutationObserver]", outputs: ["waMutationObserver"], exportAs: ["MutationObserver"] }, { type: i1.TuiHintDescribeDirective, selector: "[tuiHintDescribe]", inputs: ["tuiHintDescribe"] }, { type: i6.TuiPreviewActionDirective, selector: "[tuiPreviewAction]" }, { type: i1.TuiHintDirective, selector: "[tuiHint]:not(ng-container):not(ng-template)", inputs: ["tuiHint", "tuiHintContext", "tuiHintAppearance"] }, { type: i1.TuiHintDriverDirective, selector: "[tuiHint]:not(ng-container):not(ng-template)" }, { type: i1.TuiHintHoverDirective, selector: "[tuiHint]:not(ng-container):not(ng-template)", inputs: ["tuiHintShowDelay", "tuiHintHideDelay"], exportAs: ["tuiHintHover"] }, { type: i1.TuiHintPositionDirective, selector: "[tuiHint]:not([tuiHintCustomPosition]):not(ng-container):not(ng-template)", inputs: ["tuiHintDirection"] }], pipes: { "async": i3.AsyncPipe }, animations: [tuiSlideInTop], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPreviewComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-preview',
                    templateUrl: './preview.template.html',
                    styleUrls: ['./preview.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    animations: [tuiSlideInTop],
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_PREVIEW_ICONS]
                }] }, { type: i7.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_PREVIEW_TEXTS]
                }] }]; }, propDecorators: { zoomable: [{
                type: Input
            }], rotatable: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,