import * as i0 from '@angular/core';
import { Directive, EventEmitter, Component, ChangeDetectionStrategy, Inject, Input, Output, HostListener, ElementRef, NgModule } from '@angular/core';
import { TUI_PREVIEW_ICONS, TUI_PREVIEW_ZOOM_TEXTS, TUI_PREVIEW_TEXTS } from '@taiga-ui/addon-preview/tokens';
import * as i4$1 from '@taiga-ui/cdk';
import { tuiClamp, ALWAYS_FALSE_HANDLER, tuiDragAndDropFrom, TuiDragStage, tuiTypedFromEvent, tuiPx, tuiRound, TuiDragModule, TuiResizeModule, TuiPanModule, TuiZoomModule, tuiAsDialog } from '@taiga-ui/cdk';
import * as i2 from '@taiga-ui/kit';
import { TUI_PAGINATION_TEXTS, TuiSliderModule } from '@taiga-ui/kit';
import * as i1 from '@taiga-ui/core';
import { tuiButtonOptionsProvider, tuiSlideInTop, TuiButtonModule, TuiHintModule, TuiSvgModule, TuiLoaderModule } from '@taiga-ui/core';
import * as i3 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i4 from 'rxjs';
import { merge, of, timer, BehaviorSubject, combineLatest } from 'rxjs';
import { switchMap, map, startWith } from 'rxjs/operators';
import * as i5 from '@angular/forms';
import { FormsModule } from '@angular/forms';
import * as i5$1 from '@ng-web-apis/mutation-observer';
import { MutationObserverModule } from '@ng-web-apis/mutation-observer';
import { TuiPreviewDialogService } from '@taiga-ui/addon-preview/components/preview-dialog';
import { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';

class TuiPreviewActionDirective {
}
TuiPreviewActionDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPreviewActionDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
TuiPreviewActionDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiPreviewActionDirective, selector: "[tuiPreviewAction]", providers: [
        tuiButtonOptionsProvider({
            appearance: 'preview-action',
            shape: 'rounded',
            size: 's',
        }),
    ], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPreviewActionDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiPreviewAction]',
                    providers: [
                        tuiButtonOptionsProvider({
                            appearance: 'preview-action',
                            shape: 'rounded',
                            size: 's',
                        }),
                    ],
                }]
        }] });

class TuiPreviewPaginationComponent {
    constructor(icons, texts$) {
        this.icons = icons;
        this.texts$ = texts$;
        this.length = 1;
        this.index = 0;
        this.indexChange = new EventEmitter();
    }
    get leftButtonDisabled() {
        return this.index === 0;
    }
    get rightButtonDisabled() {
        return this.index === this.length - 1;
    }
    onArrowClick(step) {
        this.updateIndex(tuiClamp(this.index + step, 0, this.length - 1));
    }
    updateIndex(index) {
        if (this.index === index) {
            return;
        }
        this.index = index;
        this.indexChange.emit(index);
    }
}
TuiPreviewPaginationComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPreviewPaginationComponent, deps: [{ token: TUI_PREVIEW_ICONS }, { token: TUI_PAGINATION_TEXTS }], target: i0.ɵɵFactoryTarget.Component });
TuiPreviewPaginationComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiPreviewPaginationComponent, selector: "tui-preview-pagination", inputs: { length: "length", index: "index" }, outputs: { indexChange: "indexChange" }, host: { listeners: { "document:keydown.arrowRight.prevent": "onArrowClick(1)", "document:keydown.arrowLeft.prevent": "onArrowClick(-1)" } }, ngImport: i0, template: "<ng-container *ngIf=\"texts$ | async as texts\">\n    <button\n        tuiIconButton\n        tuiPreviewAction\n        type=\"button\"\n        class=\"t-arrow_left\"\n        [disabled]=\"leftButtonDisabled\"\n        [icon]=\"icons.prev\"\n        [title]=\"texts[0]\"\n        (click)=\"onArrowClick(-1)\"\n    ></button>\n    {{ index + 1 }}/{{ length }}\n    <button\n        tuiIconButton\n        tuiPreviewAction\n        type=\"button\"\n        class=\"t-arrow_right\"\n        [disabled]=\"rightButtonDisabled\"\n        [icon]=\"icons.next\"\n        [title]=\"texts[1]\"\n        (click)=\"onArrowClick(1)\"\n    ></button>\n</ng-container>\n", styles: [":host{border-radius:1rem;background:rgba(104,104,104,.96);color:var(--tui-text-01-night);font:var(--tui-font-text-s);display:flex;justify-content:space-between;align-items:center;width:6.25rem}.t-arrow_left{border-top-right-radius:0;border-bottom-right-radius:0}.t-arrow_right{border-top-left-radius:0;border-bottom-left-radius:0}\n"], components: [{ type: i1.TuiButtonComponent, selector: "button[tuiButton], button[tuiIconButton], a[tuiButton], a[tuiIconButton]", inputs: ["appearance", "disabled", "icon", "iconRight", "shape", "showLoader", "size"] }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: TuiPreviewActionDirective, selector: "[tuiPreviewAction]" }], pipes: { "async": i3.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPreviewPaginationComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-preview-pagination',
                    templateUrl: './preview-pagination.template.html',
                    styleUrls: ['./preview-pagination.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_PREVIEW_ICONS]
                }] }, { type: i4.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_PAGINATION_TEXTS]
                }] }]; }, propDecorators: { length: [{
                type: Input
            }], index: [{
                type: Input
            }], indexChange: [{
                type: Output
            }], onArrowClick: [{
                type: HostListener,
                args: ['document:keydown.arrowRight.prevent', ['1']]
            }, {
                type: HostListener,
                args: ['document:keydown.arrowLeft.prevent', ['-1']]
            }] } });

const STEP = 0.5;
class TuiPreviewZoomComponent {
    constructor(icons, zoomTexts$) {
        this.icons = icons;
        this.zoomTexts$ = zoomTexts$;
        this.min = 0.5;
        this.max = 2;
        this.value = 1;
        this.valueChange = new EventEmitter();
        this.reset = new EventEmitter();
        this.hintShow$ = this.valueChange.pipe(switchMap(() => merge(of(true), timer(1000).pipe(map(ALWAYS_FALSE_HANDLER)))), startWith(false));
    }
    get leftButtonDisabled() {
        return this.value === this.min;
    }
    get rightButtonDisabled() {
        return this.value === this.max;
    }
    get collapseVisible() {
        return this.value > this.min;
    }
    onModelChange(value) {
        const clamped = tuiClamp(value, this.min, this.max);
        if (clamped === this.value) {
            return;
        }
        this.value = clamped;
        this.valueChange.emit(clamped);
    }
    onReset() {
        this.reset.emit();
    }
    onMinus() {
        this.onModelChange(this.value - STEP);
    }
    onPlus() {
        this.onModelChange(this.value < 1 ? 1 : this.value + STEP);
    }
}
TuiPreviewZoomComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPreviewZoomComponent, deps: [{ token: TUI_PREVIEW_ICONS }, { token: TUI_PREVIEW_ZOOM_TEXTS }], target: i0.ɵɵFactoryTarget.Component });
TuiPreviewZoomComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiPreviewZoomComponent, selector: "tui-preview-zoom", inputs: { min: "min", max: "max", value: "value" }, outputs: { valueChange: "valueChange", reset: "reset" }, ngImport: i0, template: "<ng-container *ngIf=\"zoomTexts$ | async as texts\">\n    <section class=\"t-zoom\">\n        <button\n            tuiIconButton\n            tuiPreviewAction\n            type=\"button\"\n            class=\"t-sign_minus\"\n            [disabled]=\"leftButtonDisabled\"\n            [icon]=\"icons.zoomOut\"\n            [title]=\"texts.zoomOut\"\n            (click)=\"onMinus()\"\n        ></button>\n        <label tuiSliderThumbLabel>\n            <div\n                tuiHintAppearance=\"onDark\"\n                tuiHintDirection=\"top-right\"\n                [tuiHint]=\"hint\"\n                [tuiHintManual]=\"!!(hintShow$ | async)\"\n            ></div>\n\n            <ng-template #hint>\n                {{ (valueChange | async) || value | percent }}\n            </ng-template>\n\n            <input\n                step=\"any\"\n                tuiSlider\n                type=\"range\"\n                class=\"t-slider\"\n                [max]=\"max\"\n                [min]=\"min\"\n                [ngModel]=\"value\"\n                (ngModelChange)=\"onModelChange($event)\"\n            />\n        </label>\n        <button\n            tuiIconButton\n            tuiPreviewAction\n            type=\"button\"\n            class=\"t-sign_plus\"\n            [disabled]=\"rightButtonDisabled\"\n            [icon]=\"icons.zoomIn\"\n            [title]=\"texts.zoomIn\"\n            (click)=\"onPlus()\"\n        ></button>\n    </section>\n\n    <button\n        tuiHintAppearance=\"onDark\"\n        tuiHintDescribe\n        tuiHintDirection=\"top-right\"\n        tuiIconButton\n        tuiPreviewAction\n        type=\"button\"\n        class=\"t-reset-button\"\n        [class.t-invisible]=\"!collapseVisible\"\n        [icon]=\"icons.zoomReset\"\n        [tuiHint]=\"texts.reset\"\n        (click)=\"onReset()\"\n    ></button>\n</ng-container>\n", styles: [":host{position:relative;display:flex}.t-zoom{border-radius:1rem;background:rgba(104,104,104,.96);color:var(--tui-text-01-night);font:var(--tui-font-text-s);display:flex;justify-content:space-between;align-items:center;width:12rem}.t-slider{width:7.5rem}.t-sign_minus{border-top-right-radius:0;border-bottom-right-radius:0}.t-sign_plus{border-top-left-radius:0;border-bottom-left-radius:0}.t-invisible{visibility:hidden}.t-reset-button{margin-left:.3125rem}\n"], components: [{ type: i1.TuiButtonComponent, selector: "button[tuiButton], button[tuiIconButton], a[tuiButton], a[tuiIconButton]", inputs: ["appearance", "disabled", "icon", "iconRight", "shape", "showLoader", "size"] }, { type: i2.TuiSliderThumbLabelComponent, selector: "[tuiSliderThumbLabel]" }, { type: i2.TuiSliderComponent, selector: "input[type=range][tuiSlider]", inputs: ["size", "segments"] }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: TuiPreviewActionDirective, selector: "[tuiPreviewAction]" }, { type: i1.TuiHintDirective, selector: "[tuiHint]:not(ng-container):not(ng-template)", inputs: ["tuiHint", "tuiHintContext", "tuiHintAppearance"] }, { type: i1.TuiHintDriverDirective, selector: "[tuiHint]:not(ng-container):not(ng-template)" }, { type: i1.TuiHintHoverDirective, selector: "[tuiHint]:not(ng-container):not(ng-template)", inputs: ["tuiHintShowDelay", "tuiHintHideDelay"], exportAs: ["tuiHintHover"] }, { type: i1.TuiHintPositionDirective, selector: "[tuiHint]:not([tuiHintCustomPosition]):not(ng-container):not(ng-template)", inputs: ["tuiHintDirection"] }, { type: i1.TuiHintManualDirective, selector: "[tuiHint][tuiHintManual]", inputs: ["tuiHintManual"] }, { type: i5.RangeValueAccessor, selector: "input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]" }, { type: i5.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i1.TuiHintDescribeDirective, selector: "[tuiHintDescribe]", inputs: ["tuiHintDescribe"] }], pipes: { "async": i3.AsyncPipe, "percent": i3.PercentPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPreviewZoomComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-preview-zoom',
                    templateUrl: './preview-zoom.template.html',
                    styleUrls: ['./preview-zoom.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_PREVIEW_ICONS]
                }] }, { type: i4.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_PREVIEW_ZOOM_TEXTS]
                }] }]; }, propDecorators: { min: [{
                type: Input
            }], max: [{
                type: Input
            }], value: [{
                type: Input
            }], valueChange: [{
                type: Output
            }], reset: [{
                type: Output
            }] } });

const INITIAL_SCALE_COEF = 0.8;
const EMPTY_COORDINATES = [0, 0];
const ROTATION_ANGLE = 90;
class TuiPreviewComponent {
    constructor(el, icons, texts$) {
        this.el = el;
        this.icons = icons;
        this.texts$ = texts$;
        this.zoomable = true;
        this.rotatable = false;
        this.minZoom = 1;
        this.width = 0;
        this.height = 0;
        this.zoom$ = new BehaviorSubject(this.minZoom);
        this.rotation$ = new BehaviorSubject(0);
        this.coordinates$ = new BehaviorSubject(EMPTY_COORDINATES);
        this.transitioned$ = merge(tuiDragAndDropFrom(this.el.nativeElement).pipe(map(({ stage }) => stage !== TuiDragStage.Continues)), tuiTypedFromEvent(this.el.nativeElement, 'touchmove', {
            passive: true,
        }).pipe(map(ALWAYS_FALSE_HANDLER)), tuiTypedFromEvent(this.el.nativeElement, 'wheel', { passive: true }).pipe(map(ALWAYS_FALSE_HANDLER)));
        this.cursor$ = tuiDragAndDropFrom(this.el.nativeElement).pipe(map(({ stage }) => (stage === TuiDragStage.Continues ? 'grabbing' : 'initial')), startWith('initial'));
        this.wrapperTransform$ = combineLatest([
            this.coordinates$.pipe(map(([x, y]) => `${tuiPx(x)}, ${tuiPx(y)}`)),
            this.zoom$,
            this.rotation$,
        ]).pipe(map(([translate, zoom, rotation]) => `translate(${translate}) scale(${zoom}) rotate(${rotation}deg)`));
    }
    rotate() {
        this.rotation$.next(this.rotation$.value - ROTATION_ANGLE);
    }
    onPan(delta) {
        this.coordinates$.next(this.getGuardedCoordinates(this.coordinates$.value[0] + delta[0], this.coordinates$.value[1] + delta[1]));
    }
    onMutation(contentWrapper) {
        const { clientWidth, clientHeight } = contentWrapper;
        this.refresh(clientWidth, clientHeight);
    }
    onZoom({ clientX, clientY, delta }) {
        if (this.zoomable) {
            this.processZoom(clientX, clientY, delta);
        }
    }
    onResize(contentResizeEntries) {
        if (contentResizeEntries.length === 0) {
            return;
        }
        const { width, height } = contentResizeEntries[0].contentRect;
        this.refresh(width, height);
    }
    reset() {
        this.zoom$.next(this.minZoom);
        this.coordinates$.next(EMPTY_COORDINATES);
    }
    setZoom(zoom) {
        this.zoom$.next(zoom);
        const [x, y] = this.coordinates$.value;
        this.coordinates$.next(this.getGuardedCoordinates(x, y));
    }
    get offsets() {
        const offsetX = ((this.zoom$.value - this.minZoom) * this.width) / 2;
        const offsetY = ((this.zoom$.value - this.minZoom) * this.height) / 2;
        return { offsetX, offsetY };
    }
    calculateMinZoom(contentHeight, contentWidth, boxHeight, boxWidth) {
        const bigSize = contentHeight > boxHeight * INITIAL_SCALE_COEF ||
            contentWidth > boxWidth * INITIAL_SCALE_COEF;
        const { clientHeight, clientWidth } = this.el.nativeElement;
        return bigSize
            ? tuiRound(Math.min((clientHeight * INITIAL_SCALE_COEF) / contentHeight, (clientWidth * INITIAL_SCALE_COEF) / contentWidth), 2)
            : 1;
    }
    refresh(width, height) {
        this.width = width;
        this.height = height;
        this.minZoom = this.calculateMinZoom(height, width, this.el.nativeElement.clientHeight, this.el.nativeElement.clientWidth);
        this.zoom$.next(this.minZoom);
        this.coordinates$.next(EMPTY_COORDINATES);
        this.rotation$.next(0);
    }
    processZoom(clientX, clientY, delta) {
        const oldScale = this.zoom$.value;
        const newScale = tuiClamp(oldScale + delta, this.minZoom, 2);
        const center = this.getScaleCenter({ clientX, clientY }, this.coordinates$.value, this.zoom$.value);
        const moveX = center[0] * oldScale - center[0] * newScale;
        const moveY = center[1] * oldScale - center[1] * newScale;
        this.zoom$.next(newScale);
        this.coordinates$.next(this.getGuardedCoordinates(this.coordinates$.value[0] + moveX, this.coordinates$.value[1] + moveY));
    }
    getGuardedCoordinates(x, y) {
        const { offsetX, offsetY } = this.offsets;
        return [tuiClamp(x, -offsetX, offsetX), tuiClamp(y, -offsetY, offsetY)];
    }
    getScaleCenter({ clientX, clientY }, [x, y], scale) {
        return [
            (clientX - x - this.el.nativeElement.offsetWidth / 2) / scale,
            (clientY - y - this.el.nativeElement.offsetHeight / 2) / scale,
        ];
    }
}
TuiPreviewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPreviewComponent, deps: [{ token: ElementRef }, { token: TUI_PREVIEW_ICONS }, { token: TUI_PREVIEW_TEXTS }], target: i0.ɵɵFactoryTarget.Component });
TuiPreviewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiPreviewComponent, selector: "tui-preview", inputs: { zoomable: "zoomable", rotatable: "rotatable" }, ngImport: i0, template: "<ng-container *ngIf=\"texts$ | async as texts\">\n    <section\n        #contentWrapper\n        attributeFilter=\"src\"\n        characterData\n        childList\n        subtree\n        class=\"t-wrapper\"\n        [class.t-not-interactive-content]=\"zoomable\"\n        [class.t-transitive]=\"transitioned$ | async\"\n        [style.cursor]=\"cursor$ | async\"\n        [style.transform]=\"wrapperTransform$ | async\"\n        (tuiPan)=\"onPan($event)\"\n        (tuiResize)=\"onResize($event)\"\n        (tuiZoom)=\"onZoom($event)\"\n        (waMutationObserver)=\"onMutation(contentWrapper)\"\n    >\n        <ng-content></ng-content>\n    </section>\n\n    <header class=\"t-header\">\n        <div class=\"t-title\">\n            <ng-content select=\"tui-preview-title\"></ng-content>\n        </div>\n\n        <ng-content select=\"tui-preview-pagination\"></ng-content>\n\n        <div class=\"t-actions\">\n            <ng-content select=\"[tuiPreviewAction]\"></ng-content>\n        </div>\n    </header>\n\n    <footer class=\"t-footer\">\n        <button\n            *ngIf=\"rotatable\"\n            tuiHintAppearance=\"onDark\"\n            tuiHintDescribe\n            tuiHintDirection=\"top-right\"\n            tuiIconButton\n            tuiPreviewAction\n            type=\"button\"\n            class=\"t-rotate-button\"\n            [icon]=\"icons.rotate\"\n            [tuiHint]=\"texts.rotate\"\n            (click)=\"rotate()\"\n        ></button>\n\n        <tui-preview-zoom\n            *ngIf=\"zoomable\"\n            [min]=\"minZoom\"\n            [value]=\"(zoom$ | async) || 1\"\n            (reset)=\"reset()\"\n            (valueChange)=\"setZoom($event)\"\n        ></tui-preview-zoom>\n    </footer>\n</ng-container>\n", styles: [":host{position:relative;display:flex;justify-content:center;align-items:center;width:100%;height:100%;-webkit-user-select:none;-moz-user-select:none;user-select:none}.t-header{position:fixed;top:1rem;display:flex;width:100%;padding:0 1rem;box-sizing:border-box}.t-footer{position:absolute;bottom:1rem;display:flex;width:100%;padding:0 1rem;box-sizing:border-box;justify-content:center}.t-actions{display:flex;flex:1;justify-content:flex-end}.t-actions ::ng-deep>*{margin-left:.625rem}.t-rotate-button{margin-right:.3125rem}.t-title{flex:1}:host-context(tui-root._mobile) .t-title{display:none}.t-not-interactive-content ::ng-deep>*{pointer-events:none}.t-wrapper{will-change:transform}.t-transitive{transition-duration:.3s}\n"], components: [{ type: i1.TuiButtonComponent, selector: "button[tuiButton], button[tuiIconButton], a[tuiButton], a[tuiIconButton]", inputs: ["appearance", "disabled", "icon", "iconRight", "shape", "showLoader", "size"] }, { type: TuiPreviewZoomComponent, selector: "tui-preview-zoom", inputs: ["min", "max", "value"], outputs: ["valueChange", "reset"] }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4$1.TuiPanDirective, selector: "[tuiPan]", outputs: ["tuiPan"] }, { type: i4$1.TuiResizeDirective, selector: "[tuiResize]", outputs: ["tuiResize"] }, { type: i4$1.TuiZoomDirective, selector: "[tuiZoom]", outputs: ["tuiZoom"] }, { type: i5$1.MutationObserverDirective, selector: "[waMutationObserver]", outputs: ["waMutationObserver"], exportAs: ["MutationObserver"] }, { type: i1.TuiHintDescribeDirective, selector: "[tuiHintDescribe]", inputs: ["tuiHintDescribe"] }, { type: TuiPreviewActionDirective, selector: "[tuiPreviewAction]" }, { type: i1.TuiHintDirective, selector: "[tuiHint]:not(ng-container):not(ng-template)", inputs: ["tuiHint", "tuiHintContext", "tuiHintAppearance"] }, { type: i1.TuiHintDriverDirective, selector: "[tuiHint]:not(ng-container):not(ng-template)" }, { type: i1.TuiHintHoverDirective, selector: "[tuiHint]:not(ng-container):not(ng-template)", inputs: ["tuiHintShowDelay", "tuiHintHideDelay"], exportAs: ["tuiHintHover"] }, { type: i1.TuiHintPositionDirective, selector: "[tuiHint]:not([tuiHintCustomPosition]):not(ng-container):not(ng-template)", inputs: ["tuiHintDirection"] }], pipes: { "async": i3.AsyncPipe }, animations: [tuiSlideInTop], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPreviewComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-preview',
                    templateUrl: './preview.template.html',
                    styleUrls: ['./preview.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    animations: [tuiSlideInTop],
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_PREVIEW_ICONS]
                }] }, { type: i4.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_PREVIEW_TEXTS]
                }] }]; }, propDecorators: { zoomable: [{
                type: Input
            }], rotatable: [{
                type: Input
            }] } });

class TuiPreviewActionModule {
}
TuiPreviewActionModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPreviewActionModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiPreviewActionModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPreviewActionModule, declarations: [TuiPreviewActionDirective], exports: [TuiPreviewActionDirective] });
TuiPreviewActionModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPreviewActionModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPreviewActionModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [TuiPreviewActionDirective],
                    exports: [TuiPreviewActionDirective],
                }]
        }] });

class TuiPreviewTitleComponent {
}
TuiPreviewTitleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPreviewTitleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
TuiPreviewTitleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiPreviewTitleComponent, selector: "tui-preview-title", ngImport: i0, template: `
        <ng-content></ng-content>
    `, isInline: true, styles: [":host{border-radius:1rem;background:rgba(104,104,104,.96);color:var(--tui-text-01-night);font:var(--tui-font-text-s);display:inline-block;padding:.375rem .75rem}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPreviewTitleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-preview-title',
                    template: `
        <ng-content></ng-content>
    `,
                    styleUrls: ['./preview-title.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }] });

class TuiPreviewModule {
}
TuiPreviewModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPreviewModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiPreviewModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPreviewModule, declarations: [TuiPreviewComponent,
        TuiPreviewTitleComponent,
        TuiPreviewPaginationComponent,
        TuiPreviewZoomComponent], imports: [CommonModule,
        PolymorpheusModule,
        MutationObserverModule,
        TuiButtonModule,
        FormsModule,
        TuiSliderModule,
        TuiHintModule,
        TuiDragModule,
        TuiResizeModule,
        TuiSvgModule,
        TuiLoaderModule,
        TuiPanModule,
        TuiZoomModule,
        TuiPreviewActionModule], exports: [TuiPreviewComponent,
        TuiPreviewActionDirective,
        TuiPreviewTitleComponent,
        TuiPreviewPaginationComponent,
        TuiPreviewZoomComponent] });
TuiPreviewModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPreviewModule, providers: [tuiAsDialog(TuiPreviewDialogService)], imports: [[
            CommonModule,
            PolymorpheusModule,
            MutationObserverModule,
            TuiButtonModule,
            FormsModule,
            TuiSliderModule,
            TuiHintModule,
            TuiDragModule,
            TuiResizeModule,
            TuiSvgModule,
            TuiLoaderModule,
            TuiPanModule,
            TuiZoomModule,
            TuiPreviewActionModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPreviewModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        PolymorpheusModule,
                        MutationObserverModule,
                        TuiButtonModule,
                        FormsModule,
                        TuiSliderModule,
                        TuiHintModule,
                        TuiDragModule,
                        TuiResizeModule,
                        TuiSvgModule,
                        TuiLoaderModule,
                        TuiPanModule,
                        TuiZoomModule,
                        TuiPreviewActionModule,
                    ],
                    declarations: [
                        TuiPreviewComponent,
                        TuiPreviewTitleComponent,
                        TuiPreviewPaginationComponent,
                        TuiPreviewZoomComponent,
                    ],
                    providers: [tuiAsDialog(TuiPreviewDialogService)],
                    exports: [
                        TuiPreviewComponent,
                        TuiPreviewActionDirective,
                        TuiPreviewTitleComponent,
                        TuiPreviewPaginationComponent,
                        TuiPreviewZoomComponent,
                    ],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TuiPreviewActionDirective, TuiPreviewActionModule, TuiPreviewComponent, TuiPreviewModule, TuiPreviewPaginationComponent, TuiPreviewTitleComponent, TuiPreviewZoomComponent };
//# sourceMappingURL=taiga-ui-addon-preview-components-preview.js.map
