import { createFilter } from '@rollup/pluginutils';
import { optimize } from 'svgo';
export function tuiRollupSvgo({ include = '**/*.svg', exclude, options, } = {}) {
    const filter = createFilter(include, exclude);
    return {
        name: 'rollupSvgo',
        transform(svgString, path) {
            var _a, _b;
            const skip = !filter(path);
            if (skip) {
                console.info('\x1B[33m%s\x1B[0m', '[skip]', path);
                return;
            }
            let data;
            let errorMessage;
            try {
                const result = optimize(svgString, Object.assign({ path }, options));
                data = (result === null || result === void 0 ? void 0 : result.data) || {};
                errorMessage = (_a = result) === null || _a === void 0 ? void 0 : _a.error;
            }
            catch (err) {
                errorMessage = (_b = err) === null || _b === void 0 ? void 0 : _b.message;
            }
            if (errorMessage) {
                console.error('\x1B[31m%s\x1B[0m', '[error]', path, `\n${svgString}`, `\n${errorMessage}`);
                process.exit(1);
            }
            console.info('\x1B[32m%s\x1B[0m', '[success]', path);
            return {
                code: `export default ${JSON.stringify(data)}`,
                map: { mappings: '' },
            };
        },
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm9sbHVwLXN2Z28uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9pY29ucy9zY3JpcHRzL3JvbGx1cC1zdmdvLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQUVqRCxPQUFPLEVBQVMsUUFBUSxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBVXRDLE1BQU0sVUFBVSxhQUFhLENBQUMsRUFDMUIsT0FBTyxHQUFHLFVBQVUsRUFDcEIsT0FBTyxFQUNQLE9BQU8sTUFDYyxFQUFFO0lBQ3ZCLE1BQU0sTUFBTSxHQUFHLFlBQVksQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFFOUMsT0FBTztRQUNILElBQUksRUFBRSxZQUFZO1FBQ2xCLFNBQVMsQ0FBQyxTQUFpQixFQUFFLElBQVk7O1lBQ3JDLE1BQU0sSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBRTNCLElBQUksSUFBSSxFQUFFO2dCQUNOLE9BQU8sQ0FBQyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO2dCQUVsRCxPQUFPO2FBQ1Y7WUFFRCxJQUFJLElBQWEsQ0FBQztZQUNsQixJQUFJLFlBQWdDLENBQUM7WUFFckMsSUFBSTtnQkFDQSxNQUFNLE1BQU0sR0FBRyxRQUFRLENBQUMsU0FBUyxrQkFBRyxJQUFJLElBQUssT0FBTyxFQUFFLENBQUM7Z0JBRXZELElBQUksR0FBRyxDQUFBLE1BQU0sYUFBTixNQUFNLHVCQUFOLE1BQU0sQ0FBRSxJQUFJLEtBQUksRUFBRSxDQUFDO2dCQUMxQixZQUFZLEdBQUcsTUFBQyxNQUFjLDBDQUFFLEtBQUssQ0FBQzthQUN6QztZQUFDLE9BQU8sR0FBWSxFQUFFO2dCQUNuQixZQUFZLEdBQUcsTUFBQyxHQUFhLDBDQUFFLE9BQU8sQ0FBQzthQUMxQztZQUVELElBQUksWUFBWSxFQUFFO2dCQUNkLE9BQU8sQ0FBQyxLQUFLLENBQ1QsbUJBQW1CLEVBQ25CLFNBQVMsRUFDVCxJQUFJLEVBQ0osS0FBSyxTQUFTLEVBQUUsRUFDaEIsS0FBSyxZQUFZLEVBQUUsQ0FDdEIsQ0FBQztnQkFDRixPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ25CO1lBRUQsT0FBTyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFFckQsT0FBTztnQkFDSCxJQUFJLEVBQUUsa0JBQWtCLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQzlDLEdBQUcsRUFBRSxFQUFDLFFBQVEsRUFBRSxFQUFFLEVBQUM7YUFDdEIsQ0FBQztRQUNOLENBQUM7S0FDSixDQUFDO0FBQ04sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Y3JlYXRlRmlsdGVyfSBmcm9tICdAcm9sbHVwL3BsdWdpbnV0aWxzJztcbmltcG9ydCB7UGx1Z2luLCBUcmFuc2Zvcm1SZXN1bHR9IGZyb20gJ3JvbGx1cCc7XG5pbXBvcnQge0NvbmZpZywgb3B0aW1pemV9IGZyb20gJ3N2Z28nO1xuXG5leHBvcnQgaW50ZXJmYWNlIFR1aVJvbGx1cFN2Z29Db25maWcge1xuICAgIHJlYWRvbmx5IGV4Y2x1ZGU/OiBzdHJpbmc7XG5cbiAgICByZWFkb25seSBpbmNsdWRlPzogc3RyaW5nO1xuXG4gICAgcmVhZG9ubHkgb3B0aW9ucz86IENvbmZpZztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHR1aVJvbGx1cFN2Z28oe1xuICAgIGluY2x1ZGUgPSAnKiovKi5zdmcnLFxuICAgIGV4Y2x1ZGUsXG4gICAgb3B0aW9ucyxcbn06IFR1aVJvbGx1cFN2Z29Db25maWcgPSB7fSk6IFBsdWdpbiB7XG4gICAgY29uc3QgZmlsdGVyID0gY3JlYXRlRmlsdGVyKGluY2x1ZGUsIGV4Y2x1ZGUpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZTogJ3JvbGx1cFN2Z28nLFxuICAgICAgICB0cmFuc2Zvcm0oc3ZnU3RyaW5nOiBzdHJpbmcsIHBhdGg6IHN0cmluZyk6IFRyYW5zZm9ybVJlc3VsdCB7XG4gICAgICAgICAgICBjb25zdCBza2lwID0gIWZpbHRlcihwYXRoKTtcblxuICAgICAgICAgICAgaWYgKHNraXApIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmluZm8oJ1xceDFCWzMzbSVzXFx4MUJbMG0nLCAnW3NraXBdJywgcGF0aCk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBkYXRhOiB1bmtub3duO1xuICAgICAgICAgICAgbGV0IGVycm9yTWVzc2FnZTogc3RyaW5nIHwgdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IG9wdGltaXplKHN2Z1N0cmluZywge3BhdGgsIC4uLm9wdGlvbnN9KTtcblxuICAgICAgICAgICAgICAgIGRhdGEgPSByZXN1bHQ/LmRhdGEgfHwge307XG4gICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gKHJlc3VsdCBhcyBhbnkpPy5lcnJvcjtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycjogdW5rbm93bikge1xuICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9IChlcnIgYXMgRXJyb3IpPy5tZXNzYWdlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZXJyb3JNZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgICAgICAgICAgJ1xceDFCWzMxbSVzXFx4MUJbMG0nLFxuICAgICAgICAgICAgICAgICAgICAnW2Vycm9yXScsXG4gICAgICAgICAgICAgICAgICAgIHBhdGgsXG4gICAgICAgICAgICAgICAgICAgIGBcXG4ke3N2Z1N0cmluZ31gLFxuICAgICAgICAgICAgICAgICAgICBgXFxuJHtlcnJvck1lc3NhZ2V9YCxcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHByb2Nlc3MuZXhpdCgxKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc29sZS5pbmZvKCdcXHgxQlszMm0lc1xceDFCWzBtJywgJ1tzdWNjZXNzXScsIHBhdGgpO1xuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGNvZGU6IGBleHBvcnQgZGVmYXVsdCAke0pTT04uc3RyaW5naWZ5KGRhdGEpfWAsXG4gICAgICAgICAgICAgICAgbWFwOiB7bWFwcGluZ3M6ICcnfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbiJdfQ==