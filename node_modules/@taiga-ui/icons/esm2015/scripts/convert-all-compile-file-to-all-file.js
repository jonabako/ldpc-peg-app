import { __awaiter } from "tslib";
import { rollup } from 'rollup';
import typescript from 'rollup-plugin-typescript2';
import { tuiRollupSvgo } from './rollup-svgo';
const banner = `
/**
 * @description:
 * DO NOT CHANGE THIS FILE. AUTOGENERATED
 *
 * This file contains inline svg icons
 * for users who wants insert into js bundle
 */
`;
export function tuiConvertAllCompileFileToAllFile(config) {
    return __awaiter(this, void 0, void 0, function* () {
        const { from, to, prt2Options, include } = config;
        const inputOptions = {
            input: from,
            output: {
                generatedCode: {
                    constBindings: true,
                },
            },
            plugins: [
                typescript(prt2Options),
                tuiRollupSvgo({
                    include,
                    options: {
                        plugins: [
                            {
                                name: 'preset-default',
                                params: {
                                    overrides: {
                                        removeViewBox: false,
                                        collapseGroups: false,
                                        removeUnknownsAndDefaults: false,
                                        cleanupIds: {},
                                        sortAttrs: {
                                            xmlnsOrder: 'alphabetical',
                                        },
                                    },
                                },
                            },
                        ],
                    },
                }),
            ],
        };
        console.info('\x1B[36m%s\x1B[0m', 'TypeScript options: ', prt2Options);
        const bundle = yield rollup(inputOptions);
        yield bundle.write({
            banner,
            file: to,
            format: 'es',
            generatedCode: {
                constBindings: true,
            },
        });
        /**
         * @note:
         * The rollup bundle must be closed once `write` is finished to let plugins clean up their external
         * processes or services via the `closeBundle` hook, otherwise it can lead to memory leaks.
         */
        yield bundle.close();
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udmVydC1hbGwtY29tcGlsZS1maWxlLXRvLWFsbC1maWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvaWNvbnMvc2NyaXB0cy9jb252ZXJ0LWFsbC1jb21waWxlLWZpbGUtdG8tYWxsLWZpbGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxNQUFNLEVBQWdCLE1BQU0sUUFBUSxDQUFDO0FBQzdDLE9BQU8sVUFBeUIsTUFBTSwyQkFBMkIsQ0FBQztBQUVsRSxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRTVDLE1BQU0sTUFBTSxHQUFHOzs7Ozs7OztDQVFkLENBQUM7QUFTRixNQUFNLFVBQWdCLGlDQUFpQyxDQUFDLE1BQWU7O1FBQ25FLE1BQU0sRUFBQyxJQUFJLEVBQUUsRUFBRSxFQUFFLFdBQVcsRUFBRSxPQUFPLEVBQUMsR0FBRyxNQUFNLENBQUM7UUFFaEQsTUFBTSxZQUFZLEdBQWtCO1lBQ2hDLEtBQUssRUFBRSxJQUFJO1lBQ1gsTUFBTSxFQUFFO2dCQUNKLGFBQWEsRUFBRTtvQkFDWCxhQUFhLEVBQUUsSUFBSTtpQkFDdEI7YUFDSjtZQUNELE9BQU8sRUFBRTtnQkFDTCxVQUFVLENBQUMsV0FBVyxDQUFDO2dCQUN2QixhQUFhLENBQUM7b0JBQ1YsT0FBTztvQkFDUCxPQUFPLEVBQUU7d0JBQ0wsT0FBTyxFQUFFOzRCQUNMO2dDQUNJLElBQUksRUFBRSxnQkFBZ0I7Z0NBQ3RCLE1BQU0sRUFBRTtvQ0FDSixTQUFTLEVBQUU7d0NBQ1AsYUFBYSxFQUFFLEtBQUs7d0NBQ3BCLGNBQWMsRUFBRSxLQUFLO3dDQUNyQix5QkFBeUIsRUFBRSxLQUFLO3dDQUNoQyxVQUFVLEVBQUUsRUFBRTt3Q0FDZCxTQUFTLEVBQUU7NENBQ1AsVUFBVSxFQUFFLGNBQWM7eUNBQzdCO3FDQUNKO2lDQUNKOzZCQUNKO3lCQUNKO3FCQUNKO2lCQUNKLENBQUM7YUFDTDtTQUNKLENBQUM7UUFFRixPQUFPLENBQUMsSUFBSSxDQUFDLG1CQUFtQixFQUFFLHNCQUFzQixFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBRXZFLE1BQU0sTUFBTSxHQUFHLE1BQU0sTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBRTFDLE1BQU0sTUFBTSxDQUFDLEtBQUssQ0FBQztZQUNmLE1BQU07WUFDTixJQUFJLEVBQUUsRUFBRTtZQUNSLE1BQU0sRUFBRSxJQUFJO1lBQ1osYUFBYSxFQUFFO2dCQUNYLGFBQWEsRUFBRSxJQUFJO2FBQ3RCO1NBQ0osQ0FBQyxDQUFDO1FBRUg7Ozs7V0FJRztRQUNILE1BQU0sTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3pCLENBQUM7Q0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7cm9sbHVwLCBSb2xsdXBPcHRpb25zfSBmcm9tICdyb2xsdXAnO1xuaW1wb3J0IHR5cGVzY3JpcHQsIHtSUFQyT3B0aW9uc30gZnJvbSAncm9sbHVwLXBsdWdpbi10eXBlc2NyaXB0Mic7XG5cbmltcG9ydCB7dHVpUm9sbHVwU3Znb30gZnJvbSAnLi9yb2xsdXAtc3Znbyc7XG5cbmNvbnN0IGJhbm5lciA9IGBcbi8qKlxuICogQGRlc2NyaXB0aW9uOlxuICogRE8gTk9UIENIQU5HRSBUSElTIEZJTEUuIEFVVE9HRU5FUkFURURcbiAqXG4gKiBUaGlzIGZpbGUgY29udGFpbnMgaW5saW5lIHN2ZyBpY29uc1xuICogZm9yIHVzZXJzIHdobyB3YW50cyBpbnNlcnQgaW50byBqcyBidW5kbGVcbiAqL1xuYDtcblxuaW50ZXJmYWNlIE9wdGlvbnMge1xuICAgIGZyb206IHN0cmluZztcbiAgICBpbmNsdWRlOiBzdHJpbmc7XG4gICAgcHJ0Mk9wdGlvbnM6IFJQVDJPcHRpb25zO1xuICAgIHRvOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB0dWlDb252ZXJ0QWxsQ29tcGlsZUZpbGVUb0FsbEZpbGUoY29uZmlnOiBPcHRpb25zKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3Qge2Zyb20sIHRvLCBwcnQyT3B0aW9ucywgaW5jbHVkZX0gPSBjb25maWc7XG5cbiAgICBjb25zdCBpbnB1dE9wdGlvbnM6IFJvbGx1cE9wdGlvbnMgPSB7XG4gICAgICAgIGlucHV0OiBmcm9tLFxuICAgICAgICBvdXRwdXQ6IHtcbiAgICAgICAgICAgIGdlbmVyYXRlZENvZGU6IHtcbiAgICAgICAgICAgICAgICBjb25zdEJpbmRpbmdzOiB0cnVlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgcGx1Z2luczogW1xuICAgICAgICAgICAgdHlwZXNjcmlwdChwcnQyT3B0aW9ucyksXG4gICAgICAgICAgICB0dWlSb2xsdXBTdmdvKHtcbiAgICAgICAgICAgICAgICBpbmNsdWRlLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgcGx1Z2luczogW1xuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdwcmVzZXQtZGVmYXVsdCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJyaWRlczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlVmlld0JveDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xsYXBzZUdyb3VwczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVVbmtub3duc0FuZERlZmF1bHRzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFudXBJZHM6IHt9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc29ydEF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeG1sbnNPcmRlcjogJ2FscGhhYmV0aWNhbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgXSxcbiAgICB9O1xuXG4gICAgY29uc29sZS5pbmZvKCdcXHgxQlszNm0lc1xceDFCWzBtJywgJ1R5cGVTY3JpcHQgb3B0aW9uczogJywgcHJ0Mk9wdGlvbnMpO1xuXG4gICAgY29uc3QgYnVuZGxlID0gYXdhaXQgcm9sbHVwKGlucHV0T3B0aW9ucyk7XG5cbiAgICBhd2FpdCBidW5kbGUud3JpdGUoe1xuICAgICAgICBiYW5uZXIsXG4gICAgICAgIGZpbGU6IHRvLFxuICAgICAgICBmb3JtYXQ6ICdlcycsXG4gICAgICAgIGdlbmVyYXRlZENvZGU6IHtcbiAgICAgICAgICAgIGNvbnN0QmluZGluZ3M6IHRydWUsXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBAbm90ZTpcbiAgICAgKiBUaGUgcm9sbHVwIGJ1bmRsZSBtdXN0IGJlIGNsb3NlZCBvbmNlIGB3cml0ZWAgaXMgZmluaXNoZWQgdG8gbGV0IHBsdWdpbnMgY2xlYW4gdXAgdGhlaXIgZXh0ZXJuYWxcbiAgICAgKiBwcm9jZXNzZXMgb3Igc2VydmljZXMgdmlhIHRoZSBgY2xvc2VCdW5kbGVgIGhvb2ssIG90aGVyd2lzZSBpdCBjYW4gbGVhZCB0byBtZW1vcnkgbGVha3MuXG4gICAgICovXG4gICAgYXdhaXQgYnVuZGxlLmNsb3NlKCk7XG59XG4iXX0=