import { Directive, EventEmitter, HostBinding, Input, Output } from '@angular/core';
import * as i0 from "@angular/core";
const TUI = 'tui_interactive_';
/**
 * The most basic class for interactive components
 */
export class AbstractTuiInteractive {
    constructor() {
        this.pseudoHover = null;
        this.pseudoActive = null;
        this.pseudoFocus = null;
        /**
         * Determines if component is focusable with keyboard.
         */
        this.focusable = true;
        this.nativeId = '';
        /**
         * Emits 'true' on focus and 'false' on blur.
         */
        this.focusedChange = new EventEmitter();
        this.focusVisibleChange = new EventEmitter();
        this.focusVisible = false;
        this.autoIdString = `${TUI}${AbstractTuiInteractive.autoId++}${Date.now()}`;
    }
    get computedDisabled() {
        return this.disabled;
    }
    get computedFocusable() {
        return !this.computedDisabled && (this.focusable || this.focused);
    }
    get computedFocused() {
        var _a;
        return !this.computedDisabled && ((_a = this.pseudoFocus) !== null && _a !== void 0 ? _a : this.focused);
    }
    get computedFocusVisible() {
        var _a;
        return !this.computedDisabled && ((_a = this.pseudoFocus) !== null && _a !== void 0 ? _a : this.focusVisible);
    }
    // TODO: 3.0 Consider removing since native input is exposed
    get id() {
        return this.nativeId || this.autoIdString;
    }
    updateFocused(focused) {
        this.focusedChange.emit(focused);
    }
    updateFocusVisible(focusVisible) {
        if (this.focusVisible === focusVisible) {
            return;
        }
        this.focusVisible = focusVisible;
        this.focusVisibleChange.emit(focusVisible);
    }
}
AbstractTuiInteractive.autoId = 0;
AbstractTuiInteractive.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: AbstractTuiInteractive, deps: [], target: i0.ɵɵFactoryTarget.Directive });
AbstractTuiInteractive.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: AbstractTuiInteractive, inputs: { pseudoHover: "pseudoHover", pseudoActive: "pseudoActive", pseudoFocus: "pseudoFocus", focusable: "focusable", nativeId: "nativeId" }, outputs: { focusedChange: "focusedChange", focusVisibleChange: "focusVisibleChange" }, host: { properties: { "attr.data-focused": "this.pseudoFocus", "class._disabled": "this.computedDisabled", "class._focused": "this.computedFocused", "class._focus-visible": "this.computedFocusVisible" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: AbstractTuiInteractive, decorators: [{
            type: Directive
        }], ctorParameters: function () { return []; }, propDecorators: { pseudoHover: [{
                type: Input
            }], pseudoActive: [{
                type: Input
            }], pseudoFocus: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.data-focused']
            }], focusable: [{
                type: Input
            }], nativeId: [{
                type: Input
            }], focusedChange: [{
                type: Output
            }], focusVisibleChange: [{
                type: Output
            }], computedDisabled: [{
                type: HostBinding,
                args: ['class._disabled']
            }], computedFocused: [{
                type: HostBinding,
                args: ['class._focused']
            }], computedFocusVisible: [{
                type: HostBinding,
                args: ['class._focus-visible']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJhY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9jZGsvYWJzdHJhY3QvaW50ZXJhY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxZQUFZLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUMsTUFBTSxlQUFlLENBQUM7O0FBRWxGLE1BQU0sR0FBRyxHQUFHLGtCQUFrQixDQUFDO0FBRS9COztHQUVHO0FBRUgsTUFBTSxPQUFnQixzQkFBc0I7SUF1Q3hDO1FBN0JBLGdCQUFXLEdBQW1CLElBQUksQ0FBQztRQUduQyxpQkFBWSxHQUFtQixJQUFJLENBQUM7UUFJcEMsZ0JBQVcsR0FBbUIsSUFBSSxDQUFDO1FBRW5DOztXQUVHO1FBRUgsY0FBUyxHQUFHLElBQUksQ0FBQztRQUdqQixhQUFRLEdBQUcsRUFBRSxDQUFDO1FBRWQ7O1dBRUc7UUFFTSxrQkFBYSxHQUFHLElBQUksWUFBWSxFQUFXLENBQUM7UUFHNUMsdUJBQWtCLEdBQUcsSUFBSSxZQUFZLEVBQVcsQ0FBQztRQUUxRCxpQkFBWSxHQUFHLEtBQUssQ0FBQztRQUdqQixJQUFJLENBQUMsWUFBWSxHQUFHLEdBQUcsR0FBRyxHQUFHLHNCQUFzQixDQUFDLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDO0lBQ2hGLENBQUM7SUFFRCxJQUNJLGdCQUFnQjtRQUNoQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDekIsQ0FBQztJQUVELElBQUksaUJBQWlCO1FBQ2pCLE9BQU8sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN0RSxDQUFDO0lBRUQsSUFDSSxlQUFlOztRQUNmLE9BQU8sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLElBQUksQ0FBQyxNQUFBLElBQUksQ0FBQyxXQUFXLG1DQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN4RSxDQUFDO0lBRUQsSUFDSSxvQkFBb0I7O1FBQ3BCLE9BQU8sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLElBQUksQ0FBQyxNQUFBLElBQUksQ0FBQyxXQUFXLG1DQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUM3RSxDQUFDO0lBRUQsNERBQTREO0lBQzVELElBQUksRUFBRTtRQUNGLE9BQU8sSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDO0lBQzlDLENBQUM7SUFFUyxhQUFhLENBQUMsT0FBZ0I7UUFDcEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDckMsQ0FBQztJQUVTLGtCQUFrQixDQUFDLFlBQXFCO1FBQzlDLElBQUksSUFBSSxDQUFDLFlBQVksS0FBSyxZQUFZLEVBQUU7WUFDcEMsT0FBTztTQUNWO1FBRUQsSUFBSSxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUM7UUFDakMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUMvQyxDQUFDOztBQTdFYyw2QkFBTSxHQUFHLENBQUMsQ0FBQztvSEFEUixzQkFBc0I7d0dBQXRCLHNCQUFzQjs0RkFBdEIsc0JBQXNCO2tCQUQzQyxTQUFTOzBFQVdOLFdBQVc7c0JBRFYsS0FBSztnQkFJTixZQUFZO3NCQURYLEtBQUs7Z0JBS04sV0FBVztzQkFGVixLQUFLOztzQkFDTCxXQUFXO3VCQUFDLG1CQUFtQjtnQkFPaEMsU0FBUztzQkFEUixLQUFLO2dCQUlOLFFBQVE7c0JBRFAsS0FBSztnQkFPRyxhQUFhO3NCQURyQixNQUFNO2dCQUlFLGtCQUFrQjtzQkFEMUIsTUFBTTtnQkFVSCxnQkFBZ0I7c0JBRG5CLFdBQVc7dUJBQUMsaUJBQWlCO2dCQVUxQixlQUFlO3NCQURsQixXQUFXO3VCQUFDLGdCQUFnQjtnQkFNekIsb0JBQW9CO3NCQUR2QixXQUFXO3VCQUFDLHNCQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGlyZWN0aXZlLCBFdmVudEVtaXR0ZXIsIEhvc3RCaW5kaW5nLCBJbnB1dCwgT3V0cHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuY29uc3QgVFVJID0gJ3R1aV9pbnRlcmFjdGl2ZV8nO1xuXG4vKipcbiAqIFRoZSBtb3N0IGJhc2ljIGNsYXNzIGZvciBpbnRlcmFjdGl2ZSBjb21wb25lbnRzXG4gKi9cbkBEaXJlY3RpdmUoKVxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFic3RyYWN0VHVpSW50ZXJhY3RpdmUge1xuICAgIHByaXZhdGUgc3RhdGljIGF1dG9JZCA9IDA7XG5cbiAgICBhYnN0cmFjdCBkaXNhYmxlZDogYm9vbGVhbjtcblxuICAgIGFic3RyYWN0IGZvY3VzZWQ6IGJvb2xlYW47XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IGF1dG9JZFN0cmluZzogc3RyaW5nO1xuXG4gICAgQElucHV0KClcbiAgICBwc2V1ZG9Ib3ZlcjogYm9vbGVhbiB8IG51bGwgPSBudWxsO1xuXG4gICAgQElucHV0KClcbiAgICBwc2V1ZG9BY3RpdmU6IGJvb2xlYW4gfCBudWxsID0gbnVsbDtcblxuICAgIEBJbnB1dCgpXG4gICAgQEhvc3RCaW5kaW5nKCdhdHRyLmRhdGEtZm9jdXNlZCcpXG4gICAgcHNldWRvRm9jdXM6IGJvb2xlYW4gfCBudWxsID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgaWYgY29tcG9uZW50IGlzIGZvY3VzYWJsZSB3aXRoIGtleWJvYXJkLlxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgZm9jdXNhYmxlID0gdHJ1ZTtcblxuICAgIEBJbnB1dCgpXG4gICAgbmF0aXZlSWQgPSAnJztcblxuICAgIC8qKlxuICAgICAqIEVtaXRzICd0cnVlJyBvbiBmb2N1cyBhbmQgJ2ZhbHNlJyBvbiBibHVyLlxuICAgICAqL1xuICAgIEBPdXRwdXQoKVxuICAgIHJlYWRvbmx5IGZvY3VzZWRDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPGJvb2xlYW4+KCk7XG5cbiAgICBAT3V0cHV0KClcbiAgICByZWFkb25seSBmb2N1c1Zpc2libGVDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPGJvb2xlYW4+KCk7XG5cbiAgICBmb2N1c1Zpc2libGUgPSBmYWxzZTtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmF1dG9JZFN0cmluZyA9IGAke1RVSX0ke0Fic3RyYWN0VHVpSW50ZXJhY3RpdmUuYXV0b0lkKyt9JHtEYXRlLm5vdygpfWA7XG4gICAgfVxuXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5fZGlzYWJsZWQnKVxuICAgIGdldCBjb21wdXRlZERpc2FibGVkKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5kaXNhYmxlZDtcbiAgICB9XG5cbiAgICBnZXQgY29tcHV0ZWRGb2N1c2FibGUoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiAhdGhpcy5jb21wdXRlZERpc2FibGVkICYmICh0aGlzLmZvY3VzYWJsZSB8fCB0aGlzLmZvY3VzZWQpO1xuICAgIH1cblxuICAgIEBIb3N0QmluZGluZygnY2xhc3MuX2ZvY3VzZWQnKVxuICAgIGdldCBjb21wdXRlZEZvY3VzZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiAhdGhpcy5jb21wdXRlZERpc2FibGVkICYmICh0aGlzLnBzZXVkb0ZvY3VzID8/IHRoaXMuZm9jdXNlZCk7XG4gICAgfVxuXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5fZm9jdXMtdmlzaWJsZScpXG4gICAgZ2V0IGNvbXB1dGVkRm9jdXNWaXNpYmxlKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gIXRoaXMuY29tcHV0ZWREaXNhYmxlZCAmJiAodGhpcy5wc2V1ZG9Gb2N1cyA/PyB0aGlzLmZvY3VzVmlzaWJsZSk7XG4gICAgfVxuXG4gICAgLy8gVE9ETzogMy4wIENvbnNpZGVyIHJlbW92aW5nIHNpbmNlIG5hdGl2ZSBpbnB1dCBpcyBleHBvc2VkXG4gICAgZ2V0IGlkKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLm5hdGl2ZUlkIHx8IHRoaXMuYXV0b0lkU3RyaW5nO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCB1cGRhdGVGb2N1c2VkKGZvY3VzZWQ6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgICAgdGhpcy5mb2N1c2VkQ2hhbmdlLmVtaXQoZm9jdXNlZCk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIHVwZGF0ZUZvY3VzVmlzaWJsZShmb2N1c1Zpc2libGU6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuZm9jdXNWaXNpYmxlID09PSBmb2N1c1Zpc2libGUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZm9jdXNWaXNpYmxlID0gZm9jdXNWaXNpYmxlO1xuICAgICAgICB0aGlzLmZvY3VzVmlzaWJsZUNoYW5nZS5lbWl0KGZvY3VzVmlzaWJsZSk7XG4gICAgfVxufVxuIl19