import { ComponentFactoryResolver, Directive, ElementRef, Inject, INJECTOR, Injector, ViewChild, ViewContainerRef, } from '@angular/core';
import { AbstractTuiPortalService } from './portal-service';
import * as i0 from "@angular/core";
import * as i1 from "./portal-service";
/**
 * Abstract class for host element for dynamically created portals.
 */
export class AbstractTuiPortalHostComponent {
    constructor(injector, el, portalService) {
        this.injector = injector;
        this.el = el;
        portalService.attach(this);
    }
    /** @deprecated unused, will be removed in 4.0 **/
    get clientRect() {
        return this.el.nativeElement.getBoundingClientRect();
    }
    addComponentChild(component) {
        const parent = component.createInjector(this.injector);
        const resolver = parent.get(ComponentFactoryResolver);
        const factory = resolver.resolveComponentFactory(component.component);
        // TODO: Remove in 4.0
        const providers = [{ provide: AbstractTuiPortalHostComponent, useValue: this }];
        const injector = Injector.create({ parent, providers });
        const ref = this.vcr.createComponent(factory, undefined, injector);
        ref.changeDetectorRef.detectChanges();
        return ref;
    }
    addTemplateChild(templateRef, context) {
        return this.vcr.createEmbeddedView(templateRef, context);
    }
}
AbstractTuiPortalHostComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: AbstractTuiPortalHostComponent, deps: [{ token: INJECTOR }, { token: ElementRef }, { token: AbstractTuiPortalService }], target: i0.ɵɵFactoryTarget.Directive });
AbstractTuiPortalHostComponent.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: AbstractTuiPortalHostComponent, viewQueries: [{ propertyName: "vcr", first: true, predicate: ["viewContainer"], descendants: true, read: ViewContainerRef }], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: AbstractTuiPortalHostComponent, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i0.Injector, decorators: [{
                    type: Inject,
                    args: [INJECTOR]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: i1.AbstractTuiPortalService, decorators: [{
                    type: Inject,
                    args: [AbstractTuiPortalService]
                }] }]; }, propDecorators: { vcr: [{
                type: ViewChild,
                args: ['viewContainer', { read: ViewContainerRef }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9ydGFsLWhvc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9jZGsvYWJzdHJhY3QvcG9ydGFsLWhvc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNILHdCQUF3QixFQUV4QixTQUFTLEVBQ1QsVUFBVSxFQUVWLE1BQU0sRUFDTixRQUFRLEVBQ1IsUUFBUSxFQUVSLFNBQVMsRUFDVCxnQkFBZ0IsR0FDbkIsTUFBTSxlQUFlLENBQUM7QUFHdkIsT0FBTyxFQUFDLHdCQUF3QixFQUFDLE1BQU0sa0JBQWtCLENBQUM7OztBQUUxRDs7R0FFRztBQUVILE1BQU0sT0FBZ0IsOEJBQThCO0lBSWhELFlBQ3VDLFFBQWtCLEVBQ2QsRUFBMkIsRUFDaEMsYUFBdUM7UUFGdEMsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUNkLE9BQUUsR0FBRixFQUFFLENBQXlCO1FBR2xFLGFBQWEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVELGtEQUFrRDtJQUNsRCxJQUFJLFVBQVU7UUFDVixPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLHFCQUFxQixFQUFFLENBQUM7SUFDekQsQ0FBQztJQUVELGlCQUFpQixDQUFJLFNBQW1DO1FBQ3BELE1BQU0sTUFBTSxHQUFHLFNBQVMsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3ZELE1BQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsd0JBQXdCLENBQUMsQ0FBQztRQUN0RCxNQUFNLE9BQU8sR0FBRyxRQUFRLENBQUMsdUJBQXVCLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3RFLHNCQUFzQjtRQUN0QixNQUFNLFNBQVMsR0FBRyxDQUFDLEVBQUMsT0FBTyxFQUFFLDhCQUE4QixFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDO1FBQzlFLE1BQU0sUUFBUSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBQyxNQUFNLEVBQUUsU0FBUyxFQUFDLENBQUMsQ0FBQztRQUN0RCxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxPQUFPLEVBQUUsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBRW5FLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUV0QyxPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFFRCxnQkFBZ0IsQ0FBSSxXQUEyQixFQUFFLE9BQVc7UUFDeEQsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLFdBQVcsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUM3RCxDQUFDOzs0SEFqQ2lCLDhCQUE4QixrQkFLcEMsUUFBUSxhQUNSLFVBQVUsYUFDVix3QkFBd0I7Z0hBUGxCLDhCQUE4QiwyR0FDYixnQkFBZ0I7NEZBRGpDLDhCQUE4QjtrQkFEbkQsU0FBUzs7MEJBTUQsTUFBTTsyQkFBQyxRQUFROzswQkFDZixNQUFNOzJCQUFDLFVBQVU7OzBCQUNqQixNQUFNOzJCQUFDLHdCQUF3Qjs0Q0FMbkIsR0FBRztzQkFEbkIsU0FBUzt1QkFBQyxlQUFlLEVBQUUsRUFBQyxJQUFJLEVBQUUsZ0JBQWdCLEVBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcbiAgICBDb21wb25lbnRSZWYsXG4gICAgRGlyZWN0aXZlLFxuICAgIEVsZW1lbnRSZWYsXG4gICAgRW1iZWRkZWRWaWV3UmVmLFxuICAgIEluamVjdCxcbiAgICBJTkpFQ1RPUixcbiAgICBJbmplY3RvcixcbiAgICBUZW1wbGF0ZVJlZixcbiAgICBWaWV3Q2hpbGQsXG4gICAgVmlld0NvbnRhaW5lclJlZixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1BvbHltb3JwaGV1c0NvbXBvbmVudH0gZnJvbSAnQHRpbmtvZmYvbmctcG9seW1vcnBoZXVzJztcblxuaW1wb3J0IHtBYnN0cmFjdFR1aVBvcnRhbFNlcnZpY2V9IGZyb20gJy4vcG9ydGFsLXNlcnZpY2UnO1xuXG4vKipcbiAqIEFic3RyYWN0IGNsYXNzIGZvciBob3N0IGVsZW1lbnQgZm9yIGR5bmFtaWNhbGx5IGNyZWF0ZWQgcG9ydGFscy5cbiAqL1xuQERpcmVjdGl2ZSgpXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQWJzdHJhY3RUdWlQb3J0YWxIb3N0Q29tcG9uZW50IHtcbiAgICBAVmlld0NoaWxkKCd2aWV3Q29udGFpbmVyJywge3JlYWQ6IFZpZXdDb250YWluZXJSZWZ9KVxuICAgIHByaXZhdGUgcmVhZG9ubHkgdmNyITogVmlld0NvbnRhaW5lclJlZjtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KElOSkVDVE9SKSBwcml2YXRlIHJlYWRvbmx5IGluamVjdG9yOiBJbmplY3RvcixcbiAgICAgICAgQEluamVjdChFbGVtZW50UmVmKSBwcm90ZWN0ZWQgcmVhZG9ubHkgZWw6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+LFxuICAgICAgICBASW5qZWN0KEFic3RyYWN0VHVpUG9ydGFsU2VydmljZSkgcG9ydGFsU2VydmljZTogQWJzdHJhY3RUdWlQb3J0YWxTZXJ2aWNlLFxuICAgICkge1xuICAgICAgICBwb3J0YWxTZXJ2aWNlLmF0dGFjaCh0aGlzKTtcbiAgICB9XG5cbiAgICAvKiogQGRlcHJlY2F0ZWQgdW51c2VkLCB3aWxsIGJlIHJlbW92ZWQgaW4gNC4wICoqL1xuICAgIGdldCBjbGllbnRSZWN0KCk6IENsaWVudFJlY3Qge1xuICAgICAgICByZXR1cm4gdGhpcy5lbC5uYXRpdmVFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIH1cblxuICAgIGFkZENvbXBvbmVudENoaWxkPEM+KGNvbXBvbmVudDogUG9seW1vcnBoZXVzQ29tcG9uZW50PEM+KTogQ29tcG9uZW50UmVmPEM+IHtcbiAgICAgICAgY29uc3QgcGFyZW50ID0gY29tcG9uZW50LmNyZWF0ZUluamVjdG9yKHRoaXMuaW5qZWN0b3IpO1xuICAgICAgICBjb25zdCByZXNvbHZlciA9IHBhcmVudC5nZXQoQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyKTtcbiAgICAgICAgY29uc3QgZmFjdG9yeSA9IHJlc29sdmVyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KGNvbXBvbmVudC5jb21wb25lbnQpO1xuICAgICAgICAvLyBUT0RPOiBSZW1vdmUgaW4gNC4wXG4gICAgICAgIGNvbnN0IHByb3ZpZGVycyA9IFt7cHJvdmlkZTogQWJzdHJhY3RUdWlQb3J0YWxIb3N0Q29tcG9uZW50LCB1c2VWYWx1ZTogdGhpc31dO1xuICAgICAgICBjb25zdCBpbmplY3RvciA9IEluamVjdG9yLmNyZWF0ZSh7cGFyZW50LCBwcm92aWRlcnN9KTtcbiAgICAgICAgY29uc3QgcmVmID0gdGhpcy52Y3IuY3JlYXRlQ29tcG9uZW50KGZhY3RvcnksIHVuZGVmaW5lZCwgaW5qZWN0b3IpO1xuXG4gICAgICAgIHJlZi5jaGFuZ2VEZXRlY3RvclJlZi5kZXRlY3RDaGFuZ2VzKCk7XG5cbiAgICAgICAgcmV0dXJuIHJlZjtcbiAgICB9XG5cbiAgICBhZGRUZW1wbGF0ZUNoaWxkPEM+KHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxDPiwgY29udGV4dD86IEMpOiBFbWJlZGRlZFZpZXdSZWY8Qz4ge1xuICAgICAgICByZXR1cm4gdGhpcy52Y3IuY3JlYXRlRW1iZWRkZWRWaWV3KHRlbXBsYXRlUmVmLCBjb250ZXh0KTtcbiAgICB9XG59XG4iXX0=