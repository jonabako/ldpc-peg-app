import { Directive, HostListener, Inject, Input } from '@angular/core';
import { WINDOW } from '@ng-web-apis/common';
import { tuiGetSelectedText } from '@taiga-ui/cdk/utils';
import { identity } from 'rxjs';
import * as i0 from "@angular/core";
export class TuiCopyProcessorDirective {
    constructor(win) {
        this.win = win;
        this.tuiCopyProcessor = identity;
    }
    onCopy(event) {
        var _a;
        const text = tuiGetSelectedText(this.win);
        if (text) {
            (_a = event.clipboardData) === null || _a === void 0 ? void 0 : _a.setData('text/plain', this.tuiCopyProcessor(text));
        }
    }
}
TuiCopyProcessorDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiCopyProcessorDirective, deps: [{ token: WINDOW }], target: i0.ɵɵFactoryTarget.Directive });
TuiCopyProcessorDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiCopyProcessorDirective, selector: "[tuiCopyProcessor]", inputs: { tuiCopyProcessor: "tuiCopyProcessor" }, host: { listeners: { "copy.prevent": "onCopy($event)" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiCopyProcessorDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiCopyProcessor]',
                }]
        }], ctorParameters: function () { return [{ type: Window, decorators: [{
                    type: Inject,
                    args: [WINDOW]
                }] }]; }, propDecorators: { tuiCopyProcessor: [{
                type: Input
            }], onCopy: [{
                type: HostListener,
                args: ['copy.prevent', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29weS1wcm9jZXNzb3IuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY2RrL2RpcmVjdGl2ZXMvY29weS1wcm9jZXNzb3IvY29weS1wcm9jZXNzb3IuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDckUsT0FBTyxFQUFDLE1BQU0sRUFBQyxNQUFNLHFCQUFxQixDQUFDO0FBRTNDLE9BQU8sRUFBQyxrQkFBa0IsRUFBQyxNQUFNLHFCQUFxQixDQUFDO0FBQ3ZELE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxNQUFNLENBQUM7O0FBSzlCLE1BQU0sT0FBTyx5QkFBeUI7SUFJbEMsWUFBNkMsR0FBVztRQUFYLFFBQUcsR0FBSCxHQUFHLENBQVE7UUFGeEQscUJBQWdCLEdBQTZCLFFBQVEsQ0FBQztJQUVLLENBQUM7SUFHNUQsTUFBTSxDQUFDLEtBQXFCOztRQUN4QixNQUFNLElBQUksR0FBRyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFMUMsSUFBSSxJQUFJLEVBQUU7WUFDTixNQUFBLEtBQUssQ0FBQyxhQUFhLDBDQUFFLE9BQU8sQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7U0FDM0U7SUFDTCxDQUFDOzt1SEFiUSx5QkFBeUIsa0JBSWQsTUFBTTsyR0FKakIseUJBQXlCOzRGQUF6Qix5QkFBeUI7a0JBSHJDLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLG9CQUFvQjtpQkFDakM7MERBS3FELE1BQU07MEJBQTNDLE1BQU07MkJBQUMsTUFBTTs0Q0FGMUIsZ0JBQWdCO3NCQURmLEtBQUs7Z0JBTU4sTUFBTTtzQkFETCxZQUFZO3VCQUFDLGNBQWMsRUFBRSxDQUFDLFFBQVEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGlyZWN0aXZlLCBIb3N0TGlzdGVuZXIsIEluamVjdCwgSW5wdXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtXSU5ET1d9IGZyb20gJ0BuZy13ZWItYXBpcy9jb21tb24nO1xuaW1wb3J0IHtUdWlTdHJpbmdIYW5kbGVyfSBmcm9tICdAdGFpZ2EtdWkvY2RrL3R5cGVzJztcbmltcG9ydCB7dHVpR2V0U2VsZWN0ZWRUZXh0fSBmcm9tICdAdGFpZ2EtdWkvY2RrL3V0aWxzJztcbmltcG9ydCB7aWRlbnRpdHl9IGZyb20gJ3J4anMnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1t0dWlDb3B5UHJvY2Vzc29yXScsXG59KVxuZXhwb3J0IGNsYXNzIFR1aUNvcHlQcm9jZXNzb3JEaXJlY3RpdmUge1xuICAgIEBJbnB1dCgpXG4gICAgdHVpQ29weVByb2Nlc3NvcjogVHVpU3RyaW5nSGFuZGxlcjxzdHJpbmc+ID0gaWRlbnRpdHk7XG5cbiAgICBjb25zdHJ1Y3RvcihASW5qZWN0KFdJTkRPVykgcHJpdmF0ZSByZWFkb25seSB3aW46IFdpbmRvdykge31cblxuICAgIEBIb3N0TGlzdGVuZXIoJ2NvcHkucHJldmVudCcsIFsnJGV2ZW50J10pXG4gICAgb25Db3B5KGV2ZW50OiBDbGlwYm9hcmRFdmVudCk6IHZvaWQge1xuICAgICAgICBjb25zdCB0ZXh0ID0gdHVpR2V0U2VsZWN0ZWRUZXh0KHRoaXMud2luKTtcblxuICAgICAgICBpZiAodGV4dCkge1xuICAgICAgICAgICAgZXZlbnQuY2xpcGJvYXJkRGF0YT8uc2V0RGF0YSgndGV4dC9wbGFpbicsIHRoaXMudHVpQ29weVByb2Nlc3Nvcih0ZXh0KSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=