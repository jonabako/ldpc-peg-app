import { Directive, Inject, Input, TemplateRef, ViewContainerRef, } from '@angular/core';
import { from, of, Subject } from 'rxjs';
import { concatMap, delay, takeUntil } from 'rxjs/operators';
import * as i0 from "@angular/core";
/**
 * @deprecated:
 * remove in v4.0
 */
export class TuiForAsyncDirective {
    constructor(view, template) {
        this.view = view;
        this.template = template;
        this.destroy$ = new Subject();
        this.tuiForAsyncTimeout = 10;
    }
    ngOnChanges() {
        this.clearViewForOldNodes();
        this.createAsyncViewForNewNodes();
    }
    ngOnDestroy() {
        this.clearViewForOldNodes();
        this.destroy$.complete();
    }
    createAsyncViewForNewNodes() {
        from(this.iterableValues)
            .pipe(concatMap(entry => this.tuiForAsyncTimeout > 0
            ? of(entry).pipe(delay(this.tuiForAsyncTimeout))
            : of(entry)), takeUntil(this.destroy$))
            .subscribe(([index, item]) => this.createEmbeddedView(item, index));
    }
    get iterableValues() {
        var _a;
        return ((_a = this.tuiForAsyncOf) !== null && _a !== void 0 ? _a : []).entries();
    }
    createEmbeddedView(item, index) {
        this.view
            .createEmbeddedView(this.template, { $implicit: item, index }, index)
            .detectChanges();
    }
    clearViewForOldNodes() {
        this.destroy$.next();
        this.view.clear();
    }
}
TuiForAsyncDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiForAsyncDirective, deps: [{ token: ViewContainerRef }, { token: TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
TuiForAsyncDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiForAsyncDirective, selector: "[tuiForAsync][tuiForAsyncOf]", inputs: { tuiForAsyncOf: "tuiForAsyncOf", tuiForAsyncTimeout: "tuiForAsyncTimeout" }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiForAsyncDirective, decorators: [{
            type: Directive,
            args: [{ selector: '[tuiForAsync][tuiForAsyncOf]' }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef, decorators: [{
                    type: Inject,
                    args: [ViewContainerRef]
                }] }, { type: i0.TemplateRef, decorators: [{
                    type: Inject,
                    args: [TemplateRef]
                }] }]; }, propDecorators: { tuiForAsyncOf: [{
                type: Input
            }], tuiForAsyncTimeout: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9yLWFzeW5jLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2Nkay9kaXJlY3RpdmVzL2Zvci1hc3luYy9mb3ItYXN5bmMuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDSCxTQUFTLEVBQ1QsTUFBTSxFQUNOLEtBQUssRUFHTCxXQUFXLEVBQ1gsZ0JBQWdCLEdBQ25CLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBQyxJQUFJLEVBQUUsRUFBRSxFQUFFLE9BQU8sRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUN2QyxPQUFPLEVBQUMsU0FBUyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFFM0Q7OztHQUdHO0FBRUgsTUFBTSxPQUFPLG9CQUFvQjtJQVc3QixZQUMrQyxJQUFzQixFQUMzQixRQUE4QjtRQUR6QixTQUFJLEdBQUosSUFBSSxDQUFrQjtRQUMzQixhQUFRLEdBQVIsUUFBUSxDQUFzQjtRQVZ2RCxhQUFRLEdBQUcsSUFBSSxPQUFPLEVBQVEsQ0FBQztRQU1oRCx1QkFBa0IsR0FBRyxFQUFFLENBQUM7SUFLckIsQ0FBQztJQUVKLFdBQVc7UUFDUCxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztRQUM1QixJQUFJLENBQUMsMEJBQTBCLEVBQUUsQ0FBQztJQUN0QyxDQUFDO0lBRUQsV0FBVztRQUNQLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO1FBQzVCLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDN0IsQ0FBQztJQUVPLDBCQUEwQjtRQUM5QixJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQzthQUNwQixJQUFJLENBQ0QsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQ2QsSUFBSSxDQUFDLGtCQUFrQixHQUFHLENBQUM7WUFDdkIsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1lBQ2hELENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQ2xCLEVBQ0QsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FDM0I7YUFDQSxTQUFTLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQzVFLENBQUM7SUFFRCxJQUFZLGNBQWM7O1FBQ3RCLE9BQU8sQ0FBQyxNQUFBLElBQUksQ0FBQyxhQUFhLG1DQUFJLEVBQUUsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ2hELENBQUM7SUFFTyxrQkFBa0IsQ0FBSSxJQUFPLEVBQUUsS0FBYTtRQUNoRCxJQUFJLENBQUMsSUFBSTthQUNKLGtCQUFrQixDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBQyxFQUFFLEtBQUssQ0FBQzthQUNsRSxhQUFhLEVBQUUsQ0FBQztJQUN6QixDQUFDO0lBRU8sb0JBQW9CO1FBQ3hCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDckIsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUN0QixDQUFDOztrSEFwRFEsb0JBQW9CLGtCQVlqQixnQkFBZ0IsYUFDaEIsV0FBVztzR0FiZCxvQkFBb0I7NEZBQXBCLG9CQUFvQjtrQkFEaEMsU0FBUzttQkFBQyxFQUFDLFFBQVEsRUFBRSw4QkFBOEIsRUFBQzs7MEJBYTVDLE1BQU07MkJBQUMsZ0JBQWdCOzswQkFDdkIsTUFBTTsyQkFBQyxXQUFXOzRDQVB2QixhQUFhO3NCQURaLEtBQUs7Z0JBSU4sa0JBQWtCO3NCQURqQixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBEaXJlY3RpdmUsXG4gICAgSW5qZWN0LFxuICAgIElucHV0LFxuICAgIE9uQ2hhbmdlcyxcbiAgICBPbkRlc3Ryb3ksXG4gICAgVGVtcGxhdGVSZWYsXG4gICAgVmlld0NvbnRhaW5lclJlZixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge2Zyb20sIG9mLCBTdWJqZWN0fSBmcm9tICdyeGpzJztcbmltcG9ydCB7Y29uY2F0TWFwLCBkZWxheSwgdGFrZVVudGlsfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQ6XG4gKiByZW1vdmUgaW4gdjQuMFxuICovXG5ARGlyZWN0aXZlKHtzZWxlY3RvcjogJ1t0dWlGb3JBc3luY11bdHVpRm9yQXN5bmNPZl0nfSlcbmV4cG9ydCBjbGFzcyBUdWlGb3JBc3luY0RpcmVjdGl2ZTxUIGV4dGVuZHMgcmVhZG9ubHkgYW55W10+XG4gICAgaW1wbGVtZW50cyBPbkNoYW5nZXMsIE9uRGVzdHJveVxue1xuICAgIHByaXZhdGUgcmVhZG9ubHkgZGVzdHJveSQgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuXG4gICAgQElucHV0KClcbiAgICB0dWlGb3JBc3luY09mOiBUIHwgbnVsbCB8IHVuZGVmaW5lZDtcblxuICAgIEBJbnB1dCgpXG4gICAgdHVpRm9yQXN5bmNUaW1lb3V0ID0gMTA7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChWaWV3Q29udGFpbmVyUmVmKSBwcml2YXRlIHJlYWRvbmx5IHZpZXc6IFZpZXdDb250YWluZXJSZWYsXG4gICAgICAgIEBJbmplY3QoVGVtcGxhdGVSZWYpIHByaXZhdGUgcmVhZG9ubHkgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPHVua25vd24+LFxuICAgICkge31cblxuICAgIG5nT25DaGFuZ2VzKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmNsZWFyVmlld0Zvck9sZE5vZGVzKCk7XG4gICAgICAgIHRoaXMuY3JlYXRlQXN5bmNWaWV3Rm9yTmV3Tm9kZXMoKTtcbiAgICB9XG5cbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5jbGVhclZpZXdGb3JPbGROb2RlcygpO1xuICAgICAgICB0aGlzLmRlc3Ryb3kkLmNvbXBsZXRlKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjcmVhdGVBc3luY1ZpZXdGb3JOZXdOb2RlcygpOiB2b2lkIHtcbiAgICAgICAgZnJvbSh0aGlzLml0ZXJhYmxlVmFsdWVzKVxuICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgICAgY29uY2F0TWFwKGVudHJ5ID0+XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudHVpRm9yQXN5bmNUaW1lb3V0ID4gMFxuICAgICAgICAgICAgICAgICAgICAgICAgPyBvZihlbnRyeSkucGlwZShkZWxheSh0aGlzLnR1aUZvckFzeW5jVGltZW91dCkpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IG9mKGVudHJ5KSxcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIHRha2VVbnRpbCh0aGlzLmRlc3Ryb3kkKSxcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoKFtpbmRleCwgaXRlbV0pID0+IHRoaXMuY3JlYXRlRW1iZWRkZWRWaWV3KGl0ZW0sIGluZGV4KSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXQgaXRlcmFibGVWYWx1ZXMoKTogSXRlcmFibGVJdGVyYXRvcjxbbnVtYmVyLCBUXT4ge1xuICAgICAgICByZXR1cm4gKHRoaXMudHVpRm9yQXN5bmNPZiA/PyBbXSkuZW50cmllcygpO1xuICAgIH1cblxuICAgIHByaXZhdGUgY3JlYXRlRW1iZWRkZWRWaWV3PFQ+KGl0ZW06IFQsIGluZGV4OiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgdGhpcy52aWV3XG4gICAgICAgICAgICAuY3JlYXRlRW1iZWRkZWRWaWV3KHRoaXMudGVtcGxhdGUsIHskaW1wbGljaXQ6IGl0ZW0sIGluZGV4fSwgaW5kZXgpXG4gICAgICAgICAgICAuZGV0ZWN0Q2hhbmdlcygpO1xuICAgIH1cblxuICAgIHByaXZhdGUgY2xlYXJWaWV3Rm9yT2xkTm9kZXMoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZGVzdHJveSQubmV4dCgpO1xuICAgICAgICB0aGlzLnZpZXcuY2xlYXIoKTtcbiAgICB9XG59XG4iXX0=