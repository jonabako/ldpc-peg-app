import { Directive, Inject, Input, Optional, Output, Self } from '@angular/core';
import { TuiActiveZoneDirective } from '@taiga-ui/cdk/directives/active-zone';
import { tuiIfMap } from '@taiga-ui/cdk/observables';
import { TuiDestroyService, TuiObscuredService, TuiParentsScrollService, } from '@taiga-ui/cdk/services';
import { Subject } from 'rxjs';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/cdk/directives/active-zone";
import * as i2 from "@taiga-ui/cdk/services";
/**
 * Directive that monitors element visibility
 */
export class TuiObscuredDirective {
    constructor(activeZone, obscured$) {
        this.enabled$ = new Subject();
        const mapped$ = obscured$.pipe(map(obscuredBy => !!obscuredBy &&
            (!activeZone ||
                !obscuredBy.length ||
                obscuredBy.every(element => !activeZone.contains(element)))));
        this.tuiObscured = this.enabled$.pipe(tuiIfMap(() => mapped$));
    }
    set tuiObscuredEnabled(enabled) {
        this.enabled$.next(enabled);
    }
}
TuiObscuredDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiObscuredDirective, deps: [{ token: TuiActiveZoneDirective, optional: true }, { token: TuiObscuredService, self: true }], target: i0.ɵɵFactoryTarget.Directive });
TuiObscuredDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiObscuredDirective, selector: "[tuiObscured]", inputs: { tuiObscuredEnabled: "tuiObscuredEnabled" }, outputs: { tuiObscured: "tuiObscured" }, providers: [TuiObscuredService, TuiParentsScrollService, TuiDestroyService], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiObscuredDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiObscured]',
                    providers: [TuiObscuredService, TuiParentsScrollService, TuiDestroyService],
                }]
        }], ctorParameters: function () { return [{ type: i1.TuiActiveZoneDirective, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TuiActiveZoneDirective]
                }] }, { type: i2.TuiObscuredService, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiObscuredService]
                }] }]; }, propDecorators: { tuiObscuredEnabled: [{
                type: Input
            }], tuiObscured: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2JzY3VyZWQuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY2RrL2RpcmVjdGl2ZXMvb2JzY3VyZWQvb2JzY3VyZWQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUMvRSxPQUFPLEVBQUMsc0JBQXNCLEVBQUMsTUFBTSxzQ0FBc0MsQ0FBQztBQUM1RSxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFDbkQsT0FBTyxFQUNILGlCQUFpQixFQUNqQixrQkFBa0IsRUFDbEIsdUJBQXVCLEdBQzFCLE1BQU0sd0JBQXdCLENBQUM7QUFDaEMsT0FBTyxFQUFhLE9BQU8sRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUN6QyxPQUFPLEVBQUMsR0FBRyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7Ozs7QUFFbkM7O0dBRUc7QUFLSCxNQUFNLE9BQU8sb0JBQW9CO0lBVzdCLFlBR0ksVUFBeUMsRUFHekMsU0FBNkI7UUFoQmhCLGFBQVEsR0FBRyxJQUFJLE9BQU8sRUFBVyxDQUFDO1FBa0IvQyxNQUFNLE9BQU8sR0FBRyxTQUFTLENBQUMsSUFBSSxDQUMxQixHQUFHLENBQ0MsVUFBVSxDQUFDLEVBQUUsQ0FDVCxDQUFDLENBQUMsVUFBVTtZQUNaLENBQUMsQ0FBQyxVQUFVO2dCQUNSLENBQUMsVUFBVSxDQUFDLE1BQU07Z0JBQ2xCLFVBQVUsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUN0RSxDQUNKLENBQUM7UUFFRixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ25FLENBQUM7SUEzQkQsSUFDSSxrQkFBa0IsQ0FBQyxPQUFnQjtRQUNuQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNoQyxDQUFDOztrSEFOUSxvQkFBb0Isa0JBYWpCLHNCQUFzQiw2QkFHdEIsa0JBQWtCO3NHQWhCckIsb0JBQW9CLHVJQUZsQixDQUFDLGtCQUFrQixFQUFFLHVCQUF1QixFQUFFLGlCQUFpQixDQUFDOzRGQUVsRSxvQkFBb0I7a0JBSmhDLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLGVBQWU7b0JBQ3pCLFNBQVMsRUFBRSxDQUFDLGtCQUFrQixFQUFFLHVCQUF1QixFQUFFLGlCQUFpQixDQUFDO2lCQUM5RTs7MEJBYVEsUUFBUTs7MEJBQ1IsTUFBTTsyQkFBQyxzQkFBc0I7OzBCQUU3QixJQUFJOzswQkFDSixNQUFNOzJCQUFDLGtCQUFrQjs0Q0FaMUIsa0JBQWtCO3NCQURyQixLQUFLO2dCQU1HLFdBQVc7c0JBRG5CLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgSW5qZWN0LCBJbnB1dCwgT3B0aW9uYWwsIE91dHB1dCwgU2VsZn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1R1aUFjdGl2ZVpvbmVEaXJlY3RpdmV9IGZyb20gJ0B0YWlnYS11aS9jZGsvZGlyZWN0aXZlcy9hY3RpdmUtem9uZSc7XG5pbXBvcnQge3R1aUlmTWFwfSBmcm9tICdAdGFpZ2EtdWkvY2RrL29ic2VydmFibGVzJztcbmltcG9ydCB7XG4gICAgVHVpRGVzdHJveVNlcnZpY2UsXG4gICAgVHVpT2JzY3VyZWRTZXJ2aWNlLFxuICAgIFR1aVBhcmVudHNTY3JvbGxTZXJ2aWNlLFxufSBmcm9tICdAdGFpZ2EtdWkvY2RrL3NlcnZpY2VzJztcbmltcG9ydCB7T2JzZXJ2YWJsZSwgU3ViamVjdH0gZnJvbSAncnhqcyc7XG5pbXBvcnQge21hcH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG4vKipcbiAqIERpcmVjdGl2ZSB0aGF0IG1vbml0b3JzIGVsZW1lbnQgdmlzaWJpbGl0eVxuICovXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1t0dWlPYnNjdXJlZF0nLFxuICAgIHByb3ZpZGVyczogW1R1aU9ic2N1cmVkU2VydmljZSwgVHVpUGFyZW50c1Njcm9sbFNlcnZpY2UsIFR1aURlc3Ryb3lTZXJ2aWNlXSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpT2JzY3VyZWREaXJlY3RpdmUge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgZW5hYmxlZCQgPSBuZXcgU3ViamVjdDxib29sZWFuPigpO1xuXG4gICAgQElucHV0KClcbiAgICBzZXQgdHVpT2JzY3VyZWRFbmFibGVkKGVuYWJsZWQ6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5lbmFibGVkJC5uZXh0KGVuYWJsZWQpO1xuICAgIH1cblxuICAgIEBPdXRwdXQoKVxuICAgIHJlYWRvbmx5IHR1aU9ic2N1cmVkOiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBPcHRpb25hbCgpXG4gICAgICAgIEBJbmplY3QoVHVpQWN0aXZlWm9uZURpcmVjdGl2ZSlcbiAgICAgICAgYWN0aXZlWm9uZTogVHVpQWN0aXZlWm9uZURpcmVjdGl2ZSB8IG51bGwsXG4gICAgICAgIEBTZWxmKClcbiAgICAgICAgQEluamVjdChUdWlPYnNjdXJlZFNlcnZpY2UpXG4gICAgICAgIG9ic2N1cmVkJDogVHVpT2JzY3VyZWRTZXJ2aWNlLFxuICAgICkge1xuICAgICAgICBjb25zdCBtYXBwZWQkID0gb2JzY3VyZWQkLnBpcGUoXG4gICAgICAgICAgICBtYXAoXG4gICAgICAgICAgICAgICAgb2JzY3VyZWRCeSA9PlxuICAgICAgICAgICAgICAgICAgICAhIW9ic2N1cmVkQnkgJiZcbiAgICAgICAgICAgICAgICAgICAgKCFhY3RpdmVab25lIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAhb2JzY3VyZWRCeS5sZW5ndGggfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9ic2N1cmVkQnkuZXZlcnkoZWxlbWVudCA9PiAhYWN0aXZlWm9uZS5jb250YWlucyhlbGVtZW50KSkpLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLnR1aU9ic2N1cmVkID0gdGhpcy5lbmFibGVkJC5waXBlKHR1aUlmTWFwKCgpID0+IG1hcHBlZCQpKTtcbiAgICB9XG59XG4iXX0=