import { Directive, Inject, Input, Self } from '@angular/core';
import { tuiCoerceBooleanProperty } from '@taiga-ui/cdk/coercion';
import { TuiDestroyService } from '@taiga-ui/cdk/services';
import { timer } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { TUI_AUTOFOCUS_HANDLER, TUI_AUTOFOCUS_OPTIONS, TUI_AUTOFOCUS_PROVIDERS, } from './autofocus.options';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/cdk/services";
export class TuiAutoFocusDirective {
    constructor(handler, options, destroy$) {
        this.handler = handler;
        this.options = options;
        this.destroy$ = destroy$;
        this.autoFocus = true;
    }
    ngAfterViewInit() {
        if (tuiCoerceBooleanProperty(this.autoFocus)) {
            this.focus();
        }
    }
    focus() {
        if (Number.isNaN(this.options.delay)) {
            void Promise.resolve().then(() => this.handler.setFocus());
        }
        else {
            timer(this.options.delay)
                .pipe(takeUntil(this.destroy$))
                .subscribe(() => this.handler.setFocus());
        }
    }
}
TuiAutoFocusDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiAutoFocusDirective, deps: [{ token: TUI_AUTOFOCUS_HANDLER }, { token: TUI_AUTOFOCUS_OPTIONS }, { token: TuiDestroyService, self: true }], target: i0.ɵɵFactoryTarget.Directive });
TuiAutoFocusDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiAutoFocusDirective, selector: "[tuiAutoFocus]", inputs: { autoFocus: ["tuiAutoFocus", "autoFocus"] }, providers: TUI_AUTOFOCUS_PROVIDERS, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiAutoFocusDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiAutoFocus]',
                    providers: TUI_AUTOFOCUS_PROVIDERS,
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_AUTOFOCUS_HANDLER]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_AUTOFOCUS_OPTIONS]
                }] }, { type: i1.TuiDestroyService, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiDestroyService]
                }] }]; }, propDecorators: { autoFocus: [{
                type: Input,
                args: ['tuiAutoFocus']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0b2ZvY3VzLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2Nkay9kaXJlY3RpdmVzL2F1dG8tZm9jdXMvYXV0b2ZvY3VzLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQWdCLFNBQVMsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUM1RSxPQUFPLEVBQUMsd0JBQXdCLEVBQUMsTUFBTSx3QkFBd0IsQ0FBQztBQUNoRSxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSx3QkFBd0IsQ0FBQztBQUN6RCxPQUFPLEVBQUMsS0FBSyxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBQzNCLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUV6QyxPQUFPLEVBQ0gscUJBQXFCLEVBQ3JCLHFCQUFxQixFQUNyQix1QkFBdUIsR0FHMUIsTUFBTSxxQkFBcUIsQ0FBQzs7O0FBTTdCLE1BQU0sT0FBTyxxQkFBcUI7SUFJOUIsWUFFcUIsT0FBNEIsRUFFNUIsT0FBNEIsRUFHNUIsUUFBMkI7UUFMM0IsWUFBTyxHQUFQLE9BQU8sQ0FBcUI7UUFFNUIsWUFBTyxHQUFQLE9BQU8sQ0FBcUI7UUFHNUIsYUFBUSxHQUFSLFFBQVEsQ0FBbUI7UUFUaEQsY0FBUyxHQUFpQixJQUFJLENBQUM7SUFVNUIsQ0FBQztJQUVKLGVBQWU7UUFDWCxJQUFJLHdCQUF3QixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUMxQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7U0FDaEI7SUFDTCxDQUFDO0lBRUQsS0FBSztRQUNELElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ2xDLEtBQUssT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7U0FDOUQ7YUFBTTtZQUNILEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztpQkFDcEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7aUJBQzlCLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7U0FDakQ7SUFDTCxDQUFDOzttSEE1QlEscUJBQXFCLGtCQUtsQixxQkFBcUIsYUFFckIscUJBQXFCLGFBR3JCLGlCQUFpQjt1R0FWcEIscUJBQXFCLCtGQUZuQix1QkFBdUI7NEZBRXpCLHFCQUFxQjtrQkFKakMsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsZ0JBQWdCO29CQUMxQixTQUFTLEVBQUUsdUJBQXVCO2lCQUNyQzs7MEJBTVEsTUFBTTsyQkFBQyxxQkFBcUI7OzBCQUU1QixNQUFNOzJCQUFDLHFCQUFxQjs7MEJBRTVCLElBQUk7OzBCQUNKLE1BQU07MkJBQUMsaUJBQWlCOzRDQVI3QixTQUFTO3NCQURSLEtBQUs7dUJBQUMsY0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QWZ0ZXJWaWV3SW5pdCwgRGlyZWN0aXZlLCBJbmplY3QsIElucHV0LCBTZWxmfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7dHVpQ29lcmNlQm9vbGVhblByb3BlcnR5fSBmcm9tICdAdGFpZ2EtdWkvY2RrL2NvZXJjaW9uJztcbmltcG9ydCB7VHVpRGVzdHJveVNlcnZpY2V9IGZyb20gJ0B0YWlnYS11aS9jZGsvc2VydmljZXMnO1xuaW1wb3J0IHt0aW1lcn0gZnJvbSAncnhqcyc7XG5pbXBvcnQge3Rha2VVbnRpbH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQge1xuICAgIFRVSV9BVVRPRk9DVVNfSEFORExFUixcbiAgICBUVUlfQVVUT0ZPQ1VTX09QVElPTlMsXG4gICAgVFVJX0FVVE9GT0NVU19QUk9WSURFUlMsXG4gICAgVHVpQXV0b2ZvY3VzSGFuZGxlcixcbiAgICBUdWlBdXRvZm9jdXNPcHRpb25zLFxufSBmcm9tICcuL2F1dG9mb2N1cy5vcHRpb25zJztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbdHVpQXV0b0ZvY3VzXScsXG4gICAgcHJvdmlkZXJzOiBUVUlfQVVUT0ZPQ1VTX1BST1ZJREVSUyxcbn0pXG5leHBvcnQgY2xhc3MgVHVpQXV0b0ZvY3VzRGlyZWN0aXZlIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XG4gICAgQElucHV0KCd0dWlBdXRvRm9jdXMnKVxuICAgIGF1dG9Gb2N1czogYm9vbGVhbiB8ICcnID0gdHJ1ZTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KFRVSV9BVVRPRk9DVVNfSEFORExFUilcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBoYW5kbGVyOiBUdWlBdXRvZm9jdXNIYW5kbGVyLFxuICAgICAgICBASW5qZWN0KFRVSV9BVVRPRk9DVVNfT1BUSU9OUylcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBvcHRpb25zOiBUdWlBdXRvZm9jdXNPcHRpb25zLFxuICAgICAgICBAU2VsZigpXG4gICAgICAgIEBJbmplY3QoVHVpRGVzdHJveVNlcnZpY2UpXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgZGVzdHJveSQ6IFR1aURlc3Ryb3lTZXJ2aWNlLFxuICAgICkge31cblxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcbiAgICAgICAgaWYgKHR1aUNvZXJjZUJvb2xlYW5Qcm9wZXJ0eSh0aGlzLmF1dG9Gb2N1cykpIHtcbiAgICAgICAgICAgIHRoaXMuZm9jdXMoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZvY3VzKCk6IHZvaWQge1xuICAgICAgICBpZiAoTnVtYmVyLmlzTmFOKHRoaXMub3B0aW9ucy5kZWxheSkpIHtcbiAgICAgICAgICAgIHZvaWQgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiB0aGlzLmhhbmRsZXIuc2V0Rm9jdXMoKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aW1lcih0aGlzLm9wdGlvbnMuZGVsYXkpXG4gICAgICAgICAgICAgICAgLnBpcGUodGFrZVVudGlsKHRoaXMuZGVzdHJveSQpKVxuICAgICAgICAgICAgICAgIC5zdWJzY3JpYmUoKCkgPT4gdGhpcy5oYW5kbGVyLnNldEZvY3VzKCkpO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19