import { ElementRef, InjectionToken, NgZone, Optional, Renderer2, Self, } from '@angular/core';
import { ANIMATION_FRAME, WINDOW } from '@ng-web-apis/common';
import { TuiDestroyService } from '@taiga-ui/cdk/services';
import { TUI_FOCUSABLE_ITEM_ACCESSOR, TUI_IS_IOS } from '@taiga-ui/cdk/tokens';
import { tuiCreateToken, tuiProvideOptions } from '@taiga-ui/cdk/utils/miscellaneous';
import { TuiDefaultAutofocusHandler } from './handlers/default.handler';
import { TuiIosAutofocusHandler } from './handlers/ios.handler';
export const TUI_AUTOFOCUS_DEFAULT_OPTIONS = {
    delay: NaN, // NaN = no delay/sync
};
export const TUI_AUTOFOCUS_OPTIONS = tuiCreateToken(TUI_AUTOFOCUS_DEFAULT_OPTIONS);
export function tuiAutoFocusOptionsProvider(options) {
    return tuiProvideOptions(TUI_AUTOFOCUS_OPTIONS, options, TUI_AUTOFOCUS_DEFAULT_OPTIONS);
}
export const TUI_AUTOFOCUS_HANDLER = new InjectionToken('[TUI_AUTOFOCUS_HANDLER]');
export const TUI_AUTOFOCUS_PROVIDERS = [
    {
        provide: TUI_AUTOFOCUS_HANDLER,
        useFactory: (focusable, el, animationFrame$, renderer, zone, win, isIos) => isIos
            ? new TuiIosAutofocusHandler(focusable, el, renderer, zone, win)
            : new TuiDefaultAutofocusHandler(focusable, el, animationFrame$),
        deps: [
            [new Optional(), new Self(), TUI_FOCUSABLE_ITEM_ACCESSOR],
            ElementRef,
            ANIMATION_FRAME,
            Renderer2,
            NgZone,
            WINDOW,
            TUI_IS_IOS,
        ],
    },
    TuiDestroyService,
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0b2ZvY3VzLm9wdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jZGsvZGlyZWN0aXZlcy9hdXRvLWZvY3VzL2F1dG9mb2N1cy5vcHRpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDSCxVQUFVLEVBQ1YsY0FBYyxFQUNkLE1BQU0sRUFDTixRQUFRLEVBRVIsU0FBUyxFQUNULElBQUksR0FDUCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUMsZUFBZSxFQUFFLE1BQU0sRUFBQyxNQUFNLHFCQUFxQixDQUFDO0FBRTVELE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLHdCQUF3QixDQUFDO0FBQ3pELE9BQU8sRUFBQywyQkFBMkIsRUFBRSxVQUFVLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUM3RSxPQUFPLEVBQUMsY0FBYyxFQUFFLGlCQUFpQixFQUFDLE1BQU0sbUNBQW1DLENBQUM7QUFHcEYsT0FBTyxFQUFDLDBCQUEwQixFQUFDLE1BQU0sNEJBQTRCLENBQUM7QUFDdEUsT0FBTyxFQUFDLHNCQUFzQixFQUFDLE1BQU0sd0JBQXdCLENBQUM7QUFVOUQsTUFBTSxDQUFDLE1BQU0sNkJBQTZCLEdBQXdCO0lBQzlELEtBQUssRUFBRSxHQUFHLEVBQUUsc0JBQXNCO0NBQ3JDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRyxjQUFjLENBQUMsNkJBQTZCLENBQUMsQ0FBQztBQUVuRixNQUFNLFVBQVUsMkJBQTJCLENBQ3ZDLE9BQXFDO0lBRXJDLE9BQU8saUJBQWlCLENBQ3BCLHFCQUFxQixFQUNyQixPQUFPLEVBQ1AsNkJBQTZCLENBQ2hDLENBQUM7QUFDTixDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0scUJBQXFCLEdBQUcsSUFBSSxjQUFjLENBQ25ELHlCQUF5QixDQUM1QixDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUc7SUFDbkM7UUFDSSxPQUFPLEVBQUUscUJBQXFCO1FBQzlCLFVBQVUsRUFBRSxDQUNSLFNBQTZDLEVBQzdDLEVBQTJCLEVBQzNCLGVBQW1DLEVBQ25DLFFBQW1CLEVBQ25CLElBQVksRUFDWixHQUFXLEVBQ1gsS0FBYyxFQUNoQixFQUFFLENBQ0EsS0FBSztZQUNELENBQUMsQ0FBQyxJQUFJLHNCQUFzQixDQUFDLFNBQVMsRUFBRSxFQUFFLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxHQUFHLENBQUM7WUFDaEUsQ0FBQyxDQUFDLElBQUksMEJBQTBCLENBQUMsU0FBUyxFQUFFLEVBQUUsRUFBRSxlQUFlLENBQUM7UUFDeEUsSUFBSSxFQUFFO1lBQ0YsQ0FBQyxJQUFJLFFBQVEsRUFBRSxFQUFFLElBQUksSUFBSSxFQUFFLEVBQUUsMkJBQTJCLENBQUM7WUFDekQsVUFBVTtZQUNWLGVBQWU7WUFDZixTQUFTO1lBQ1QsTUFBTTtZQUNOLE1BQU07WUFDTixVQUFVO1NBQ2I7S0FDSjtJQUNELGlCQUFpQjtDQUNwQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBFbGVtZW50UmVmLFxuICAgIEluamVjdGlvblRva2VuLFxuICAgIE5nWm9uZSxcbiAgICBPcHRpb25hbCxcbiAgICBQcm92aWRlcixcbiAgICBSZW5kZXJlcjIsXG4gICAgU2VsZixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0FOSU1BVElPTl9GUkFNRSwgV0lORE9XfSBmcm9tICdAbmctd2ViLWFwaXMvY29tbW9uJztcbmltcG9ydCB7VHVpRm9jdXNhYmxlRWxlbWVudEFjY2Vzc29yfSBmcm9tICdAdGFpZ2EtdWkvY2RrL2ludGVyZmFjZXMnO1xuaW1wb3J0IHtUdWlEZXN0cm95U2VydmljZX0gZnJvbSAnQHRhaWdhLXVpL2Nkay9zZXJ2aWNlcyc7XG5pbXBvcnQge1RVSV9GT0NVU0FCTEVfSVRFTV9BQ0NFU1NPUiwgVFVJX0lTX0lPU30gZnJvbSAnQHRhaWdhLXVpL2Nkay90b2tlbnMnO1xuaW1wb3J0IHt0dWlDcmVhdGVUb2tlbiwgdHVpUHJvdmlkZU9wdGlvbnN9IGZyb20gJ0B0YWlnYS11aS9jZGsvdXRpbHMvbWlzY2VsbGFuZW91cyc7XG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQge1R1aURlZmF1bHRBdXRvZm9jdXNIYW5kbGVyfSBmcm9tICcuL2hhbmRsZXJzL2RlZmF1bHQuaGFuZGxlcic7XG5pbXBvcnQge1R1aUlvc0F1dG9mb2N1c0hhbmRsZXJ9IGZyb20gJy4vaGFuZGxlcnMvaW9zLmhhbmRsZXInO1xuXG5leHBvcnQgaW50ZXJmYWNlIFR1aUF1dG9mb2N1c0hhbmRsZXIge1xuICAgIHNldEZvY3VzKCk6IHZvaWQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVHVpQXV0b2ZvY3VzT3B0aW9ucyB7XG4gICAgcmVhZG9ubHkgZGVsYXk6IG51bWJlcjtcbn1cblxuZXhwb3J0IGNvbnN0IFRVSV9BVVRPRk9DVVNfREVGQVVMVF9PUFRJT05TOiBUdWlBdXRvZm9jdXNPcHRpb25zID0ge1xuICAgIGRlbGF5OiBOYU4sIC8vIE5hTiA9IG5vIGRlbGF5L3N5bmNcbn07XG5cbmV4cG9ydCBjb25zdCBUVUlfQVVUT0ZPQ1VTX09QVElPTlMgPSB0dWlDcmVhdGVUb2tlbihUVUlfQVVUT0ZPQ1VTX0RFRkFVTFRfT1BUSU9OUyk7XG5cbmV4cG9ydCBmdW5jdGlvbiB0dWlBdXRvRm9jdXNPcHRpb25zUHJvdmlkZXIoXG4gICAgb3B0aW9uczogUGFydGlhbDxUdWlBdXRvZm9jdXNPcHRpb25zPixcbik6IFByb3ZpZGVyIHtcbiAgICByZXR1cm4gdHVpUHJvdmlkZU9wdGlvbnMoXG4gICAgICAgIFRVSV9BVVRPRk9DVVNfT1BUSU9OUyxcbiAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgVFVJX0FVVE9GT0NVU19ERUZBVUxUX09QVElPTlMsXG4gICAgKTtcbn1cblxuZXhwb3J0IGNvbnN0IFRVSV9BVVRPRk9DVVNfSEFORExFUiA9IG5ldyBJbmplY3Rpb25Ub2tlbjxUdWlBdXRvZm9jdXNIYW5kbGVyPihcbiAgICAnW1RVSV9BVVRPRk9DVVNfSEFORExFUl0nLFxuKTtcblxuZXhwb3J0IGNvbnN0IFRVSV9BVVRPRk9DVVNfUFJPVklERVJTID0gW1xuICAgIHtcbiAgICAgICAgcHJvdmlkZTogVFVJX0FVVE9GT0NVU19IQU5ETEVSLFxuICAgICAgICB1c2VGYWN0b3J5OiAoXG4gICAgICAgICAgICBmb2N1c2FibGU6IFR1aUZvY3VzYWJsZUVsZW1lbnRBY2Nlc3NvciB8IG51bGwsXG4gICAgICAgICAgICBlbDogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4sXG4gICAgICAgICAgICBhbmltYXRpb25GcmFtZSQ6IE9ic2VydmFibGU8bnVtYmVyPixcbiAgICAgICAgICAgIHJlbmRlcmVyOiBSZW5kZXJlcjIsXG4gICAgICAgICAgICB6b25lOiBOZ1pvbmUsXG4gICAgICAgICAgICB3aW46IFdpbmRvdyxcbiAgICAgICAgICAgIGlzSW9zOiBib29sZWFuLFxuICAgICAgICApID0+XG4gICAgICAgICAgICBpc0lvc1xuICAgICAgICAgICAgICAgID8gbmV3IFR1aUlvc0F1dG9mb2N1c0hhbmRsZXIoZm9jdXNhYmxlLCBlbCwgcmVuZGVyZXIsIHpvbmUsIHdpbilcbiAgICAgICAgICAgICAgICA6IG5ldyBUdWlEZWZhdWx0QXV0b2ZvY3VzSGFuZGxlcihmb2N1c2FibGUsIGVsLCBhbmltYXRpb25GcmFtZSQpLFxuICAgICAgICBkZXBzOiBbXG4gICAgICAgICAgICBbbmV3IE9wdGlvbmFsKCksIG5ldyBTZWxmKCksIFRVSV9GT0NVU0FCTEVfSVRFTV9BQ0NFU1NPUl0sXG4gICAgICAgICAgICBFbGVtZW50UmVmLFxuICAgICAgICAgICAgQU5JTUFUSU9OX0ZSQU1FLFxuICAgICAgICAgICAgUmVuZGVyZXIyLFxuICAgICAgICAgICAgTmdab25lLFxuICAgICAgICAgICAgV0lORE9XLFxuICAgICAgICAgICAgVFVJX0lTX0lPUyxcbiAgICAgICAgXSxcbiAgICB9LFxuICAgIFR1aURlc3Ryb3lTZXJ2aWNlLFxuXTtcbiJdfQ==