import { Directive, Inject, Input, TemplateRef, ViewContainerRef } from '@angular/core';
import { tuiClamp } from '@taiga-ui/cdk/utils/math';
import * as i0 from "@angular/core";
const MAX_VALUE = 0x10000;
export class TuiRepeatTimesContext {
    constructor($implicit) {
        this.$implicit = $implicit;
    }
}
/**
 * Directive similar to ngFor but using a number of repetitions rather than an array
 *
 * {@link TuiRepeatTimesDirective.tuiRepeatTimesOf requested number of times}.
 * {@link TuiRepeatTimesContext context} for every instance of the template inherits outer context and stores
 * {@link TuiRepeatTimesContext.$implicit index} of a template instance.
 */
export class TuiRepeatTimesDirective {
    constructor(viewContainer, templateRef) {
        this.viewContainer = viewContainer;
        this.templateRef = templateRef;
    }
    set tuiRepeatTimesOf(count) {
        const safeCount = Math.floor(tuiClamp(count, 0, MAX_VALUE));
        const { length } = this.viewContainer;
        if (count < length) {
            this.removeContainers(length - count);
        }
        else {
            this.addContainers(safeCount);
        }
    }
    addContainers(count) {
        for (let index = this.viewContainer.length; index < count; index++) {
            this.viewContainer.createEmbeddedView(this.templateRef, new TuiRepeatTimesContext(index));
        }
    }
    removeContainers(amount) {
        for (let index = 0; index < amount; index++) {
            this.viewContainer.remove();
        }
    }
}
TuiRepeatTimesDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiRepeatTimesDirective, deps: [{ token: ViewContainerRef }, { token: TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
TuiRepeatTimesDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiRepeatTimesDirective, selector: "[tuiRepeatTimes][tuiRepeatTimesOf]", inputs: { tuiRepeatTimesOf: "tuiRepeatTimesOf" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiRepeatTimesDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiRepeatTimes][tuiRepeatTimesOf]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef, decorators: [{
                    type: Inject,
                    args: [ViewContainerRef]
                }] }, { type: i0.TemplateRef, decorators: [{
                    type: Inject,
                    args: [TemplateRef]
                }] }]; }, propDecorators: { tuiRepeatTimesOf: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwZWF0LXRpbWVzLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2Nkay9kaXJlY3RpdmVzL3JlcGVhdC10aW1lcy9yZXBlYXQtdGltZXMuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsZ0JBQWdCLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFdEYsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLDBCQUEwQixDQUFDOztBQUVsRCxNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUM7QUFFMUIsTUFBTSxPQUFPLHFCQUFxQjtJQUM5QixZQUFxQixTQUFpQjtRQUFqQixjQUFTLEdBQVQsU0FBUyxDQUFRO0lBQUcsQ0FBQztDQUM3QztBQUVEOzs7Ozs7R0FNRztBQUlILE1BQU0sT0FBTyx1QkFBdUI7SUFjaEMsWUFFcUIsYUFBK0IsRUFFL0IsV0FBK0M7UUFGL0Msa0JBQWEsR0FBYixhQUFhLENBQWtCO1FBRS9CLGdCQUFXLEdBQVgsV0FBVyxDQUFvQztJQUNqRSxDQUFDO0lBbEJKLElBQ0ksZ0JBQWdCLENBQUMsS0FBYTtRQUM5QixNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFFNUQsTUFBTSxFQUFDLE1BQU0sRUFBQyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUM7UUFFcEMsSUFBSSxLQUFLLEdBQUcsTUFBTSxFQUFFO1lBQ2hCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDLENBQUM7U0FDekM7YUFBTTtZQUNILElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDakM7SUFDTCxDQUFDO0lBU08sYUFBYSxDQUFDLEtBQWE7UUFDL0IsS0FBSyxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxLQUFLLEdBQUcsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUFFO1lBQ2hFLElBQUksQ0FBQyxhQUFhLENBQUMsa0JBQWtCLENBQ2pDLElBQUksQ0FBQyxXQUFXLEVBQ2hCLElBQUkscUJBQXFCLENBQUMsS0FBSyxDQUFDLENBQ25DLENBQUM7U0FDTDtJQUNMLENBQUM7SUFFTyxnQkFBZ0IsQ0FBQyxNQUFjO1FBQ25DLEtBQUssSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFLEtBQUssR0FBRyxNQUFNLEVBQUUsS0FBSyxFQUFFLEVBQUU7WUFDekMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsQ0FBQztTQUMvQjtJQUNMLENBQUM7O3FIQWxDUSx1QkFBdUIsa0JBZXBCLGdCQUFnQixhQUVoQixXQUFXO3lHQWpCZCx1QkFBdUI7NEZBQXZCLHVCQUF1QjtrQkFIbkMsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsb0NBQW9DO2lCQUNqRDs7MEJBZ0JRLE1BQU07MkJBQUMsZ0JBQWdCOzswQkFFdkIsTUFBTTsyQkFBQyxXQUFXOzRDQWZuQixnQkFBZ0I7c0JBRG5CLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgSW5qZWN0LCBJbnB1dCwgVGVtcGxhdGVSZWYsIFZpZXdDb250YWluZXJSZWZ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtUdWlDb250ZXh0V2l0aEltcGxpY2l0fSBmcm9tICdAdGFpZ2EtdWkvY2RrL2ludGVyZmFjZXMnO1xuaW1wb3J0IHt0dWlDbGFtcH0gZnJvbSAnQHRhaWdhLXVpL2Nkay91dGlscy9tYXRoJztcblxuY29uc3QgTUFYX1ZBTFVFID0gMHgxMDAwMDtcblxuZXhwb3J0IGNsYXNzIFR1aVJlcGVhdFRpbWVzQ29udGV4dCBpbXBsZW1lbnRzIFR1aUNvbnRleHRXaXRoSW1wbGljaXQ8bnVtYmVyPiB7XG4gICAgY29uc3RydWN0b3IocmVhZG9ubHkgJGltcGxpY2l0OiBudW1iZXIpIHt9XG59XG5cbi8qKlxuICogRGlyZWN0aXZlIHNpbWlsYXIgdG8gbmdGb3IgYnV0IHVzaW5nIGEgbnVtYmVyIG9mIHJlcGV0aXRpb25zIHJhdGhlciB0aGFuIGFuIGFycmF5XG4gKlxuICoge0BsaW5rIFR1aVJlcGVhdFRpbWVzRGlyZWN0aXZlLnR1aVJlcGVhdFRpbWVzT2YgcmVxdWVzdGVkIG51bWJlciBvZiB0aW1lc30uXG4gKiB7QGxpbmsgVHVpUmVwZWF0VGltZXNDb250ZXh0IGNvbnRleHR9IGZvciBldmVyeSBpbnN0YW5jZSBvZiB0aGUgdGVtcGxhdGUgaW5oZXJpdHMgb3V0ZXIgY29udGV4dCBhbmQgc3RvcmVzXG4gKiB7QGxpbmsgVHVpUmVwZWF0VGltZXNDb250ZXh0LiRpbXBsaWNpdCBpbmRleH0gb2YgYSB0ZW1wbGF0ZSBpbnN0YW5jZS5cbiAqL1xuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbdHVpUmVwZWF0VGltZXNdW3R1aVJlcGVhdFRpbWVzT2ZdJyxcbn0pXG5leHBvcnQgY2xhc3MgVHVpUmVwZWF0VGltZXNEaXJlY3RpdmUge1xuICAgIEBJbnB1dCgpXG4gICAgc2V0IHR1aVJlcGVhdFRpbWVzT2YoY291bnQ6IG51bWJlcikge1xuICAgICAgICBjb25zdCBzYWZlQ291bnQgPSBNYXRoLmZsb29yKHR1aUNsYW1wKGNvdW50LCAwLCBNQVhfVkFMVUUpKTtcblxuICAgICAgICBjb25zdCB7bGVuZ3RofSA9IHRoaXMudmlld0NvbnRhaW5lcjtcblxuICAgICAgICBpZiAoY291bnQgPCBsZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlQ29udGFpbmVycyhsZW5ndGggLSBjb3VudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmFkZENvbnRhaW5lcnMoc2FmZUNvdW50KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KFZpZXdDb250YWluZXJSZWYpXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgdmlld0NvbnRhaW5lcjogVmlld0NvbnRhaW5lclJlZixcbiAgICAgICAgQEluamVjdChUZW1wbGF0ZVJlZilcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8VHVpUmVwZWF0VGltZXNDb250ZXh0PixcbiAgICApIHt9XG5cbiAgICBwcml2YXRlIGFkZENvbnRhaW5lcnMoY291bnQ6IG51bWJlcik6IHZvaWQge1xuICAgICAgICBmb3IgKGxldCBpbmRleCA9IHRoaXMudmlld0NvbnRhaW5lci5sZW5ndGg7IGluZGV4IDwgY291bnQ7IGluZGV4KyspIHtcbiAgICAgICAgICAgIHRoaXMudmlld0NvbnRhaW5lci5jcmVhdGVFbWJlZGRlZFZpZXc8VHVpUmVwZWF0VGltZXNDb250ZXh0PihcbiAgICAgICAgICAgICAgICB0aGlzLnRlbXBsYXRlUmVmLFxuICAgICAgICAgICAgICAgIG5ldyBUdWlSZXBlYXRUaW1lc0NvbnRleHQoaW5kZXgpLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgcmVtb3ZlQ29udGFpbmVycyhhbW91bnQ6IG51bWJlcik6IHZvaWQge1xuICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgYW1vdW50OyBpbmRleCsrKSB7XG4gICAgICAgICAgICB0aGlzLnZpZXdDb250YWluZXIucmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=