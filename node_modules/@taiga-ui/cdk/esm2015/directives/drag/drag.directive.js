import { Directive, ElementRef, Inject, Output } from '@angular/core';
import { tuiDragAndDropFrom, TuiDragStage } from '@taiga-ui/cdk/observables';
import { filter, map } from 'rxjs/operators';
import * as i0 from "@angular/core";
/**
 * @deprecated not used anywhere
 */
export class TuiDragDirective {
    constructor(el) {
        this.el = el;
        this.dragAndDropFrom$ = tuiDragAndDropFrom(this.el.nativeElement);
        this.start = this.dragAndDropFrom$.pipe(filter(({ stage }) => stage === TuiDragStage.Start), map(({ event }) => event));
        this.continues = this.dragAndDropFrom$.pipe(filter(({ stage }) => stage === TuiDragStage.Continues), map(({ event }) => event));
        this.end = this.dragAndDropFrom$.pipe(filter(({ stage }) => stage === TuiDragStage.End), map(({ event }) => event));
    }
}
TuiDragDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDragDirective, deps: [{ token: ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
TuiDragDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiDragDirective, selector: "[tuiDragStart], [tuiDragContinues], [tuiDragEnd]", outputs: { start: "tuiDragStart", continues: "tuiDragContinues", end: "tuiDragEnd" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDragDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiDragStart], [tuiDragContinues], [tuiDragEnd]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }]; }, propDecorators: { start: [{
                type: Output,
                args: ['tuiDragStart']
            }], continues: [{
                type: Output,
                args: ['tuiDragContinues']
            }], end: [{
                type: Output,
                args: ['tuiDragEnd']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhZy5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jZGsvZGlyZWN0aXZlcy9kcmFnL2RyYWcuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDcEUsT0FBTyxFQUFDLGtCQUFrQixFQUFFLFlBQVksRUFBQyxNQUFNLDJCQUEyQixDQUFDO0FBRTNFLE9BQU8sRUFBQyxNQUFNLEVBQUUsR0FBRyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7O0FBRTNDOztHQUVHO0FBSUgsTUFBTSxPQUFPLGdCQUFnQjtJQXVCekIsWUFBaUQsRUFBdUI7UUFBdkIsT0FBRSxHQUFGLEVBQUUsQ0FBcUI7UUF0QnZELHFCQUFnQixHQUFHLGtCQUFrQixDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUM7UUFJckUsVUFBSyxHQUEyQixJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUMvRCxNQUFNLENBQUMsQ0FBQyxFQUFDLEtBQUssRUFBQyxFQUFFLEVBQUUsQ0FBQyxLQUFLLEtBQUssWUFBWSxDQUFDLEtBQUssQ0FBQyxFQUNqRCxHQUFHLENBQUMsQ0FBQyxFQUFDLEtBQUssRUFBQyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FDMUIsQ0FBQztRQUdPLGNBQVMsR0FBMkIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FDbkUsTUFBTSxDQUFDLENBQUMsRUFBQyxLQUFLLEVBQUMsRUFBRSxFQUFFLENBQUMsS0FBSyxLQUFLLFlBQVksQ0FBQyxTQUFTLENBQUMsRUFDckQsR0FBRyxDQUFDLENBQUMsRUFBQyxLQUFLLEVBQUMsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQzFCLENBQUM7UUFJTyxRQUFHLEdBQTJCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQzdELE1BQU0sQ0FBQyxDQUFDLEVBQUMsS0FBSyxFQUFDLEVBQUUsRUFBRSxDQUFDLEtBQUssS0FBSyxZQUFZLENBQUMsR0FBRyxDQUFDLEVBQy9DLEdBQUcsQ0FBQyxDQUFDLEVBQUMsS0FBSyxFQUFDLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUMxQixDQUFDO0lBRXlFLENBQUM7OzhHQXZCbkUsZ0JBQWdCLGtCQXVCTCxVQUFVO2tHQXZCckIsZ0JBQWdCOzRGQUFoQixnQkFBZ0I7a0JBSDVCLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLGtEQUFrRDtpQkFDL0Q7OzBCQXdCZ0IsTUFBTTsyQkFBQyxVQUFVOzRDQWxCckIsS0FBSztzQkFGYixNQUFNO3VCQUFDLGNBQWM7Z0JBUWIsU0FBUztzQkFEakIsTUFBTTt1QkFBQyxrQkFBa0I7Z0JBUWpCLEdBQUc7c0JBRlgsTUFBTTt1QkFBQyxZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEluamVjdCwgT3V0cHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7dHVpRHJhZ0FuZERyb3BGcm9tLCBUdWlEcmFnU3RhZ2V9IGZyb20gJ0B0YWlnYS11aS9jZGsvb2JzZXJ2YWJsZXMnO1xuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcbmltcG9ydCB7ZmlsdGVyLCBtYXB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuLyoqXG4gKiBAZGVwcmVjYXRlZCBub3QgdXNlZCBhbnl3aGVyZVxuICovXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1t0dWlEcmFnU3RhcnRdLCBbdHVpRHJhZ0NvbnRpbnVlc10sIFt0dWlEcmFnRW5kXScsXG59KVxuZXhwb3J0IGNsYXNzIFR1aURyYWdEaXJlY3RpdmUge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgZHJhZ0FuZERyb3BGcm9tJCA9IHR1aURyYWdBbmREcm9wRnJvbSh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQpO1xuXG4gICAgQE91dHB1dCgndHVpRHJhZ1N0YXJ0JylcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQGFuZ3VsYXItZXNsaW50L25vLW91dHB1dC1uYXRpdmVcbiAgICByZWFkb25seSBzdGFydDogT2JzZXJ2YWJsZTxNb3VzZUV2ZW50PiA9IHRoaXMuZHJhZ0FuZERyb3BGcm9tJC5waXBlKFxuICAgICAgICBmaWx0ZXIoKHtzdGFnZX0pID0+IHN0YWdlID09PSBUdWlEcmFnU3RhZ2UuU3RhcnQpLFxuICAgICAgICBtYXAoKHtldmVudH0pID0+IGV2ZW50KSxcbiAgICApO1xuXG4gICAgQE91dHB1dCgndHVpRHJhZ0NvbnRpbnVlcycpXG4gICAgcmVhZG9ubHkgY29udGludWVzOiBPYnNlcnZhYmxlPE1vdXNlRXZlbnQ+ID0gdGhpcy5kcmFnQW5kRHJvcEZyb20kLnBpcGUoXG4gICAgICAgIGZpbHRlcigoe3N0YWdlfSkgPT4gc3RhZ2UgPT09IFR1aURyYWdTdGFnZS5Db250aW51ZXMpLFxuICAgICAgICBtYXAoKHtldmVudH0pID0+IGV2ZW50KSxcbiAgICApO1xuXG4gICAgQE91dHB1dCgndHVpRHJhZ0VuZCcpXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEBhbmd1bGFyLWVzbGludC9uby1vdXRwdXQtbmF0aXZlXG4gICAgcmVhZG9ubHkgZW5kOiBPYnNlcnZhYmxlPE1vdXNlRXZlbnQ+ID0gdGhpcy5kcmFnQW5kRHJvcEZyb20kLnBpcGUoXG4gICAgICAgIGZpbHRlcigoe3N0YWdlfSkgPT4gc3RhZ2UgPT09IFR1aURyYWdTdGFnZS5FbmQpLFxuICAgICAgICBtYXAoKHtldmVudH0pID0+IGV2ZW50KSxcbiAgICApO1xuXG4gICAgY29uc3RydWN0b3IoQEluamVjdChFbGVtZW50UmVmKSBwcml2YXRlIHJlYWRvbmx5IGVsOiBFbGVtZW50UmVmPEVsZW1lbnQ+KSB7fVxufVxuIl19