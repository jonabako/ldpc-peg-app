import { Directive, ElementRef, Inject } from '@angular/core';
import * as i0 from "@angular/core";
export class TuiElementDirective {
    constructor({ nativeElement }) {
        /**
         * @note:
         * Typically, when your constructor is invoked with new,
         * an object is created, its constructor is assigned to
         * the invoked constructor and the object is then assigned
         * to this before executing any operations specified
         * in your constructor method.
         *
         * ERROR TypeError: Class constructor ElementRef cannot be invoked without 'new'
         * https://github.com/taiga-family/taiga-ui/issues/3072
         *
         * This way we can instantiate object creation
         * without additional prototype chain for possible fix bug.
         */
        return new ElementRef(nativeElement);
    }
}
TuiElementDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiElementDirective, deps: [{ token: ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
TuiElementDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiElementDirective, selector: "[tuiElement]", exportAs: ["elementRef"], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiElementDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiElement]',
                    exportAs: 'elementRef',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWxlbWVudC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jZGsvZGlyZWN0aXZlcy9lbGVtZW50L2VsZW1lbnQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBQyxNQUFNLGVBQWUsQ0FBQzs7QUFNNUQsTUFBTSxPQUFPLG1CQUFtQjtJQUs1QixZQUFnQyxFQUFDLGFBQWEsRUFBZ0I7UUFDMUQ7Ozs7Ozs7Ozs7Ozs7V0FhRztRQUNILE9BQU8sSUFBSSxVQUFVLENBQUksYUFBYSxDQUFDLENBQUM7SUFDNUMsQ0FBQzs7aUhBckJRLG1CQUFtQixrQkFLUixVQUFVO3FHQUxyQixtQkFBbUI7NEZBQW5CLG1CQUFtQjtrQkFKL0IsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsY0FBYztvQkFDeEIsUUFBUSxFQUFFLFlBQVk7aUJBQ3pCOzswQkFNZ0IsTUFBTTsyQkFBQyxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEluamVjdH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW3R1aUVsZW1lbnRdJyxcbiAgICBleHBvcnRBczogJ2VsZW1lbnRSZWYnLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlFbGVtZW50RGlyZWN0aXZlPFQgZXh0ZW5kcyBFbGVtZW50ID0gSFRNTEVsZW1lbnQ+XG4gICAgaW1wbGVtZW50cyBFbGVtZW50UmVmPFQ+XG57XG4gICAgbmF0aXZlRWxlbWVudCE6IFQ7XG5cbiAgICBjb25zdHJ1Y3RvcihASW5qZWN0KEVsZW1lbnRSZWYpIHtuYXRpdmVFbGVtZW50fTogRWxlbWVudFJlZjxUPikge1xuICAgICAgICAvKipcbiAgICAgICAgICogQG5vdGU6XG4gICAgICAgICAqIFR5cGljYWxseSwgd2hlbiB5b3VyIGNvbnN0cnVjdG9yIGlzIGludm9rZWQgd2l0aCBuZXcsXG4gICAgICAgICAqIGFuIG9iamVjdCBpcyBjcmVhdGVkLCBpdHMgY29uc3RydWN0b3IgaXMgYXNzaWduZWQgdG9cbiAgICAgICAgICogdGhlIGludm9rZWQgY29uc3RydWN0b3IgYW5kIHRoZSBvYmplY3QgaXMgdGhlbiBhc3NpZ25lZFxuICAgICAgICAgKiB0byB0aGlzIGJlZm9yZSBleGVjdXRpbmcgYW55IG9wZXJhdGlvbnMgc3BlY2lmaWVkXG4gICAgICAgICAqIGluIHlvdXIgY29uc3RydWN0b3IgbWV0aG9kLlxuICAgICAgICAgKlxuICAgICAgICAgKiBFUlJPUiBUeXBlRXJyb3I6IENsYXNzIGNvbnN0cnVjdG9yIEVsZW1lbnRSZWYgY2Fubm90IGJlIGludm9rZWQgd2l0aG91dCAnbmV3J1xuICAgICAgICAgKiBodHRwczovL2dpdGh1Yi5jb20vdGFpZ2EtZmFtaWx5L3RhaWdhLXVpL2lzc3Vlcy8zMDcyXG4gICAgICAgICAqXG4gICAgICAgICAqIFRoaXMgd2F5IHdlIGNhbiBpbnN0YW50aWF0ZSBvYmplY3QgY3JlYXRpb25cbiAgICAgICAgICogd2l0aG91dCBhZGRpdGlvbmFsIHByb3RvdHlwZSBjaGFpbiBmb3IgcG9zc2libGUgZml4IGJ1Zy5cbiAgICAgICAgICovXG4gICAgICAgIHJldHVybiBuZXcgRWxlbWVudFJlZjxUPihuYXRpdmVFbGVtZW50KTtcbiAgICB9XG59XG4iXX0=