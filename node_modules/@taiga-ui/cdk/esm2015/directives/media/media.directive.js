import { Directive, ElementRef, EventEmitter, HostBinding, HostListener, Inject, Input, Output, } from '@angular/core';
import * as i0 from "@angular/core";
export class TuiMediaDirective {
    constructor(el) {
        this.el = el;
        this.playbackRate = 1;
        this.volume = 1;
        this.currentTimeChange = new EventEmitter();
        this.pausedChange = new EventEmitter();
        this.volumeChange = new EventEmitter();
    }
    set playbackRateSetter(playbackRate) {
        this.updatePlaybackRate(playbackRate);
    }
    set currentTime(currentTime) {
        if (Math.abs(currentTime - this.currentTime) > 0.05) {
            this.el.nativeElement.currentTime = currentTime;
        }
    }
    get currentTime() {
        return this.el.nativeElement.currentTime;
    }
    set paused(paused) {
        if (paused) {
            this.el.nativeElement.pause();
        }
        else {
            void this.el.nativeElement.play();
            this.updatePlaybackRate(this.playbackRate);
        }
    }
    get paused() {
        return this.el.nativeElement.paused;
    }
    // @bad TODO: Make sure no other events can affect this like network issues etc.
    onPausedChange(paused) {
        this.pausedChange.emit(paused);
        this.updatePlaybackRate(this.playbackRate);
    }
    onVolumeChange() {
        this.volume = this.el.nativeElement.volume;
        this.volumeChange.emit(this.volume);
    }
    onCurrentTimeChange() {
        this.currentTimeChange.emit(this.currentTime);
    }
    changeDetectionTrigger() {
        // @bad TODO: consider if other events need to trigger CD
    }
    updatePlaybackRate(playbackRate) {
        this.playbackRate = playbackRate;
        this.el.nativeElement.playbackRate = this.playbackRate;
    }
}
TuiMediaDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiMediaDirective, deps: [{ token: ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
TuiMediaDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiMediaDirective, selector: "video[tuiMedia], audio[tuiMedia]", inputs: { volume: "volume", playbackRateSetter: ["playbackRate", "playbackRateSetter"], currentTime: "currentTime", paused: "paused" }, outputs: { currentTimeChange: "currentTimeChange", pausedChange: "pausedChange", volumeChange: "volumeChange" }, host: { listeners: { "ended": "onPausedChange(true)", "pause": "onPausedChange(true)", "play": "onPausedChange(false)", "volumechange": "onVolumeChange()", "timeupdate": "onCurrentTimeChange()", "seeking": "onCurrentTimeChange()", "seeked": "onCurrentTimeChange()", "durationchange": "changeDetectionTrigger()" }, properties: { "volume": "this.volume" } }, exportAs: ["tuiMedia"], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiMediaDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'video[tuiMedia], audio[tuiMedia]',
                    exportAs: 'tuiMedia',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }]; }, propDecorators: { volume: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['volume']
            }], playbackRateSetter: [{
                type: Input,
                args: ['playbackRate']
            }], currentTimeChange: [{
                type: Output
            }], pausedChange: [{
                type: Output
            }], volumeChange: [{
                type: Output
            }], currentTime: [{
                type: Input
            }], paused: [{
                type: Input
            }], onPausedChange: [{
                type: HostListener,
                args: ['ended', ['true']]
            }, {
                type: HostListener,
                args: ['pause', ['true']]
            }, {
                type: HostListener,
                args: ['play', ['false']]
            }], onVolumeChange: [{
                type: HostListener,
                args: ['volumechange']
            }], onCurrentTimeChange: [{
                type: HostListener,
                args: ['timeupdate']
            }, {
                type: HostListener,
                args: ['seeking']
            }, {
                type: HostListener,
                args: ['seeked']
            }], changeDetectionTrigger: [{
                type: HostListener,
                args: ['durationchange']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVkaWEuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY2RrL2RpcmVjdGl2ZXMvbWVkaWEvbWVkaWEuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDSCxTQUFTLEVBQ1QsVUFBVSxFQUNWLFlBQVksRUFDWixXQUFXLEVBQ1gsWUFBWSxFQUNaLE1BQU0sRUFDTixLQUFLLEVBQ0wsTUFBTSxHQUNULE1BQU0sZUFBZSxDQUFDOztBQU12QixNQUFNLE9BQU8saUJBQWlCO0lBcUIxQixZQUVxQixFQUFnQztRQUFoQyxPQUFFLEdBQUYsRUFBRSxDQUE4QjtRQXRCN0MsaUJBQVksR0FBRyxDQUFDLENBQUM7UUFJekIsV0FBTSxHQUFHLENBQUMsQ0FBQztRQVFGLHNCQUFpQixHQUFHLElBQUksWUFBWSxFQUFVLENBQUM7UUFHL0MsaUJBQVksR0FBRyxJQUFJLFlBQVksRUFBVyxDQUFDO1FBRzNDLGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQVUsQ0FBQztJQUtoRCxDQUFDO0lBakJKLElBQ0ksa0JBQWtCLENBQUMsWUFBb0I7UUFDdkMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFnQkQsSUFDSSxXQUFXLENBQUMsV0FBbUI7UUFDL0IsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsSUFBSSxFQUFFO1lBQ2pELElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7U0FDbkQ7SUFDTCxDQUFDO0lBRUQsSUFBSSxXQUFXO1FBQ1gsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUM7SUFDN0MsQ0FBQztJQUVELElBQ0ksTUFBTSxDQUFDLE1BQWU7UUFDdEIsSUFBSSxNQUFNLEVBQUU7WUFDUixJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUNqQzthQUFNO1lBQ0gsS0FBSyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNsQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQzlDO0lBQ0wsQ0FBQztJQUVELElBQUksTUFBTTtRQUNOLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDO0lBQ3hDLENBQUM7SUFFRCxnRkFBZ0Y7SUFJaEYsY0FBYyxDQUFDLE1BQWU7UUFDMUIsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDL0IsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBR0QsY0FBYztRQUNWLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDO1FBQzNDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN4QyxDQUFDO0lBS0QsbUJBQW1CO1FBQ2YsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUdELHNCQUFzQjtRQUNsQix5REFBeUQ7SUFDN0QsQ0FBQztJQUVPLGtCQUFrQixDQUFDLFlBQW9CO1FBQzNDLElBQUksQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDO1FBQ2pDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO0lBQzNELENBQUM7OytHQWpGUSxpQkFBaUIsa0JBc0JkLFVBQVU7bUdBdEJiLGlCQUFpQjs0RkFBakIsaUJBQWlCO2tCQUo3QixTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSxrQ0FBa0M7b0JBQzVDLFFBQVEsRUFBRSxVQUFVO2lCQUN2Qjs7MEJBdUJRLE1BQU07MkJBQUMsVUFBVTs0Q0FqQnRCLE1BQU07c0JBRkwsS0FBSzs7c0JBQ0wsV0FBVzt1QkFBQyxRQUFRO2dCQUlqQixrQkFBa0I7c0JBRHJCLEtBQUs7dUJBQUMsY0FBYztnQkFNWixpQkFBaUI7c0JBRHpCLE1BQU07Z0JBSUUsWUFBWTtzQkFEcEIsTUFBTTtnQkFJRSxZQUFZO3NCQURwQixNQUFNO2dCQVNILFdBQVc7c0JBRGQsS0FBSztnQkFZRixNQUFNO3NCQURULEtBQUs7Z0JBa0JOLGNBQWM7c0JBSGIsWUFBWTt1QkFBQyxPQUFPLEVBQUUsQ0FBQyxNQUFNLENBQUM7O3NCQUM5QixZQUFZO3VCQUFDLE9BQU8sRUFBRSxDQUFDLE1BQU0sQ0FBQzs7c0JBQzlCLFlBQVk7dUJBQUMsTUFBTSxFQUFFLENBQUMsT0FBTyxDQUFDO2dCQU8vQixjQUFjO3NCQURiLFlBQVk7dUJBQUMsY0FBYztnQkFTNUIsbUJBQW1CO3NCQUhsQixZQUFZO3VCQUFDLFlBQVk7O3NCQUN6QixZQUFZO3VCQUFDLFNBQVM7O3NCQUN0QixZQUFZO3VCQUFDLFFBQVE7Z0JBTXRCLHNCQUFzQjtzQkFEckIsWUFBWTt1QkFBQyxnQkFBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIERpcmVjdGl2ZSxcbiAgICBFbGVtZW50UmVmLFxuICAgIEV2ZW50RW1pdHRlcixcbiAgICBIb3N0QmluZGluZyxcbiAgICBIb3N0TGlzdGVuZXIsXG4gICAgSW5qZWN0LFxuICAgIElucHV0LFxuICAgIE91dHB1dCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAndmlkZW9bdHVpTWVkaWFdLCBhdWRpb1t0dWlNZWRpYV0nLFxuICAgIGV4cG9ydEFzOiAndHVpTWVkaWEnLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlNZWRpYURpcmVjdGl2ZSB7XG4gICAgcHJpdmF0ZSBwbGF5YmFja1JhdGUgPSAxO1xuXG4gICAgQElucHV0KClcbiAgICBASG9zdEJpbmRpbmcoJ3ZvbHVtZScpXG4gICAgdm9sdW1lID0gMTtcblxuICAgIEBJbnB1dCgncGxheWJhY2tSYXRlJylcbiAgICBzZXQgcGxheWJhY2tSYXRlU2V0dGVyKHBsYXliYWNrUmF0ZTogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMudXBkYXRlUGxheWJhY2tSYXRlKHBsYXliYWNrUmF0ZSk7XG4gICAgfVxuXG4gICAgQE91dHB1dCgpXG4gICAgcmVhZG9ubHkgY3VycmVudFRpbWVDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPG51bWJlcj4oKTtcblxuICAgIEBPdXRwdXQoKVxuICAgIHJlYWRvbmx5IHBhdXNlZENoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4oKTtcblxuICAgIEBPdXRwdXQoKVxuICAgIHJlYWRvbmx5IHZvbHVtZUNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8bnVtYmVyPigpO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoRWxlbWVudFJlZilcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBlbDogRWxlbWVudFJlZjxIVE1MTWVkaWFFbGVtZW50PixcbiAgICApIHt9XG5cbiAgICBASW5wdXQoKVxuICAgIHNldCBjdXJyZW50VGltZShjdXJyZW50VGltZTogbnVtYmVyKSB7XG4gICAgICAgIGlmIChNYXRoLmFicyhjdXJyZW50VGltZSAtIHRoaXMuY3VycmVudFRpbWUpID4gMC4wNSkge1xuICAgICAgICAgICAgdGhpcy5lbC5uYXRpdmVFbGVtZW50LmN1cnJlbnRUaW1lID0gY3VycmVudFRpbWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXQgY3VycmVudFRpbWUoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWwubmF0aXZlRWxlbWVudC5jdXJyZW50VGltZTtcbiAgICB9XG5cbiAgICBASW5wdXQoKVxuICAgIHNldCBwYXVzZWQocGF1c2VkOiBib29sZWFuKSB7XG4gICAgICAgIGlmIChwYXVzZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudC5wYXVzZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdm9pZCB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQucGxheSgpO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVQbGF5YmFja1JhdGUodGhpcy5wbGF5YmFja1JhdGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0IHBhdXNlZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWwubmF0aXZlRWxlbWVudC5wYXVzZWQ7XG4gICAgfVxuXG4gICAgLy8gQGJhZCBUT0RPOiBNYWtlIHN1cmUgbm8gb3RoZXIgZXZlbnRzIGNhbiBhZmZlY3QgdGhpcyBsaWtlIG5ldHdvcmsgaXNzdWVzIGV0Yy5cbiAgICBASG9zdExpc3RlbmVyKCdlbmRlZCcsIFsndHJ1ZSddKVxuICAgIEBIb3N0TGlzdGVuZXIoJ3BhdXNlJywgWyd0cnVlJ10pXG4gICAgQEhvc3RMaXN0ZW5lcigncGxheScsIFsnZmFsc2UnXSlcbiAgICBvblBhdXNlZENoYW5nZShwYXVzZWQ6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgICAgdGhpcy5wYXVzZWRDaGFuZ2UuZW1pdChwYXVzZWQpO1xuICAgICAgICB0aGlzLnVwZGF0ZVBsYXliYWNrUmF0ZSh0aGlzLnBsYXliYWNrUmF0ZSk7XG4gICAgfVxuXG4gICAgQEhvc3RMaXN0ZW5lcigndm9sdW1lY2hhbmdlJylcbiAgICBvblZvbHVtZUNoYW5nZSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy52b2x1bWUgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQudm9sdW1lO1xuICAgICAgICB0aGlzLnZvbHVtZUNoYW5nZS5lbWl0KHRoaXMudm9sdW1lKTtcbiAgICB9XG5cbiAgICBASG9zdExpc3RlbmVyKCd0aW1ldXBkYXRlJylcbiAgICBASG9zdExpc3RlbmVyKCdzZWVraW5nJylcbiAgICBASG9zdExpc3RlbmVyKCdzZWVrZWQnKVxuICAgIG9uQ3VycmVudFRpbWVDaGFuZ2UoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuY3VycmVudFRpbWVDaGFuZ2UuZW1pdCh0aGlzLmN1cnJlbnRUaW1lKTtcbiAgICB9XG5cbiAgICBASG9zdExpc3RlbmVyKCdkdXJhdGlvbmNoYW5nZScpXG4gICAgY2hhbmdlRGV0ZWN0aW9uVHJpZ2dlcigpOiB2b2lkIHtcbiAgICAgICAgLy8gQGJhZCBUT0RPOiBjb25zaWRlciBpZiBvdGhlciBldmVudHMgbmVlZCB0byB0cmlnZ2VyIENEXG4gICAgfVxuXG4gICAgcHJpdmF0ZSB1cGRhdGVQbGF5YmFja1JhdGUocGxheWJhY2tSYXRlOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5wbGF5YmFja1JhdGUgPSBwbGF5YmFja1JhdGU7XG4gICAgICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudC5wbGF5YmFja1JhdGUgPSB0aGlzLnBsYXliYWNrUmF0ZTtcbiAgICB9XG59XG4iXX0=