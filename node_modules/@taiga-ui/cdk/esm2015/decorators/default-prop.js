import { tuiAssert } from '@taiga-ui/cdk/classes';
function errorGetDefault(key, component) {
    return `Default value for ${String(key)} was not provided in ${component}, error in Taiga UI Angular Kit`;
}
function errorSetDefault(key, component) {
    return `Undefined was passed as ${String(key)} to ${component}, which is invalid input, using default value:`;
}
function errorSetDefaultInitial(key, component) {
    return `Undefined was passed as default value for ${String(key)} to ${component}, error in Taiga UI Angular Kit`;
}
/**
 * @deprecated:
 * not compatible with TypeScript 5
 *
 * Decorator for checking input values for undefined. You can also pass
 * optional assertion to check input against.
 *
 * CAUTION: This decorator overwrites other getters and setters.
 */
export function tuiDefaultProp(assertion, ...args) {
    return (target, key) => {
        const { name } = target.constructor;
        const errorGetDefaultMessage = ngDevMode && errorGetDefault(key, name);
        const errorSetDefaultMessage = ngDevMode && errorSetDefault(key, name);
        Object.defineProperty(target, key, {
            configurable: true,
            get() {
                ngDevMode && tuiAssert.assert(false, errorGetDefaultMessage);
                return undefined;
            },
            set(initialValue) {
                const isValid = initialValue !== undefined;
                const errorMessage = ngDevMode && errorSetDefaultInitial(key, name);
                let currentValue = initialValue;
                ngDevMode && tuiAssert.assert(isValid, errorMessage);
                if (ngDevMode && isValid && assertion && tuiAssert) {
                    tuiAssert.assert(assertion.call(this, initialValue), `${String(key)} in ${name} received:`, initialValue, ...args);
                }
                Object.defineProperty(this, key, {
                    configurable: true,
                    get() {
                        return currentValue;
                    },
                    set(value) {
                        const isValid = value !== undefined;
                        const backupValue = initialValue;
                        ngDevMode &&
                            tuiAssert.assert(isValid, errorSetDefaultMessage, String(backupValue));
                        if (ngDevMode && isValid && assertion && tuiAssert) {
                            tuiAssert.assert(assertion.call(this, value), `${String(key)} in ${name} received:`, value, ...args);
                        }
                        currentValue = isValid ? value : backupValue;
                    },
                });
            },
        });
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdC1wcm9wLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvY2RrL2RlY29yYXRvcnMvZGVmYXVsdC1wcm9wLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUdoRCxTQUFTLGVBQWUsQ0FBQyxHQUFvQixFQUFFLFNBQWlCO0lBQzVELE9BQU8scUJBQXFCLE1BQU0sQ0FDOUIsR0FBRyxDQUNOLHdCQUF3QixTQUFTLGlDQUFpQyxDQUFDO0FBQ3hFLENBQUM7QUFFRCxTQUFTLGVBQWUsQ0FBQyxHQUFvQixFQUFFLFNBQWlCO0lBQzVELE9BQU8sMkJBQTJCLE1BQU0sQ0FDcEMsR0FBRyxDQUNOLE9BQU8sU0FBUyxnREFBZ0QsQ0FBQztBQUN0RSxDQUFDO0FBRUQsU0FBUyxzQkFBc0IsQ0FBQyxHQUFvQixFQUFFLFNBQWlCO0lBQ25FLE9BQU8sNkNBQTZDLE1BQU0sQ0FDdEQsR0FBRyxDQUNOLE9BQU8sU0FBUyxpQ0FBaUMsQ0FBQztBQUN2RCxDQUFDO0FBRUQ7Ozs7Ozs7O0dBUUc7QUFDSCxNQUFNLFVBQVUsY0FBYyxDQUMxQixTQUFtQyxFQUNuQyxHQUFHLElBQWU7SUFFbEIsT0FBTyxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsRUFBRTtRQUNuQixNQUFNLEVBQUMsSUFBSSxFQUFDLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQztRQUNsQyxNQUFNLHNCQUFzQixHQUFHLFNBQVMsSUFBSSxlQUFlLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3ZFLE1BQU0sc0JBQXNCLEdBQUcsU0FBUyxJQUFJLGVBQWUsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFdkUsTUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFO1lBQy9CLFlBQVksRUFBRSxJQUFJO1lBQ2xCLEdBQUc7Z0JBQ0MsU0FBUyxJQUFJLFNBQVMsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLHNCQUFzQixDQUFDLENBQUM7Z0JBRTdELE9BQU8sU0FBUyxDQUFDO1lBQ3JCLENBQUM7WUFDRCxHQUFHLENBQVUsWUFBa0I7Z0JBQzNCLE1BQU0sT0FBTyxHQUFHLFlBQVksS0FBSyxTQUFTLENBQUM7Z0JBQzNDLE1BQU0sWUFBWSxHQUFHLFNBQVMsSUFBSSxzQkFBc0IsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7Z0JBQ3BFLElBQUksWUFBWSxHQUFHLFlBQVksQ0FBQztnQkFFaEMsU0FBUyxJQUFJLFNBQVMsQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLFlBQVksQ0FBQyxDQUFDO2dCQUVyRCxJQUFJLFNBQVMsSUFBSSxPQUFPLElBQUksU0FBUyxJQUFJLFNBQVMsRUFBRTtvQkFDaEQsU0FBUyxDQUFDLE1BQU0sQ0FDWixTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxZQUFZLENBQUMsRUFDbEMsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sSUFBSSxZQUFZLEVBQ3JDLFlBQVksRUFDWixHQUFHLElBQUksQ0FDVixDQUFDO2lCQUNMO2dCQUVELE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRTtvQkFDN0IsWUFBWSxFQUFFLElBQUk7b0JBQ2xCLEdBQUc7d0JBQ0MsT0FBTyxZQUFZLENBQUM7b0JBQ3hCLENBQUM7b0JBQ0QsR0FBRyxDQUFVLEtBQVc7d0JBQ3BCLE1BQU0sT0FBTyxHQUFHLEtBQUssS0FBSyxTQUFTLENBQUM7d0JBQ3BDLE1BQU0sV0FBVyxHQUFHLFlBQVksQ0FBQzt3QkFFakMsU0FBUzs0QkFDTCxTQUFTLENBQUMsTUFBTSxDQUNaLE9BQU8sRUFDUCxzQkFBc0IsRUFDdEIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUN0QixDQUFDO3dCQUVOLElBQUksU0FBUyxJQUFJLE9BQU8sSUFBSSxTQUFTLElBQUksU0FBUyxFQUFFOzRCQUNoRCxTQUFTLENBQUMsTUFBTSxDQUNaLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxFQUMzQixHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxJQUFJLFlBQVksRUFDckMsS0FBSyxFQUNMLEdBQUcsSUFBSSxDQUNWLENBQUM7eUJBQ0w7d0JBRUQsWUFBWSxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUM7b0JBQ2pELENBQUM7aUJBQ0osQ0FBQyxDQUFDO1lBQ1AsQ0FBQztTQUNKLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQztBQUNOLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge3R1aUFzc2VydH0gZnJvbSAnQHRhaWdhLXVpL2Nkay9jbGFzc2VzJztcbmltcG9ydCB7VHVpQm9vbGVhbkhhbmRsZXJ9IGZyb20gJ0B0YWlnYS11aS9jZGsvdHlwZXMnO1xuXG5mdW5jdGlvbiBlcnJvckdldERlZmF1bHQoa2V5OiBzdHJpbmcgfCBzeW1ib2wsIGNvbXBvbmVudDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYERlZmF1bHQgdmFsdWUgZm9yICR7U3RyaW5nKFxuICAgICAgICBrZXksXG4gICAgKX0gd2FzIG5vdCBwcm92aWRlZCBpbiAke2NvbXBvbmVudH0sIGVycm9yIGluIFRhaWdhIFVJIEFuZ3VsYXIgS2l0YDtcbn1cblxuZnVuY3Rpb24gZXJyb3JTZXREZWZhdWx0KGtleTogc3RyaW5nIHwgc3ltYm9sLCBjb21wb25lbnQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGBVbmRlZmluZWQgd2FzIHBhc3NlZCBhcyAke1N0cmluZyhcbiAgICAgICAga2V5LFxuICAgICl9IHRvICR7Y29tcG9uZW50fSwgd2hpY2ggaXMgaW52YWxpZCBpbnB1dCwgdXNpbmcgZGVmYXVsdCB2YWx1ZTpgO1xufVxuXG5mdW5jdGlvbiBlcnJvclNldERlZmF1bHRJbml0aWFsKGtleTogc3RyaW5nIHwgc3ltYm9sLCBjb21wb25lbnQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGBVbmRlZmluZWQgd2FzIHBhc3NlZCBhcyBkZWZhdWx0IHZhbHVlIGZvciAke1N0cmluZyhcbiAgICAgICAga2V5LFxuICAgICl9IHRvICR7Y29tcG9uZW50fSwgZXJyb3IgaW4gVGFpZ2EgVUkgQW5ndWxhciBLaXRgO1xufVxuXG4vKipcbiAqIEBkZXByZWNhdGVkOlxuICogbm90IGNvbXBhdGlibGUgd2l0aCBUeXBlU2NyaXB0IDVcbiAqXG4gKiBEZWNvcmF0b3IgZm9yIGNoZWNraW5nIGlucHV0IHZhbHVlcyBmb3IgdW5kZWZpbmVkLiBZb3UgY2FuIGFsc28gcGFzc1xuICogb3B0aW9uYWwgYXNzZXJ0aW9uIHRvIGNoZWNrIGlucHV0IGFnYWluc3QuXG4gKlxuICogQ0FVVElPTjogVGhpcyBkZWNvcmF0b3Igb3ZlcndyaXRlcyBvdGhlciBnZXR0ZXJzIGFuZCBzZXR0ZXJzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdHVpRGVmYXVsdFByb3A8VCBleHRlbmRzIFJlY29yZDxzdHJpbmcsIGFueT4sIEsgZXh0ZW5kcyBrZXlvZiBUPihcbiAgICBhc3NlcnRpb24/OiBUdWlCb29sZWFuSGFuZGxlcjxUW0tdPixcbiAgICAuLi5hcmdzOiB1bmtub3duW11cbik6IFByb3BlcnR5RGVjb3JhdG9yIHtcbiAgICByZXR1cm4gKHRhcmdldCwga2V5KSA9PiB7XG4gICAgICAgIGNvbnN0IHtuYW1lfSA9IHRhcmdldC5jb25zdHJ1Y3RvcjtcbiAgICAgICAgY29uc3QgZXJyb3JHZXREZWZhdWx0TWVzc2FnZSA9IG5nRGV2TW9kZSAmJiBlcnJvckdldERlZmF1bHQoa2V5LCBuYW1lKTtcbiAgICAgICAgY29uc3QgZXJyb3JTZXREZWZhdWx0TWVzc2FnZSA9IG5nRGV2TW9kZSAmJiBlcnJvclNldERlZmF1bHQoa2V5LCBuYW1lKTtcblxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHtcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGdldCgpOiB1bmRlZmluZWQge1xuICAgICAgICAgICAgICAgIG5nRGV2TW9kZSAmJiB0dWlBc3NlcnQuYXNzZXJ0KGZhbHNlLCBlcnJvckdldERlZmF1bHRNZXNzYWdlKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0KHRoaXM6IFQsIGluaXRpYWxWYWx1ZTogVFtLXSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGlzVmFsaWQgPSBpbml0aWFsVmFsdWUgIT09IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBuZ0Rldk1vZGUgJiYgZXJyb3JTZXREZWZhdWx0SW5pdGlhbChrZXksIG5hbWUpO1xuICAgICAgICAgICAgICAgIGxldCBjdXJyZW50VmFsdWUgPSBpbml0aWFsVmFsdWU7XG5cbiAgICAgICAgICAgICAgICBuZ0Rldk1vZGUgJiYgdHVpQXNzZXJ0LmFzc2VydChpc1ZhbGlkLCBlcnJvck1lc3NhZ2UpO1xuXG4gICAgICAgICAgICAgICAgaWYgKG5nRGV2TW9kZSAmJiBpc1ZhbGlkICYmIGFzc2VydGlvbiAmJiB0dWlBc3NlcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdHVpQXNzZXJ0LmFzc2VydChcbiAgICAgICAgICAgICAgICAgICAgICAgIGFzc2VydGlvbi5jYWxsKHRoaXMsIGluaXRpYWxWYWx1ZSksXG4gICAgICAgICAgICAgICAgICAgICAgICBgJHtTdHJpbmcoa2V5KX0gaW4gJHtuYW1lfSByZWNlaXZlZDpgLFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5pdGlhbFZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgLi4uYXJncyxcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywga2V5LCB7XG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZ2V0KCk6IFRbS10ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgc2V0KHRoaXM6IFQsIHZhbHVlOiBUW0tdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpc1ZhbGlkID0gdmFsdWUgIT09IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGJhY2t1cFZhbHVlID0gaW5pdGlhbFZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBuZ0Rldk1vZGUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0dWlBc3NlcnQuYXNzZXJ0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvclNldERlZmF1bHRNZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdHJpbmcoYmFja3VwVmFsdWUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZ0Rldk1vZGUgJiYgaXNWYWxpZCAmJiBhc3NlcnRpb24gJiYgdHVpQXNzZXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHVpQXNzZXJ0LmFzc2VydChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXNzZXJ0aW9uLmNhbGwodGhpcywgdmFsdWUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgJHtTdHJpbmcoa2V5KX0gaW4gJHtuYW1lfSByZWNlaXZlZDpgLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uYXJncyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50VmFsdWUgPSBpc1ZhbGlkID8gdmFsdWUgOiBiYWNrdXBWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH07XG59XG4iXX0=