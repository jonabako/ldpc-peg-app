import { TuiOwnerDocumentException } from '@taiga-ui/cdk/exceptions';
import { tuiIsPresent } from '@taiga-ui/cdk/utils/miscellaneous';
import { concat, merge } from 'rxjs';
import { endWith, map, repeat, take, takeWhile } from 'rxjs/operators';
import { tuiMouseDragFinishFrom } from './mouse-drag-finish-from';
import { tuiTypedFromEvent } from './typed-from-event';
// TODO: change type in v4.0
// eslint-disable-next-line no-restricted-syntax
export var TuiDragStage;
(function (TuiDragStage) {
    TuiDragStage[TuiDragStage["Start"] = 0] = "Start";
    TuiDragStage[TuiDragStage["Continues"] = 1] = "Continues";
    TuiDragStage[TuiDragStage["End"] = 2] = "End";
})(TuiDragStage || (TuiDragStage = {}));
export class TuiDragState {
    constructor(stage, event) {
        this.stage = stage;
        this.event = event;
    }
}
export function tuiDragAndDropFrom(element) {
    const { ownerDocument } = element;
    if (!ownerDocument) {
        throw new TuiOwnerDocumentException();
    }
    return concat(tuiTypedFromEvent(element, 'mousedown').pipe(take(1), map(event => new TuiDragState(TuiDragStage.Start, event))), merge(tuiTypedFromEvent(ownerDocument, 'mousemove').pipe(map(event => new TuiDragState(TuiDragStage.Continues, event))), tuiMouseDragFinishFrom(ownerDocument).pipe(take(1), map(event => new TuiDragState(TuiDragStage.End, event)), endWith(null))).pipe(takeWhile(tuiIsPresent))).pipe(repeat());
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhZy1hbmQtZHJvcC1mcm9tLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvY2RrL29ic2VydmFibGVzL2RyYWctYW5kLWRyb3AtZnJvbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMseUJBQXlCLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUNuRSxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sbUNBQW1DLENBQUM7QUFDL0QsT0FBTyxFQUFDLE1BQU0sRUFBRSxLQUFLLEVBQWEsTUFBTSxNQUFNLENBQUM7QUFDL0MsT0FBTyxFQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUVyRSxPQUFPLEVBQUMsc0JBQXNCLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUNoRSxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSxvQkFBb0IsQ0FBQztBQUVyRCw0QkFBNEI7QUFDNUIsZ0RBQWdEO0FBQ2hELE1BQU0sQ0FBTixJQUFZLFlBSVg7QUFKRCxXQUFZLFlBQVk7SUFDcEIsaURBQUssQ0FBQTtJQUNMLHlEQUFTLENBQUE7SUFDVCw2Q0FBRyxDQUFBO0FBQ1AsQ0FBQyxFQUpXLFlBQVksS0FBWixZQUFZLFFBSXZCO0FBRUQsTUFBTSxPQUFPLFlBQVk7SUFDckIsWUFDYSxLQUFtQixFQUNuQixLQUFpQjtRQURqQixVQUFLLEdBQUwsS0FBSyxDQUFjO1FBQ25CLFVBQUssR0FBTCxLQUFLLENBQVk7SUFDM0IsQ0FBQztDQUNQO0FBRUQsTUFBTSxVQUFVLGtCQUFrQixDQUFDLE9BQWdCO0lBQy9DLE1BQU0sRUFBQyxhQUFhLEVBQUMsR0FBRyxPQUFPLENBQUM7SUFFaEMsSUFBSSxDQUFDLGFBQWEsRUFBRTtRQUNoQixNQUFNLElBQUkseUJBQXlCLEVBQUUsQ0FBQztLQUN6QztJQUVELE9BQU8sTUFBTSxDQUNULGlCQUFpQixDQUFDLE9BQU8sRUFBRSxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQ3hDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFDUCxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxJQUFJLFlBQVksQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQzVELEVBQ0QsS0FBSyxDQUNELGlCQUFpQixDQUFDLGFBQWEsRUFBRSxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQzlDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksWUFBWSxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FDaEUsRUFDRCxzQkFBc0IsQ0FBQyxhQUFhLENBQUMsQ0FBQyxJQUFJLENBQ3RDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFDUCxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxJQUFJLFlBQVksQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDLEVBQ3ZELE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FDaEIsQ0FDSixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FDbEMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztBQUNyQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtUdWlPd25lckRvY3VtZW50RXhjZXB0aW9ufSBmcm9tICdAdGFpZ2EtdWkvY2RrL2V4Y2VwdGlvbnMnO1xuaW1wb3J0IHt0dWlJc1ByZXNlbnR9IGZyb20gJ0B0YWlnYS11aS9jZGsvdXRpbHMvbWlzY2VsbGFuZW91cyc7XG5pbXBvcnQge2NvbmNhdCwgbWVyZ2UsIE9ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtlbmRXaXRoLCBtYXAsIHJlcGVhdCwgdGFrZSwgdGFrZVdoaWxlfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7dHVpTW91c2VEcmFnRmluaXNoRnJvbX0gZnJvbSAnLi9tb3VzZS1kcmFnLWZpbmlzaC1mcm9tJztcbmltcG9ydCB7dHVpVHlwZWRGcm9tRXZlbnR9IGZyb20gJy4vdHlwZWQtZnJvbS1ldmVudCc7XG5cbi8vIFRPRE86IGNoYW5nZSB0eXBlIGluIHY0LjBcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuZXhwb3J0IGVudW0gVHVpRHJhZ1N0YWdlIHtcbiAgICBTdGFydCxcbiAgICBDb250aW51ZXMsXG4gICAgRW5kLFxufVxuXG5leHBvcnQgY2xhc3MgVHVpRHJhZ1N0YXRlIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcmVhZG9ubHkgc3RhZ2U6IFR1aURyYWdTdGFnZSxcbiAgICAgICAgcmVhZG9ubHkgZXZlbnQ6IE1vdXNlRXZlbnQsXG4gICAgKSB7fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdHVpRHJhZ0FuZERyb3BGcm9tKGVsZW1lbnQ6IEVsZW1lbnQpOiBPYnNlcnZhYmxlPFR1aURyYWdTdGF0ZT4ge1xuICAgIGNvbnN0IHtvd25lckRvY3VtZW50fSA9IGVsZW1lbnQ7XG5cbiAgICBpZiAoIW93bmVyRG9jdW1lbnQpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR1aU93bmVyRG9jdW1lbnRFeGNlcHRpb24oKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY29uY2F0KFxuICAgICAgICB0dWlUeXBlZEZyb21FdmVudChlbGVtZW50LCAnbW91c2Vkb3duJykucGlwZShcbiAgICAgICAgICAgIHRha2UoMSksXG4gICAgICAgICAgICBtYXAoZXZlbnQgPT4gbmV3IFR1aURyYWdTdGF0ZShUdWlEcmFnU3RhZ2UuU3RhcnQsIGV2ZW50KSksXG4gICAgICAgICksXG4gICAgICAgIG1lcmdlKFxuICAgICAgICAgICAgdHVpVHlwZWRGcm9tRXZlbnQob3duZXJEb2N1bWVudCwgJ21vdXNlbW92ZScpLnBpcGUoXG4gICAgICAgICAgICAgICAgbWFwKGV2ZW50ID0+IG5ldyBUdWlEcmFnU3RhdGUoVHVpRHJhZ1N0YWdlLkNvbnRpbnVlcywgZXZlbnQpKSxcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICB0dWlNb3VzZURyYWdGaW5pc2hGcm9tKG93bmVyRG9jdW1lbnQpLnBpcGUoXG4gICAgICAgICAgICAgICAgdGFrZSgxKSxcbiAgICAgICAgICAgICAgICBtYXAoZXZlbnQgPT4gbmV3IFR1aURyYWdTdGF0ZShUdWlEcmFnU3RhZ2UuRW5kLCBldmVudCkpLFxuICAgICAgICAgICAgICAgIGVuZFdpdGgobnVsbCksXG4gICAgICAgICAgICApLFxuICAgICAgICApLnBpcGUodGFrZVdoaWxlKHR1aUlzUHJlc2VudCkpLFxuICAgICkucGlwZShyZXBlYXQoKSk7XG59XG4iXX0=