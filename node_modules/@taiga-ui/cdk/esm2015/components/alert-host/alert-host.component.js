import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Inject, INJECTOR, Injector, Self, ViewEncapsulation, } from '@angular/core';
import { TUI_PARENT_ANIMATION } from '@taiga-ui/cdk/constants';
import { TuiDestroyService } from '@taiga-ui/cdk/services';
import { TUI_ALERTS } from '@taiga-ui/cdk/tokens';
import { POLYMORPHEUS_CONTEXT } from '@tinkoff/ng-polymorpheus';
import { combineLatest } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@taiga-ui/cdk/pipes";
import * as i3 from "rxjs";
export class TuiAlertHostComponent {
    constructor(allAlerts, injector, destroy$, cdr) {
        this.allAlerts = allAlerts;
        this.injector = injector;
        this.destroy$ = destroy$;
        this.cdr = cdr;
        this.alerts = [];
        this.trackBy = (index) => index;
        this.mapper = useValue => Injector.create({
            providers: [
                {
                    provide: POLYMORPHEUS_CONTEXT,
                    useValue,
                },
            ],
            parent: this.injector,
        });
    }
    ngOnInit() {
        // Due to this view being parallel to app content, `markForCheck` from `async` pipe
        // can happen after view was checked, so calling `detectChanges` instead
        combineLatest(this.allAlerts)
            .pipe(takeUntil(this.destroy$))
            .subscribe(alerts => {
            this.alerts = alerts;
            this.cdr.detectChanges();
        });
    }
}
TuiAlertHostComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiAlertHostComponent, deps: [{ token: TUI_ALERTS }, { token: INJECTOR }, { token: TuiDestroyService, self: true }, { token: ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
TuiAlertHostComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiAlertHostComponent, selector: "tui-alert-host", providers: [TuiDestroyService], ngImport: i0, template: "<div\n    *ngFor=\"let alert of alerts; trackBy: trackBy\"\n    class=\"t-wrapper\"\n    @tuiParentAnimation\n>\n    <ng-container\n        *ngFor=\"let item of alert\"\n        [ngComponentOutlet]=\"item.component.component\"\n        [ngComponentOutletInjector]=\"item | tuiMapper: mapper\"\n    ></ng-container>\n</div>\n", styles: ["tui-alert-host>.t-wrapper{position:fixed;top:0;left:0;display:flex;width:100%;height:100%;flex-direction:column;pointer-events:none}tui-alert-host>.t-wrapper>*{pointer-events:auto}\n"], directives: [{ type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1.NgComponentOutlet, selector: "[ngComponentOutlet]", inputs: ["ngComponentOutlet", "ngComponentOutletInjector", "ngComponentOutletContent", "ngComponentOutletNgModuleFactory"] }], pipes: { "tuiMapper": i2.TuiMapperPipe }, animations: [TUI_PARENT_ANIMATION], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiAlertHostComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-alert-host',
                    templateUrl: './alert-host.template.html',
                    styleUrls: ['./alert-host.style.less'],
                    encapsulation: ViewEncapsulation.None,
                    // So that we do not force OnPush on custom alerts
                    // eslint-disable-next-line @angular-eslint/prefer-on-push-component-change-detection
                    changeDetection: ChangeDetectionStrategy.Default,
                    providers: [TuiDestroyService],
                    animations: [TUI_PARENT_ANIMATION],
                }]
        }], ctorParameters: function () { return [{ type: Array, decorators: [{
                    type: Inject,
                    args: [TUI_ALERTS]
                }] }, { type: i0.Injector, decorators: [{
                    type: Inject,
                    args: [INJECTOR]
                }] }, { type: i3.Observable, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiDestroyService]
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxlcnQtaG9zdC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jZGsvY29tcG9uZW50cy9hbGVydC1ob3N0L2FsZXJ0LWhvc3QuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY2RrL2NvbXBvbmVudHMvYWxlcnQtaG9zdC9hbGVydC1ob3N0LnRlbXBsYXRlLmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNILHVCQUF1QixFQUN2QixpQkFBaUIsRUFDakIsU0FBUyxFQUNULE1BQU0sRUFDTixRQUFRLEVBQ1IsUUFBUSxFQUVSLElBQUksRUFFSixpQkFBaUIsR0FDcEIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFDLG9CQUFvQixFQUFDLE1BQU0seUJBQXlCLENBQUM7QUFDN0QsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sd0JBQXdCLENBQUM7QUFDekQsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBRWhELE9BQU8sRUFBQyxvQkFBb0IsRUFBQyxNQUFNLDBCQUEwQixDQUFDO0FBQzlELE9BQU8sRUFBQyxhQUFhLEVBQWEsTUFBTSxNQUFNLENBQUM7QUFDL0MsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDOzs7OztBQWF6QyxNQUFNLE9BQU8scUJBQXFCO0lBSzlCLFlBQ3lDLFNBQTBDLEVBQzVDLFFBQWtCLEVBQ0QsUUFBMEIsRUFDbEMsR0FBc0I7UUFIN0IsY0FBUyxHQUFULFNBQVMsQ0FBaUM7UUFDNUMsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUNELGFBQVEsR0FBUixRQUFRLENBQWtCO1FBQ2xDLFFBQUcsR0FBSCxHQUFHLENBQW1CO1FBTnRFLFdBQU0sR0FBZ0MsRUFBRSxDQUFDO1FBU2hDLFlBQU8sR0FBa0MsQ0FBQyxLQUFhLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQztRQWFsRSxXQUFNLEdBQXdDLFFBQVEsQ0FBQyxFQUFFLENBQzlELFFBQVEsQ0FBQyxNQUFNLENBQUM7WUFDWixTQUFTLEVBQUU7Z0JBQ1A7b0JBQ0ksT0FBTyxFQUFFLG9CQUFvQjtvQkFDN0IsUUFBUTtpQkFDWDthQUNKO1lBQ0QsTUFBTSxFQUFFLElBQUksQ0FBQyxRQUFRO1NBQ3hCLENBQUMsQ0FBQztJQXhCSixDQUFDO0lBSUosUUFBUTtRQUNKLG1GQUFtRjtRQUNuRix3RUFBd0U7UUFDeEUsYUFBYSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7YUFDeEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7YUFDOUIsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ2hCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1lBQ3JCLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDN0IsQ0FBQyxDQUFDLENBQUM7SUFDWCxDQUFDOzttSEF2QlEscUJBQXFCLGtCQU1sQixVQUFVLGFBQ1YsUUFBUSxhQUNBLGlCQUFpQix5QkFDekIsaUJBQWlCO3VHQVRwQixxQkFBcUIseUNBSG5CLENBQUMsaUJBQWlCLENBQUMsMEJDNUJsQyxzVUFXQSxpakJEa0JnQixDQUFDLG9CQUFvQixDQUFDOzRGQUV6QixxQkFBcUI7a0JBWGpDLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLGdCQUFnQjtvQkFDMUIsV0FBVyxFQUFFLDRCQUE0QjtvQkFDekMsU0FBUyxFQUFFLENBQUMseUJBQXlCLENBQUM7b0JBQ3RDLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO29CQUNyQyxrREFBa0Q7b0JBQ2xELHFGQUFxRjtvQkFDckYsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE9BQU87b0JBQ2hELFNBQVMsRUFBRSxDQUFDLGlCQUFpQixDQUFDO29CQUM5QixVQUFVLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQztpQkFDckM7MERBT3VELEtBQUs7MEJBQXBELE1BQU07MkJBQUMsVUFBVTs7MEJBQ2pCLE1BQU07MkJBQUMsUUFBUTs7MEJBQ2YsSUFBSTs7MEJBQUksTUFBTTsyQkFBQyxpQkFBaUI7OzBCQUNoQyxNQUFNOzJCQUFDLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gICAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgQ29tcG9uZW50LFxuICAgIEluamVjdCxcbiAgICBJTkpFQ1RPUixcbiAgICBJbmplY3RvcixcbiAgICBPbkluaXQsXG4gICAgU2VsZixcbiAgICBUcmFja0J5RnVuY3Rpb24sXG4gICAgVmlld0VuY2Fwc3VsYXRpb24sXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtUVUlfUEFSRU5UX0FOSU1BVElPTn0gZnJvbSAnQHRhaWdhLXVpL2Nkay9jb25zdGFudHMnO1xuaW1wb3J0IHtUdWlEZXN0cm95U2VydmljZX0gZnJvbSAnQHRhaWdhLXVpL2Nkay9zZXJ2aWNlcyc7XG5pbXBvcnQge1RVSV9BTEVSVFN9IGZyb20gJ0B0YWlnYS11aS9jZGsvdG9rZW5zJztcbmltcG9ydCB7VHVpRGlhbG9nLCBUdWlUeXBlZE1hcHBlcn0gZnJvbSAnQHRhaWdhLXVpL2Nkay90eXBlcyc7XG5pbXBvcnQge1BPTFlNT1JQSEVVU19DT05URVhUfSBmcm9tICdAdGlua29mZi9uZy1wb2x5bW9ycGhldXMnO1xuaW1wb3J0IHtjb21iaW5lTGF0ZXN0LCBPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcbmltcG9ydCB7dGFrZVVudGlsfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAndHVpLWFsZXJ0LWhvc3QnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9hbGVydC1ob3N0LnRlbXBsYXRlLmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL2FsZXJ0LWhvc3Quc3R5bGUubGVzcyddLFxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gICAgLy8gU28gdGhhdCB3ZSBkbyBub3QgZm9yY2UgT25QdXNoIG9uIGN1c3RvbSBhbGVydHNcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQGFuZ3VsYXItZXNsaW50L3ByZWZlci1vbi1wdXNoLWNvbXBvbmVudC1jaGFuZ2UtZGV0ZWN0aW9uXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5EZWZhdWx0LFxuICAgIHByb3ZpZGVyczogW1R1aURlc3Ryb3lTZXJ2aWNlXSxcbiAgICBhbmltYXRpb25zOiBbVFVJX1BBUkVOVF9BTklNQVRJT05dLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlBbGVydEhvc3RDb21wb25lbnQ8VCBleHRlbmRzIFR1aURpYWxvZzx1bmtub3duLCB1bmtub3duPj5cbiAgICBpbXBsZW1lbnRzIE9uSW5pdFxue1xuICAgIGFsZXJ0czogUmVhZG9ubHlBcnJheTxyZWFkb25seSBUW10+ID0gW107XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChUVUlfQUxFUlRTKSBwcml2YXRlIHJlYWRvbmx5IGFsbEFsZXJ0czogQXJyYXk8T2JzZXJ2YWJsZTxyZWFkb25seSBUW10+PixcbiAgICAgICAgQEluamVjdChJTkpFQ1RPUikgcHJpdmF0ZSByZWFkb25seSBpbmplY3RvcjogSW5qZWN0b3IsXG4gICAgICAgIEBTZWxmKCkgQEluamVjdChUdWlEZXN0cm95U2VydmljZSkgcHJpdmF0ZSByZWFkb25seSBkZXN0cm95JDogT2JzZXJ2YWJsZTx2b2lkPixcbiAgICAgICAgQEluamVjdChDaGFuZ2VEZXRlY3RvclJlZikgcHJpdmF0ZSByZWFkb25seSBjZHI6IENoYW5nZURldGVjdG9yUmVmLFxuICAgICkge31cblxuICAgIHJlYWRvbmx5IHRyYWNrQnk6IFRyYWNrQnlGdW5jdGlvbjxyZWFkb25seSBUW10+ID0gKGluZGV4OiBudW1iZXIpID0+IGluZGV4O1xuXG4gICAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgICAgIC8vIER1ZSB0byB0aGlzIHZpZXcgYmVpbmcgcGFyYWxsZWwgdG8gYXBwIGNvbnRlbnQsIGBtYXJrRm9yQ2hlY2tgIGZyb20gYGFzeW5jYCBwaXBlXG4gICAgICAgIC8vIGNhbiBoYXBwZW4gYWZ0ZXIgdmlldyB3YXMgY2hlY2tlZCwgc28gY2FsbGluZyBgZGV0ZWN0Q2hhbmdlc2AgaW5zdGVhZFxuICAgICAgICBjb21iaW5lTGF0ZXN0KHRoaXMuYWxsQWxlcnRzKVxuICAgICAgICAgICAgLnBpcGUodGFrZVVudGlsKHRoaXMuZGVzdHJveSQpKVxuICAgICAgICAgICAgLnN1YnNjcmliZShhbGVydHMgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuYWxlcnRzID0gYWxlcnRzO1xuICAgICAgICAgICAgICAgIHRoaXMuY2RyLmRldGVjdENoYW5nZXMoKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJlYWRvbmx5IG1hcHBlcjogVHVpVHlwZWRNYXBwZXI8W3Vua25vd25dLCBJbmplY3Rvcj4gPSB1c2VWYWx1ZSA9PlxuICAgICAgICBJbmplY3Rvci5jcmVhdGUoe1xuICAgICAgICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBwcm92aWRlOiBQT0xZTU9SUEhFVVNfQ09OVEVYVCxcbiAgICAgICAgICAgICAgICAgICAgdXNlVmFsdWUsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBwYXJlbnQ6IHRoaXMuaW5qZWN0b3IsXG4gICAgICAgIH0pO1xufVxuIiwiPGRpdlxuICAgICpuZ0Zvcj1cImxldCBhbGVydCBvZiBhbGVydHM7IHRyYWNrQnk6IHRyYWNrQnlcIlxuICAgIGNsYXNzPVwidC13cmFwcGVyXCJcbiAgICBAdHVpUGFyZW50QW5pbWF0aW9uXG4+XG4gICAgPG5nLWNvbnRhaW5lclxuICAgICAgICAqbmdGb3I9XCJsZXQgaXRlbSBvZiBhbGVydFwiXG4gICAgICAgIFtuZ0NvbXBvbmVudE91dGxldF09XCJpdGVtLmNvbXBvbmVudC5jb21wb25lbnRcIlxuICAgICAgICBbbmdDb21wb25lbnRPdXRsZXRJbmplY3Rvcl09XCJpdGVtIHwgdHVpTWFwcGVyOiBtYXBwZXJcIlxuICAgID48L25nLWNvbnRhaW5lcj5cbjwvZGl2PlxuIl19