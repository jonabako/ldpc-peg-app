import { __awaiter } from "tslib";
import { isPlatformServer } from '@angular/common';
import { Inject, Injectable, PLATFORM_ID } from '@angular/core';
import { WINDOW } from '@ng-web-apis/common';
import { defer, from } from 'rxjs';
import { fromFetch } from 'rxjs/fetch';
import { shareReplay, switchMap } from 'rxjs/operators';
import * as i0 from "@angular/core";
export class TuiStaticRequestService {
    constructor(win, platformId) {
        this.win = win;
        this.platformId = platformId;
        this.cache = new Map();
    }
    request(url) {
        const cache = this.cache.get(url);
        if (cache) {
            return cache;
        }
        const response$ = 'AbortController' in this.win || isPlatformServer(this.platformId)
            ? fromFetch(url)
            : /**
               * Fallback for Firefox 55 and 56
               * TODO: drop after browser support bump
               */
                defer(() => from(fetch(url)));
        const piped = response$.pipe(switchMap((response) => __awaiter(this, void 0, void 0, function* () {
            if (response.ok) {
                return response.text();
            }
            throw new Error(`Failed to load ${url} (${response.statusText})`);
        })), shareReplay({ bufferSize: 1, refCount: false }));
        this.cache.set(url, piped);
        return piped;
    }
}
TuiStaticRequestService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiStaticRequestService, deps: [{ token: WINDOW }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Injectable });
TuiStaticRequestService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiStaticRequestService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiStaticRequestService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: Window, decorators: [{
                    type: Inject,
                    args: [WINDOW]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGljLXJlcXVlc3Quc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL2Nkay9zZXJ2aWNlcy9zdGF0aWMtcmVxdWVzdC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUNqRCxPQUFPLEVBQUMsTUFBTSxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFDLE1BQU0sRUFBQyxNQUFNLHFCQUFxQixDQUFDO0FBQzNDLE9BQU8sRUFBQyxLQUFLLEVBQUUsSUFBSSxFQUFhLE1BQU0sTUFBTSxDQUFDO0FBQzdDLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxZQUFZLENBQUM7QUFDckMsT0FBTyxFQUFDLFdBQVcsRUFBRSxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFLdEQsTUFBTSxPQUFPLHVCQUF1QjtJQUdoQyxZQUNxQyxHQUFXLEVBQ04sVUFBbUM7UUFEeEMsUUFBRyxHQUFILEdBQUcsQ0FBUTtRQUNOLGVBQVUsR0FBVixVQUFVLENBQXlCO1FBSjVELFVBQUssR0FBRyxJQUFJLEdBQUcsRUFBOEIsQ0FBQztJQUs1RCxDQUFDO0lBRUosT0FBTyxDQUFDLEdBQVc7UUFDZixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUVsQyxJQUFJLEtBQUssRUFBRTtZQUNQLE9BQU8sS0FBSyxDQUFDO1NBQ2hCO1FBRUQsTUFBTSxTQUFTLEdBQ1gsaUJBQWlCLElBQUksSUFBSSxDQUFDLEdBQUcsSUFBSSxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO1lBQzlELENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDO1lBQ2hCLENBQUMsQ0FBQzs7O2lCQUdHO2dCQUNILEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUV4QyxNQUFNLEtBQUssR0FBRyxTQUFTLENBQUMsSUFBSSxDQUN4QixTQUFTLENBQUMsQ0FBTSxRQUFRLEVBQUMsRUFBRTtZQUN2QixJQUFJLFFBQVEsQ0FBQyxFQUFFLEVBQUU7Z0JBQ2IsT0FBTyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7YUFDMUI7WUFFRCxNQUFNLElBQUksS0FBSyxDQUFDLGtCQUFrQixHQUFHLEtBQUssUUFBUSxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUM7UUFDdEUsQ0FBQyxDQUFBLENBQUMsRUFDRixXQUFXLENBQUMsRUFBQyxVQUFVLEVBQUUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUMsQ0FBQyxDQUNoRCxDQUFDO1FBRUYsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRTNCLE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7O3FIQXRDUSx1QkFBdUIsa0JBSXBCLE1BQU0sYUFDTixXQUFXO3lIQUxkLHVCQUF1QixjQUZwQixNQUFNOzRGQUVULHVCQUF1QjtrQkFIbkMsVUFBVTttQkFBQztvQkFDUixVQUFVLEVBQUUsTUFBTTtpQkFDckI7MERBSzZDLE1BQU07MEJBQTNDLE1BQU07MkJBQUMsTUFBTTs7MEJBQ2IsTUFBTTsyQkFBQyxXQUFXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtpc1BsYXRmb3JtU2VydmVyfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHtJbmplY3QsIEluamVjdGFibGUsIFBMQVRGT1JNX0lEfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7V0lORE9XfSBmcm9tICdAbmctd2ViLWFwaXMvY29tbW9uJztcbmltcG9ydCB7ZGVmZXIsIGZyb20sIE9ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtmcm9tRmV0Y2h9IGZyb20gJ3J4anMvZmV0Y2gnO1xuaW1wb3J0IHtzaGFyZVJlcGxheSwgc3dpdGNoTWFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIFR1aVN0YXRpY1JlcXVlc3RTZXJ2aWNlIHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGNhY2hlID0gbmV3IE1hcDxzdHJpbmcsIE9ic2VydmFibGU8c3RyaW5nPj4oKTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KFdJTkRPVykgcHJpdmF0ZSByZWFkb25seSB3aW46IFdpbmRvdyxcbiAgICAgICAgQEluamVjdChQTEFURk9STV9JRCkgcHJpdmF0ZSByZWFkb25seSBwbGF0Zm9ybUlkOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPixcbiAgICApIHt9XG5cbiAgICByZXF1ZXN0KHVybDogc3RyaW5nKTogT2JzZXJ2YWJsZTxzdHJpbmc+IHtcbiAgICAgICAgY29uc3QgY2FjaGUgPSB0aGlzLmNhY2hlLmdldCh1cmwpO1xuXG4gICAgICAgIGlmIChjYWNoZSkge1xuICAgICAgICAgICAgcmV0dXJuIGNhY2hlO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcmVzcG9uc2UkID1cbiAgICAgICAgICAgICdBYm9ydENvbnRyb2xsZXInIGluIHRoaXMud2luIHx8IGlzUGxhdGZvcm1TZXJ2ZXIodGhpcy5wbGF0Zm9ybUlkKVxuICAgICAgICAgICAgICAgID8gZnJvbUZldGNoKHVybClcbiAgICAgICAgICAgICAgICA6IC8qKlxuICAgICAgICAgICAgICAgICAgICogRmFsbGJhY2sgZm9yIEZpcmVmb3ggNTUgYW5kIDU2XG4gICAgICAgICAgICAgICAgICAgKiBUT0RPOiBkcm9wIGFmdGVyIGJyb3dzZXIgc3VwcG9ydCBidW1wXG4gICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgIGRlZmVyKCgpID0+IGZyb20oZmV0Y2godXJsKSkpO1xuXG4gICAgICAgIGNvbnN0IHBpcGVkID0gcmVzcG9uc2UkLnBpcGUoXG4gICAgICAgICAgICBzd2l0Y2hNYXAoYXN5bmMgcmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5vaykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UudGV4dCgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIGxvYWQgJHt1cmx9ICgke3Jlc3BvbnNlLnN0YXR1c1RleHR9KWApO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBzaGFyZVJlcGxheSh7YnVmZmVyU2l6ZTogMSwgcmVmQ291bnQ6IGZhbHNlfSksXG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy5jYWNoZS5zZXQodXJsLCBwaXBlZCk7XG5cbiAgICAgICAgcmV0dXJuIHBpcGVkO1xuICAgIH1cbn1cbiJdfQ==