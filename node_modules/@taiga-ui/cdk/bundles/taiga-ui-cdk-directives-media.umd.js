(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('@taiga-ui/cdk/directives/media', ['exports', '@angular/core'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global["taiga-ui"] = global["taiga-ui"] || {}, global["taiga-ui"].cdk = global["taiga-ui"].cdk || {}, global["taiga-ui"].cdk.directives = global["taiga-ui"].cdk.directives || {}, global["taiga-ui"].cdk.directives.media = {}), global.ng.core));
})(this, (function (exports, i0) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);

    var TuiMediaDirective = /** @class */ (function () {
        function TuiMediaDirective(el) {
            this.el = el;
            this.playbackRate = 1;
            this.volume = 1;
            this.currentTimeChange = new i0.EventEmitter();
            this.pausedChange = new i0.EventEmitter();
            this.volumeChange = new i0.EventEmitter();
        }
        Object.defineProperty(TuiMediaDirective.prototype, "playbackRateSetter", {
            set: function (playbackRate) {
                this.updatePlaybackRate(playbackRate);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TuiMediaDirective.prototype, "currentTime", {
            get: function () {
                return this.el.nativeElement.currentTime;
            },
            set: function (currentTime) {
                if (Math.abs(currentTime - this.currentTime) > 0.05) {
                    this.el.nativeElement.currentTime = currentTime;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TuiMediaDirective.prototype, "paused", {
            get: function () {
                return this.el.nativeElement.paused;
            },
            set: function (paused) {
                if (paused) {
                    this.el.nativeElement.pause();
                }
                else {
                    void this.el.nativeElement.play();
                    this.updatePlaybackRate(this.playbackRate);
                }
            },
            enumerable: false,
            configurable: true
        });
        // @bad TODO: Make sure no other events can affect this like network issues etc.
        TuiMediaDirective.prototype.onPausedChange = function (paused) {
            this.pausedChange.emit(paused);
            this.updatePlaybackRate(this.playbackRate);
        };
        TuiMediaDirective.prototype.onVolumeChange = function () {
            this.volume = this.el.nativeElement.volume;
            this.volumeChange.emit(this.volume);
        };
        TuiMediaDirective.prototype.onCurrentTimeChange = function () {
            this.currentTimeChange.emit(this.currentTime);
        };
        TuiMediaDirective.prototype.changeDetectionTrigger = function () {
            // @bad TODO: consider if other events need to trigger CD
        };
        TuiMediaDirective.prototype.updatePlaybackRate = function (playbackRate) {
            this.playbackRate = playbackRate;
            this.el.nativeElement.playbackRate = this.playbackRate;
        };
        return TuiMediaDirective;
    }());
    TuiMediaDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiMediaDirective, deps: [{ token: i0.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    TuiMediaDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiMediaDirective, selector: "video[tuiMedia], audio[tuiMedia]", inputs: { volume: "volume", playbackRateSetter: ["playbackRate", "playbackRateSetter"], currentTime: "currentTime", paused: "paused" }, outputs: { currentTimeChange: "currentTimeChange", pausedChange: "pausedChange", volumeChange: "volumeChange" }, host: { listeners: { "ended": "onPausedChange(true)", "pause": "onPausedChange(true)", "play": "onPausedChange(false)", "volumechange": "onVolumeChange()", "timeupdate": "onCurrentTimeChange()", "seeking": "onCurrentTimeChange()", "seeked": "onCurrentTimeChange()", "durationchange": "changeDetectionTrigger()" }, properties: { "volume": "this.volume" } }, exportAs: ["tuiMedia"], ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiMediaDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: 'video[tuiMedia], audio[tuiMedia]',
                        exportAs: 'tuiMedia',
                    }]
            }], ctorParameters: function () {
            return [{ type: i0__namespace.ElementRef, decorators: [{
                            type: i0.Inject,
                            args: [i0.ElementRef]
                        }] }];
        }, propDecorators: { volume: [{
                    type: i0.Input
                }, {
                    type: i0.HostBinding,
                    args: ['volume']
                }], playbackRateSetter: [{
                    type: i0.Input,
                    args: ['playbackRate']
                }], currentTimeChange: [{
                    type: i0.Output
                }], pausedChange: [{
                    type: i0.Output
                }], volumeChange: [{
                    type: i0.Output
                }], currentTime: [{
                    type: i0.Input
                }], paused: [{
                    type: i0.Input
                }], onPausedChange: [{
                    type: i0.HostListener,
                    args: ['ended', ['true']]
                }, {
                    type: i0.HostListener,
                    args: ['pause', ['true']]
                }, {
                    type: i0.HostListener,
                    args: ['play', ['false']]
                }], onVolumeChange: [{
                    type: i0.HostListener,
                    args: ['volumechange']
                }], onCurrentTimeChange: [{
                    type: i0.HostListener,
                    args: ['timeupdate']
                }, {
                    type: i0.HostListener,
                    args: ['seeking']
                }, {
                    type: i0.HostListener,
                    args: ['seeked']
                }], changeDetectionTrigger: [{
                    type: i0.HostListener,
                    args: ['durationchange']
                }] } });

    var TuiMediaModule = /** @class */ (function () {
        function TuiMediaModule() {
        }
        return TuiMediaModule;
    }());
    TuiMediaModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiMediaModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    TuiMediaModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiMediaModule, declarations: [TuiMediaDirective], exports: [TuiMediaDirective] });
    TuiMediaModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiMediaModule });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiMediaModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [TuiMediaDirective],
                        exports: [TuiMediaDirective],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.TuiMediaDirective = TuiMediaDirective;
    exports.TuiMediaModule = TuiMediaModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=taiga-ui-cdk-directives-media.umd.js.map
