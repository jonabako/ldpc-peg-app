(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@taiga-ui/cdk/directives/active-zone'), require('@taiga-ui/cdk/observables'), require('@taiga-ui/cdk/services'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('@taiga-ui/cdk/directives/obscured', ['exports', '@angular/core', '@taiga-ui/cdk/directives/active-zone', '@taiga-ui/cdk/observables', '@taiga-ui/cdk/services', 'rxjs', 'rxjs/operators'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global["taiga-ui"] = global["taiga-ui"] || {}, global["taiga-ui"].cdk = global["taiga-ui"].cdk || {}, global["taiga-ui"].cdk.directives = global["taiga-ui"].cdk.directives || {}, global["taiga-ui"].cdk.directives.obscured = {}), global.ng.core, global["taiga-ui"].cdk.directives["active-zone"], global["taiga-ui"].cdk.observables, global["taiga-ui"].cdk.services, global.rxjs, global.rxjs.operators));
})(this, (function (exports, i0, i1, observables, i2, rxjs, operators) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);

    /**
     * Directive that monitors element visibility
     */
    var TuiObscuredDirective = /** @class */ (function () {
        function TuiObscuredDirective(activeZone, obscured$) {
            this.enabled$ = new rxjs.Subject();
            var mapped$ = obscured$.pipe(operators.map(function (obscuredBy) { return !!obscuredBy &&
                (!activeZone ||
                    !obscuredBy.length ||
                    obscuredBy.every(function (element) { return !activeZone.contains(element); })); }));
            this.tuiObscured = this.enabled$.pipe(observables.tuiIfMap(function () { return mapped$; }));
        }
        Object.defineProperty(TuiObscuredDirective.prototype, "tuiObscuredEnabled", {
            set: function (enabled) {
                this.enabled$.next(enabled);
            },
            enumerable: false,
            configurable: true
        });
        return TuiObscuredDirective;
    }());
    TuiObscuredDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiObscuredDirective, deps: [{ token: i1.TuiActiveZoneDirective, optional: true }, { token: i2.TuiObscuredService, self: true }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    TuiObscuredDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiObscuredDirective, selector: "[tuiObscured]", inputs: { tuiObscuredEnabled: "tuiObscuredEnabled" }, outputs: { tuiObscured: "tuiObscured" }, providers: [i2.TuiObscuredService, i2.TuiParentsScrollService, i2.TuiDestroyService], ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiObscuredDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[tuiObscured]',
                        providers: [i2.TuiObscuredService, i2.TuiParentsScrollService, i2.TuiDestroyService],
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.TuiActiveZoneDirective, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [i1.TuiActiveZoneDirective]
                        }] }, { type: i2__namespace.TuiObscuredService, decorators: [{
                            type: i0.Self
                        }, {
                            type: i0.Inject,
                            args: [i2.TuiObscuredService]
                        }] }];
        }, propDecorators: { tuiObscuredEnabled: [{
                    type: i0.Input
                }], tuiObscured: [{
                    type: i0.Output
                }] } });

    var TuiObscuredModule = /** @class */ (function () {
        function TuiObscuredModule() {
        }
        return TuiObscuredModule;
    }());
    TuiObscuredModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiObscuredModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    TuiObscuredModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiObscuredModule, declarations: [TuiObscuredDirective], exports: [TuiObscuredDirective] });
    TuiObscuredModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiObscuredModule });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiObscuredModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [TuiObscuredDirective],
                        exports: [TuiObscuredDirective],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.TuiObscuredDirective = TuiObscuredDirective;
    exports.TuiObscuredModule = TuiObscuredModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=taiga-ui-cdk-directives-obscured.umd.js.map
