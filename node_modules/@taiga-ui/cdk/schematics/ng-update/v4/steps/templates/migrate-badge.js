"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.migrateBadgeValue = void 0;
const elements_1 = require("../../../../utils/templates/elements");
const template_resource_1 = require("../../../../utils/templates/template-resource");
function migrateBadgeValue({ resource, recorder, fileSystem, }) {
    const template = template_resource_1.getTemplateFromTemplateResource(resource, fileSystem);
    const templateOffset = template_resource_1.getTemplateOffset(resource);
    const elements = elements_1.findElementsWithAttributeOnTag(template, ['[value]', 'value'], ['tui-badge']);
    elements.forEach(({ attrs, sourceCodeLocation }) => {
        var _a;
        const attr = attrs.find(attr => attr.name === '[value]' || attr.name === 'value');
        if (!attr) {
            return;
        }
        const attrValue = attr === null || attr === void 0 ? void 0 : attr.value;
        const insertTo = sourceCodeLocation === null || sourceCodeLocation === void 0 ? void 0 : sourceCodeLocation.endTag.startOffset;
        if (!attrValue || !insertTo) {
            return;
        }
        recorder.insertRight(insertTo + templateOffset, attr.name === 'value' ? attrValue : `{{ ${attrValue} }}`);
        const attrOffset = (_a = sourceCodeLocation === null || sourceCodeLocation === void 0 ? void 0 : sourceCodeLocation.attrs) === null || _a === void 0 ? void 0 : _a[attr.name];
        if (attrOffset) {
            const { startOffset, endOffset } = attrOffset;
            recorder.remove(templateOffset + startOffset - 1, endOffset - startOffset + 1);
        }
    });
}
exports.migrateBadgeValue = migrateBadgeValue;
