"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.migrateAvatar = void 0;
const add_import_to_closest_module_1 = require("../../../../utils/add-import-to-closest-module");
const elements_1 = require("../../../../utils/templates/elements");
const template_resource_1 = require("../../../../utils/templates/template-resource");
function addModules(componentPath, modules) {
    modules.forEach(({ moduleName, moduleSpecifier }) => {
        add_import_to_closest_module_1.addImportToClosestModule(componentPath, moduleName, moduleSpecifier);
    });
}
function removeAttrs(attrs, sourceCodeLocation, recorder, templateOffset) {
    attrs.forEach(attr => {
        var _a;
        const attrOffset = (_a = sourceCodeLocation.attrs) === null || _a === void 0 ? void 0 : _a[attr.name];
        if (attrOffset) {
            const { startOffset, endOffset } = attrOffset;
            recorder.remove(templateOffset + startOffset - 1, endOffset - startOffset + 1);
        }
    });
}
function getFallbackValue(textValue, fallbackValue) {
    if (textValue) {
        return `(${textValue} | tuiInitials)`;
    }
    return textValue ? `(${textValue} | tuiInitials)` : fallbackValue || '';
}
function normalizeAttrValue(attrName, attrValue) {
    return attrName.startsWith('[') ? attrValue : `'${attrValue}'`;
}
function migrateAvatar({ resource, recorder, fileSystem, }) {
    const template = template_resource_1.getTemplateFromTemplateResource(resource, fileSystem);
    const templateOffset = template_resource_1.getTemplateOffset(resource);
    const elements = elements_1.findElementsByTagName(template, 'tui-avatar');
    elements.forEach(({ attrs, sourceCodeLocation }) => {
        const avatarUrlAttr = attrs.find(attr => attr.name === '[avatarurl]' || attr.name === 'avatarurl');
        const fallbackAttr = attrs.find(attr => attr.name === '[fallback]' || attr.name === 'fallback');
        const textAttr = attrs.find(attr => attr.name === '[text]' || attr.name === 'text');
        const roundedAttr = attrs.find(attr => attr.name === '[rounded]' || attr.name === 'rounded');
        if ((!avatarUrlAttr && !textAttr) || !sourceCodeLocation) {
            return;
        }
        const urlAttrValue = (avatarUrlAttr === null || avatarUrlAttr === void 0 ? void 0 : avatarUrlAttr.value) &&
            normalizeAttrValue(avatarUrlAttr.name, avatarUrlAttr.value);
        const textAttrValue = (textAttr === null || textAttr === void 0 ? void 0 : textAttr.value) && normalizeAttrValue(textAttr.name, textAttr.value);
        const fallbackAttrValue = (fallbackAttr === null || fallbackAttr === void 0 ? void 0 : fallbackAttr.value) &&
            normalizeAttrValue(fallbackAttr.name, fallbackAttr.value);
        const insertTo = sourceCodeLocation.startTag.startOffset + '<tui-avatar'.length;
        if (!insertTo) {
            return;
        }
        const mainSrc = urlAttrValue || (textAttrValue ? `${textAttrValue} | tuiInitials` : '');
        const fallbackValue = urlAttrValue
            ? getFallbackValue(textAttrValue, fallbackAttrValue)
            : '';
        const fallbackSrc = urlAttrValue && fallbackValue
            ? `| tuiFallbackSrc : ${fallbackValue} | async`
            : '';
        recorder.insertRight(insertTo + templateOffset, ` [src]="${mainSrc}${fallbackSrc ? ` ${fallbackSrc}` : ''}"${!roundedAttr ? ' [round]="false"' : ''}`);
        const attrsToRemove = [avatarUrlAttr, textAttr, fallbackAttr].filter((attr) => attr !== undefined);
        const fallbackModule = !!((avatarUrlAttr && textAttrValue) || fallbackAttr);
        const initialsModule = !!textAttrValue;
        const modules = [
            ...(fallbackModule
                ? [{ moduleName: 'TuiFallbackModule', moduleSpecifier: '@taiga-ui/cdk' }]
                : []),
            ...(initialsModule
                ? [{ moduleName: 'TuiInitialsModule', moduleSpecifier: '@taiga-ui/cdk' }]
                : []),
        ];
        addModules(resource.componentPath, modules);
        removeAttrs(attrsToRemove, sourceCodeLocation, recorder, templateOffset);
    });
}
exports.migrateAvatar = migrateAvatar;
