"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateToV4 = void 0;
const schematics_1 = require("@angular-devkit/schematics");
const ng_morph_1 = require("ng-morph");
const perf_hooks_1 = require("perf_hooks");
const constants_1 = require("../../constants");
const versions_1 = require("../../ng-add/constants/versions");
const colored_log_1 = require("../../utils/colored-log");
const get_execution_time_1 = require("../../utils/get-execution-time");
const project_root_1 = require("../../utils/project-root");
const replace_identifier_1 = require("../steps/replace-identifier");
const steps_1 = require("./steps");
const identifiers_to_replace_1 = require("./steps/constants/identifiers-to-replace");
function main(options) {
    return (tree, _context) => {
        const project = ng_morph_1.createProject(tree, project_root_1.projectRoot(), constants_1.ALL_FILES);
        const fileSystem = project.getFileSystem().fs;
        replace_identifier_1.replaceIdentifiers(options, identifiers_to_replace_1.IDENTIFIERS_TO_REPLACE);
        steps_1.restoreTuiMapper(options);
        steps_1.restoreTuiMatcher(options);
        steps_1.migrateTemplates(fileSystem, options);
        fileSystem.commitEdits();
        ng_morph_1.saveActiveProject();
    };
}
function updateToV4(options) {
    const t0 = perf_hooks_1.performance.now();
    !options['skip-logs'] &&
        colored_log_1.titleLog(`\n\n${colored_log_1.START_SYMBOL} Your packages will be updated to @taiga-ui/*@${versions_1.TAIGA_VERSION}\n`);
    return schematics_1.chain([
        main(options),
        () => {
            const executionTime = get_execution_time_1.getExecutionTime(t0, perf_hooks_1.performance.now());
            !options['skip-logs'] &&
                colored_log_1.titleLog(`${colored_log_1.FINISH_SYMBOL} We migrated packages to @taiga-ui/*@${versions_1.TAIGA_VERSION} in ${executionTime}. \n`);
        },
    ]);
}
exports.updateToV4 = updateToV4;
