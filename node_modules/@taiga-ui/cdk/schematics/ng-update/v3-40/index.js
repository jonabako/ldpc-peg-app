"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateToV3_40 = void 0;
const ng_morph_1 = require("ng-morph");
const constants_1 = require("../../constants");
const colored_log_1 = require("../../utils/colored-log");
const project_root_1 = require("../../utils/project-root");
const elements_1 = require("../../utils/templates/elements");
const get_component_templates_1 = require("../../utils/templates/get-component-templates");
const template_resource_1 = require("../../utils/templates/template-resource");
const get_file_system_1 = require("../utils/get-file-system");
const replace_text_1 = require("../utils/replace-text");
const replace_tag_1 = require("../utils/templates/replace-tag");
function replaceTextareaTag(options, fileSystem) {
    !options['skip-logs'] &&
        colored_log_1.infoLog(`${colored_log_1.SMALL_TAB_SYMBOL}${colored_log_1.REPLACE_SYMBOL} replacing <tui-text-area /> to <tui-textarea />`);
    get_component_templates_1.getComponentTemplates(constants_1.ALL_TS_FILES).forEach(resource => {
        const template = template_resource_1.getTemplateFromTemplateResource(resource, fileSystem);
        const elements = elements_1.findElementsByTagName(template, 'tui-text-area');
        const path = fileSystem.resolve(template_resource_1.getPathFromTemplateResource(resource));
        const recorder = fileSystem.edit(path);
        elements.forEach(({ sourceCodeLocation }) => {
            if (sourceCodeLocation) {
                replace_tag_1.replaceTag(recorder, sourceCodeLocation, 'tui-text-area', 'tui-textarea');
            }
        });
    });
    fileSystem.commitEdits();
    ng_morph_1.saveActiveProject();
    ng_morph_1.setActiveProject(ng_morph_1.createProject(fileSystem.tree, project_root_1.projectRoot(), constants_1.ALL_FILES));
}
function replaceTextareaReferenceTypes(options, fileSystem) {
    !options['skip-logs'] &&
        colored_log_1.infoLog(`${colored_log_1.SMALL_TAB_SYMBOL}${colored_log_1.REPLACE_SYMBOL} replacing TuiTextArea(Module|Directive|Component) to TuiTextarea(Module|Directive|Component)`);
    replace_text_1.replaceText([
        {
            from: 'TuiTextAreaModule',
            to: 'TuiTextareaModule',
        },
        {
            from: 'TuiTextAreaDirective',
            to: 'TuiTextareaDirective',
        },
        {
            from: 'TuiTextAreaComponent',
            to: 'TuiTextareaComponent',
        },
    ]);
    fileSystem.commitEdits();
    ng_morph_1.saveActiveProject();
    ng_morph_1.setActiveProject(ng_morph_1.createProject(fileSystem.tree, project_root_1.projectRoot(), constants_1.ALL_FILES));
}
function updateToV3_40(options) {
    return (tree, _) => {
        const fileSystem = get_file_system_1.getFileSystem(tree);
        replaceTextareaTag(options, fileSystem);
        replaceTextareaReferenceTypes(options, fileSystem);
        !options['skip-logs'] && colored_log_1.titleLog(`${colored_log_1.FINISH_SYMBOL} successfully migrated \n`);
    };
}
exports.updateToV3_40 = updateToV3_40;
