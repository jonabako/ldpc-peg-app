"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.replaceAttrValues = void 0;
const elements_1 = require("../../../utils/templates/elements");
const template_resource_1 = require("../../../utils/templates/template-resource");
function replaceAttrValues({ resource, recorder, fileSystem, data, }) {
    const template = template_resource_1.getTemplateFromTemplateResource(resource, fileSystem);
    const templateOffset = template_resource_1.getTemplateOffset(resource);
    data.forEach(({ attrNames, values, withTagNames }) => {
        const elements = [
            ...elements_1.findElementsWithAttributeOnTag(template, attrNames, withTagNames),
        ];
        elements.forEach(element => {
            const { name, value } = element.attrs.find(attr => attrNames.map(name => name.toLowerCase()).includes(attr.name)) || {};
            if (!name || !value) {
                return;
            }
            const attributeName = attrNames.find(attrName => attrName.toLowerCase() === name);
            values.forEach(({ from, to }) => {
                var _a, _b;
                if (value === from) {
                    const { startOffset, endOffset } = ((_b = (_a = element.sourceCodeLocation) === null || _a === void 0 ? void 0 : _a.attrs) === null || _b === void 0 ? void 0 : _b[name]) || { startOffset: 0, endOffset: 0 };
                    recorder.remove(templateOffset + startOffset, endOffset - startOffset);
                    recorder.insertRight(templateOffset + startOffset, `${attributeName}="${to}"`);
                }
            });
        });
    });
}
exports.replaceAttrValues = replaceAttrValues;
