(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('rxjs/operators'), require('@taiga-ui/cdk'), require('@tinkoff/ng-polymorpheus'), require('@taiga-ui/core'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('@taiga-ui/kit/components/tree', ['exports', '@angular/core', 'rxjs', 'rxjs/operators', '@taiga-ui/cdk', '@tinkoff/ng-polymorpheus', '@taiga-ui/core', '@angular/common'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global["taiga-ui"] = global["taiga-ui"] || {}, global["taiga-ui"].kit = global["taiga-ui"].kit || {}, global["taiga-ui"].kit.components = global["taiga-ui"].kit.components || {}, global["taiga-ui"].kit.components.tree = {}), global.ng.core, global.rxjs, global.rxjs.operators, global.i2, global.i2$1, global.i1, global.ng.common));
})(this, (function (exports, i0, rxjs, operators, i2, i2$1, i1, i4) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i2__namespace$1 = /*#__PURE__*/_interopNamespace(i2);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2$1);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i4__namespace = /*#__PURE__*/_interopNamespace(i4);

    var TuiTreeChildrenDirective = /** @class */ (function () {
        function TuiTreeChildrenDirective() {
            this.childrenHandler = TuiTreeChildrenDirective.defaultHandler;
        }
        TuiTreeChildrenDirective.defaultHandler = function (item) {
            return Array.isArray(item) ? item : i2.EMPTY_ARRAY;
        };
        return TuiTreeChildrenDirective;
    }());
    TuiTreeChildrenDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiTreeChildrenDirective, deps: [], target: i0__namespace.ɵɵFactoryTarget.Directive });
    TuiTreeChildrenDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiTreeChildrenDirective, selector: "tui-tree[childrenHandler]", inputs: { childrenHandler: "childrenHandler" }, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiTreeChildrenDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: 'tui-tree[childrenHandler]',
                    }]
            }], propDecorators: { childrenHandler: [{
                    type: i0.Input
                }] } });

    var TuiTreeItemContentComponent = /** @class */ (function () {
        function TuiTreeItemContentComponent(icons, context, controller) {
            this.icons = icons;
            this.context = context;
            this.controller = controller;
        }
        Object.defineProperty(TuiTreeItemContentComponent.prototype, "isExpanded", {
            get: function () {
                return this.context.$implicit.isExpanded;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TuiTreeItemContentComponent.prototype, "isExpandable", {
            get: function () {
                return (this.context.$implicit.isExpandable &&
                    this.controller !== TUI_DEFAULT_TREE_CONTROLLER);
            },
            enumerable: false,
            configurable: true
        });
        TuiTreeItemContentComponent.prototype.onClick = function () {
            this.controller.toggle(this.context.$implicit);
        };
        return TuiTreeItemContentComponent;
    }());
    TuiTreeItemContentComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiTreeItemContentComponent, deps: [{ token: i1.TUI_COMMON_ICONS }, { token: i2$1.POLYMORPHEUS_CONTEXT }, { token: i0.forwardRef(function () { return TUI_TREE_CONTROLLER; }) }], target: i0__namespace.ɵɵFactoryTarget.Component });
    TuiTreeItemContentComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiTreeItemContentComponent, selector: "tui-tree-item-content", host: { properties: { "class._expandable": "this.isExpandable" } }, ngImport: i0__namespace, template: "<button\n    *ngIf=\"isExpandable\"\n    appearance=\"flat\"\n    shape=\"rounded\"\n    size=\"xs\"\n    tuiIconButton\n    type=\"button\"\n    class=\"t-button\"\n    [class.t-button_expanded]=\"isExpanded\"\n    [icon]=\"icons.more\"\n    (click)=\"onClick()\"\n></button>\n<ng-container [ngTemplateOutlet]=\"context.template\"></ng-container>\n", styles: [":host{display:flex;align-items:center}:host :host-context(tui-tree-item._expandable):not(._expandable){padding-left:2rem}.t-button{transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;margin-right:.5rem}.t-button_expanded{transform:rotate(90deg)}\n"], components: [{ type: i1__namespace.TuiButtonComponent, selector: "button[tuiButton], button[tuiIconButton], a[tuiButton], a[tuiIconButton]", inputs: ["appearance", "disabled", "icon", "iconRight", "shape", "showLoader", "size"] }], directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiTreeItemContentComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'tui-tree-item-content',
                        templateUrl: './tree-item-content.template.html',
                        styleUrls: ['./tree-item-content.style.less'],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () {
            return [{ type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i1.TUI_COMMON_ICONS]
                        }] }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i2$1.POLYMORPHEUS_CONTEXT]
                        }] }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i0.forwardRef(function () { return TUI_TREE_CONTROLLER; })]
                        }] }];
        }, propDecorators: { isExpandable: [{
                    type: i0.HostBinding,
                    args: ['class._expandable']
                }] } });

    var TUI_TREE_ITEM_CONTENT = new i2$1.PolymorpheusComponent(TuiTreeItemContentComponent);
    var TUI_DEFAULT_TREE_CONTROLLER = {
        isExpanded: i2.ALWAYS_TRUE_HANDLER,
        toggle: i2.EMPTY_FUNCTION,
    };

    /**
     * Controller for tracking value - TuiTreeItemComponent pairs
     */
    var TUI_TREE_ACCESSOR = new i0.InjectionToken('[TUI_TREE_ACCESSOR]');
    /**
     * Controller for expanding the tree
     */
    var TUI_TREE_CONTROLLER = i2.tuiCreateToken(TUI_DEFAULT_TREE_CONTROLLER);
    /**
     * A node of a tree view
     */
    var TUI_TREE_NODE = new i0.InjectionToken('[TUI_TREE_NODE]');
    /**
     * A tree node placeholder for loading
     */
    var TUI_TREE_LOADING = i2.tuiCreateToken({});
    /**
     * A tree node starting point
     */
    var TUI_TREE_START = new i0.InjectionToken('[TUI_TREE_START]');
    /**
     * A service to load tree progressively
     */
    var TUI_TREE_LOADER = new i0.InjectionToken('[TUI_TREE_LOADER]');
    /**
     * Content for a tree item
     */
    var TUI_TREE_CONTENT = i2.tuiCreateToken(TUI_TREE_ITEM_CONTENT);
    /**
     * Nesting level of current TreeView node
     */
    var TUI_TREE_LEVEL = i2.tuiCreateToken(-1);

    var TUI_TREE_ITEM_PROVIDERS = [
        {
            provide: TUI_TREE_LEVEL,
            deps: [[new i0.SkipSelf(), TUI_TREE_LEVEL]],
            useFactory: function (level) { return ++level; },
        },
        {
            provide: TUI_TREE_NODE,
            useExisting: i0.forwardRef(function () { return TuiTreeItemComponent; }),
        },
    ];

    var TuiTreeItemComponent = /** @class */ (function () {
        function TuiTreeItemComponent(el, controller, level, content) {
            var _this = this;
            this.el = el;
            this.controller = controller;
            this.level = level;
            this.content = content;
            this.nested = i2.EMPTY_QUERY;
            this.change$ = new rxjs.Subject();
            this.expanded$ = this.change$.pipe(operators.startWith(null), operators.map(function () { return _this.isExpanded; }));
            this.attached$ = this.change$.pipe(operators.map(function () { return _this.el.nativeElement.isConnected; }), operators.distinctUntilChanged());
        }
        Object.defineProperty(TuiTreeItemComponent.prototype, "isExpandable", {
            get: function () {
                return !!this.nested.length;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TuiTreeItemComponent.prototype, "isExpanded", {
            get: function () {
                return this.controller.isExpanded(this);
            },
            enumerable: false,
            configurable: true
        });
        TuiTreeItemComponent.prototype.ngDoCheck = function () {
            this.checkChanges();
        };
        TuiTreeItemComponent.prototype.checkChanges = function () {
            this.change$.next();
        };
        return TuiTreeItemComponent;
    }());
    TuiTreeItemComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiTreeItemComponent, deps: [{ token: i0.ElementRef }, { token: i0.forwardRef(function () { return TUI_TREE_CONTROLLER; }) }, { token: i0.forwardRef(function () { return TUI_TREE_LEVEL; }) }, { token: i0.forwardRef(function () { return TUI_TREE_CONTENT; }) }], target: i0__namespace.ɵɵFactoryTarget.Component });
    TuiTreeItemComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiTreeItemComponent, selector: "tui-tree-item", host: { attributes: { "role": "treeitem" }, properties: { "class._expandable": "this.isExpandable" } }, providers: TUI_TREE_ITEM_PROVIDERS, queries: [{ propertyName: "nested", predicate: TUI_TREE_NODE }], ngImport: i0__namespace, template: "<ng-template #template>\n    <ng-content></ng-content>\n</ng-template>\n<ng-container *polymorpheusOutlet=\"content as text; context: {$implicit: this, template: template}\">\n    {{ text }}\n</ng-container>\n<tui-expand\n    *ngIf=\"isExpandable\"\n    role=\"group\"\n    class=\"t-children\"\n    [expanded]=\"expanded$ | async\"\n>\n    <div>\n        <ng-content select=\"tui-tree-item\"></ng-content>\n        <ng-content select=\"tui-tree\"></ng-content>\n    </div>\n</tui-expand>\n<ng-container *ngIf=\"attached$ | async\"></ng-container>\n", styles: [":host{display:block}.t-children{position:relative;margin-left:var(--tui-tree-item-indent, 1.5rem)}\n"], components: [{ type: i1__namespace.TuiExpandComponent, selector: "tui-expand", inputs: ["async", "expanded"] }], directives: [{ type: i2__namespace.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i4__namespace.AsyncPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiTreeItemComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'tui-tree-item',
                        templateUrl: './tree-item.template.html',
                        styleUrls: ['./tree-item.style.less'],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        providers: TUI_TREE_ITEM_PROVIDERS,
                        host: {
                            role: 'treeitem',
                        },
                    }]
            }], ctorParameters: function () {
            return [{ type: i0__namespace.ElementRef, decorators: [{
                            type: i0.Inject,
                            args: [i0.ElementRef]
                        }] }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i0.forwardRef(function () { return TUI_TREE_CONTROLLER; })]
                        }] }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i0.forwardRef(function () { return TUI_TREE_LEVEL; })]
                        }] }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i0.forwardRef(function () { return TUI_TREE_CONTENT; })]
                        }] }];
        }, propDecorators: { nested: [{
                    type: i0.ContentChildren,
                    args: [TUI_TREE_NODE]
                }], isExpandable: [{
                    type: i0.HostBinding,
                    args: ['class._expandable']
                }] } });

    var TuiTreeNodeDirective = /** @class */ (function () {
        function TuiTreeNodeDirective(directive, component) {
            this.directive = directive;
            this.component = component;
        }
        Object.defineProperty(TuiTreeNodeDirective.prototype, "value", {
            set: function (value) {
                var _a;
                (_a = this.directive) === null || _a === void 0 ? void 0 : _a.register(this.component, value);
            },
            enumerable: false,
            configurable: true
        });
        TuiTreeNodeDirective.prototype.ngOnDestroy = function () {
            var _a;
            (_a = this.directive) === null || _a === void 0 ? void 0 : _a.unregister(this.component);
        };
        return TuiTreeNodeDirective;
    }());
    TuiTreeNodeDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiTreeNodeDirective, deps: [{ token: TUI_TREE_ACCESSOR, optional: true }, { token: TuiTreeItemComponent }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    TuiTreeNodeDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiTreeNodeDirective, selector: "tui-tree-item[tuiTreeNode]", inputs: { value: ["tuiTreeNode", "value"] }, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiTreeNodeDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: 'tui-tree-item[tuiTreeNode]',
                    }]
            }], ctorParameters: function () {
            return [{ type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [TUI_TREE_ACCESSOR]
                        }] }, { type: TuiTreeItemComponent, decorators: [{
                            type: i0.Inject,
                            args: [TuiTreeItemComponent]
                        }] }];
        }, propDecorators: { value: [{
                    type: i0.Input,
                    args: ['tuiTreeNode']
                }] } });

    var TuiTreeComponent = /** @class */ (function () {
        function TuiTreeComponent(directive) {
            var _this = this;
            this.directive = directive;
            this.check$ = new rxjs.Subject();
            this.children$ = this.check$.pipe(operators.startWith(null), operators.map(function () { return _this.handler(_this.value); }), operators.distinctUntilChanged());
            this.trackBy = function (_, item) { return item; };
            this.content = function (_c) {
                var $implicit = _c.$implicit;
                return String($implicit);
            };
        }
        TuiTreeComponent.prototype.ngDoCheck = function () {
            this.checkChanges();
        };
        TuiTreeComponent.prototype.checkChanges = function () {
            var _a, _b;
            this.check$.next();
            (_a = this.item) === null || _a === void 0 ? void 0 : _a.checkChanges();
            (_b = this.child) === null || _b === void 0 ? void 0 : _b.checkChanges();
        };
        Object.defineProperty(TuiTreeComponent.prototype, "handler", {
            get: function () {
                var _a;
                return ((_a = this.directive) === null || _a === void 0 ? void 0 : _a.childrenHandler) || TuiTreeChildrenDirective.defaultHandler;
            },
            enumerable: false,
            configurable: true
        });
        return TuiTreeComponent;
    }());
    TuiTreeComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiTreeComponent, deps: [{ token: TuiTreeChildrenDirective, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Component });
    TuiTreeComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiTreeComponent, selector: "tui-tree[value]", inputs: { value: "value", trackBy: "trackBy", content: "content" }, host: { attributes: { "role": "tree" } }, providers: [
            {
                provide: TUI_TREE_NODE,
                useExisting: TuiTreeComponent,
            },
        ], viewQueries: [{ propertyName: "item", first: true, predicate: TuiTreeItemComponent, descendants: true }, { propertyName: "child", first: true, predicate: TuiTreeComponent, descendants: true }], ngImport: i0__namespace, template: "<tui-tree-item\n    *tuiLet=\"children$ | async as children\"\n    #view\n    [tuiTreeNode]=\"value\"\n>\n    <ng-container *ngIf=\"$any(value) !== children\">\n        <ng-container *polymorpheusOutlet=\"content as text; context: {$implicit: value, node: view}\">\n            {{ text }}\n        </ng-container>\n    </ng-container>\n    <tui-tree\n        *ngFor=\"let child of children; trackBy: trackBy\"\n        [content]=\"content\"\n        [trackBy]=\"trackBy\"\n        [value]=\"child\"\n    ></tui-tree>\n</tui-tree-item>\n", styles: [":host{position:relative;display:block}\n"], components: [{ type: TuiTreeItemComponent, selector: "tui-tree-item" }, { type: TuiTreeComponent, selector: "tui-tree[value]", inputs: ["value", "trackBy", "content"] }], directives: [{ type: i2__namespace$1.TuiLetDirective, selector: "[tuiLet]", inputs: ["tuiLet"] }, { type: TuiTreeNodeDirective, selector: "tui-tree-item[tuiTreeNode]", inputs: ["tuiTreeNode"] }, { type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { type: i4__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "async": i4__namespace.AsyncPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiTreeComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'tui-tree[value]',
                        templateUrl: './tree.template.html',
                        styleUrls: ['./tree.style.less'],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        providers: [
                            {
                                provide: TUI_TREE_NODE,
                                useExisting: TuiTreeComponent,
                            },
                        ],
                        host: {
                            role: 'tree',
                        },
                    }]
            }], ctorParameters: function () {
            return [{ type: TuiTreeChildrenDirective, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [TuiTreeChildrenDirective]
                        }] }];
        }, propDecorators: { value: [{
                    type: i0.Input
                }], item: [{
                    type: i0.ViewChild,
                    args: [TuiTreeItemComponent]
                }], child: [{
                    type: i0.ViewChild,
                    args: [TuiTreeComponent]
                }], trackBy: [{
                    type: i0.Input
                }], content: [{
                    type: i0.Input
                }] } });

    var TuiTreeControllerDirective = /** @class */ (function () {
        function TuiTreeControllerDirective() {
            this.fallback = true;
            this.map = new Map();
            this.toggled = new i0.EventEmitter();
            this.items = new Map();
        }
        TuiTreeControllerDirective.prototype.register = function (item, value) {
            this.items.set(item, value);
        };
        TuiTreeControllerDirective.prototype.unregister = function (item) {
            this.items.delete(item);
        };
        TuiTreeControllerDirective.prototype.isExpanded = function (item) {
            var _a;
            var value = this.items.get(item);
            return (_a = (value && this.map.get(value))) !== null && _a !== void 0 ? _a : this.fallback;
        };
        TuiTreeControllerDirective.prototype.toggle = function (item) {
            var value = this.items.get(item);
            var expanded = this.isExpanded(item);
            if (!i2.tuiIsPresent(value)) {
                return;
            }
            this.toggled.emit(value);
            this.map.set(value, !expanded);
        };
        return TuiTreeControllerDirective;
    }());
    TuiTreeControllerDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiTreeControllerDirective, deps: [], target: i0__namespace.ɵɵFactoryTarget.Directive });
    TuiTreeControllerDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiTreeControllerDirective, selector: "[tuiTreeController][map]", inputs: { fallback: ["tuiTreeController", "fallback"], map: "map" }, outputs: { toggled: "toggled" }, providers: [
            {
                provide: TUI_TREE_ACCESSOR,
                useExisting: TuiTreeControllerDirective,
            },
            {
                provide: TUI_TREE_CONTROLLER,
                useExisting: TuiTreeControllerDirective,
            },
        ], exportAs: ["tuiTreeController"], ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiTreeControllerDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[tuiTreeController][map]',
                        providers: [
                            {
                                provide: TUI_TREE_ACCESSOR,
                                useExisting: TuiTreeControllerDirective,
                            },
                            {
                                provide: TUI_TREE_CONTROLLER,
                                useExisting: TuiTreeControllerDirective,
                            },
                        ],
                        exportAs: 'tuiTreeController',
                    }]
            }], propDecorators: { fallback: [{
                    type: i0.Input,
                    args: ['tuiTreeController']
                }], map: [{
                    type: i0.Input
                }], toggled: [{
                    type: i0.Output
                }] } });

    var TuiTreeItemControllerDirective = /** @class */ (function () {
        function TuiTreeItemControllerDirective() {
            this.map = new WeakMap();
            this.fallback = true;
        }
        TuiTreeItemControllerDirective.prototype.isExpanded = function (item) {
            var _a;
            return (_a = this.map.get(item)) !== null && _a !== void 0 ? _a : this.fallback;
        };
        TuiTreeItemControllerDirective.prototype.toggle = function (item) {
            this.map.set(item, !this.isExpanded(item));
        };
        return TuiTreeItemControllerDirective;
    }());
    TuiTreeItemControllerDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiTreeItemControllerDirective, deps: [], target: i0__namespace.ɵɵFactoryTarget.Directive });
    TuiTreeItemControllerDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiTreeItemControllerDirective, selector: "[tuiTreeController]:not([map])", inputs: { fallback: ["tuiTreeController", "fallback"] }, providers: [
            {
                provide: TUI_TREE_CONTROLLER,
                useExisting: TuiTreeItemControllerDirective,
            },
        ], exportAs: ["tuiTreeController"], ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiTreeItemControllerDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[tuiTreeController]:not([map])',
                        providers: [
                            {
                                provide: TUI_TREE_CONTROLLER,
                                useExisting: TuiTreeItemControllerDirective,
                            },
                        ],
                        exportAs: 'tuiTreeController',
                    }]
            }], propDecorators: { fallback: [{
                    type: i0.Input,
                    args: ['tuiTreeController']
                }] } });

    var TuiTreeService = /** @class */ (function () {
        function TuiTreeService(loading, start, loader) {
            var _this = this;
            this.loading = loading;
            this.start = start;
            this.loader = loader;
            this.map = new Map([[this.loading, []]]);
            this.load$ = new rxjs.Subject();
            this.data$ = this.load$.pipe(operators.switchMap(function (item) { return _this.loader.loadChildren(item).pipe(operators.tap(function (children) { return _this.map.set(item, children); }), operators.map(function (children) { return children.filter(function (item) { return !_this.loader.hasChildren(item); }); }), operators.tap(function (children) { return children.forEach(function (child) { return _this.map.set(child, []); }); })); }), operators.startWith(null), operators.map(function () { return _this.start; }));
        }
        TuiTreeService.prototype.getChildren = function (item) {
            return this.map.get(item) || [this.loading];
        };
        TuiTreeService.prototype.loadChildren = function (item) {
            if (this.map.get(item)) {
                return;
            }
            this.map.set(item, [this.loading]);
            this.load$.next(item);
        };
        return TuiTreeService;
    }());
    TuiTreeService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiTreeService, deps: [{ token: TUI_TREE_LOADING }, { token: TUI_TREE_START }, { token: TUI_TREE_LOADER }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    TuiTreeService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiTreeService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiTreeService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () {
            return [{ type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [TUI_TREE_LOADING]
                        }] }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [TUI_TREE_START]
                        }] }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [TUI_TREE_LOADER]
                        }] }];
        } });

    var TuiTreeModule = /** @class */ (function () {
        function TuiTreeModule() {
        }
        return TuiTreeModule;
    }());
    TuiTreeModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiTreeModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    TuiTreeModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiTreeModule, declarations: [TuiTreeComponent,
            TuiTreeItemComponent,
            TuiTreeItemContentComponent,
            TuiTreeChildrenDirective,
            TuiTreeItemControllerDirective,
            TuiTreeControllerDirective,
            TuiTreeNodeDirective], imports: [i4.CommonModule,
            i2$1.PolymorpheusModule,
            i1.TuiExpandModule,
            i2.TuiLetModule,
            i1.TuiButtonModule], exports: [TuiTreeComponent,
            TuiTreeItemComponent,
            TuiTreeChildrenDirective,
            TuiTreeItemControllerDirective,
            TuiTreeControllerDirective] });
    TuiTreeModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiTreeModule, imports: [[
                i4.CommonModule,
                i2$1.PolymorpheusModule,
                i1.TuiExpandModule,
                i2.TuiLetModule,
                i1.TuiButtonModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiTreeModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i4.CommonModule,
                            i2$1.PolymorpheusModule,
                            i1.TuiExpandModule,
                            i2.TuiLetModule,
                            i1.TuiButtonModule,
                        ],
                        declarations: [
                            TuiTreeComponent,
                            TuiTreeItemComponent,
                            TuiTreeItemContentComponent,
                            TuiTreeChildrenDirective,
                            TuiTreeItemControllerDirective,
                            TuiTreeControllerDirective,
                            TuiTreeNodeDirective,
                        ],
                        exports: [
                            TuiTreeComponent,
                            TuiTreeItemComponent,
                            TuiTreeChildrenDirective,
                            TuiTreeItemControllerDirective,
                            TuiTreeControllerDirective,
                        ],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.TUI_DEFAULT_TREE_CONTROLLER = TUI_DEFAULT_TREE_CONTROLLER;
    exports.TUI_TREE_ACCESSOR = TUI_TREE_ACCESSOR;
    exports.TUI_TREE_CONTENT = TUI_TREE_CONTENT;
    exports.TUI_TREE_CONTROLLER = TUI_TREE_CONTROLLER;
    exports.TUI_TREE_ITEM_CONTENT = TUI_TREE_ITEM_CONTENT;
    exports.TUI_TREE_ITEM_PROVIDERS = TUI_TREE_ITEM_PROVIDERS;
    exports.TUI_TREE_LEVEL = TUI_TREE_LEVEL;
    exports.TUI_TREE_LOADER = TUI_TREE_LOADER;
    exports.TUI_TREE_LOADING = TUI_TREE_LOADING;
    exports.TUI_TREE_NODE = TUI_TREE_NODE;
    exports.TUI_TREE_START = TUI_TREE_START;
    exports.TuiTreeChildrenDirective = TuiTreeChildrenDirective;
    exports.TuiTreeComponent = TuiTreeComponent;
    exports.TuiTreeControllerDirective = TuiTreeControllerDirective;
    exports.TuiTreeItemComponent = TuiTreeItemComponent;
    exports.TuiTreeItemContentComponent = TuiTreeItemContentComponent;
    exports.TuiTreeItemControllerDirective = TuiTreeItemControllerDirective;
    exports.TuiTreeModule = TuiTreeModule;
    exports.TuiTreeNodeDirective = TuiTreeNodeDirective;
    exports.TuiTreeService = TuiTreeService;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=taiga-ui-kit-components-tree.umd.js.map
