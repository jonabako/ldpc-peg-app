(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@taiga-ui/core'), require('@taiga-ui/kit/utils/format'), require('@taiga-ui/cdk'), require('@angular/common'), require('@tinkoff/ng-polymorpheus'), require('@angular/forms'), require('rxjs')) :
    typeof define === 'function' && define.amd ? define('@taiga-ui/kit/components/tag', ['exports', '@angular/core', '@taiga-ui/core', '@taiga-ui/kit/utils/format', '@taiga-ui/cdk', '@angular/common', '@tinkoff/ng-polymorpheus', '@angular/forms', 'rxjs'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global["taiga-ui"] = global["taiga-ui"] || {}, global["taiga-ui"].kit = global["taiga-ui"].kit || {}, global["taiga-ui"].kit.components = global["taiga-ui"].kit.components || {}, global["taiga-ui"].kit.components.tag = {}), global.ng.core, global.i1, global["taiga-ui"].kit.utils.format, global.cdk, global.ng.common, global.i3, global.ng.forms, global.rxjs));
})(this, (function (exports, i0, i1, format, cdk, i2, i3, i4, i5) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);
    var i4__namespace = /*#__PURE__*/_interopNamespace(i4);
    var i5__namespace = /*#__PURE__*/_interopNamespace(i5);

    /** Default values for the tag options. */
    var TUI_TAG_DEFAULT_OPTIONS = {
        size: 'm',
        status: 'default',
        autoColor: false,
    };
    /**
     * Default parameters for Tag component
     */
    var TUI_TAG_OPTIONS = cdk.tuiCreateToken(TUI_TAG_DEFAULT_OPTIONS);
    function tuiTagOptionsProvider(options) {
        return cdk.tuiProvideOptions(TUI_TAG_OPTIONS, options, TUI_TAG_DEFAULT_OPTIONS);
    }

    var TuiTagComponent = /** @class */ (function () {
        function TuiTagComponent(el, mode$, options, icons) {
            this.el = el;
            this.mode$ = mode$;
            this.options = options;
            this.icons = icons;
            // TODO: Possibly implement standard focus mechanisms and outline
            this.value = '';
            this.editable = false;
            this.separator = ',';
            this.maxLength = null;
            this.size = this.options.size;
            this.showLoader = false;
            this.status = this.options.status;
            this.hoverable = false;
            this.removable = false;
            this.disabled = false;
            this.autoColor = this.options.autoColor;
            this.edited = new i0.EventEmitter();
            this.editing = false;
            this.editedText = null;
        }
        Object.defineProperty(TuiTagComponent.prototype, "input", {
            set: function (input) {
                if (input) {
                    input.nativeElement.focus();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TuiTagComponent.prototype, "backgroundColor", {
            get: function () {
                return this.autoColor ? format.tuiStringHashToHsl(this.value) : null;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TuiTagComponent.prototype, "canRemove", {
            get: function () {
                return this.removable && !this.disabled && !this.showLoader;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TuiTagComponent.prototype, "displayText", {
            get: function () {
                return this.editedText === null ? this.value : this.editedText;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TuiTagComponent.prototype, "loaderSize", {
            get: function () {
                return i1.tuiSizeBigger(this.size) ? 's' : 'xs';
            },
            enumerable: false,
            configurable: true
        });
        TuiTagComponent.prototype.edit = function (event) {
            if (!this.canEdit) {
                return;
            }
            event.preventDefault();
            this.editing = true;
            this.editedText = this.value;
        };
        TuiTagComponent.prototype.remove = function (event) {
            if (!this.canRemove) {
                return;
            }
            event.preventDefault();
            event.stopPropagation();
            this.edited.emit('');
        };
        TuiTagComponent.prototype.onInput = function (value) {
            var newTags = value.split(this.separator);
            if (newTags.length > 1) {
                this.save(String(newTags));
                return;
            }
            this.editedText = value;
        };
        TuiTagComponent.prototype.onKeyDown = function (event) {
            event.stopPropagation();
            switch (event.key.toLowerCase()) {
                case 'enter':
                    event.preventDefault();
                    this.save(this.editedText || '');
                    break;
                case 'escape':
                case 'esc':
                    event.preventDefault();
                    this.stopEditing();
                    this.el.nativeElement.focus();
                    break;
                default:
                    break;
            }
        };
        TuiTagComponent.prototype.onBlur = function () {
            if (this.editedText !== null) {
                this.save(this.editedText);
            }
        };
        Object.defineProperty(TuiTagComponent.prototype, "canEdit", {
            get: function () {
                return this.editable && !this.disabled && !this.showLoader;
            },
            enumerable: false,
            configurable: true
        });
        TuiTagComponent.prototype.stopEditing = function () {
            this.editing = false;
            this.editedText = null;
        };
        TuiTagComponent.prototype.save = function (value) {
            this.stopEditing();
            this.edited.emit(value.trim());
        };
        return TuiTagComponent;
    }());
    TuiTagComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiTagComponent, deps: [{ token: i0.ElementRef }, { token: i1.TUI_MODE }, { token: TUI_TAG_OPTIONS }, { token: i1.TUI_COMMON_ICONS }], target: i0__namespace.ɵɵFactoryTarget.Component });
    TuiTagComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiTagComponent, selector: "tui-tag, a[tuiTag], button[tuiTag]", inputs: { value: "value", editable: "editable", separator: "separator", maxLength: "maxLength", size: "size", showLoader: "showLoader", status: "status", hoverable: "hoverable", removable: "removable", disabled: "disabled", autoColor: "autoColor", leftContent: "leftContent" }, outputs: { edited: "edited" }, host: { listeners: { "$.data-mode.attr": "mode$", "keydown.enter": "edit($event)", "keydown.delete": "remove($event)", "keydown.backspace": "remove($event)" }, properties: { "attr.data-size": "this.size", "attr.data-status": "this.status", "class._hoverable": "this.hoverable", "class._disabled": "this.disabled", "class._autocolor": "this.autoColor", "class._editing": "this.editing" } }, providers: [i1.MODE_PROVIDER], viewQueries: [{ propertyName: "input", first: true, predicate: ["input"], descendants: true, read: i0.ElementRef }], ngImport: i0__namespace, template: "<div\n    class=\"t-tag\"\n    [style.backgroundColor]=\"backgroundColor\"\n    (dblclick)=\"edit($event)\"\n>\n    <div\n        *ngIf=\"leftContent\"\n        class=\"t-content\"\n    >\n        <ng-container *polymorpheusOutlet=\"leftContent as text\">\n            {{ text }}\n        </ng-container>\n    </div>\n    <span\n        automation-id=\"tui-tag__text\"\n        class=\"t-text\"\n        [textContent]=\"displayText\"\n    ></span>\n    <tui-loader\n        *ngIf=\"showLoader\"\n        class=\"t-content\"\n        [inheritColor]=\"true\"\n        [size]=\"loaderSize\"\n    ></tui-loader>\n    <tui-svg\n        *ngIf=\"canRemove\"\n        automation-id=\"tui-tag__remove\"\n        class=\"t-icon\"\n        [src]=\"icons.close\"\n        (click)=\"remove($event)\"\n        (mousedown.stop.prevent.silent)=\"(0)\"\n    ></tui-svg>\n</div>\n<input\n    *ngIf=\"editing\"\n    #input\n    automation-id=\"tui-tag__edit\"\n    type=\"text\"\n    class=\"t-edit\"\n    [attr.maxLength]=\"maxLength\"\n    [ngModel]=\"editedText\"\n    (blur)=\"onBlur()\"\n    (keydown)=\"onKeyDown($event)\"\n    (ngModelChange)=\"onInput($event)\"\n/>\n", styles: [":host{transition-property:background;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;position:relative;display:inline-block;font:var(--tui-font-text-s);line-height:1.25rem;max-width:100%;cursor:default;outline:none;text-decoration:none;padding:0;border:0}:host:after{transition-property:background;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;position:absolute;top:0;left:0;width:100%;height:100%;content:\"\";box-sizing:border-box;border-radius:inherit;pointer-events:none}:host._hoverable:hover[data-status=custom]:after,:host._hoverable:active[data-status=custom]:after{background-color:var(--tui-clear)}:host:focus:after{border:2px solid var(--tui-focus)}:host[data-size=s]{font:var(--tui-font-text-xs);line-height:1.25rem;border-radius:var(--tui-radius-xs)}:host[data-size=m]{border-radius:var(--tui-radius-xs)}:host[data-size=l]{border-radius:var(--tui-radius-s)}:host[data-status=primary]{background-color:var(--tui-primary);color:var(--tui-primary-text)}:host[data-status=primary]._hoverable:hover{background-color:var(--tui-primary-hover)}:host[data-status=primary]._hoverable:active{background-color:var(--tui-primary-active)}:host[data-status=error]{background-color:var(--tui-error-bg);color:var(--tui-text-01)}:host[data-status=error]._hoverable:hover,:host[data-status=error]._hoverable:active{background-color:var(--tui-error-bg-hover)}:host[data-status=error][data-mode=onDark]{background-color:var(--tui-error-bg-night);color:var(--tui-text-01-night)}:host[data-status=error][data-mode=onDark]._hoverable:hover,:host[data-status=error][data-mode=onDark]._hoverable:active{background-color:var(--tui-error-bg-night-hover)}:host[data-status=success]{background-color:var(--tui-success-bg);color:var(--tui-text-01)}:host[data-status=success]._hoverable:hover,:host[data-status=success]._hoverable:active{background-color:var(--tui-success-bg-hover)}:host[data-status=success][data-mode=onDark]{background-color:var(--tui-success-bg-night);color:var(--tui-text-01-night)}:host[data-status=success][data-mode=onDark]._hoverable:hover,:host[data-status=success][data-mode=onDark]._hoverable:active{background-color:var(--tui-success-bg-night-hover)}:host[data-status=warning]{background-color:var(--tui-warning-bg);color:var(--tui-text-01)}:host[data-status=warning]._hoverable:hover,:host[data-status=warning]._hoverable:active{background-color:var(--tui-warning-bg-hover)}:host[data-status=warning][data-mode=onDark]{background-color:var(--tui-warning-bg-night);color:var(--tui-text-01-night)}:host[data-status=warning][data-mode=onDark]._hoverable:hover,:host[data-status=warning][data-mode=onDark]._hoverable:active{background-color:var(--tui-warning-bg-night-hover)}:host[data-status=default]{color:var(--tui-text-01-night);background-color:var(--tui-base-06)}:host[data-status=default]:not([data-mode])._hoverable:hover{background-color:var(--tui-base-07)}:host[data-status=default]:not([data-mode])._hoverable:active{background-color:var(--tui-base-08)}:host[data-status=default][data-mode=onDark]{color:var(--tui-text-01-night);background-color:var(--tui-clear-inverse)}:host[data-status=default][data-mode=onDark]._hoverable:hover{background-color:var(--tui-clear-inverse-hover)}:host[data-status=default][data-mode=onDark]._hoverable:active{background-color:var(--tui-clear-inverse-active)}:host[data-status=default][data-mode=onDark]:focus:after{border:2px solid var(--tui-base-01)}:host[data-status=default][data-mode=onLight]{background-color:var(--tui-clear);color:var(--tui-text-01)}:host[data-status=default][data-mode=onLight]._hoverable:hover{background-color:var(--tui-clear-hover)}:host[data-status=default][data-mode=onLight]._hoverable:active{background-color:var(--tui-clear-active)}:host._editing{background:transparent!important}:host._disabled{pointer-events:none;opacity:var(--tui-disabled-opacity)}:host._hoverable{cursor:pointer}:host._autocolor{color:#000c}.t-text{white-space:pre;overflow:hidden;text-overflow:ellipsis;padding-right:.02em}.t-tag{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;position:relative;display:flex;width:auto;align-items:center;font:inherit;border-radius:inherit}:host[data-size=s] .t-tag{height:1.25rem;padding:0 .375rem}:host[data-size=m] .t-tag{height:var(--tui-height-xs);padding:0 .5rem}:host[data-size=l] .t-tag{height:var(--tui-height-s);padding:0 .75rem}:host._editing .t-tag{visibility:hidden}.t-edit{margin:0;border-width:0;border-radius:inherit;background:none;font-size:inherit;line-height:inherit;font-weight:inherit;color:inherit;caret-color:currentColor;outline:none;-webkit-appearance:none;-moz-appearance:none;appearance:none;word-break:keep-all;-webkit-text-fill-color:currentColor;position:absolute;top:0;left:0;font:inherit;color:var(--tui-text-01);width:100%;height:100%;box-sizing:border-box;padding:0 .5rem}.t-edit:-webkit-autofill,.t-edit:-webkit-autofill:hover,.t-edit:-webkit-autofill:focus{caret-color:var(--tui-base-09);border-radius:inherit;color:inherit!important;background-color:transparent!important;-webkit-text-fill-color:var(--tui-text-01)!important;border-color:var(--tui-autofill);-webkit-box-shadow:0 0 0 100rem var(--tui-autofill) inset!important}:host[data-size=s] .t-edit{padding:0 .375rem}:host[data-size=m] .t-edit{padding:0 .5rem}:host[data-size=l] .t-edit{padding:0 .75rem}.t-icon{width:1rem;height:100%;cursor:pointer;pointer-events:all;opacity:var(--tui-disabled-opacity);-webkit-margin-start:.25rem;margin-inline-start:.25rem;-webkit-margin-end:-.25rem;margin-inline-end:-.25rem}.t-icon:hover{opacity:1}:host[data-size=s] .t-icon{-webkit-margin-start:0;margin-inline-start:0}:host[data-size=s] .t-icon ::ng-deep svg{transform:scale(.75)}.t-content{width:1rem;height:1rem;-webkit-margin-end:.25rem;margin-inline-end:.25rem}\n"], components: [{ type: i1__namespace.TuiLoaderComponent, selector: "tui-loader", inputs: ["size", "inheritColor", "overlay", "textContent", "showLoader"] }, { type: i1__namespace.TuiSvgComponent, selector: "tui-svg", inputs: ["src"] }], directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3__namespace.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { type: i4__namespace.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i4__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4__namespace.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiTagComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'tui-tag, a[tuiTag], button[tuiTag]',
                        templateUrl: './tag.template.html',
                        styleUrls: ['./tag.style.less'],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        providers: [i1.MODE_PROVIDER],
                        host: {
                            '($.data-mode.attr)': 'mode$',
                        },
                    }]
            }], ctorParameters: function () {
            return [{ type: i0__namespace.ElementRef, decorators: [{
                            type: i0.Inject,
                            args: [i0.ElementRef]
                        }] }, { type: i5__namespace.Observable, decorators: [{
                            type: i0.Inject,
                            args: [i1.TUI_MODE]
                        }] }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [TUI_TAG_OPTIONS]
                        }] }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i1.TUI_COMMON_ICONS]
                        }] }];
        }, propDecorators: { value: [{
                    type: i0.Input
                }], editable: [{
                    type: i0.Input
                }], separator: [{
                    type: i0.Input
                }], maxLength: [{
                    type: i0.Input
                }], size: [{
                    type: i0.Input
                }, {
                    type: i0.HostBinding,
                    args: ['attr.data-size']
                }], showLoader: [{
                    type: i0.Input
                }], status: [{
                    type: i0.Input
                }, {
                    type: i0.HostBinding,
                    args: ['attr.data-status']
                }], hoverable: [{
                    type: i0.Input
                }, {
                    type: i0.HostBinding,
                    args: ['class._hoverable']
                }], removable: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }, {
                    type: i0.HostBinding,
                    args: ['class._disabled']
                }], autoColor: [{
                    type: i0.Input
                }, {
                    type: i0.HostBinding,
                    args: ['class._autocolor']
                }], leftContent: [{
                    type: i0.Input
                }], edited: [{
                    type: i0.Output
                }], editing: [{
                    type: i0.HostBinding,
                    args: ['class._editing']
                }], input: [{
                    type: i0.ViewChild,
                    args: ['input', { read: i0.ElementRef }]
                }], edit: [{
                    type: i0.HostListener,
                    args: ['keydown.enter', ['$event']]
                }], remove: [{
                    type: i0.HostListener,
                    args: ['keydown.delete', ['$event']]
                }, {
                    type: i0.HostListener,
                    args: ['keydown.backspace', ['$event']]
                }] } });

    var TuiTagModule = /** @class */ (function () {
        function TuiTagModule() {
        }
        return TuiTagModule;
    }());
    TuiTagModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiTagModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    TuiTagModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiTagModule, declarations: [TuiTagComponent], imports: [i2.CommonModule,
            i4.FormsModule,
            i1.TuiSvgModule,
            i1.TuiLoaderModule,
            i3.PolymorpheusModule], exports: [TuiTagComponent] });
    TuiTagModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiTagModule, imports: [[
                i2.CommonModule,
                i4.FormsModule,
                i1.TuiSvgModule,
                i1.TuiLoaderModule,
                i3.PolymorpheusModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiTagModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i2.CommonModule,
                            i4.FormsModule,
                            i1.TuiSvgModule,
                            i1.TuiLoaderModule,
                            i3.PolymorpheusModule,
                        ],
                        declarations: [TuiTagComponent],
                        exports: [TuiTagComponent],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.TUI_TAG_DEFAULT_OPTIONS = TUI_TAG_DEFAULT_OPTIONS;
    exports.TUI_TAG_OPTIONS = TUI_TAG_OPTIONS;
    exports.TuiTagComponent = TuiTagComponent;
    exports.TuiTagModule = TuiTagModule;
    exports.tuiTagOptionsProvider = tuiTagOptionsProvider;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=taiga-ui-kit-components-tag.umd.js.map
