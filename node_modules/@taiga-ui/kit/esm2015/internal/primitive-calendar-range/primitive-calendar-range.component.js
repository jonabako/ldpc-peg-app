import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Inject, Input, Optional, Output, Self, } from '@angular/core';
import { ALWAYS_FALSE_HANDLER, TUI_FIRST_DAY, TUI_LAST_DAY, TuiDestroyService, TuiMonth, tuiWatch, } from '@taiga-ui/cdk';
import { TUI_DEFAULT_MARKER_HANDLER } from '@taiga-ui/core';
import { TUI_CALENDAR_DATE_STREAM } from '@taiga-ui/kit/tokens';
import { takeUntil } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core";
import * as i2 from "@taiga-ui/cdk";
import * as i3 from "rxjs";
/**
 * @internal
 */
export class TuiPrimitiveCalendarRangeComponent {
    constructor(valueChanges, cdr, destroy$) {
        this.disabledItemHandler = ALWAYS_FALSE_HANDLER;
        this.markerHandler = TUI_DEFAULT_MARKER_HANDLER;
        this.defaultViewedMonthFirst = TuiMonth.currentLocal();
        this.defaultViewedMonthSecond = TuiMonth.currentLocal().append({ month: 1 });
        this.min = TUI_FIRST_DAY;
        this.max = TUI_LAST_DAY;
        this.value = null;
        this.dayClick = new EventEmitter();
        this.hoveredItem = null;
        this.userViewedMonthFirst = this.defaultViewedMonthFirst;
        this.userViewedMonthSecond = this.defaultViewedMonthSecond;
        this.monthOffset = (value, offset) => value.append({ month: offset });
        if (!valueChanges) {
            return;
        }
        valueChanges.pipe(tuiWatch(cdr), takeUntil(destroy$)).subscribe(value => {
            this.value = value;
            this.updateViewedMonths();
        });
    }
    get cappedUserViewedMonthSecond() {
        return this.userViewedMonthSecond.monthBefore(this.max)
            ? this.userViewedMonthSecond
            : this.max;
    }
    get cappedUserViewedMonthFirst() {
        return this.userViewedMonthFirst.monthSameOrBefore(this.userViewedMonthSecond)
            ? this.userViewedMonthFirst
            : this.userViewedMonthSecond;
    }
    ngOnInit() {
        this.setInitialMonths();
    }
    onSectionFirstViewedMonth(month) {
        this.userViewedMonthFirst = month;
        this.userViewedMonthSecond = this.userViewedMonthFirst.append({ month: 1 });
    }
    onSectionSecondViewedMonth(month) {
        this.userViewedMonthSecond = month;
        this.userViewedMonthFirst = this.userViewedMonthSecond.append({
            month: -1,
        });
    }
    onDayClick(day) {
        this.dayClick.emit(day);
    }
    setInitialMonths() {
        if (!this.value) {
            this.userViewedMonthSecond = this.updatedViewedMonthSecond(this.defaultViewedMonthSecond);
            this.userViewedMonthFirst = this.updatedViewedMonthFirst(this.defaultViewedMonthFirst);
        }
    }
    updatedViewedMonthSecond(month) {
        if (month.monthSameOrAfter(this.max)) {
            return this.max;
        }
        if (month.monthBefore(this.min)) {
            return this.min.append({ month: 1 });
        }
        return month;
    }
    updatedViewedMonthFirst(month) {
        if (month.monthSameOrAfter(this.userViewedMonthSecond)) {
            return this.userViewedMonthSecond.append({ month: -1 });
        }
        if (month.monthSameOrBefore(this.min)) {
            return this.min;
        }
        return month;
    }
    updateViewedMonths() {
        this.userViewedMonthFirst =
            this.value === null ? this.defaultViewedMonthFirst : this.value.from;
        this.userViewedMonthSecond = this.userViewedMonthFirst.append({ month: 1 });
    }
}
TuiPrimitiveCalendarRangeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPrimitiveCalendarRangeComponent, deps: [{ token: TUI_CALENDAR_DATE_STREAM, optional: true }, { token: ChangeDetectorRef }, { token: TuiDestroyService, self: true }], target: i0.ɵɵFactoryTarget.Component });
TuiPrimitiveCalendarRangeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiPrimitiveCalendarRangeComponent, selector: "tui-primitive-calendar-range", inputs: { disabledItemHandler: "disabledItemHandler", markerHandler: "markerHandler", defaultViewedMonthFirst: "defaultViewedMonthFirst", defaultViewedMonthSecond: "defaultViewedMonthSecond", min: "min", max: "max", value: "value" }, outputs: { dayClick: "dayClick" }, providers: [TuiDestroyService], ngImport: i0, template: "<tui-calendar\n    [disabledItemHandler]=\"disabledItemHandler\"\n    [markerHandler]=\"markerHandler\"\n    [max]=\"max\"\n    [maxViewedMonth]=\"cappedUserViewedMonthSecond | tuiMapper: monthOffset : -1\"\n    [min]=\"min\"\n    [month]=\"userViewedMonthFirst\"\n    [showAdjacent]=\"false\"\n    [value]=\"value\"\n    [(hoveredItem)]=\"hoveredItem\"\n    (dayClick)=\"onDayClick($event)\"\n    (monthChange)=\"onSectionFirstViewedMonth($event)\"\n></tui-calendar>\n<tui-calendar\n    class=\"t-border\"\n    [disabledItemHandler]=\"disabledItemHandler\"\n    [markerHandler]=\"markerHandler\"\n    [max]=\"max\"\n    [min]=\"min\"\n    [minViewedMonth]=\"cappedUserViewedMonthFirst | tuiMapper: monthOffset : 1\"\n    [month]=\"userViewedMonthSecond.monthSameOrBefore(min) ? (min | tuiMapper: monthOffset : 1) : userViewedMonthSecond\"\n    [showAdjacent]=\"false\"\n    [value]=\"value\"\n    [(hoveredItem)]=\"hoveredItem\"\n    (dayClick)=\"onDayClick($event)\"\n    (monthChange)=\"onSectionSecondViewedMonth($event)\"\n></tui-calendar>\n", styles: [":host{display:flex}.t-border{border-left:1px solid var(--tui-base-03)}\n"], components: [{ type: i1.TuiCalendarComponent, selector: "tui-calendar", inputs: ["initialView", "month", "disabledItemHandler", "min", "max", "minViewedMonth", "maxViewedMonth", "hoveredItem", "showAdjacent", "markerHandler", "value"], outputs: ["dayClick", "monthChange", "hoveredItemChange"] }], pipes: { "tuiMapper": i2.TuiMapperPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPrimitiveCalendarRangeComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-primitive-calendar-range',
                    templateUrl: './primitive-calendar-range.template.html',
                    styleUrls: ['./primitive-calendar-range.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [TuiDestroyService],
                }]
        }], ctorParameters: function () { return [{ type: i3.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_CALENDAR_DATE_STREAM]
                }, {
                    type: Optional
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: i2.TuiDestroyService, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiDestroyService]
                }] }]; }, propDecorators: { disabledItemHandler: [{
                type: Input
            }], markerHandler: [{
                type: Input
            }], defaultViewedMonthFirst: [{
                type: Input
            }], defaultViewedMonthSecond: [{
                type: Input
            }], min: [{
                type: Input
            }], max: [{
                type: Input
            }], value: [{
                type: Input
            }], dayClick: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJpbWl0aXZlLWNhbGVuZGFyLXJhbmdlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2tpdC9pbnRlcm5hbC9wcmltaXRpdmUtY2FsZW5kYXItcmFuZ2UvcHJpbWl0aXZlLWNhbGVuZGFyLXJhbmdlLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2tpdC9pbnRlcm5hbC9wcmltaXRpdmUtY2FsZW5kYXItcmFuZ2UvcHJpbWl0aXZlLWNhbGVuZGFyLXJhbmdlLnRlbXBsYXRlLmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNILHVCQUF1QixFQUN2QixpQkFBaUIsRUFDakIsU0FBUyxFQUNULFlBQVksRUFDWixNQUFNLEVBQ04sS0FBSyxFQUVMLFFBQVEsRUFDUixNQUFNLEVBQ04sSUFBSSxHQUNQLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFDSCxvQkFBb0IsRUFDcEIsYUFBYSxFQUNiLFlBQVksRUFJWixpQkFBaUIsRUFDakIsUUFBUSxFQUVSLFFBQVEsR0FDWCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUMsMEJBQTBCLEVBQW1CLE1BQU0sZ0JBQWdCLENBQUM7QUFDNUUsT0FBTyxFQUFDLHdCQUF3QixFQUFDLE1BQU0sc0JBQXNCLENBQUM7QUFFOUQsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDOzs7OztBQUV6Qzs7R0FFRztBQVFILE1BQU0sT0FBTyxrQ0FBa0M7SUE4QjNDLFlBR0ksWUFBbUQsRUFDeEIsR0FBc0IsRUFDZCxRQUEyQjtRQWpDbEUsd0JBQW1CLEdBQThCLG9CQUFvQixDQUFDO1FBR3RFLGtCQUFhLEdBQXFCLDBCQUEwQixDQUFDO1FBRzdELDRCQUF1QixHQUFHLFFBQVEsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUdsRCw2QkFBd0IsR0FBRyxRQUFRLENBQUMsWUFBWSxFQUFFLENBQUMs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RCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFDL0MsU0FBUyxFQUFFLENBQUMsaUJBQWlCLENBQUM7aUJBQ2pDOzswQkFnQ1EsTUFBTTsyQkFBQyx3QkFBd0I7OzBCQUMvQixRQUFROzswQkFFUixNQUFNOzJCQUFDLGlCQUFpQjs7MEJBQ3hCLElBQUk7OzBCQUFJLE1BQU07MkJBQUMsaUJBQWlCOzRDQWpDckMsbUJBQW1CO3NCQURsQixLQUFLO2dCQUlOLGFBQWE7c0JBRFosS0FBSztnQkFJTix1QkFBdUI7c0JBRHRCLEtBQUs7Z0JBSU4sd0JBQXdCO3NCQUR2QixLQUFLO2dCQUlOLEdBQUc7c0JBREYsS0FBSztnQkFJTixHQUFHO3NCQURGLEtBQUs7Z0JBSU4sS0FBSztzQkFESixLQUFLO2dCQUlHLFFBQVE7c0JBRGhCLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICAgIENoYW5nZURldGVjdG9yUmVmLFxuICAgIENvbXBvbmVudCxcbiAgICBFdmVudEVtaXR0ZXIsXG4gICAgSW5qZWN0LFxuICAgIElucHV0LFxuICAgIE9uSW5pdCxcbiAgICBPcHRpb25hbCxcbiAgICBPdXRwdXQsXG4gICAgU2VsZixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICAgIEFMV0FZU19GQUxTRV9IQU5ETEVSLFxuICAgIFRVSV9GSVJTVF9EQVksXG4gICAgVFVJX0xBU1RfREFZLFxuICAgIFR1aUJvb2xlYW5IYW5kbGVyLFxuICAgIFR1aURheSxcbiAgICBUdWlEYXlSYW5nZSxcbiAgICBUdWlEZXN0cm95U2VydmljZSxcbiAgICBUdWlNb250aCxcbiAgICBUdWlUeXBlZE1hcHBlcixcbiAgICB0dWlXYXRjaCxcbn0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge1RVSV9ERUZBVUxUX01BUktFUl9IQU5ETEVSLCBUdWlNYXJrZXJIYW5kbGVyfSBmcm9tICdAdGFpZ2EtdWkvY29yZSc7XG5pbXBvcnQge1RVSV9DQUxFTkRBUl9EQVRFX1NUUkVBTX0gZnJvbSAnQHRhaWdhLXVpL2tpdC90b2tlbnMnO1xuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcbmltcG9ydCB7dGFrZVVudGlsfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAndHVpLXByaW1pdGl2ZS1jYWxlbmRhci1yYW5nZScsXG4gICAgdGVtcGxhdGVVcmw6ICcuL3ByaW1pdGl2ZS1jYWxlbmRhci1yYW5nZS50ZW1wbGF0ZS5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9wcmltaXRpdmUtY2FsZW5kYXItcmFuZ2Uuc3R5bGUubGVzcyddLFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICAgIHByb3ZpZGVyczogW1R1aURlc3Ryb3lTZXJ2aWNlXSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpUHJpbWl0aXZlQ2FsZW5kYXJSYW5nZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gICAgQElucHV0KClcbiAgICBkaXNhYmxlZEl0ZW1IYW5kbGVyOiBUdWlCb29sZWFuSGFuZGxlcjxUdWlEYXk+ID0gQUxXQVlTX0ZBTFNFX0hBTkRMRVI7XG5cbiAgICBASW5wdXQoKVxuICAgIG1hcmtlckhhbmRsZXI6IFR1aU1hcmtlckhhbmRsZXIgPSBUVUlfREVGQVVMVF9NQVJLRVJfSEFORExFUjtcblxuICAgIEBJbnB1dCgpXG4gICAgZGVmYXVsdFZpZXdlZE1vbnRoRmlyc3QgPSBUdWlNb250aC5jdXJyZW50TG9jYWwoKTtcblxuICAgIEBJbnB1dCgpXG4gICAgZGVmYXVsdFZpZXdlZE1vbnRoU2Vjb25kID0gVHVpTW9udGguY3VycmVudExvY2FsKCkuYXBwZW5kKHttb250aDogMX0pO1xuXG4gICAgQElucHV0KClcbiAgICBtaW4gPSBUVUlfRklSU1RfREFZO1xuXG4gICAgQElucHV0KClcbiAgICBtYXggPSBUVUlfTEFTVF9EQVk7XG5cbiAgICBASW5wdXQoKVxuICAgIHZhbHVlOiBUdWlEYXlSYW5nZSB8IG51bGwgPSBudWxsO1xuXG4gICAgQE91dHB1dCgpXG4gICAgcmVhZG9ubHkgZGF5Q2xpY2sgPSBuZXcgRXZlbnRFbWl0dGVyPFR1aURheT4oKTtcblxuICAgIGhvdmVyZWRJdGVtOiBUdWlEYXkgfCBudWxsID0gbnVsbDtcblxuICAgIHVzZXJWaWV3ZWRNb250aEZpcnN0OiBUdWlNb250aCA9IHRoaXMuZGVmYXVsdFZpZXdlZE1vbnRoRmlyc3Q7XG4gICAgdXNlclZpZXdlZE1vbnRoU2Vjb25kOiBUdWlNb250aCA9IHRoaXMuZGVmYXVsdFZpZXdlZE1vbnRoU2Vjb25kO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoVFVJX0NBTEVOREFSX0RBVEVfU1RSRUFNKVxuICAgICAgICBAT3B0aW9uYWwoKVxuICAgICAgICB2YWx1ZUNoYW5nZXM6IE9ic2VydmFibGU8VHVpRGF5UmFuZ2UgfCBudWxsPiB8IG51bGwsXG4gICAgICAgIEBJbmplY3QoQ2hhbmdlRGV0ZWN0b3JSZWYpIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgICAgIEBTZWxmKCkgQEluamVjdChUdWlEZXN0cm95U2VydmljZSkgZGVzdHJveSQ6IFR1aURlc3Ryb3lTZXJ2aWNlLFxuICAgICkge1xuICAgICAgICBpZiAoIXZhbHVlQ2hhbmdlcykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFsdWVDaGFuZ2VzLnBpcGUodHVpV2F0Y2goY2RyKSwgdGFrZVVudGlsKGRlc3Ryb3kkKSkuc3Vic2NyaWJlKHZhbHVlID0+IHtcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlVmlld2VkTW9udGhzKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGdldCBjYXBwZWRVc2VyVmlld2VkTW9udGhTZWNvbmQoKTogVHVpTW9udGgge1xuICAgICAgICByZXR1cm4gdGhpcy51c2VyVmlld2VkTW9udGhTZWNvbmQubW9udGhCZWZvcmUodGhpcy5tYXgpXG4gICAgICAgICAgICA/IHRoaXMudXNlclZpZXdlZE1vbnRoU2Vjb25kXG4gICAgICAgICAgICA6IHRoaXMubWF4O1xuICAgIH1cblxuICAgIGdldCBjYXBwZWRVc2VyVmlld2VkTW9udGhGaXJzdCgpOiBUdWlNb250aCB7XG4gICAgICAgIHJldHVybiB0aGlzLnVzZXJWaWV3ZWRNb250aEZpcnN0Lm1vbnRoU2FtZU9yQmVmb3JlKHRoaXMudXNlclZpZXdlZE1vbnRoU2Vjb25kKVxuICAgICAgICAgICAgPyB0aGlzLnVzZXJWaWV3ZWRNb250aEZpcnN0XG4gICAgICAgICAgICA6IHRoaXMudXNlclZpZXdlZE1vbnRoU2Vjb25kO1xuICAgIH1cblxuICAgIG1vbnRoT2Zmc2V0OiBUdWlUeXBlZE1hcHBlcjxbVHVpTW9udGgsIG51bWJlcl0sIFR1aU1vbnRoPiA9ICh2YWx1ZSwgb2Zmc2V0KSA9PlxuICAgICAgICB2YWx1ZS5hcHBlbmQoe21vbnRoOiBvZmZzZXR9KTtcblxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xuICAgICAgICB0aGlzLnNldEluaXRpYWxNb250aHMoKTtcbiAgICB9XG5cbiAgICBvblNlY3Rpb25GaXJzdFZpZXdlZE1vbnRoKG1vbnRoOiBUdWlNb250aCk6IHZvaWQge1xuICAgICAgICB0aGlzLnVzZXJWaWV3ZWRNb250aEZpcnN0ID0gbW9udGg7XG5cbiAgICAgICAgdGhpcy51c2VyVmlld2VkTW9udGhTZWNvbmQgPSB0aGlzLnVzZXJWaWV3ZWRNb250aEZpcnN0LmFwcGVuZCh7bW9udGg6IDF9KTtcbiAgICB9XG5cbiAgICBvblNlY3Rpb25TZWNvbmRWaWV3ZWRNb250aChtb250aDogVHVpTW9udGgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy51c2VyVmlld2VkTW9udGhTZWNvbmQgPSBtb250aDtcblxuICAgICAgICB0aGlzLnVzZXJWaWV3ZWRNb250aEZpcnN0ID0gdGhpcy51c2VyVmlld2VkTW9udGhTZWNvbmQuYXBwZW5kKHtcbiAgICAgICAgICAgIG1vbnRoOiAtMSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgb25EYXlDbGljayhkYXk6IFR1aURheSk6IHZvaWQge1xuICAgICAgICB0aGlzLmRheUNsaWNrLmVtaXQoZGF5KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNldEluaXRpYWxNb250aHMoKTogdm9pZCB7XG4gICAgICAgIGlmICghdGhpcy52YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy51c2VyVmlld2VkTW9udGhTZWNvbmQgPSB0aGlzLnVwZGF0ZWRWaWV3ZWRNb250aFNlY29uZChcbiAgICAgICAgICAgICAgICB0aGlzLmRlZmF1bHRWaWV3ZWRNb250aFNlY29uZCxcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIHRoaXMudXNlclZpZXdlZE1vbnRoRmlyc3QgPSB0aGlzLnVwZGF0ZWRWaWV3ZWRNb250aEZpcnN0KFxuICAgICAgICAgICAgICAgIHRoaXMuZGVmYXVsdFZpZXdlZE1vbnRoRmlyc3QsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB1cGRhdGVkVmlld2VkTW9udGhTZWNvbmQobW9udGg6IFR1aU1vbnRoKTogVHVpTW9udGgge1xuICAgICAgICBpZiAobW9udGgubW9udGhTYW1lT3JBZnRlcih0aGlzLm1heCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1heDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtb250aC5tb250aEJlZm9yZSh0aGlzLm1pbikpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1pbi5hcHBlbmQoe21vbnRoOiAxfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbW9udGg7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB1cGRhdGVkVmlld2VkTW9udGhGaXJzdChtb250aDogVHVpTW9udGgpOiBUdWlNb250aCB7XG4gICAgICAgIGlmIChtb250aC5tb250aFNhbWVPckFmdGVyKHRoaXMudXNlclZpZXdlZE1vbnRoU2Vjb25kKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudXNlclZpZXdlZE1vbnRoU2Vjb25kLmFwcGVuZCh7bW9udGg6IC0xfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobW9udGgubW9udGhTYW1lT3JCZWZvcmUodGhpcy5taW4pKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5taW47XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbW9udGg7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB1cGRhdGVWaWV3ZWRNb250aHMoKTogdm9pZCB7XG4gICAgICAgIHRoaXMudXNlclZpZXdlZE1vbnRoRmlyc3QgPVxuICAgICAgICAgICAgdGhpcy52YWx1ZSA9PT0gbnVsbCA/IHRoaXMuZGVmYXVsdFZpZXdlZE1vbnRoRmlyc3QgOiB0aGlzLnZhbHVlLmZyb207XG5cbiAgICAgICAgdGhpcy51c2VyVmlld2VkTW9udGhTZWNvbmQgPSB0aGlzLnVzZXJWaWV3ZWRNb250aEZpcnN0LmFwcGVuZCh7bW9udGg6IDF9KTtcbiAgICB9XG59XG4iLCI8dHVpLWNhbGVuZGFyXG4gICAgW2Rpc2FibGVkSXRlbUhhbmRsZXJdPVwiZGlzYWJsZWRJdGVtSGFuZGxlclwiXG4gICAgW21hcmtlckhhbmRsZXJdPVwibWFya2VySGFuZGxlclwiXG4gICAgW21heF09XCJtYXhcIlxuICAgIFttYXhWaWV3ZWRNb250aF09XCJjYXBwZWRVc2VyVmlld2VkTW9udGhTZWNvbmQgfCB0dWlNYXBwZXI6IG1vbnRoT2Zmc2V0IDogLTFcIlxuICAgIFttaW5dPVwibWluXCJcbiAgICBbbW9udGhdPVwidXNlclZpZXdlZE1vbnRoRmlyc3RcIlxuICAgIFtzaG93QWRqYWNlbnRdPVwiZmFsc2VcIlxuICAgIFt2YWx1ZV09XCJ2YWx1ZVwiXG4gICAgWyhob3ZlcmVkSXRlbSldPVwiaG92ZXJlZEl0ZW1cIlxuICAgIChkYXlDbGljayk9XCJvbkRheUNsaWNrKCRldmVudClcIlxuICAgIChtb250aENoYW5nZSk9XCJvblNlY3Rpb25GaXJzdFZpZXdlZE1vbnRoKCRldmVudClcIlxuPjwvdHVpLWNhbGVuZGFyPlxuPHR1aS1jYWxlbmRhclxuICAgIGNsYXNzPVwidC1ib3JkZXJcIlxuICAgIFtkaXNhYmxlZEl0ZW1IYW5kbGVyXT1cImRpc2FibGVkSXRlbUhhbmRsZXJcIlxuICAgIFttYXJrZXJIYW5kbGVyXT1cIm1hcmtlckhhbmRsZXJcIlxuICAgIFttYXhdPVwibWF4XCJcbiAgICBbbWluXT1cIm1pblwiXG4gICAgW21pblZpZXdlZE1vbnRoXT1cImNhcHBlZFVzZXJWaWV3ZWRNb250aEZpcnN0IHwgdHVpTWFwcGVyOiBtb250aE9mZnNldCA6IDFcIlxuICAgIFttb250aF09XCJ1c2VyVmlld2VkTW9udGhTZWNvbmQubW9udGhTYW1lT3JCZWZvcmUobWluKSA/IChtaW4gfCB0dWlNYXBwZXI6IG1vbnRoT2Zmc2V0IDogMSkgOiB1c2VyVmlld2VkTW9udGhTZWNvbmRcIlxuICAgIFtzaG93QWRqYWNlbnRdPVwiZmFsc2VcIlxuICAgIFt2YWx1ZV09XCJ2YWx1ZVwiXG4gICAgWyhob3ZlcmVkSXRlbSldPVwiaG92ZXJlZEl0ZW1cIlxuICAgIChkYXlDbGljayk9XCJvbkRheUNsaWNrKCRldmVudClcIlxuICAgIChtb250aENoYW5nZSk9XCJvblNlY3Rpb25TZWNvbmRWaWV3ZWRNb250aCgkZXZlbnQpXCJcbj48L3R1aS1jYWxlbmRhcj5cbiJdfQ==