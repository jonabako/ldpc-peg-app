import { MAX_TIME_VALUES } from '@taiga-ui/kit/constants';
/**
 * @deprecated Use {@link https://maskito.dev/kit/time Time} from {@link https://github.com/taiga-family/maskito Maskito} instead
 * TODO: delete in v4.0
 * Adjusts the entered time by omitting only suitable values for hours and minutes
 * @returns time as a string
 */
export function tuiCreateAutoCorrectedTimePipe(timeMode = 'HH:MM', maxValues = {}) {
    const timeFormatArray = ['HH', 'MM', 'SS', 'MS'];
    const safeValues = Object.assign(Object.assign({}, MAX_TIME_VALUES), maxValues);
    return conformedValue => {
        const indexesOfPipedChars = [];
        const conformedValueArr = conformedValue.split('');
        timeFormatArray.forEach(format => {
            const position = timeMode.indexOf(format);
            const maxFirstDigit = parseInt(String(safeValues[format]).slice(0, 1), 10);
            if (parseInt(conformedValueArr[position], 10) > maxFirstDigit) {
                conformedValueArr[position + 1] = conformedValueArr[position];
                conformedValueArr[position] = '0';
                indexesOfPipedChars.push(position);
            }
        });
        const isInvalid = timeFormatArray.some(format => parseInt(conformedValue.slice(timeMode.indexOf(format), 2), 10) >
            safeValues[format]);
        return isInvalid
            ? false
            : {
                value: conformedValueArr.join(''),
                indexesOfPipedChars,
            };
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLWF1dG8tY29ycmVjdGVkLXRpbWUtcGlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2tpdC91dGlscy9tYXNrL2NyZWF0ZS1hdXRvLWNvcnJlY3RlZC10aW1lLXBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBR3hEOzs7OztHQUtHO0FBQ0gsTUFBTSxVQUFVLDhCQUE4QixDQUMxQyxXQUF3QixPQUFPLEVBQy9CLFlBQXlELEVBQUU7SUFFM0QsTUFBTSxlQUFlLEdBQUcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQVUsQ0FBQztJQUMxRCxNQUFNLFVBQVUsbUNBQ1QsZUFBZSxHQUNmLFNBQVMsQ0FDZixDQUFDO0lBRUYsT0FBTyxjQUFjLENBQUMsRUFBRTtRQUNwQixNQUFNLG1CQUFtQixHQUFhLEVBQUUsQ0FBQztRQUN6QyxNQUFNLGlCQUFpQixHQUFHLGNBQWMsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFbkQsZUFBZSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUM3QixNQUFNLFFBQVEsR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQzFDLE1BQU0sYUFBYSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUUzRSxJQUFJLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsRUFBRSxFQUFFLENBQUMsR0FBRyxhQUFhLEVBQUU7Z0JBQzNELGlCQUFpQixDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsR0FBRyxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDOUQsaUJBQWlCLENBQUMsUUFBUSxDQUFDLEdBQUcsR0FBRyxDQUFDO2dCQUNsQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7YUFDdEM7UUFDTCxDQUFDLENBQUMsQ0FBQztRQUVILE1BQU0sU0FBUyxHQUFHLGVBQWUsQ0FBQyxJQUFJLENBQ2xDLE1BQU0sQ0FBQyxFQUFFLENBQ0wsUUFBUSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDL0QsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUN6QixDQUFDO1FBRUYsT0FBTyxTQUFTO1lBQ1osQ0FBQyxDQUFDLEtBQUs7WUFDUCxDQUFDLENBQUM7Z0JBQ0ksS0FBSyxFQUFFLGlCQUFpQixDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7Z0JBQ2pDLG1CQUFtQjthQUN0QixDQUFDO0lBQ1osQ0FBQyxDQUFDO0FBQ04sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7VHVpVGltZU1vZGV9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtUdWlUZXh0TWFza1BpcGVIYW5kbGVyfSBmcm9tICdAdGFpZ2EtdWkvY29yZSc7XG5pbXBvcnQge01BWF9USU1FX1ZBTFVFU30gZnJvbSAnQHRhaWdhLXVpL2tpdC9jb25zdGFudHMnO1xuaW1wb3J0IHtUdWlUaW1lRm9ybWF0UGFydHN9IGZyb20gJ0B0YWlnYS11aS9raXQvdHlwZXMnO1xuXG4vKipcbiAqIEBkZXByZWNhdGVkIFVzZSB7QGxpbmsgaHR0cHM6Ly9tYXNraXRvLmRldi9raXQvdGltZSBUaW1lfSBmcm9tIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vdGFpZ2EtZmFtaWx5L21hc2tpdG8gTWFza2l0b30gaW5zdGVhZFxuICogVE9ETzogZGVsZXRlIGluIHY0LjBcbiAqIEFkanVzdHMgdGhlIGVudGVyZWQgdGltZSBieSBvbWl0dGluZyBvbmx5IHN1aXRhYmxlIHZhbHVlcyBmb3IgaG91cnMgYW5kIG1pbnV0ZXNcbiAqIEByZXR1cm5zIHRpbWUgYXMgYSBzdHJpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHR1aUNyZWF0ZUF1dG9Db3JyZWN0ZWRUaW1lUGlwZShcbiAgICB0aW1lTW9kZTogVHVpVGltZU1vZGUgPSAnSEg6TU0nLFxuICAgIG1heFZhbHVlczogUGFydGlhbDxSZWNvcmQ8VHVpVGltZUZvcm1hdFBhcnRzLCBudW1iZXI+PiA9IHt9LFxuKTogVHVpVGV4dE1hc2tQaXBlSGFuZGxlciB7XG4gICAgY29uc3QgdGltZUZvcm1hdEFycmF5ID0gWydISCcsICdNTScsICdTUycsICdNUyddIGFzIGNvbnN0O1xuICAgIGNvbnN0IHNhZmVWYWx1ZXMgPSB7XG4gICAgICAgIC4uLk1BWF9USU1FX1ZBTFVFUyxcbiAgICAgICAgLi4ubWF4VmFsdWVzLFxuICAgIH07XG5cbiAgICByZXR1cm4gY29uZm9ybWVkVmFsdWUgPT4ge1xuICAgICAgICBjb25zdCBpbmRleGVzT2ZQaXBlZENoYXJzOiBudW1iZXJbXSA9IFtdO1xuICAgICAgICBjb25zdCBjb25mb3JtZWRWYWx1ZUFyciA9IGNvbmZvcm1lZFZhbHVlLnNwbGl0KCcnKTtcblxuICAgICAgICB0aW1lRm9ybWF0QXJyYXkuZm9yRWFjaChmb3JtYXQgPT4ge1xuICAgICAgICAgICAgY29uc3QgcG9zaXRpb24gPSB0aW1lTW9kZS5pbmRleE9mKGZvcm1hdCk7XG4gICAgICAgICAgICBjb25zdCBtYXhGaXJzdERpZ2l0ID0gcGFyc2VJbnQoU3RyaW5nKHNhZmVWYWx1ZXNbZm9ybWF0XSkuc2xpY2UoMCwgMSksIDEwKTtcblxuICAgICAgICAgICAgaWYgKHBhcnNlSW50KGNvbmZvcm1lZFZhbHVlQXJyW3Bvc2l0aW9uXSwgMTApID4gbWF4Rmlyc3REaWdpdCkge1xuICAgICAgICAgICAgICAgIGNvbmZvcm1lZFZhbHVlQXJyW3Bvc2l0aW9uICsgMV0gPSBjb25mb3JtZWRWYWx1ZUFycltwb3NpdGlvbl07XG4gICAgICAgICAgICAgICAgY29uZm9ybWVkVmFsdWVBcnJbcG9zaXRpb25dID0gJzAnO1xuICAgICAgICAgICAgICAgIGluZGV4ZXNPZlBpcGVkQ2hhcnMucHVzaChwb3NpdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IGlzSW52YWxpZCA9IHRpbWVGb3JtYXRBcnJheS5zb21lKFxuICAgICAgICAgICAgZm9ybWF0ID0+XG4gICAgICAgICAgICAgICAgcGFyc2VJbnQoY29uZm9ybWVkVmFsdWUuc2xpY2UodGltZU1vZGUuaW5kZXhPZihmb3JtYXQpLCAyKSwgMTApID5cbiAgICAgICAgICAgICAgICBzYWZlVmFsdWVzW2Zvcm1hdF0sXG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuIGlzSW52YWxpZFxuICAgICAgICAgICAgPyBmYWxzZVxuICAgICAgICAgICAgOiB7XG4gICAgICAgICAgICAgICAgICB2YWx1ZTogY29uZm9ybWVkVmFsdWVBcnIuam9pbignJyksXG4gICAgICAgICAgICAgICAgICBpbmRleGVzT2ZQaXBlZENoYXJzLFxuICAgICAgICAgICAgICB9O1xuICAgIH07XG59XG4iXX0=