import { TUI_DIGIT_REGEXP } from '@taiga-ui/core';
import { MAX_TIME_VALUES } from '@taiga-ui/kit/constants';
function tuiCreateTimePartMask(maxPartValue, prefix) {
    const { length } = String(maxPartValue);
    const regExp = new Array(length).fill(TUI_DIGIT_REGEXP);
    if (prefix) {
        regExp.unshift(prefix);
    }
    return regExp;
}
/**
 * @deprecated Use {@link https://maskito.dev/kit/time Time} from {@link https://github.com/taiga-family/maskito Maskito} instead
 * TODO: delete in v4.0
 */
export function tuiCreateTimeMask(mode, maxValues = {}) {
    const { HH, MM, SS, MS } = Object.assign(Object.assign({}, MAX_TIME_VALUES), maxValues);
    return [
        ...tuiCreateTimePartMask(HH),
        ...tuiCreateTimePartMask(MM, ':'),
        ...(mode.includes('HH:MM:SS') ? tuiCreateTimePartMask(SS, ':') : []),
        ...(mode === 'HH:MM:SS.MSS' ? tuiCreateTimePartMask(MS, '.') : []),
    ];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLXRpbWUtbWFzay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2tpdC91dGlscy9tYXNrL2NyZWF0ZS10aW1lLW1hc2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFDLGdCQUFnQixFQUFrQixNQUFNLGdCQUFnQixDQUFDO0FBQ2pFLE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUd4RCxTQUFTLHFCQUFxQixDQUMxQixZQUFvQixFQUNwQixNQUFlO0lBRWYsTUFBTSxFQUFDLE1BQU0sRUFBQyxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUN0QyxNQUFNLE1BQU0sR0FBRyxJQUFJLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUV4RCxJQUFJLE1BQU0sRUFBRTtRQUNSLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDMUI7SUFFRCxPQUFPLE1BQU0sQ0FBQztBQUNsQixDQUFDO0FBRUQ7OztHQUdHO0FBQ0gsTUFBTSxVQUFVLGlCQUFpQixDQUM3QixJQUFpQixFQUNqQixZQUF5RCxFQUFFO0lBRTNELE1BQU0sRUFBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUMsbUNBQ2YsZUFBZSxHQUNmLFNBQVMsQ0FDZixDQUFDO0lBRUYsT0FBTztRQUNILEdBQUcscUJBQXFCLENBQUMsRUFBRSxDQUFDO1FBQzVCLEdBQUcscUJBQXFCLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQztRQUNqQyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMscUJBQXFCLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDcEUsR0FBRyxDQUFDLElBQUksS0FBSyxjQUFjLENBQUMsQ0FBQyxDQUFDLHFCQUFxQixDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0tBQ3JFLENBQUM7QUFDTixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtUdWlUaW1lTW9kZX0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge1RVSV9ESUdJVF9SRUdFWFAsIFR1aVRleHRNYXNrTGlzdH0gZnJvbSAnQHRhaWdhLXVpL2NvcmUnO1xuaW1wb3J0IHtNQVhfVElNRV9WQUxVRVN9IGZyb20gJ0B0YWlnYS11aS9raXQvY29uc3RhbnRzJztcbmltcG9ydCB7VHVpVGltZUZvcm1hdFBhcnRzfSBmcm9tICdAdGFpZ2EtdWkva2l0L3R5cGVzJztcblxuZnVuY3Rpb24gdHVpQ3JlYXRlVGltZVBhcnRNYXNrKFxuICAgIG1heFBhcnRWYWx1ZTogbnVtYmVyLFxuICAgIHByZWZpeD86IHN0cmluZyxcbik6IEFycmF5PFJlZ0V4cCB8IHN0cmluZz4ge1xuICAgIGNvbnN0IHtsZW5ndGh9ID0gU3RyaW5nKG1heFBhcnRWYWx1ZSk7XG4gICAgY29uc3QgcmVnRXhwID0gbmV3IEFycmF5KGxlbmd0aCkuZmlsbChUVUlfRElHSVRfUkVHRVhQKTtcblxuICAgIGlmIChwcmVmaXgpIHtcbiAgICAgICAgcmVnRXhwLnVuc2hpZnQocHJlZml4KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVnRXhwO1xufVxuXG4vKipcbiAqIEBkZXByZWNhdGVkIFVzZSB7QGxpbmsgaHR0cHM6Ly9tYXNraXRvLmRldi9raXQvdGltZSBUaW1lfSBmcm9tIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vdGFpZ2EtZmFtaWx5L21hc2tpdG8gTWFza2l0b30gaW5zdGVhZFxuICogVE9ETzogZGVsZXRlIGluIHY0LjBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHR1aUNyZWF0ZVRpbWVNYXNrKFxuICAgIG1vZGU6IFR1aVRpbWVNb2RlLFxuICAgIG1heFZhbHVlczogUGFydGlhbDxSZWNvcmQ8VHVpVGltZUZvcm1hdFBhcnRzLCBudW1iZXI+PiA9IHt9LFxuKTogVHVpVGV4dE1hc2tMaXN0IHtcbiAgICBjb25zdCB7SEgsIE1NLCBTUywgTVN9ID0ge1xuICAgICAgICAuLi5NQVhfVElNRV9WQUxVRVMsXG4gICAgICAgIC4uLm1heFZhbHVlcyxcbiAgICB9O1xuXG4gICAgcmV0dXJuIFtcbiAgICAgICAgLi4udHVpQ3JlYXRlVGltZVBhcnRNYXNrKEhIKSxcbiAgICAgICAgLi4udHVpQ3JlYXRlVGltZVBhcnRNYXNrKE1NLCAnOicpLFxuICAgICAgICAuLi4obW9kZS5pbmNsdWRlcygnSEg6TU06U1MnKSA/IHR1aUNyZWF0ZVRpbWVQYXJ0TWFzayhTUywgJzonKSA6IFtdKSxcbiAgICAgICAgLi4uKG1vZGUgPT09ICdISDpNTTpTUy5NU1MnID8gdHVpQ3JlYXRlVGltZVBhcnRNYXNrKE1TLCAnLicpIDogW10pLFxuICAgIF07XG59XG4iXX0=