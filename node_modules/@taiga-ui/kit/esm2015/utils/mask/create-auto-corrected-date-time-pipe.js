import { DATE_FILLER_LENGTH, tuiIsString } from '@taiga-ui/cdk';
import { DATE_TIME_SEPARATOR } from '@taiga-ui/kit/constants';
import { tuiNormalizeDateValue, } from './create-auto-corrected-date-pipe';
import { tuiCreateAutoCorrectedTimePipe } from './create-auto-corrected-time-pipe';
/**
 * @deprecated Use {@link https://maskito.dev/kit/date-time DateTime} from {@link https://github.com/taiga-family/maskito Maskito} instead
 * TODO: delete in v4.0
 */
export function tuiCreateAutoCorrectedDateTimePipe(configs) {
    const timePipe = tuiCreateAutoCorrectedTimePipe(configs.timeMode);
    return value => {
        if (value.length < DATE_FILLER_LENGTH) {
            return { value };
        }
        const [date, time] = value.split(DATE_TIME_SEPARATOR);
        const formattedDate = tuiNormalizeDateValue(date, configs);
        if (!time) {
            return { value: formattedDate };
        }
        const pipedTime = timePipe(time, {});
        if (!pipedTime || tuiIsString(pipedTime)) {
            return false;
        }
        return {
            value: `${formattedDate}${DATE_TIME_SEPARATOR}${pipedTime.value}`,
            indexesOfPipedChars: pipedTime.indexesOfPipedChars
                ? pipedTime.indexesOfPipedChars.map(i => i + date.length + 2)
                : undefined,
        };
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLWF1dG8tY29ycmVjdGVkLWRhdGUtdGltZS1waXBlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMva2l0L3V0aWxzL21hc2svY3JlYXRlLWF1dG8tY29ycmVjdGVkLWRhdGUtdGltZS1waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxrQkFBa0IsRUFBRSxXQUFXLEVBQWMsTUFBTSxlQUFlLENBQUM7QUFNM0UsT0FBTyxFQUFDLG1CQUFtQixFQUFDLE1BQU0seUJBQXlCLENBQUM7QUFFNUQsT0FBTyxFQUVILHFCQUFxQixHQUN4QixNQUFNLG1DQUFtQyxDQUFDO0FBQzNDLE9BQU8sRUFBQyw4QkFBOEIsRUFBQyxNQUFNLG1DQUFtQyxDQUFDO0FBTWpGOzs7R0FHRztBQUNILE1BQU0sVUFBVSxrQ0FBa0MsQ0FDOUMsT0FBNEM7SUFFNUMsTUFBTSxRQUFRLEdBQUcsOEJBQThCLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBRWxFLE9BQU8sS0FBSyxDQUFDLEVBQUU7UUFDWCxJQUFJLEtBQUssQ0FBQyxNQUFNLEdBQUcsa0JBQWtCLEVBQUU7WUFDbkMsT0FBTyxFQUFDLEtBQUssRUFBQyxDQUFDO1NBQ2xCO1FBRUQsTUFBTSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFFdEQsTUFBTSxhQUFhLEdBQUcscUJBQXFCLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBRTNELElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDUCxPQUFPLEVBQUMsS0FBSyxFQUFFLGFBQWEsRUFBQyxDQUFDO1NBQ2pDO1FBRUQsTUFBTSxTQUFTLEdBQUcsUUFBUSxDQUN0QixJQUFJLEVBQ0osRUFBdUQsQ0FDMUQsQ0FBQztRQUVGLElBQUksQ0FBQyxTQUFTLElBQUksV0FBVyxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQ3RDLE9BQU8sS0FBSyxDQUFDO1NBQ2hCO1FBRUQsT0FBTztZQUNILEtBQUssRUFBRSxHQUFHLGFBQWEsR0FBRyxtQkFBbUIsR0FBRyxTQUFTLENBQUMsS0FBSyxFQUFFO1lBQ2pFLG1CQUFtQixFQUFFLFNBQVMsQ0FBQyxtQkFBbUI7Z0JBQzlDLENBQUMsQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO2dCQUM3RCxDQUFDLENBQUMsU0FBUztTQUNsQixDQUFDO0lBQ04sQ0FBQyxDQUFDO0FBQ04sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7REFURV9GSUxMRVJfTEVOR1RILCB0dWlJc1N0cmluZywgVHVpVGltZU1vZGV9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtcbiAgICBUdWlUZXh0TWFza0NvbmZpZyxcbiAgICBUdWlUZXh0TWFza09wdGlvbnMsXG4gICAgVHVpVGV4dE1hc2tQaXBlSGFuZGxlcixcbn0gZnJvbSAnQHRhaWdhLXVpL2NvcmUnO1xuaW1wb3J0IHtEQVRFX1RJTUVfU0VQQVJBVE9SfSBmcm9tICdAdGFpZ2EtdWkva2l0L2NvbnN0YW50cyc7XG5cbmltcG9ydCB7XG4gICAgVHVpQXV0b0NvcnJlY3RlZERhdGVQaXBlQ29uZmlncyxcbiAgICB0dWlOb3JtYWxpemVEYXRlVmFsdWUsXG59IGZyb20gJy4vY3JlYXRlLWF1dG8tY29ycmVjdGVkLWRhdGUtcGlwZSc7XG5pbXBvcnQge3R1aUNyZWF0ZUF1dG9Db3JyZWN0ZWRUaW1lUGlwZX0gZnJvbSAnLi9jcmVhdGUtYXV0by1jb3JyZWN0ZWQtdGltZS1waXBlJztcblxuaW50ZXJmYWNlIFR1aUF1dG9Db3JyZWN0ZWREYXRlVGltZVBpcGVDb25maWdzIGV4dGVuZHMgVHVpQXV0b0NvcnJlY3RlZERhdGVQaXBlQ29uZmlncyB7XG4gICAgdGltZU1vZGU6IFR1aVRpbWVNb2RlO1xufVxuXG4vKipcbiAqIEBkZXByZWNhdGVkIFVzZSB7QGxpbmsgaHR0cHM6Ly9tYXNraXRvLmRldi9raXQvZGF0ZS10aW1lIERhdGVUaW1lfSBmcm9tIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vdGFpZ2EtZmFtaWx5L21hc2tpdG8gTWFza2l0b30gaW5zdGVhZFxuICogVE9ETzogZGVsZXRlIGluIHY0LjBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHR1aUNyZWF0ZUF1dG9Db3JyZWN0ZWREYXRlVGltZVBpcGUoXG4gICAgY29uZmlnczogVHVpQXV0b0NvcnJlY3RlZERhdGVUaW1lUGlwZUNvbmZpZ3MsXG4pOiBUdWlUZXh0TWFza1BpcGVIYW5kbGVyIHtcbiAgICBjb25zdCB0aW1lUGlwZSA9IHR1aUNyZWF0ZUF1dG9Db3JyZWN0ZWRUaW1lUGlwZShjb25maWdzLnRpbWVNb2RlKTtcblxuICAgIHJldHVybiB2YWx1ZSA9PiB7XG4gICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPCBEQVRFX0ZJTExFUl9MRU5HVEgpIHtcbiAgICAgICAgICAgIHJldHVybiB7dmFsdWV9O1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgW2RhdGUsIHRpbWVdID0gdmFsdWUuc3BsaXQoREFURV9USU1FX1NFUEFSQVRPUik7XG5cbiAgICAgICAgY29uc3QgZm9ybWF0dGVkRGF0ZSA9IHR1aU5vcm1hbGl6ZURhdGVWYWx1ZShkYXRlLCBjb25maWdzKTtcblxuICAgICAgICBpZiAoIXRpbWUpIHtcbiAgICAgICAgICAgIHJldHVybiB7dmFsdWU6IGZvcm1hdHRlZERhdGV9O1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcGlwZWRUaW1lID0gdGltZVBpcGUoXG4gICAgICAgICAgICB0aW1lLFxuICAgICAgICAgICAge30gYXMgdW5rbm93biBhcyBUdWlUZXh0TWFza0NvbmZpZyAmIFR1aVRleHRNYXNrT3B0aW9ucyxcbiAgICAgICAgKTtcblxuICAgICAgICBpZiAoIXBpcGVkVGltZSB8fCB0dWlJc1N0cmluZyhwaXBlZFRpbWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IGAke2Zvcm1hdHRlZERhdGV9JHtEQVRFX1RJTUVfU0VQQVJBVE9SfSR7cGlwZWRUaW1lLnZhbHVlfWAsXG4gICAgICAgICAgICBpbmRleGVzT2ZQaXBlZENoYXJzOiBwaXBlZFRpbWUuaW5kZXhlc09mUGlwZWRDaGFyc1xuICAgICAgICAgICAgICAgID8gcGlwZWRUaW1lLmluZGV4ZXNPZlBpcGVkQ2hhcnMubWFwKGkgPT4gaSArIGRhdGUubGVuZ3RoICsgMilcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgfTtcbiAgICB9O1xufVxuIl19