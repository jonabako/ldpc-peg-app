import { tuiRound } from '@taiga-ui/cdk';
import { TUI_FLOATING_PRECISION } from '@taiga-ui/kit/constants';
function tuiFindKeyStepsBoundariesByFn(keySteps, fn) {
    const keyStepUpperIndex = keySteps.findIndex((keyStep, i) => i && fn(keyStep));
    const lowerStep = keySteps[keyStepUpperIndex - 1] || keySteps[0];
    const upperStep = keySteps[keyStepUpperIndex] || keySteps[keySteps.length - 1];
    return [lowerStep, upperStep];
}
export function tuiPercentageToKeyStepValue(valuePercentage, keySteps) {
    const [[lowerStepPercent, lowerStepValue], [upperStepPercent, upperStepValue]] = tuiFindKeyStepsBoundariesByFn(keySteps, ([keyStepPercentage, _]) => valuePercentage <= keyStepPercentage);
    const ratio = (valuePercentage - lowerStepPercent) / (upperStepPercent - lowerStepPercent);
    const controlValue = (upperStepValue - lowerStepValue) * ratio + lowerStepValue;
    return tuiRound(controlValue, TUI_FLOATING_PRECISION);
}
export function tuiKeyStepValueToPercentage(value, keySteps) {
    const [[lowerStepPercent, lowerStepValue], [upperStepPercent, upperStepValue]] = tuiFindKeyStepsBoundariesByFn(keySteps, ([_, keyStepValue]) => value <= keyStepValue);
    const ratio = (value - lowerStepValue) / (upperStepValue - lowerStepValue) || 0;
    return (upperStepPercent - lowerStepPercent) * ratio + lowerStepPercent;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5LXN0ZXBzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMva2l0L3V0aWxzL21hdGgva2V5LXN0ZXBzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDdkMsT0FBTyxFQUFDLHNCQUFzQixFQUFDLE1BQU0seUJBQXlCLENBQUM7QUFHL0QsU0FBUyw2QkFBNkIsQ0FDbEMsUUFBcUIsRUFDckIsRUFBaUU7SUFFakUsTUFBTSxpQkFBaUIsR0FBRyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBRS9FLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQyxpQkFBaUIsR0FBRyxDQUFDLENBQUMsSUFBSSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDakUsTUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLGlCQUFpQixDQUFDLElBQUksUUFBUSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFFL0UsT0FBTyxDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUNsQyxDQUFDO0FBRUQsTUFBTSxVQUFVLDJCQUEyQixDQUN2QyxlQUF1QixFQUN2QixRQUFxQjtJQUVyQixNQUFNLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRSxjQUFjLENBQUMsRUFBRSxDQUFDLGdCQUFnQixFQUFFLGNBQWMsQ0FBQyxDQUFDLEdBQzFFLDZCQUE2QixDQUN6QixRQUFRLEVBQ1IsQ0FBQyxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxlQUFlLElBQUksaUJBQWlCLENBQ25FLENBQUM7SUFDTixNQUFNLEtBQUssR0FDUCxDQUFDLGVBQWUsR0FBRyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEdBQUcsZ0JBQWdCLENBQUMsQ0FBQztJQUNqRixNQUFNLFlBQVksR0FBRyxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUMsR0FBRyxLQUFLLEdBQUcsY0FBYyxDQUFDO0lBRWhGLE9BQU8sUUFBUSxDQUFDLFlBQVksRUFBRSxzQkFBc0IsQ0FBQyxDQUFDO0FBQzFELENBQUM7QUFFRCxNQUFNLFVBQVUsMkJBQTJCLENBQ3ZDLEtBQWEsRUFDYixRQUFxQjtJQUVyQixNQUFNLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRSxjQUFjLENBQUMsRUFBRSxDQUFDLGdCQUFnQixFQUFFLGNBQWMsQ0FBQyxDQUFDLEdBQzFFLDZCQUE2QixDQUN6QixRQUFRLEVBQ1IsQ0FBQyxDQUFDLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxFQUFFLENBQUMsS0FBSyxJQUFJLFlBQVksQ0FDL0MsQ0FBQztJQUNOLE1BQU0sS0FBSyxHQUFHLENBQUMsS0FBSyxHQUFHLGNBQWMsQ0FBQyxHQUFHLENBQUMsY0FBYyxHQUFHLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUVoRixPQUFPLENBQUMsZ0JBQWdCLEdBQUcsZ0JBQWdCLENBQUMsR0FBRyxLQUFLLEdBQUcsZ0JBQWdCLENBQUM7QUFDNUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7dHVpUm91bmR9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtUVUlfRkxPQVRJTkdfUFJFQ0lTSU9OfSBmcm9tICdAdGFpZ2EtdWkva2l0L2NvbnN0YW50cyc7XG5pbXBvcnQge1R1aUtleVN0ZXBzfSBmcm9tICdAdGFpZ2EtdWkva2l0L3R5cGVzJztcblxuZnVuY3Rpb24gdHVpRmluZEtleVN0ZXBzQm91bmRhcmllc0J5Rm4oXG4gICAga2V5U3RlcHM6IFR1aUtleVN0ZXBzLFxuICAgIGZuOiAoW2tleVN0ZXBQZXJjZW50LCBrZXlTdGVwVmFsdWVdOiBbbnVtYmVyLCBudW1iZXJdKSA9PiBib29sZWFuLFxuKTogW1tudW1iZXIsIG51bWJlcl0sIFtudW1iZXIsIG51bWJlcl1dIHtcbiAgICBjb25zdCBrZXlTdGVwVXBwZXJJbmRleCA9IGtleVN0ZXBzLmZpbmRJbmRleCgoa2V5U3RlcCwgaSkgPT4gaSAmJiBmbihrZXlTdGVwKSk7XG5cbiAgICBjb25zdCBsb3dlclN0ZXAgPSBrZXlTdGVwc1trZXlTdGVwVXBwZXJJbmRleCAtIDFdIHx8IGtleVN0ZXBzWzBdO1xuICAgIGNvbnN0IHVwcGVyU3RlcCA9IGtleVN0ZXBzW2tleVN0ZXBVcHBlckluZGV4XSB8fCBrZXlTdGVwc1trZXlTdGVwcy5sZW5ndGggLSAxXTtcblxuICAgIHJldHVybiBbbG93ZXJTdGVwLCB1cHBlclN0ZXBdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHVpUGVyY2VudGFnZVRvS2V5U3RlcFZhbHVlKFxuICAgIHZhbHVlUGVyY2VudGFnZTogbnVtYmVyLFxuICAgIGtleVN0ZXBzOiBUdWlLZXlTdGVwcyxcbik6IG51bWJlciB7XG4gICAgY29uc3QgW1tsb3dlclN0ZXBQZXJjZW50LCBsb3dlclN0ZXBWYWx1ZV0sIFt1cHBlclN0ZXBQZXJjZW50LCB1cHBlclN0ZXBWYWx1ZV1dID1cbiAgICAgICAgdHVpRmluZEtleVN0ZXBzQm91bmRhcmllc0J5Rm4oXG4gICAgICAgICAgICBrZXlTdGVwcyxcbiAgICAgICAgICAgIChba2V5U3RlcFBlcmNlbnRhZ2UsIF9dKSA9PiB2YWx1ZVBlcmNlbnRhZ2UgPD0ga2V5U3RlcFBlcmNlbnRhZ2UsXG4gICAgICAgICk7XG4gICAgY29uc3QgcmF0aW8gPVxuICAgICAgICAodmFsdWVQZXJjZW50YWdlIC0gbG93ZXJTdGVwUGVyY2VudCkgLyAodXBwZXJTdGVwUGVyY2VudCAtIGxvd2VyU3RlcFBlcmNlbnQpO1xuICAgIGNvbnN0IGNvbnRyb2xWYWx1ZSA9ICh1cHBlclN0ZXBWYWx1ZSAtIGxvd2VyU3RlcFZhbHVlKSAqIHJhdGlvICsgbG93ZXJTdGVwVmFsdWU7XG5cbiAgICByZXR1cm4gdHVpUm91bmQoY29udHJvbFZhbHVlLCBUVUlfRkxPQVRJTkdfUFJFQ0lTSU9OKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHR1aUtleVN0ZXBWYWx1ZVRvUGVyY2VudGFnZShcbiAgICB2YWx1ZTogbnVtYmVyLFxuICAgIGtleVN0ZXBzOiBUdWlLZXlTdGVwcyxcbik6IG51bWJlciB7XG4gICAgY29uc3QgW1tsb3dlclN0ZXBQZXJjZW50LCBsb3dlclN0ZXBWYWx1ZV0sIFt1cHBlclN0ZXBQZXJjZW50LCB1cHBlclN0ZXBWYWx1ZV1dID1cbiAgICAgICAgdHVpRmluZEtleVN0ZXBzQm91bmRhcmllc0J5Rm4oXG4gICAgICAgICAgICBrZXlTdGVwcyxcbiAgICAgICAgICAgIChbXywga2V5U3RlcFZhbHVlXSkgPT4gdmFsdWUgPD0ga2V5U3RlcFZhbHVlLFxuICAgICAgICApO1xuICAgIGNvbnN0IHJhdGlvID0gKHZhbHVlIC0gbG93ZXJTdGVwVmFsdWUpIC8gKHVwcGVyU3RlcFZhbHVlIC0gbG93ZXJTdGVwVmFsdWUpIHx8IDA7XG5cbiAgICByZXR1cm4gKHVwcGVyU3RlcFBlcmNlbnQgLSBsb3dlclN0ZXBQZXJjZW50KSAqIHJhdGlvICsgbG93ZXJTdGVwUGVyY2VudDtcbn1cbiJdfQ==