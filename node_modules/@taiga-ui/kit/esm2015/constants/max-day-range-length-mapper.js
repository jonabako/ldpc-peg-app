import { tuiObjectFromEntries, } from '@taiga-ui/cdk';
export const MAX_DAY_RANGE_LENGTH_MAPPER = (min, value, maxLength, backwards) => {
    if (!(value === null || value === void 0 ? void 0 : value.isSingleDay) || !maxLength) {
        return min;
    }
    const negativeMaxLength = tuiObjectFromEntries(Object.entries(maxLength).map(([key, value]) => [key, -value]));
    const dateShift = value.from
        .append(backwards ? negativeMaxLength : maxLength)
        .append({ day: !backwards ? -1 : 1 });
    if (backwards) {
        return dateShift.dayBefore(min) ? min : dateShift;
    }
    if (!min) {
        return dateShift;
    }
    return dateShift.dayAfter(min) ? min : dateShift;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF4LWRheS1yYW5nZS1sZW5ndGgtbWFwcGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMva2l0L2NvbnN0YW50cy9tYXgtZGF5LXJhbmdlLWxlbmd0aC1tYXBwZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUlILG9CQUFvQixHQUV2QixNQUFNLGVBQWUsQ0FBQztBQUV2QixNQUFNLENBQUMsTUFBTSwyQkFBMkIsR0FHcEMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsRUFBRTtJQUNyQyxJQUFJLENBQUMsQ0FBQSxLQUFLLGFBQUwsS0FBSyx1QkFBTCxLQUFLLENBQUUsV0FBVyxDQUFBLElBQUksQ0FBQyxTQUFTLEVBQUU7UUFDbkMsT0FBTyxHQUFHLENBQUM7S0FDZDtJQUVELE1BQU0saUJBQWlCLEdBQUcsb0JBQW9CLENBQzFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FDakUsQ0FBQztJQUVGLE1BQU0sU0FBUyxHQUFHLEtBQUssQ0FBQyxJQUFJO1NBQ3ZCLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7U0FDakQsTUFBTSxDQUFDLEVBQUMsR0FBRyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQztJQUV4QyxJQUFJLFNBQVMsRUFBRTtRQUNYLE9BQU8sU0FBUyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7S0FDckQ7SUFFRCxJQUFJLENBQUMsR0FBRyxFQUFFO1FBQ04sT0FBTyxTQUFTLENBQUM7S0FDcEI7SUFFRCxPQUFPLFNBQVMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO0FBQ3JELENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgVHVpRGF5LFxuICAgIFR1aURheUxpa2UsXG4gICAgVHVpRGF5UmFuZ2UsXG4gICAgdHVpT2JqZWN0RnJvbUVudHJpZXMsXG4gICAgVHVpVHlwZWRNYXBwZXIsXG59IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuXG5leHBvcnQgY29uc3QgTUFYX0RBWV9SQU5HRV9MRU5HVEhfTUFQUEVSOiBUdWlUeXBlZE1hcHBlcjxcbiAgICBbVHVpRGF5LCBUdWlEYXlSYW5nZSB8IG51bGwsIFR1aURheUxpa2UgfCBudWxsLCBib29sZWFuXSxcbiAgICBUdWlEYXlcbj4gPSAobWluLCB2YWx1ZSwgbWF4TGVuZ3RoLCBiYWNrd2FyZHMpID0+IHtcbiAgICBpZiAoIXZhbHVlPy5pc1NpbmdsZURheSB8fCAhbWF4TGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBtaW47XG4gICAgfVxuXG4gICAgY29uc3QgbmVnYXRpdmVNYXhMZW5ndGggPSB0dWlPYmplY3RGcm9tRW50cmllcyhcbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWF4TGVuZ3RoKS5tYXAoKFtrZXksIHZhbHVlXSkgPT4gW2tleSwgLXZhbHVlXSksXG4gICAgKTtcblxuICAgIGNvbnN0IGRhdGVTaGlmdCA9IHZhbHVlLmZyb21cbiAgICAgICAgLmFwcGVuZChiYWNrd2FyZHMgPyBuZWdhdGl2ZU1heExlbmd0aCA6IG1heExlbmd0aClcbiAgICAgICAgLmFwcGVuZCh7ZGF5OiAhYmFja3dhcmRzID8gLTEgOiAxfSk7XG5cbiAgICBpZiAoYmFja3dhcmRzKSB7XG4gICAgICAgIHJldHVybiBkYXRlU2hpZnQuZGF5QmVmb3JlKG1pbikgPyBtaW4gOiBkYXRlU2hpZnQ7XG4gICAgfVxuXG4gICAgaWYgKCFtaW4pIHtcbiAgICAgICAgcmV0dXJuIGRhdGVTaGlmdDtcbiAgICB9XG5cbiAgICByZXR1cm4gZGF0ZVNoaWZ0LmRheUFmdGVyKG1pbikgPyBtaW4gOiBkYXRlU2hpZnQ7XG59O1xuIl19