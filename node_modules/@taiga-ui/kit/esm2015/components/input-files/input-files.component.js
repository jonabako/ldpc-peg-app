import { __decorate } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, EventEmitter, forwardRef, HostListener, Inject, Input, Optional, Output, Self, TemplateRef, ViewChild, ViewEncapsulation, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AbstractTuiNullableControl, EMPTY_ARRAY, TUI_IS_MOBILE, tuiAsFocusableItemAccessor, tuiIsNativeFocused, tuiPure, } from '@taiga-ui/cdk';
import { MODE_PROVIDER } from '@taiga-ui/core';
import { TUI_INPUT_FILE_TEXTS } from '@taiga-ui/kit/tokens';
import { tuiGetAcceptArray } from '@taiga-ui/kit/utils/files';
import { of } from 'rxjs';
import { map } from 'rxjs/operators';
import { TuiInputFilesDirective } from './input-files.directive';
import { TUI_INPUT_FILES_OPTIONS } from './input-files.options';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core";
import * as i2 from "@taiga-ui/cdk";
import * as i3 from "@angular/common";
import * as i4 from "@tinkoff/ng-polymorpheus";
import * as i5 from "./max-size-rejection-error.pipe";
import * as i6 from "@angular/forms";
import * as i7 from "rxjs";
export class TuiInputFilesComponent extends AbstractTuiNullableControl {
    constructor(control, cdr, isMobile, inputFileTexts$, options) {
        super(control, cdr);
        this.isMobile = isMobile;
        this.inputFileTexts$ = inputFileTexts$;
        this.options = options;
        this.files = null;
        /**
         * @deprecated: use `<input tuiInputFiles accept="image/*" />`
         */
        this.accept = this.options.accepts;
        /**
         * @deprecated: use `<input tuiInputFiles multiple />`
         */
        this.multiple = this.options.multiple;
        this.size = this.options.size;
        this.maxFileSize = this.options.maxFileSize;
        this.reject = new EventEmitter();
    }
    get computedMultiple() {
        var _a, _b;
        return (_b = (_a = this.nativeInput) === null || _a === void 0 ? void 0 : _a.multiple) !== null && _b !== void 0 ? _b : this.multiple;
    }
    get computedAccept() {
        var _a, _b;
        return (_b = (_a = this.nativeInput) === null || _a === void 0 ? void 0 : _a.accept) !== null && _b !== void 0 ? _b : this.accept;
    }
    get nativeFocusableElement() {
        var _a;
        return ((_a = this.input) === null || _a === void 0 ? void 0 : _a.nativeElement) || null;
    }
    get focused() {
        return tuiIsNativeFocused(this.nativeFocusableElement);
    }
    get computedPseudoHovered() {
        var _a;
        return (_a = this.pseudoHover) !== null && _a !== void 0 ? _a : (this.fileDragged || null);
    }
    get computedLink$() {
        return this.computeLink$(this.fileDragged, this.computedMultiple, this.link);
    }
    get computedLabel$() {
        return this.computeLabel$(this.isMobile, this.fileDragged, this.computedMultiple, this.label);
    }
    get fileDragged() {
        return !!this.files && !this.computedDisabled;
    }
    get arrayValue() {
        return this.getValueArray(this.value);
    }
    onFocused(focused) {
        this.updateFocused(focused);
    }
    onFilesSelected() {
        var _a, _b, _c;
        const input = (_b = (_a = this.nativeInput) === null || _a === void 0 ? void 0 : _a.input) !== null && _b !== void 0 ? _b : (_c = this.input) === null || _c === void 0 ? void 0 : _c.nativeElement;
        if (!input) {
            return;
        }
        this.processSelectedFiles(input.files);
        input.value = '';
    }
    onDropped(event) {
        this.files = null;
        this.processSelectedFiles(event.files);
    }
    onDragOver(dataTransfer) {
        this.files = dataTransfer === null || dataTransfer === void 0 ? void 0 : dataTransfer.files;
    }
    removeFile(removedFile) {
        this.value = this.computedMultiple
            ? this.arrayValue.filter(file => file !== removedFile)
            : null;
    }
    computeLink$(fileDragged, multiple, link) {
        return fileDragged
            ? of('')
            : this.inputFileTexts$.pipe(map(texts => multiple && !link
                ? texts.defaultLinkMultiple
                : link || texts.defaultLinkSingle));
    }
    computeLabel$(isMobile, fileDragged, multiple, label) {
        if (isMobile) {
            return of('');
        }
        if (fileDragged) {
            return this.inputFileTexts$.pipe(map(texts => (multiple ? texts.dropMultiple : texts.drop)));
        }
        return this.inputFileTexts$.pipe(map(texts => multiple && !label
            ? texts.defaultLabelMultiple
            : label || texts.defaultLabelSingle));
    }
    getValueArray(value) {
        if (!value) {
            return EMPTY_ARRAY;
        }
        return Array.isArray(value) ? value : [value];
    }
    processSelectedFiles(files) {
        // IE11 after selecting a file through the open dialog generates a second event passing an empty FileList.
        if (!(files === null || files === void 0 ? void 0 : files.length)) {
            return;
        }
        const errors = {
            formatRejection: this.formatRejection,
            maxSizeRejection: this.maxSizeRejection,
        };
        const newFiles = this.computedMultiple ? Array.from(files) : [files[0]];
        const tooBigFiles = newFiles.filter(file => file.size > this.maxFileSize);
        const wrongFormatFiles = newFiles.filter(file => !this.isFormatAcceptable(file) && !tooBigFiles.includes(file));
        const acceptedFiles = newFiles.filter(file => !tooBigFiles.includes(file) && !wrongFormatFiles.includes(file));
        if (tooBigFiles.length || wrongFormatFiles.length) {
            this.rejectFiles([
                ...tooBigFiles.map(file => ({
                    name: file.name,
                    type: file.type,
                    size: file.size,
                    content: errors.maxSizeRejection,
                })),
                ...wrongFormatFiles.map(file => ({
                    name: file.name,
                    type: file.type,
                    size: file.size,
                    content: errors.formatRejection,
                })),
            ]);
        }
        this.value = this.computedMultiple
            ? [...this.arrayValue, ...acceptedFiles]
            : acceptedFiles[0] || null;
    }
    isFormatAcceptable(file) {
        if (!this.computedAccept) {
            return true;
        }
        const extension = `.${(file.name.split('.').pop() || '').toLowerCase()}`;
        return tuiGetAcceptArray(this.computedAccept).some(format => format === extension ||
            format === file.type ||
            (format.split('/')[1] === '*' &&
                file.type.split('/')[0] === format.split('/')[0]));
    }
    rejectFiles(rejectedFiles) {
        this.reject.emit(this.computedMultiple ? rejectedFiles : rejectedFiles[0]);
    }
}
TuiInputFilesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputFilesComponent, deps: [{ token: NgControl, optional: true, self: true }, { token: ChangeDetectorRef }, { token: TUI_IS_MOBILE }, { token: TUI_INPUT_FILE_TEXTS }, { token: TUI_INPUT_FILES_OPTIONS }], target: i0.ɵɵFactoryTarget.Component });
TuiInputFilesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiInputFilesComponent, selector: "tui-input-files", inputs: { link: "link", label: "label", accept: "accept", multiple: "multiple", size: "size", maxFileSize: "maxFileSize" }, outputs: { reject: "reject" }, host: { listeners: { "focusin": "onFocused(true)", "focusout": "onFocused(false)", "change": "onFilesSelected()" } }, providers: [MODE_PROVIDER, tuiAsFocusableItemAccessor(TuiInputFilesComponent)], queries: [{ propertyName: "nativeInput", first: true, predicate: i0.forwardRef(function () { return TuiInputFilesDirective; }), descendants: true }, { propertyName: "template", first: true, predicate: TemplateRef, descendants: true }], viewQueries: [{ propertyName: "input", first: true, predicate: ["input"], descendants: true }, { propertyName: "formatRejection", first: true, predicate: ["formatRejection"], descendants: true }, { propertyName: "maxSizeRejection", first: true, predicate: ["maxSizeRejection"], descendants: true }], usesInheritance: true, ngImport: i0, template: "<div\n    appearance=\"input-file\"\n    tuiWrapper\n    class=\"t-wrapper\"\n    [active]=\"pseudoActive\"\n    [class._mobile]=\"isMobile\"\n    [disabled]=\"computedDisabled\"\n    [focus]=\"computedFocused\"\n    [hover]=\"pseudoHover || fileDragged || null\"\n>\n    <label\n        automation-id=\"tui-input-file__label\"\n        class=\"t-label\"\n        (mousedown.prevent.silent)=\"(0)\"\n        (tuiDroppableDragOverChange)=\"onDragOver($event)\"\n        (tuiDroppableDropped)=\"onDropped($event)\"\n    >\n        <div class=\"t-description\">\n            <ng-container *ngTemplateOutlet=\"template || null; context: {$implicit: fileDragged}\"></ng-container>\n            <div *ngIf=\"!template\">\n                <a tuiLink>\n                    <ng-container *polymorpheusOutlet=\"computedLink$ | async as text\">\n                        {{ text }}\n                    </ng-container>\n                </a>\n                <span\n                    *polymorpheusOutlet=\"computedLabel$ | async as text\"\n                    [textContent]=\"text\"\n                ></span>\n            </div>\n        </div>\n        <ng-container *ngIf=\"!readOnly && !computedDisabled\">\n            <ng-content select=\"input\"></ng-content>\n            <input\n                #input\n                title=\"\"\n                type=\"file\"\n                class=\"t-native\"\n                [accept]=\"accept\"\n                [id]=\"id\"\n                [multiple]=\"multiple\"\n                [tuiFocusable]=\"focusable\"\n            />\n        </ng-container>\n    </label>\n</div>\n\n<ng-template #formatRejection>\n    {{ (inputFileTexts$ | async)?.formatRejectionReason || '' }}\n</ng-template>\n\n<ng-template #maxSizeRejection>\n    {{ maxFileSize | tuiMaxSizeRejectionError | async }}\n</ng-template>\n", styles: ["tui-input-files{display:block;min-height:var(--tui-height-l);border-radius:var(--tui-radius-m);font:var(--tui-font-text-m)}tui-input-files .t-native{position:absolute;top:0;left:0;width:100%;height:100%;opacity:0;cursor:pointer}tui-input-files .t-native::-webkit-file-upload-button{display:none}tui-input-files .t-native+.t-native{display:none}tui-input-files .t-label{width:100%;min-height:inherit;text-align:center}tui-input-files .t-description{display:flex;justify-content:center;align-items:center;height:100%;min-height:inherit;padding:1rem 0;box-sizing:border-box}[tuiWrapper][data-appearance=input-file]{background:transparent;word-wrap:break-word;color:var(--tui-text-02);min-height:inherit;border-radius:inherit;padding:0 .5rem;box-sizing:border-box}[tuiWrapper][data-appearance=input-file]:after{border:1px dashed;color:var(--tui-link)}[tuiWrapper][data-appearance=input-file]._mobile:after{border:1px solid}[tuiWrapper][data-appearance=input-file]:disabled:disabled:after,[tuiWrapper][data-appearance=input-file][data-state=disabled][data-state=disabled]:after{color:var(--tui-text-03)}:focus-visible:not([data-focused=\"false\"])>[tuiWrapper][data-appearance=input-file]:after,[data-focused=true]>[tuiWrapper][data-appearance=input-file]:after{border-style:solid;border-width:2px;color:var(--tui-focus)}[tuiWrapper][data-appearance=input-file]:focus-visible:focus-visible:after{border-style:solid;border-width:2px;color:var(--tui-focus)}[tuiWrapper][data-appearance=input-file]._focused._focused:after{border-style:solid;border-width:2px;color:var(--tui-focus)}[tuiWrapper][data-appearance=input-file][data-mode=onDark]{color:var(--tui-text-01-night)}[tuiWrapper][data-appearance=input-file][data-mode=onDark]:after{color:var(--tui-text-01-night)}:focus-visible:not([data-focused=\"false\"])>[tuiWrapper][data-appearance=input-file][data-mode=onDark]:after,[data-focused=true]>[tuiWrapper][data-appearance=input-file][data-mode=onDark]:after{color:var(--tui-text-01-night)}[tuiWrapper][data-appearance=input-file][data-mode=onDark]:focus-visible:focus-visible:after{color:var(--tui-text-01-night)}[tuiWrapper][data-appearance=input-file][data-mode=onDark]._focused._focused:after{color:var(--tui-text-01-night)}@media (hover: hover){[tuiWrapper][data-appearance=input-file][data-mode=onDark]:hover:not(._no-hover),[tuiWrapper][data-appearance=input-file][data-mode=onDark][data-state=hover]{background:var(--tui-clear-inverse-hover)}[tuiWrapper][data-appearance=input-file][data-mode=onDark]:hover:not(._no-hover):after,[tuiWrapper][data-appearance=input-file][data-mode=onDark][data-state=hover]:after{color:var(--tui-text-03-night)}}[tuiWrapper][data-appearance=input-file][data-mode=onDark]:active:not(._no-active),[tuiWrapper][data-appearance=input-file][data-mode=onDark][data-state=active],[tuiWrapper][data-appearance=input-file][data-mode=onDark][data-state=active]:hover{background:var(--tui-clear-inverse-active)}[tuiWrapper][data-appearance=input-file][data-mode=onDark]:active:not(._no-active):after,[tuiWrapper][data-appearance=input-file][data-mode=onDark][data-state=active]:after,[tuiWrapper][data-appearance=input-file][data-mode=onDark][data-state=active]:hover:after{color:var(--tui-text-03-night)}[tuiWrapper][data-appearance=input-file][data-mode=onLight]{color:var(--tui-text-01)}[tuiWrapper][data-appearance=input-file][data-mode=onLight]:after{color:var(--tui-text-01)}@media (hover: hover){[tuiWrapper][data-appearance=input-file][data-mode=onLight]:hover:not(._no-hover),[tuiWrapper][data-appearance=input-file][data-mode=onLight][data-state=hover]{background:var(--tui-clear-hover)}[tuiWrapper][data-appearance=input-file][data-mode=onLight]:hover:not(._no-hover):after,[tuiWrapper][data-appearance=input-file][data-mode=onLight][data-state=hover]:after{color:var(--tui-text-03)}}[tuiWrapper][data-appearance=input-file][data-mode=onLight]:active:not(._no-active),[tuiWrapper][data-appearance=input-file][data-mode=onLight][data-state=active],[tuiWrapper][data-appearance=input-file][data-mode=onLight][data-state=active]:hover{background:var(--tui-clear-active)}[tuiWrapper][data-appearance=input-file][data-mode=onLight]:active:not(._no-active):after,[tuiWrapper][data-appearance=input-file][data-mode=onLight][data-state=active]:after,[tuiWrapper][data-appearance=input-file][data-mode=onLight][data-state=active]:hover:after{color:var(--tui-text-03)}@media (hover: hover){[tuiWrapper][data-appearance=input-file]:hover:not(._no-hover),[tuiWrapper][data-appearance=input-file][data-state=hover]{background:var(--tui-secondary)}[tuiWrapper][data-appearance=input-file]:hover:not(._no-hover):after,[tuiWrapper][data-appearance=input-file][data-state=hover]:after{color:var(--tui-link-hover)}}[tuiWrapper][data-appearance=input-file]:active:not(._no-active),[tuiWrapper][data-appearance=input-file][data-state=active],[tuiWrapper][data-appearance=input-file][data-state=active]:hover{background:var(--tui-secondary-hover)}\n"], components: [{ type: i1.TuiLinkComponent, selector: "a[tuiLink], button[tuiLink]", inputs: ["pseudo", "icon", "iconAlign", "iconRotated", "mode"], exportAs: ["tuiLink"] }], directives: [{ type: i1.TuiWrapperDirective, selector: "[tuiWrapper]", inputs: ["disabled", "readOnly", "hover", "active", "focus", "invalid", "appearance"] }, { type: i2.TuiDroppableDirective, selector: "[tuiDroppableDropped], [tuiDroppableDragOverChange]", outputs: ["tuiDroppableDropped", "tuiDroppableDragOverChange"] }, { type: i3.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { type: i2.TuiFocusableDirective, selector: "[tuiFocusable]", inputs: ["tuiFocusable"] }], pipes: { "async": i3.AsyncPipe, "tuiMaxSizeRejectionError": i5.TuiMaxSizeRejectionErrorPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
__decorate([
    tuiPure
], TuiInputFilesComponent.prototype, "computeLink$", null);
__decorate([
    tuiPure
], TuiInputFilesComponent.prototype, "computeLabel$", null);
__decorate([
    tuiPure
], TuiInputFilesComponent.prototype, "getValueArray", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputFilesComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-input-files',
                    templateUrl: './input-files.template.html',
                    styleUrls: ['./input-files.style.less'],
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [MODE_PROVIDER, tuiAsFocusableItemAccessor(TuiInputFilesComponent)],
                }]
        }], ctorParameters: function () { return [{ type: i6.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }, {
                    type: Inject,
                    args: [NgControl]
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_IS_MOBILE]
                }] }, { type: i7.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_INPUT_FILE_TEXTS]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_INPUT_FILES_OPTIONS]
                }] }]; }, propDecorators: { input: [{
                type: ViewChild,
                args: ['input']
            }], nativeInput: [{
                type: ContentChild,
                args: [forwardRef(() => TuiInputFilesDirective)]
            }], template: [{
                type: ContentChild,
                args: [TemplateRef]
            }], formatRejection: [{
                type: ViewChild,
                args: ['formatRejection']
            }], maxSizeRejection: [{
                type: ViewChild,
                args: ['maxSizeRejection']
            }], link: [{
                type: Input
            }], label: [{
                type: Input
            }], accept: [{
                type: Input
            }], multiple: [{
                type: Input
            }], size: [{
                type: Input
            }], maxFileSize: [{
                type: Input
            }], reject: [{
                type: Output
            }], onFocused: [{
                type: HostListener,
                args: ['focusin', ['true']]
            }, {
                type: HostListener,
                args: ['focusout', ['false']]
            }], onFilesSelected: [{
                type: HostListener,
                args: ['change']
            }], computeLink$: [], computeLabel$: [], getValueArray: [] } });
//# sourceMappingURL=data:application/json;base64,