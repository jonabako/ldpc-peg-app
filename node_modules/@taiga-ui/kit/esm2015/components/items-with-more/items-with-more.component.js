import { ChangeDetectionStrategy, Component, ContentChild, ContentChildren, Inject, TemplateRef, } from '@angular/core';
import { MUTATION_OBSERVER_INIT, MutationObserverService, } from '@ng-web-apis/mutation-observer';
import { EMPTY_QUERY, TuiDestroyService, TuiItemDirective, TuiResizeService, } from '@taiga-ui/cdk';
import { TuiItemsWithMoreDirective } from './items-with-more.directive';
import { TuiItemsWithMoreService } from './items-with-more.service';
import { TuiMoreDirective } from './more.directive';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@taiga-ui/cdk";
import * as i3 from "@taiga-ui/kit/directives";
import * as i4 from "./items-with-more.directive";
import * as i5 from "rxjs";
export class TuiItemsWithMoreComponent {
    constructor(directive, lastVisibleIndex$) {
        this.directive = directive;
        this.lastVisibleIndex$ = lastVisibleIndex$;
        this.items = EMPTY_QUERY;
    }
}
TuiItemsWithMoreComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiItemsWithMoreComponent, deps: [{ token: TuiItemsWithMoreDirective }, { token: TuiItemsWithMoreService }], target: i0.ɵɵFactoryTarget.Component });
TuiItemsWithMoreComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiItemsWithMoreComponent, selector: "tui-items-with-more", providers: [
        MutationObserverService,
        TuiResizeService,
        TuiDestroyService,
        TuiItemsWithMoreService,
        {
            provide: MUTATION_OBSERVER_INIT,
            useValue: {
                childList: true,
                characterData: true,
                subtree: true,
            },
        },
    ], queries: [{ propertyName: "more", first: true, predicate: TuiMoreDirective, descendants: true, read: TemplateRef }, { propertyName: "items", predicate: TuiItemDirective, descendants: true, read: TemplateRef }], ngImport: i0, template: "<ng-container *ngIf=\"items.changes | async\"></ng-container>\n<ng-container *tuiLet=\"(lastVisibleIndex$ | async) || 0 as lastIndex\">\n    <div\n        *ngFor=\"let item of items; let index = index\"\n        class=\"t-item\"\n        [class.t-item_hidden]=\"index > lastIndex && index !== directive.required\"\n        [tuiProjectClass]=\"['_active']\"\n    >\n        <ng-container *ngTemplateOutlet=\"item\"></ng-container>\n    </div>\n    <span\n        *ngIf=\"more && lastIndex < items.length - 1\"\n        class=\"t-item\"\n        [class.t-item_hidden]=\"lastIndex >= items.length - 1\"\n        [tuiProjectClass]=\"['_active']\"\n    >\n        <ng-container\n            [ngTemplateOutlet]=\"more\"\n            [ngTemplateOutletContext]=\"{$implicit: lastIndex}\"\n        ></ng-container>\n    </span>\n</ng-container>\n", styles: [":host{position:relative;display:flex;align-items:center;white-space:nowrap}.t-item{flex:0 0 auto}.t-item_hidden{position:absolute;visibility:hidden}\n"], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.TuiLetDirective, selector: "[tuiLet]", inputs: ["tuiLet"] }, { type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3.TuiProjectClassDirective, selector: "[tuiProjectClass]", inputs: ["tuiProjectClass"] }, { type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], pipes: { "async": i1.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiItemsWithMoreComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-items-with-more',
                    templateUrl: './items-with-more.template.html',
                    styleUrls: ['./items-with-more.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        MutationObserverService,
                        TuiResizeService,
                        TuiDestroyService,
                        TuiItemsWithMoreService,
                        {
                            provide: MUTATION_OBSERVER_INIT,
                            useValue: {
                                childList: true,
                                characterData: true,
                                subtree: true,
                            },
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i4.TuiItemsWithMoreDirective, decorators: [{
                    type: Inject,
                    args: [TuiItemsWithMoreDirective]
                }] }, { type: i5.Observable, decorators: [{
                    type: Inject,
                    args: [TuiItemsWithMoreService]
                }] }]; }, propDecorators: { items: [{
                type: ContentChildren,
                args: [TuiItemDirective, { read: TemplateRef, descendants: true }]
            }], more: [{
                type: ContentChild,
                args: [TuiMoreDirective, { read: TemplateRef }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXRlbXMtd2l0aC1tb3JlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2tpdC9jb21wb25lbnRzL2l0ZW1zLXdpdGgtbW9yZS9pdGVtcy13aXRoLW1vcmUuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMva2l0L2NvbXBvbmVudHMvaXRlbXMtd2l0aC1tb3JlL2l0ZW1zLXdpdGgtbW9yZS50ZW1wbGF0ZS5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDSCx1QkFBdUIsRUFDdkIsU0FBUyxFQUNULFlBQVksRUFDWixlQUFlLEVBQ2YsTUFBTSxFQUVOLFdBQVcsR0FDZCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQ0gsc0JBQXNCLEVBQ3RCLHVCQUF1QixHQUMxQixNQUFNLGdDQUFnQyxDQUFDO0FBQ3hDLE9BQU8sRUFDSCxXQUFXLEVBRVgsaUJBQWlCLEVBQ2pCLGdCQUFnQixFQUNoQixnQkFBZ0IsR0FDbkIsTUFBTSxlQUFlLENBQUM7QUFHdkIsT0FBTyxFQUFDLHlCQUF5QixFQUFDLE1BQU0sNkJBQTZCLENBQUM7QUFDdEUsT0FBTyxFQUFDLHVCQUF1QixFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFDbEUsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0sa0JBQWtCLENBQUM7Ozs7Ozs7QUFzQmxELE1BQU0sT0FBTyx5QkFBeUI7SUFPbEMsWUFDZ0QsU0FBb0MsRUFDdEMsaUJBQXFDO1FBRG5DLGNBQVMsR0FBVCxTQUFTLENBQTJCO1FBQ3RDLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBb0I7UUFQMUUsVUFBSyxHQUFvQyxXQUFXLENBQUM7SUFRM0QsQ0FBQzs7dUhBVksseUJBQXlCLGtCQVF0Qix5QkFBeUIsYUFDekIsdUJBQXVCOzJHQVQxQix5QkFBeUIsOENBZnZCO1FBQ1AsdUJBQXVCO1FBQ3ZCLGdCQUFnQjtRQUNoQixpQkFBaUI7UUFDakIsdUJBQXVCO1FBQ3ZCO1lBQ0ksT0FBTyxFQUFFLHNCQUFzQjtZQUMvQixRQUFRLEVBQUU7Z0JBQ04sU0FBUyxFQUFFLElBQUk7Z0JBQ2YsYUFBYSxFQUFFLElBQUk7Z0JBQ25CLE9BQU8sRUFBRSxJQUFJO2FBQ2hCO1NBQ0o7S0FDSiw0REFNYSxnQkFBZ0IsMkJBQVMsV0FBVyx3Q0FIakMsZ0JBQWdCLDJCQUFTLFdBQVcsNkJDL0N6RCx1MEJBc0JBOzRGRHdCYSx5QkFBeUI7a0JBcEJyQyxTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSxxQkFBcUI7b0JBQy9CLFdBQVcsRUFBRSxpQ0FBaUM7b0JBQzlDLFNBQVMsRUFBRSxDQUFDLDhCQUE4QixDQUFDO29CQUMzQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFDL0MsU0FBUyxFQUFFO3dCQUNQLHVCQUF1Qjt3QkFDdkIsZ0JBQWdCO3dCQUNoQixpQkFBaUI7d0JBQ2pCLHVCQUF1Qjt3QkFDdkI7NEJBQ0ksT0FBTyxFQUFFLHNCQUFzQjs0QkFDL0IsUUFBUSxFQUFFO2dDQUNOLFNBQVMsRUFBRSxJQUFJO2dDQUNmLGFBQWEsRUFBRSxJQUFJO2dDQUNuQixPQUFPLEVBQUUsSUFBSTs2QkFDaEI7eUJBQ0o7cUJBQ0o7aUJBQ0o7OzBCQVNRLE1BQU07MkJBQUMseUJBQXlCOzswQkFDaEMsTUFBTTsyQkFBQyx1QkFBdUI7NENBUDFCLEtBQUs7c0JBRGIsZUFBZTt1QkFBQyxnQkFBZ0IsRUFBRSxFQUFDLElBQUksRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBQztnQkFJaEUsSUFBSTtzQkFEWixZQUFZO3VCQUFDLGdCQUFnQixFQUFFLEVBQUMsSUFBSSxFQUFFLFdBQVcsRUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gICAgQ29tcG9uZW50LFxuICAgIENvbnRlbnRDaGlsZCxcbiAgICBDb250ZW50Q2hpbGRyZW4sXG4gICAgSW5qZWN0LFxuICAgIFF1ZXJ5TGlzdCxcbiAgICBUZW1wbGF0ZVJlZixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICAgIE1VVEFUSU9OX09CU0VSVkVSX0lOSVQsXG4gICAgTXV0YXRpb25PYnNlcnZlclNlcnZpY2UsXG59IGZyb20gJ0BuZy13ZWItYXBpcy9tdXRhdGlvbi1vYnNlcnZlcic7XG5pbXBvcnQge1xuICAgIEVNUFRZX1FVRVJZLFxuICAgIFR1aUNvbnRleHRXaXRoSW1wbGljaXQsXG4gICAgVHVpRGVzdHJveVNlcnZpY2UsXG4gICAgVHVpSXRlbURpcmVjdGl2ZSxcbiAgICBUdWlSZXNpemVTZXJ2aWNlLFxufSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7VHVpSXRlbXNXaXRoTW9yZURpcmVjdGl2ZX0gZnJvbSAnLi9pdGVtcy13aXRoLW1vcmUuZGlyZWN0aXZlJztcbmltcG9ydCB7VHVpSXRlbXNXaXRoTW9yZVNlcnZpY2V9IGZyb20gJy4vaXRlbXMtd2l0aC1tb3JlLnNlcnZpY2UnO1xuaW1wb3J0IHtUdWlNb3JlRGlyZWN0aXZlfSBmcm9tICcuL21vcmUuZGlyZWN0aXZlJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICd0dWktaXRlbXMtd2l0aC1tb3JlJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vaXRlbXMtd2l0aC1tb3JlLnRlbXBsYXRlLmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL2l0ZW1zLXdpdGgtbW9yZS5zdHlsZS5sZXNzJ10sXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIE11dGF0aW9uT2JzZXJ2ZXJTZXJ2aWNlLFxuICAgICAgICBUdWlSZXNpemVTZXJ2aWNlLFxuICAgICAgICBUdWlEZXN0cm95U2VydmljZSxcbiAgICAgICAgVHVpSXRlbXNXaXRoTW9yZVNlcnZpY2UsXG4gICAgICAgIHtcbiAgICAgICAgICAgIHByb3ZpZGU6IE1VVEFUSU9OX09CU0VSVkVSX0lOSVQsXG4gICAgICAgICAgICB1c2VWYWx1ZToge1xuICAgICAgICAgICAgICAgIGNoaWxkTGlzdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBjaGFyYWN0ZXJEYXRhOiB0cnVlLFxuICAgICAgICAgICAgICAgIHN1YnRyZWU6IHRydWUsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIF0sXG59KVxuZXhwb3J0IGNsYXNzIFR1aUl0ZW1zV2l0aE1vcmVDb21wb25lbnQge1xuICAgIEBDb250ZW50Q2hpbGRyZW4oVHVpSXRlbURpcmVjdGl2ZSwge3JlYWQ6IFRlbXBsYXRlUmVmLCBkZXNjZW5kYW50czogdHJ1ZX0pXG4gICAgcmVhZG9ubHkgaXRlbXM6IFF1ZXJ5TGlzdDxUZW1wbGF0ZVJlZjx1bmtub3duPj4gPSBFTVBUWV9RVUVSWTtcblxuICAgIEBDb250ZW50Q2hpbGQoVHVpTW9yZURpcmVjdGl2ZSwge3JlYWQ6IFRlbXBsYXRlUmVmfSlcbiAgICByZWFkb25seSBtb3JlPzogVGVtcGxhdGVSZWY8VHVpQ29udGV4dFdpdGhJbXBsaWNpdDxudW1iZXI+PjtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KFR1aUl0ZW1zV2l0aE1vcmVEaXJlY3RpdmUpIHJlYWRvbmx5IGRpcmVjdGl2ZTogVHVpSXRlbXNXaXRoTW9yZURpcmVjdGl2ZSxcbiAgICAgICAgQEluamVjdChUdWlJdGVtc1dpdGhNb3JlU2VydmljZSkgcmVhZG9ubHkgbGFzdFZpc2libGVJbmRleCQ6IE9ic2VydmFibGU8bnVtYmVyPixcbiAgICApIHt9XG59XG4iLCI8bmctY29udGFpbmVyICpuZ0lmPVwiaXRlbXMuY2hhbmdlcyB8IGFzeW5jXCI+PC9uZy1jb250YWluZXI+XG48bmctY29udGFpbmVyICp0dWlMZXQ9XCIobGFzdFZpc2libGVJbmRleCQgfCBhc3luYykgfHwgMCBhcyBsYXN0SW5kZXhcIj5cbiAgICA8ZGl2XG4gICAgICAgICpuZ0Zvcj1cImxldCBpdGVtIG9mIGl0ZW1zOyBsZXQgaW5kZXggPSBpbmRleFwiXG4gICAgICAgIGNsYXNzPVwidC1pdGVtXCJcbiAgICAgICAgW2NsYXNzLnQtaXRlbV9oaWRkZW5dPVwiaW5kZXggPiBsYXN0SW5kZXggJiYgaW5kZXggIT09IGRpcmVjdGl2ZS5yZXF1aXJlZFwiXG4gICAgICAgIFt0dWlQcm9qZWN0Q2xhc3NdPVwiWydfYWN0aXZlJ11cIlxuICAgID5cbiAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdUZW1wbGF0ZU91dGxldD1cIml0ZW1cIj48L25nLWNvbnRhaW5lcj5cbiAgICA8L2Rpdj5cbiAgICA8c3BhblxuICAgICAgICAqbmdJZj1cIm1vcmUgJiYgbGFzdEluZGV4IDwgaXRlbXMubGVuZ3RoIC0gMVwiXG4gICAgICAgIGNsYXNzPVwidC1pdGVtXCJcbiAgICAgICAgW2NsYXNzLnQtaXRlbV9oaWRkZW5dPVwibGFzdEluZGV4ID49IGl0ZW1zLmxlbmd0aCAtIDFcIlxuICAgICAgICBbdHVpUHJvamVjdENsYXNzXT1cIlsnX2FjdGl2ZSddXCJcbiAgICA+XG4gICAgICAgIDxuZy1jb250YWluZXJcbiAgICAgICAgICAgIFtuZ1RlbXBsYXRlT3V0bGV0XT1cIm1vcmVcIlxuICAgICAgICAgICAgW25nVGVtcGxhdGVPdXRsZXRDb250ZXh0XT1cInskaW1wbGljaXQ6IGxhc3RJbmRleH1cIlxuICAgICAgICA+PC9uZy1jb250YWluZXI+XG4gICAgPC9zcGFuPlxuPC9uZy1jb250YWluZXI+XG4iXX0=