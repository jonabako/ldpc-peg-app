import { ChangeDetectionStrategy, ChangeDetectorRef, Component, HostBinding, Inject, Input, Optional, Self, ViewChild, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AbstractTuiNullableControl, TUI_DEFAULT_IDENTITY_MATCHER, tuiAsControl, tuiAsFocusableItemAccessor, tuiIsNativeFocused, } from '@taiga-ui/cdk';
import { TuiRadioGroupComponent } from '@taiga-ui/kit/components/radio-group';
import { TUI_RADIO_OPTIONS } from './radio.options';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core";
import * as i2 from "@taiga-ui/cdk";
import * as i3 from "@angular/forms";
import * as i4 from "@taiga-ui/kit/components/radio-group";
export class TuiRadioComponent extends AbstractTuiNullableControl {
    constructor(control, cdr, options, radioGroup) {
        super(control, cdr);
        this.options = options;
        this.radioGroup = radioGroup;
        this.identityMatcher = TUI_DEFAULT_IDENTITY_MATCHER;
        this.name = null;
        this.size = this.options.size;
        this.pseudoDisabled = false;
    }
    get appearance() {
        return this.checked
            ? this.options.appearances.checked
            : this.options.appearances.unchecked;
    }
    get computedDisabled() {
        return this.disabled || this.pseudoDisabled;
    }
    get nativeFocusableElement() {
        return !this.focusableElement || this.computedDisabled
            ? null
            : this.focusableElement.nativeElement;
    }
    get focused() {
        return tuiIsNativeFocused(this.nativeFocusableElement);
    }
    get checked() {
        return this.value === null
            ? this.item === null
            : this.item !== undefined &&
                this.item !== null &&
                this.identityMatcher(this.value, this.item);
    }
    get computedName() {
        return this.name || this.radioGroupName || this.controlName || '';
    }
    get isFocusable() {
        return !this.readOnly && this.computedFocusable;
    }
    onChecked(checked) {
        if (checked) {
            this.value = this.item !== undefined ? this.item : this.fallbackValue;
        }
    }
    onFocused(focused) {
        this.updateFocused(focused);
    }
    onFocusVisible(focusVisible) {
        this.updateFocusVisible(focusVisible);
    }
    get radioGroupName() {
        return this.radioGroup === null ? null : this.radioGroup.name;
    }
}
TuiRadioComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiRadioComponent, deps: [{ token: NgControl, optional: true, self: true }, { token: ChangeDetectorRef }, { token: TUI_RADIO_OPTIONS }, { token: TuiRadioGroupComponent, optional: true }], target: i0.ɵɵFactoryTarget.Component });
TuiRadioComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiRadioComponent, selector: "tui-radio", inputs: { item: "item", identityMatcher: "identityMatcher", name: "name", size: "size", pseudoDisabled: "pseudoDisabled" }, host: { properties: { "attr.data-size": "this.size", "class._disabled": "this.computedDisabled" } }, providers: [
        tuiAsFocusableItemAccessor(TuiRadioComponent),
        tuiAsControl(TuiRadioComponent),
    ], viewQueries: [{ propertyName: "focusableElement", first: true, predicate: ["focusableElement"], descendants: true }], usesInheritance: true, ngImport: i0, template: "<div\n    tuiWrapper\n    [active]=\"pseudoActive\"\n    [appearance]=\"appearance\"\n    [disabled]=\"computedDisabled\"\n    [focus]=\"computedFocusVisible\"\n    [hover]=\"pseudoHover\"\n    [invalid]=\"computedInvalid\"\n>\n    <div\n        class=\"t-mark\"\n        [class.t-mark_visible]=\"checked\"\n    ></div>\n    <input\n        #focusableElement\n        type=\"radio\"\n        class=\"t-native\"\n        [attr.name]=\"computedName\"\n        [disabled]=\"computedDisabled\"\n        [id]=\"id\"\n        [tuiChecked]=\"checked\"\n        [tuiFocusable]=\"isFocusable\"\n        (tuiCheckedChange)=\"onChecked($event)\"\n        (tuiFocusedChange)=\"onFocused($event)\"\n        (tuiFocusVisibleChange)=\"onFocusVisible($event)\"\n    />\n</div>\n", styles: [":host{font:var(--tui-font-text-s);color:var(--tui-text-01);position:relative;display:block;flex-shrink:0;border-radius:100%}:host[data-size=m]{width:1rem;height:1rem}:host[data-size=l]{width:1.5rem;height:1.5rem}:host._readonly{pointer-events:none}.t-mark{transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;position:absolute;background-color:currentColor;border-radius:100%;transform:scale(0)}.t-mark_visible{transform:scale(1)}:host[data-size=m] .t-mark{margin:.25rem;width:.5rem;height:.5rem}:host[data-size=l] .t-mark{margin:.4375rem;width:.625rem;height:.625rem}.t-native{padding:0;margin:0;border-width:0;border-radius:inherit;background:none;font-size:inherit;line-height:inherit;font-weight:inherit;color:inherit;caret-color:currentColor;outline:none;-webkit-appearance:none;-moz-appearance:none;appearance:none;word-break:keep-all;-webkit-text-fill-color:currentColor;position:absolute;top:0;left:0;width:100%;height:100%;opacity:0;cursor:pointer}.t-native:-webkit-autofill,.t-native:-webkit-autofill:hover,.t-native:-webkit-autofill:focus{caret-color:var(--tui-base-09);border-radius:inherit;color:inherit!important;background-color:transparent!important;-webkit-text-fill-color:var(--tui-text-01)!important;border-color:var(--tui-autofill);-webkit-box-shadow:0 0 0 100rem var(--tui-autofill) inset!important}:host._disabled .t-native{cursor:default}\n"], directives: [{ type: i1.TuiWrapperDirective, selector: "[tuiWrapper]", inputs: ["disabled", "readOnly", "hover", "active", "focus", "invalid", "appearance"] }, { type: i2.TuiCheckedDirective, selector: "input[tuiChecked], input[tuiCheckedChange]", inputs: ["tuiChecked"], outputs: ["tuiCheckedChange"] }, { type: i2.TuiFocusableDirective, selector: "[tuiFocusable]", inputs: ["tuiFocusable"] }, { type: i2.TuiFocusedDirective, selector: "[tuiFocusedChange]", outputs: ["tuiFocusedChange"] }, { type: i2.TuiFocusVisibleDirective, selector: "[tuiFocusVisibleChange]", outputs: ["tuiFocusVisibleChange"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiRadioComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-radio',
                    templateUrl: './radio.template.html',
                    styleUrls: ['./radio.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        tuiAsFocusableItemAccessor(TuiRadioComponent),
                        tuiAsControl(TuiRadioComponent),
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i3.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }, {
                    type: Inject,
                    args: [NgControl]
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_RADIO_OPTIONS]
                }] }, { type: i4.TuiRadioGroupComponent, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TuiRadioGroupComponent]
                }] }]; }, propDecorators: { focusableElement: [{
                type: ViewChild,
                args: ['focusableElement']
            }], item: [{
                type: Input
            }], identityMatcher: [{
                type: Input
            }], name: [{
                type: Input
            }], size: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.data-size']
            }], pseudoDisabled: [{
                type: Input
            }], computedDisabled: [{
                type: HostBinding,
                args: ['class._disabled']
            }] } });
//# sourceMappingURL=data:application/json;base64,