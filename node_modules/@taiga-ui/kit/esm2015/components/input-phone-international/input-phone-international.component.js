import { __decorate } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, HostBinding, HostListener, Inject, Input, Optional, Output, Self, ViewChild, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AbstractTuiControl, CHAR_PLUS, tuiAsControl, tuiAsFocusableItemAccessor, tuiPure, } from '@taiga-ui/cdk';
import { TUI_MASK_SYMBOLS_REGEXP, TUI_NON_DIGITS_REGEXP, TUI_TEXTFIELD_SIZE, TuiFlagPipe, TuiPrimitiveTextfieldComponent, } from '@taiga-ui/core';
import { TuiCountryIsoCode } from '@taiga-ui/i18n';
import { TUI_ARROW } from '@taiga-ui/kit/components/arrow';
import { TuiInputPhoneComponent } from '@taiga-ui/kit/components/input-phone';
import { TuiToCountryCodePipe } from '@taiga-ui/kit/pipes';
import { FIXED_DROPDOWN_CONTROLLER_PROVIDER } from '@taiga-ui/kit/providers';
import { TUI_COUNTRIES, TUI_COUNTRIES_MASKS } from '@taiga-ui/kit/tokens';
import { tuiGetMaxAllowedPhoneLength, tuiIsoToCountryCode } from '@taiga-ui/kit/utils';
import { TUI_INPUT_PHONE_INTERNATIONAL_OPTIONS, } from './input-phone-international.options';
import { tuiExtractValueFromEvent } from './utils/extract-value-from-event';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core";
import * as i2 from "@taiga-ui/kit/components/input-phone";
import * as i3 from "@angular/common";
import * as i4 from "@taiga-ui/cdk";
import * as i5 from "@angular/forms";
import * as i6 from "@tinkoff/ng-polymorpheus";
import * as i7 from "rxjs";
import * as i8 from "@taiga-ui/kit/pipes";
export class TuiInputPhoneInternationalComponent extends AbstractTuiControl {
    constructor(control, cdr, countriesNames$, countriesMasks, options, flagPipe, extractCountryCodePipe, textfieldSize) {
        super(control, cdr);
        this.countriesNames$ = countriesNames$;
        this.countriesMasks = countriesMasks;
        this.options = options;
        this.flagPipe = flagPipe;
        this.extractCountryCodePipe = extractCountryCodePipe;
        this.textfieldSize = textfieldSize;
        this.countries = this.options.countries;
        this.countryIsoCodeChange = new EventEmitter();
        this.countryIsoCode = this.options.countryIsoCode;
        this.open = false;
        this.arrow = TUI_ARROW;
        this.isoToCountryCodeMapper = item => tuiIsoToCountryCode(this.countriesMasks, item);
    }
    set isoCode(code) {
        var _a;
        if (this.countryIsoCode === code) {
            return;
        }
        (_a = this.inputPhoneComponent) === null || _a === void 0 ? void 0 : _a.writeValue(this.value);
        this.countryIsoCode = code;
    }
    get size() {
        return this.textfieldSize.size;
    }
    get nativeFocusableElement() {
        return this.inputPhoneComponent && !this.computedDisabled
            ? this.inputPhoneComponent.nativeFocusableElement
            : null;
    }
    get focused() {
        return ((!!this.primitiveTextfield && this.primitiveTextfield.focused) ||
            (!!this.inputPhoneComponent && this.inputPhoneComponent.focused));
    }
    get inputPhoneCountryCode() {
        return tuiIsoToCountryCode(this.countriesMasks, this.countryIsoCode);
    }
    get phoneMaskAfterCountryCode() {
        const countryCode = this.inputPhoneCountryCode;
        return this.calculateMaskAfterCountryCode(this.countriesMasks[this.countryIsoCode], countryCode);
    }
    /**
     * @deprecated use `<img [src]="countryIsoCode | tuiFlagPipe" />`
     * TODO drop in v4.0
     */
    get countryFlagPath() {
        return this.getFlagPath(this.countryIsoCode);
    }
    onPaste(event) {
        let value = tuiExtractValueFromEvent(event).replace(TUI_NON_DIGITS_REGEXP, '');
        const countryIsoCode = this.extractCountryCodePipe.transform(value, this.countries);
        if (!countryIsoCode) {
            this.value = `${this.inputPhoneCountryCode}${value}`
                .replace(TUI_MASK_SYMBOLS_REGEXP, '')
                .slice(0, tuiGetMaxAllowedPhoneLength(this.countriesMasks, this.countryIsoCode));
            return;
        }
        if (countryIsoCode === TuiCountryIsoCode.RU) {
            value = value.replace(/^8/, '7');
        }
        this.updateCountryIsoCode(countryIsoCode);
        this.value = `${CHAR_PLUS}${value}`;
    }
    /**
     * @deprecated use `<img [src]="countryIsoCode | tuiFlagPipe" />`
     * TODO drop in v4.0
     */
    getFlagPath(code) {
        return this.flagPipe.transform(code);
    }
    onItemClick(isoCode) {
        this.open = false;
        this.updateCountryIsoCode(isoCode);
        // recalculates mask inside inputPhone to prevent isoCode conflict
        this.cdr.detectChanges();
        const maxLength = tuiGetMaxAllowedPhoneLength(this.countriesMasks, isoCode);
        if (this.value.length > maxLength) {
            this.value = this.value.slice(0, maxLength);
        }
        if (this.nativeFocusableElement) {
            this.nativeFocusableElement.focus();
        }
    }
    setDisabledState() {
        super.setDisabledState();
        this.close();
    }
    /**
     * @deprecated use `{{ countryIsoCode | tuiIsoToCountryCode }}`
     * TODO drop in v4.0
     */
    isoToCountryCode(isoCode) {
        return tuiIsoToCountryCode(this.countriesMasks, isoCode);
    }
    /** @deprecated use 'value' setter */
    onModelChange(value) {
        this.value = value;
    }
    onActiveZone(active) {
        this.updateFocused(active);
    }
    getFallbackValue() {
        return '';
    }
    calculateMaskAfterCountryCode(mask, countryCode) {
        return mask.replace(countryCode, '').trim();
    }
    close() {
        this.open = false;
    }
    updateCountryIsoCode(code) {
        this.countryIsoCode = code;
        this.countryIsoCodeChange.emit(code);
    }
}
TuiInputPhoneInternationalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputPhoneInternationalComponent, deps: [{ token: NgControl, optional: true, self: true }, { token: ChangeDetectorRef }, { token: TUI_COUNTRIES }, { token: TUI_COUNTRIES_MASKS }, { token: TUI_INPUT_PHONE_INTERNATIONAL_OPTIONS }, { token: TuiFlagPipe }, { token: TuiToCountryCodePipe }, { token: TUI_TEXTFIELD_SIZE }], target: i0.ɵɵFactoryTarget.Component });
TuiInputPhoneInternationalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiInputPhoneInternationalComponent, selector: "tui-input-phone-international", inputs: { isoCode: ["countryIsoCode", "isoCode"], countries: "countries" }, outputs: { countryIsoCodeChange: "countryIsoCodeChange" }, host: { listeners: { "paste.capture.prevent.stop": "onPaste($event)", "drop.capture.prevent.stop": "onPaste($event)" }, properties: { "attr.data-size": "this.size" } }, providers: [
        tuiAsFocusableItemAccessor(TuiInputPhoneInternationalComponent),
        tuiAsControl(TuiInputPhoneInternationalComponent),
        // TODO: for backward compatibility only. Drop in v4.0
        TuiFlagPipe,
        TuiToCountryCodePipe,
    ], viewQueries: [{ propertyName: "inputPhoneComponent", first: true, predicate: TuiInputPhoneComponent, descendants: true }, { propertyName: "primitiveTextfield", first: true, predicate: TuiPrimitiveTextfieldComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: "<tui-hosted-dropdown\n    *ngIf=\"countriesNames$ | async as countriesNames\"\n    class=\"t-hosted-dropdown\"\n    [canOpen]=\"!readOnly\"\n    [content]=\"dropdown\"\n    [(open)]=\"open\"\n    (tuiActiveZoneChange)=\"onActiveZone($event)\"\n>\n    <div tuiGroup>\n        <tui-primitive-textfield\n            tuiHintContent=\"\"\n            tuiTextfieldPostfix=\"\"\n            tuiTextfieldPrefix=\"\"\n            class=\"t-country-select tui-group__auto-width-item\"\n            [disabled]=\"disabled\"\n            [editable]=\"false\"\n            [focusable]=\"focusable\"\n            [pseudoFocus]=\"open || null\"\n            [readOnly]=\"readOnly\"\n            [tuiTextfieldCustomContent]=\"countryValueContent\"\n            [tuiTextfieldIcon]=\"icon\"\n            [tuiTextfieldLabelOutside]=\"true\"\n        ></tui-primitive-textfield>\n        <tui-input-phone\n            class=\"t-input-phone tui-group__auto-width-item\"\n            [countryCode]=\"inputPhoneCountryCode\"\n            [disabled]=\"disabled\"\n            [focusable]=\"focusable\"\n            [phoneMaskAfterCountryCode]=\"phoneMaskAfterCountryCode\"\n            [pseudoFocus]=\"pseudoFocus\"\n            [pseudoHover]=\"pseudoHover\"\n            [pseudoInvalid]=\"computedInvalid\"\n            [readOnly]=\"readOnly\"\n            [(ngModel)]=\"value\"\n        >\n            <ng-content></ng-content>\n            <input\n                autocomplete=\"new-password\"\n                tuiTextfield\n            />\n        </tui-input-phone>\n    </div>\n\n    <ng-template #dropdown>\n        <tui-data-list>\n            <button\n                *ngFor=\"let item of countries\"\n                tuiOption\n                (click)=\"onItemClick(item)\"\n            >\n                <img\n                    alt=\"\"\n                    class=\"t-country-item-flag\"\n                    [src]=\"item | tuiFlag\"\n                />\n                <span class=\"t-country-item-name\">\n                    {{ countriesNames[item] }}\n                </span>\n                <span class=\"t-country-item-code\">\n                    {{ item | tuiMapper: isoToCountryCodeMapper }}\n                </span>\n            </button>\n        </tui-data-list>\n    </ng-template>\n\n    <ng-template #countryValueContent>\n        <img\n            class=\"t-flag\"\n            [alt]=\"countriesNames[countryIsoCode]\"\n            [src]=\"countryIsoCode | tuiFlag\"\n        />\n    </ng-template>\n\n    <ng-template #icon>\n        <div\n            appearance=\"icon\"\n            tuiWrapper\n        >\n            <ng-container *polymorpheusOutlet=\"arrow\"></ng-container>\n        </div>\n    </ng-template>\n</tui-hosted-dropdown>\n", styles: [":host{display:block}:host._disabled{pointer-events:none}.t-hosted-dropdown{display:block}.t-country-select{width:5.625rem}.t-country-select:not(._readonly) ::ng-deep input:not(:disabled){cursor:pointer}.t-country-select._readonly ::ng-deep input{cursor:default}.t-country-select[data-size=m]{width:5.5rem}.t-country-select[data-size=s]{width:2rem}.t-country-select[data-size=s] .t-flag{margin-left:-1rem}.t-arrow-icon{position:relative;display:flex;width:1.5rem;height:1.5rem;align-items:center;justify-content:center;box-sizing:border-box;cursor:pointer;pointer-events:none;pointer-events:auto}:host._readonly .t-arrow-icon,:host._disabled .t-arrow-icon{pointer-events:none}.t-arrow-icon_open{transform:rotate(180deg)}.t-input-phone{flex:1}.t-flag{width:1.75rem;height:1.25rem;margin-left:-.5rem}.t-country-item-flag{width:1.75rem;height:1.25rem}.t-country-item-name{margin-left:.75rem;margin-right:auto}.t-country-item-code{color:var(--tui-text-02);margin-right:.25rem}\n"], components: [{ type: i1.TuiHostedDropdownComponent, selector: "tui-hosted-dropdown", inputs: ["content", "sided", "canOpen", "open"], outputs: ["openChange", "focusedChange"] }, { type: i1.TuiPrimitiveTextfieldComponent, selector: "tui-primitive-textfield", inputs: ["editable", "filler", "iconCleaner", "readOnly", "invalid", "disabled", "prefix", "postfix", "value"], outputs: ["valueChange"] }, { type: i2.TuiInputPhoneComponent, selector: "tui-input-phone", inputs: ["countryCode", "phoneMaskAfterCountryCode", "allowText", "search"], outputs: ["searchChange"] }, { type: i1.TuiTextfieldComponent, selector: "input[tuiTextfield], textarea[tuiTextfield]" }, { type: i1.TuiDataListComponent, selector: "tui-data-list", inputs: ["role", "emptyContent", "size"] }, { type: i1.TuiOptionComponent, selector: "button[tuiOption], a[tuiOption]", inputs: ["size", "role", "disabled", "value"] }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.TuiActiveZoneDirective, selector: "[tuiActiveZone]:not(ng-container), [tuiActiveZoneChange]:not(ng-container), [tuiActiveZoneParent]:not(ng-container)", inputs: ["tuiActiveZoneParent"], outputs: ["tuiActiveZoneChange"], exportAs: ["tuiActiveZone"] }, { type: i1.TuiGroupDirective, selector: "[tuiGroup]:not(ng-container)", inputs: ["orientation", "adaptive", "collapsed", "rounded", "size"] }, { type: i1.TuiPrimitiveTextfieldDirective, selector: "tui-primitive-textfield" }, { type: i1.TuiHintOptionsDirective, selector: "[tuiHintContent]", inputs: ["tuiHintContent", "tuiHintDirection", "tuiHintAppearance", "tuiHintShowDelay", "tuiHintHideDelay"] }, { type: i1.TuiTextfieldPostfixDirective, selector: "[tuiTextfieldPostfix]", inputs: ["tuiTextfieldPostfix"] }, { type: i1.TuiTextfieldPrefixDirective, selector: "[tuiTextfieldPrefix]", inputs: ["tuiTextfieldPrefix"] }, { type: i1.TuiTextfieldCustomContentDirective, selector: "[tuiTextfieldCustomContent]", inputs: ["tuiTextfieldCustomContent"] }, { type: i1.TuiTextfieldIconDirective, selector: "[tuiTextfieldIcon]", inputs: ["tuiTextfieldIcon"] }, { type: i1.TuiTextfieldLabelOutsideDirective, selector: "[tuiTextfieldLabelOutside]", inputs: ["tuiTextfieldLabelOutside"] }, { type: i2.TuiInputPhoneDirective, selector: "tui-input-phone" }, { type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1.TuiWrapperDirective, selector: "[tuiWrapper]", inputs: ["disabled", "readOnly", "hover", "active", "focus", "invalid", "appearance"] }, { type: i6.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }], pipes: { "async": i3.AsyncPipe, "tuiFlag": i1.TuiFlagPipe, "tuiMapper": i4.TuiMapperPipe }, viewProviders: [FIXED_DROPDOWN_CONTROLLER_PROVIDER], changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiPure
], TuiInputPhoneInternationalComponent.prototype, "calculateMaskAfterCountryCode", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputPhoneInternationalComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-input-phone-international',
                    templateUrl: './input-phone-international.template.html',
                    styleUrls: ['./input-phone-international.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        tuiAsFocusableItemAccessor(TuiInputPhoneInternationalComponent),
                        tuiAsControl(TuiInputPhoneInternationalComponent),
                        // TODO: for backward compatibility only. Drop in v4.0
                        TuiFlagPipe,
                        TuiToCountryCodePipe,
                    ],
                    viewProviders: [FIXED_DROPDOWN_CONTROLLER_PROVIDER],
                }]
        }], ctorParameters: function () { return [{ type: i5.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }, {
                    type: Inject,
                    args: [NgControl]
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: i7.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_COUNTRIES]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_COUNTRIES_MASKS]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_INPUT_PHONE_INTERNATIONAL_OPTIONS]
                }] }, { type: i1.TuiFlagPipe, decorators: [{
                    type: Inject,
                    args: [TuiFlagPipe]
                }] }, { type: i8.TuiToCountryCodePipe, decorators: [{
                    type: Inject,
                    args: [TuiToCountryCodePipe]
                }] }, { type: i1.TuiTextfieldSizeDirective, decorators: [{
                    type: Inject,
                    args: [TUI_TEXTFIELD_SIZE]
                }] }]; }, propDecorators: { inputPhoneComponent: [{
                type: ViewChild,
                args: [TuiInputPhoneComponent]
            }], primitiveTextfield: [{
                type: ViewChild,
                args: [TuiPrimitiveTextfieldComponent]
            }], isoCode: [{
                type: Input,
                args: ['countryIsoCode']
            }], countries: [{
                type: Input
            }], countryIsoCodeChange: [{
                type: Output
            }], size: [{
                type: HostBinding,
                args: ['attr.data-size']
            }], onPaste: [{
                type: HostListener,
                args: ['paste.capture.prevent.stop', ['$event']]
            }, {
                type: HostListener,
                args: ['drop.capture.prevent.stop', ['$event']]
            }], calculateMaskAfterCountryCode: [] } });
//# sourceMappingURL=data:application/json;base64,