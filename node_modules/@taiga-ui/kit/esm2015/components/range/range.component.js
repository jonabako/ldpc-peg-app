import { __decorate } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, HostBinding, HostListener, Inject, Input, Optional, Self, ViewChildren, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AbstractTuiControl, EMPTY_QUERY, tuiClamp, tuiIsNativeFocusedIn, tuiPure, tuiQuantize, } from '@taiga-ui/cdk';
import { TuiSliderComponent } from '@taiga-ui/kit/components/slider';
import { tuiKeyStepValueToPercentage, tuiPercentageToKeyStepValue, } from '@taiga-ui/kit/utils';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/kit/components/slider";
import * as i2 from "@angular/forms";
import * as i3 from "@taiga-ui/cdk";
export class TuiRangeComponent extends AbstractTuiControl {
    constructor(control, cdr, el) {
        super(control, cdr);
        this.el = el;
        this.min = 0;
        this.max = 100;
        this.step = 1;
        this.size = 'm';
        this.segments = 1;
        this.keySteps = null;
        this.slidersRefs = EMPTY_QUERY;
        this.lastActiveThumb = 'right';
    }
    get nativeFocusableElement() {
        const [sliderLeftRef, sliderRightRef] = this.slidersRefs;
        if (this.computedDisabled ||
            !this.focusable ||
            !sliderLeftRef ||
            !sliderRightRef) {
            return null;
        }
        const isLeftThumbLocked = this.right === 100;
        return isLeftThumbLocked
            ? sliderRightRef.nativeElement
            : sliderLeftRef.nativeElement;
    }
    get focused() {
        return tuiIsNativeFocusedIn(this.el.nativeElement);
    }
    get fractionStep() {
        return this.step / (this.max - this.min);
    }
    get computedKeySteps() {
        return this.computePureKeySteps(this.keySteps, this.min, this.max);
    }
    get segmentWidthRatio() {
        return 1 / this.segments;
    }
    get left() {
        return this.getPercentageFromValue(this.value[0]);
    }
    get right() {
        return 100 - this.getPercentageFromValue(this.value[1]);
    }
    onFocused(focused) {
        this.updateFocused(focused);
    }
    changeByStep(coefficient, target) {
        const [sliderLeftRef, sliderRightRef] = this.slidersRefs;
        const leftThumbElement = sliderLeftRef.nativeElement;
        const rightThumbElement = sliderRightRef.nativeElement;
        const isRightThumb = target === this.el.nativeElement
            ? this.lastActiveThumb === 'right'
            : target === rightThumbElement;
        const activeThumbElement = isRightThumb ? rightThumbElement : leftThumbElement;
        const previousValue = isRightThumb ? this.value[1] : this.value[0];
        /** @bad TODO think about a solution without twice conversion */
        const previousFraction = this.getPercentageFromValue(previousValue) / 100;
        const newFractionValue = previousFraction + coefficient * this.fractionStep;
        this.processValue(this.getValueFromFraction(newFractionValue), isRightThumb);
        if (activeThumbElement) {
            activeThumbElement.focus();
        }
    }
    processValue(value, right) {
        if (right) {
            this.updateEnd(value);
        }
        else {
            this.updateStart(value);
        }
        this.lastActiveThumb = right ? 'right' : 'left';
    }
    getValueFromFraction(fraction) {
        const guardedFraction = tuiClamp(tuiQuantize(fraction, this.fractionStep), 0, 1);
        return tuiPercentageToKeyStepValue(guardedFraction * 100, this.computedKeySteps);
    }
    getPercentageFromValue(value) {
        return tuiKeyStepValueToPercentage(value, this.computedKeySteps);
    }
    getFallbackValue() {
        return [0, 0];
    }
    computePureKeySteps(keySteps, min, max) {
        return (keySteps || [
            [0, min],
            [100, max],
        ]);
    }
    updateStart(value) {
        this.value = [Math.min(value, this.value[1]), this.value[1]];
    }
    updateEnd(value) {
        this.value = [this.value[0], Math.max(value, this.value[0])];
    }
}
TuiRangeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiRangeComponent, deps: [{ token: NgControl, optional: true, self: true }, { token: ChangeDetectorRef }, { token: ElementRef }], target: i0.ɵɵFactoryTarget.Component });
TuiRangeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiRangeComponent, selector: "tui-range", inputs: { min: "min", max: "max", step: "step", size: "size", segments: "segments", keySteps: "keySteps" }, host: { listeners: { "focusin": "onFocused(true)", "focusout": "onFocused(false)", "keydown.arrowUp.prevent": "changeByStep(1,$event.target)", "keydown.arrowRight.prevent": "changeByStep(1,$event.target)", "keydown.arrowLeft.prevent": "changeByStep(-1,$event.target)", "keydown.arrowDown.prevent": "changeByStep(-1,$event.target)" }, properties: { "attr.tabindex": "-1", "attr.aria-disabled": "computedDisabled", "attr.data-size": "this.size", "style.--left.%": "this.left", "style.--right.%": "this.right" } }, viewQueries: [{ propertyName: "slidersRefs", predicate: TuiSliderComponent, descendants: true, read: ElementRef }], usesInheritance: true, ngImport: i0, template: "<div\n    class=\"t-track\"\n    [style.--bg-size-ratio]=\"1 - segmentWidthRatio\"\n    [style.--segment-width.%]=\"segmentWidthRatio * 100\"\n>\n    <input\n        automation-id=\"tui-range__left\"\n        readonly\n        step=\"any\"\n        tuiSlider\n        type=\"range\"\n        class=\"t-thumb\"\n        [disabled]=\"computedDisabled\"\n        [keySteps]=\"computedKeySteps\"\n        [max]=\"max\"\n        [min]=\"min\"\n        [ngModel]=\"value[0]\"\n        [size]=\"size\"\n        [tuiFocusable]=\"focusable\"\n    />\n    <input\n        automation-id=\"tui-range__right\"\n        readonly\n        step=\"any\"\n        tuiSlider\n        type=\"range\"\n        class=\"t-thumb\"\n        [disabled]=\"computedDisabled\"\n        [keySteps]=\"computedKeySteps\"\n        [max]=\"max\"\n        [min]=\"min\"\n        [ngModel]=\"value[1]\"\n        [size]=\"size\"\n        [tuiFocusable]=\"focusable\"\n    />\n</div>\n", styles: [":host{position:relative;display:block;height:.125rem;border-radius:var(--tui-radius-m);background:var(--tui-base-03);cursor:pointer;outline:none;margin:.4375rem 0;touch-action:pan-x}:host:active{cursor:ew-resize}:host:after{content:\"\";position:absolute;top:-.4375rem;bottom:-.4375rem;width:100%}:host._disabled{opacity:var(--tui-disabled-opacity);cursor:auto}:host[data-size=s] .t-track{position:relative;margin:0 .25rem;height:100%}:host[data-size=s] .t-track:before{content:\"\";position:absolute;top:0;left:var(--left);right:var(--right);height:100%;background:var(--tui-primary);margin:0 calc(-.5rem / 2 - 1px)}:host[data-size=s] .t-track:after{position:absolute;top:0;left:0;bottom:0;right:0;content:\"\";left:.125rem;right:.375rem;background-image:repeating-linear-gradient(to right,var(--tui-base-06) 0 .25rem,transparent 0 calc(var(--segment-width) / var(--bg-size-ratio)));background-position-x:right;background-repeat:no-repeat;background-size:calc(100% * var(--bg-size-ratio))}:host[data-size=m] .t-track{position:relative;margin:0 .375rem;height:100%}:host[data-size=m] .t-track:before{content:\"\";position:absolute;top:0;left:var(--left);right:var(--right);height:100%;background:var(--tui-primary);margin:0 calc(-.75rem / 2 - 1px)}:host[data-size=m] .t-track:after{position:absolute;top:0;left:0;bottom:0;right:0;content:\"\";left:.25rem;right:.5rem;background-image:repeating-linear-gradient(to right,var(--tui-base-06) 0 .25rem,transparent 0 calc(var(--segment-width) / var(--bg-size-ratio)));background-position-x:right;background-repeat:no-repeat;background-size:calc(100% * var(--bg-size-ratio))}.t-thumb{pointer-events:none;position:absolute;top:.0625rem;left:0;right:0;z-index:1;transform:translateY(-50%);margin:0}.t-thumb::-webkit-slider-thumb{pointer-events:all}.t-thumb::-moz-range-thumb{pointer-events:all}input[type=range].t-thumb::-webkit-slider-runnable-track{background:transparent}input[type=range].t-thumb::-moz-range-track{background:transparent}input[type=range].t-thumb::-moz-range-progress{background:transparent}input[type=range].t-thumb::-ms-track{background:transparent}input[type=range].t-thumb::-ms-fill-lower{background:transparent}.t-thumb:last-of-type{--tui-slider-thumb-transform: translateX(50%) translateX(1px)}.t-thumb:first-of-type{--tui-slider-thumb-transform: translateX(-50%) translateX(-1px)}:host._disabled .t-thumb{opacity:1}\n"], components: [{ type: i1.TuiSliderComponent, selector: "input[type=range][tuiSlider]", inputs: ["size", "segments"] }], directives: [{ type: i1.TuiSliderReadonlyDirective, selector: "input[tuiSlider][readonly]", inputs: ["readonly"] }, { type: i1.TuiSliderKeyStepsDirective, selector: "input[tuiSlider][keySteps]", inputs: ["keySteps"] }, { type: i2.RangeValueAccessor, selector: "input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]" }, { type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i3.TuiFocusableDirective, selector: "[tuiFocusable]", inputs: ["tuiFocusable"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiPure
], TuiRangeComponent.prototype, "computePureKeySteps", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiRangeComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-range',
                    templateUrl: './range.template.html',
                    styleUrls: ['./range.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: {
                        '[attr.tabindex]': '-1',
                        '[attr.aria-disabled]': 'computedDisabled',
                    },
                }]
        }], ctorParameters: function () { return [{ type: i2.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }, {
                    type: Inject,
                    args: [NgControl]
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }]; }, propDecorators: { min: [{
                type: Input
            }], max: [{
                type: Input
            }], step: [{
                type: Input
            }], size: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.data-size']
            }], segments: [{
                type: Input
            }], keySteps: [{
                type: Input
            }], slidersRefs: [{
                type: ViewChildren,
                args: [TuiSliderComponent, { read: ElementRef }]
            }], left: [{
                type: HostBinding,
                args: ['style.--left.%']
            }], right: [{
                type: HostBinding,
                args: ['style.--right.%']
            }], onFocused: [{
                type: HostListener,
                args: ['focusin', ['true']]
            }, {
                type: HostListener,
                args: ['focusout', ['false']]
            }], changeByStep: [{
                type: HostListener,
                args: ['keydown.arrowUp.prevent', ['1', '$event.target']]
            }, {
                type: HostListener,
                args: ['keydown.arrowRight.prevent', ['1', '$event.target']]
            }, {
                type: HostListener,
                args: ['keydown.arrowLeft.prevent', ['-1', '$event.target']]
            }, {
                type: HostListener,
                args: ['keydown.arrowDown.prevent', ['-1', '$event.target']]
            }], computePureKeySteps: [] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFuZ2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMva2l0L2NvbXBvbmVudHMvcmFuZ2UvcmFuZ2UuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMva2l0L2NvbXBvbmVudHMvcmFuZ2UvcmFuZ2UudGVtcGxhdGUuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNILHVCQUF1QixFQUN2QixpQkFBaUIsRUFDakIsU0FBUyxFQUNULFVBQVUsRUFDVixXQUFXLEVBQ1gsWUFBWSxFQUNaLE1BQU0sRUFDTixLQUFLLEVBQ0wsUUFBUSxFQUVSLElBQUksRUFDSixZQUFZLEdBQ2YsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQ3pDLE9BQU8sRUFDSCxrQkFBa0IsRUFDbEIsV0FBVyxFQUNYLFFBQVEsRUFFUixvQkFBb0IsRUFFcEIsT0FBTyxFQUNQLFdBQVcsR0FDZCxNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUMsa0JBQWtCLEVBQUMsTUFBTSxpQ0FBaUMsQ0FBQztBQUVuRSxPQUFPLEVBQ0gsMkJBQTJCLEVBQzNCLDJCQUEyQixHQUM5QixNQUFNLHFCQUFxQixDQUFDOzs7OztBQVk3QixNQUFNLE9BQU8saUJBQ1QsU0FBUSxrQkFBb0M7SUEyQjVDLFlBSUksT0FBeUIsRUFDRSxHQUFzQixFQUNaLEVBQTJCO1FBRWhFLEtBQUssQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFGaUIsT0FBRSxHQUFGLEVBQUUsQ0FBeUI7UUE3QnBFLFFBQUcsR0FBRyxDQUFDLENBQUM7UUFHUixRQUFHLEdBQUcsR0FBRyxDQUFDO1FBR1YsU0FBSSxHQUFHLENBQUMsQ0FBQztRQUlULFNBQUksR0FBYSxHQUFHLENBQUM7UUFHckIsYUFBUSxHQUFHLENBQUMsQ0FBQztRQUdiLGFBQVEs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S0FBSztnQkFJTixXQUFXO3NCQURWLFlBQVk7dUJBQUMsa0JBQWtCLEVBQUUsRUFBQyxJQUFJLEVBQUUsVUFBVSxFQUFDO2dCQW9EaEQsSUFBSTtzQkFEUCxXQUFXO3VCQUFDLGdCQUFnQjtnQkFNekIsS0FBSztzQkFEUixXQUFXO3VCQUFDLGlCQUFpQjtnQkFPOUIsU0FBUztzQkFGUixZQUFZO3VCQUFDLFNBQVMsRUFBRSxDQUFDLE1BQU0sQ0FBQzs7c0JBQ2hDLFlBQVk7dUJBQUMsVUFBVSxFQUFFLENBQUMsT0FBTyxDQUFDO2dCQVNuQyxZQUFZO3NCQUpYLFlBQVk7dUJBQUMseUJBQXlCLEVBQUUsQ0FBQyxHQUFHLEVBQUUsZUFBZSxDQUFDOztzQkFDOUQsWUFBWTt1QkFBQyw0QkFBNEIsRUFBRSxDQUFDLEdBQUcsRUFBRSxlQUFlLENBQUM7O3NCQUNqRSxZQUFZO3VCQUFDLDJCQUEyQixFQUFFLENBQUMsSUFBSSxFQUFFLGVBQWUsQ0FBQzs7c0JBQ2pFLFlBQVk7dUJBQUMsMkJBQTJCLEVBQUUsQ0FBQyxJQUFJLEVBQUUsZUFBZSxDQUFDO2dCQWdEMUQsbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICBDb21wb25lbnQsXG4gICAgRWxlbWVudFJlZixcbiAgICBIb3N0QmluZGluZyxcbiAgICBIb3N0TGlzdGVuZXIsXG4gICAgSW5qZWN0LFxuICAgIElucHV0LFxuICAgIE9wdGlvbmFsLFxuICAgIFF1ZXJ5TGlzdCxcbiAgICBTZWxmLFxuICAgIFZpZXdDaGlsZHJlbixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge05nQ29udHJvbH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHtcbiAgICBBYnN0cmFjdFR1aUNvbnRyb2wsXG4gICAgRU1QVFlfUVVFUlksXG4gICAgdHVpQ2xhbXAsXG4gICAgVHVpRm9jdXNhYmxlRWxlbWVudEFjY2Vzc29yLFxuICAgIHR1aUlzTmF0aXZlRm9jdXNlZEluLFxuICAgIFR1aU5hdGl2ZUZvY3VzYWJsZUVsZW1lbnQsXG4gICAgdHVpUHVyZSxcbiAgICB0dWlRdWFudGl6ZSxcbn0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge1R1aVNpemVTLCBUdWlXaXRoT3B0aW9uYWxNaW5NYXh9IGZyb20gJ0B0YWlnYS11aS9jb3JlJztcbmltcG9ydCB7VHVpU2xpZGVyQ29tcG9uZW50fSBmcm9tICdAdGFpZ2EtdWkva2l0L2NvbXBvbmVudHMvc2xpZGVyJztcbmltcG9ydCB7VHVpS2V5U3RlcHN9IGZyb20gJ0B0YWlnYS11aS9raXQvdHlwZXMnO1xuaW1wb3J0IHtcbiAgICB0dWlLZXlTdGVwVmFsdWVUb1BlcmNlbnRhZ2UsXG4gICAgdHVpUGVyY2VudGFnZVRvS2V5U3RlcFZhbHVlLFxufSBmcm9tICdAdGFpZ2EtdWkva2l0L3V0aWxzJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICd0dWktcmFuZ2UnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9yYW5nZS50ZW1wbGF0ZS5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9yYW5nZS5zdHlsZS5sZXNzJ10sXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gICAgaG9zdDoge1xuICAgICAgICAnW2F0dHIudGFiaW5kZXhdJzogJy0xJyxcbiAgICAgICAgJ1thdHRyLmFyaWEtZGlzYWJsZWRdJzogJ2NvbXB1dGVkRGlzYWJsZWQnLFxuICAgIH0sXG59KVxuZXhwb3J0IGNsYXNzIFR1aVJhbmdlQ29tcG9uZW50XG4gICAgZXh0ZW5kcyBBYnN0cmFjdFR1aUNvbnRyb2w8W251bWJlciwgbnVtYmVyXT5cbiAgICBpbXBsZW1lbnRzIFR1aVdpdGhPcHRpb25hbE1pbk1heDxudW1iZXI+LCBUdWlGb2N1c2FibGVFbGVtZW50QWNjZXNzb3JcbntcbiAgICBASW5wdXQoKVxuICAgIG1pbiA9IDA7XG5cbiAgICBASW5wdXQoKVxuICAgIG1heCA9IDEwMDtcblxuICAgIEBJbnB1dCgpXG4gICAgc3RlcCA9IDE7XG5cbiAgICBASW5wdXQoKVxuICAgIEBIb3N0QmluZGluZygnYXR0ci5kYXRhLXNpemUnKVxuICAgIHNpemU6IFR1aVNpemVTID0gJ20nO1xuXG4gICAgQElucHV0KClcbiAgICBzZWdtZW50cyA9IDE7XG5cbiAgICBASW5wdXQoKVxuICAgIGtleVN0ZXBzOiBUdWlLZXlTdGVwcyB8IG51bGwgPSBudWxsO1xuXG4gICAgQFZpZXdDaGlsZHJlbihUdWlTbGlkZXJDb21wb25lbnQsIHtyZWFkOiBFbGVtZW50UmVmfSlcbiAgICBzbGlkZXJzUmVmczogUXVlcnlMaXN0PEVsZW1lbnRSZWY8SFRNTElucHV0RWxlbWVudD4+ID0gRU1QVFlfUVVFUlk7XG5cbiAgICBsYXN0QWN0aXZlVGh1bWI6ICdsZWZ0JyB8ICdyaWdodCcgPSAncmlnaHQnO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBPcHRpb25hbCgpXG4gICAgICAgIEBTZWxmKClcbiAgICAgICAgQEluamVjdChOZ0NvbnRyb2wpXG4gICAgICAgIGNvbnRyb2w6IE5nQ29udHJvbCB8IG51bGwsXG4gICAgICAgIEBJbmplY3QoQ2hhbmdlRGV0ZWN0b3JSZWYpIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgICAgIEBJbmplY3QoRWxlbWVudFJlZikgcHJpdmF0ZSByZWFkb25seSBlbDogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4sXG4gICAgKSB7XG4gICAgICAgIHN1cGVyKGNvbnRyb2wsIGNkcik7XG4gICAgfVxuXG4gICAgZ2V0IG5hdGl2ZUZvY3VzYWJsZUVsZW1lbnQoKTogVHVpTmF0aXZlRm9jdXNhYmxlRWxlbWVudCB8IG51bGwge1xuICAgICAgICBjb25zdCBbc2xpZGVyTGVmdFJlZiwgc2xpZGVyUmlnaHRSZWZdID0gdGhpcy5zbGlkZXJzUmVmcztcblxuICAgICAgICBpZiAoXG4gICAgICAgICAgICB0aGlzLmNvbXB1dGVkRGlzYWJsZWQgfHxcbiAgICAgICAgICAgICF0aGlzLmZvY3VzYWJsZSB8fFxuICAgICAgICAgICAgIXNsaWRlckxlZnRSZWYgfHxcbiAgICAgICAgICAgICFzbGlkZXJSaWdodFJlZlxuICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgaXNMZWZ0VGh1bWJMb2NrZWQgPSB0aGlzLnJpZ2h0ID09PSAxMDA7XG5cbiAgICAgICAgcmV0dXJuIGlzTGVmdFRodW1iTG9ja2VkXG4gICAgICAgICAgICA/IHNsaWRlclJpZ2h0UmVmLm5hdGl2ZUVsZW1lbnRcbiAgICAgICAgICAgIDogc2xpZGVyTGVmdFJlZi5uYXRpdmVFbGVtZW50O1xuICAgIH1cblxuICAgIGdldCBmb2N1c2VkKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdHVpSXNOYXRpdmVGb2N1c2VkSW4odGhpcy5lbC5uYXRpdmVFbGVtZW50KTtcbiAgICB9XG5cbiAgICBnZXQgZnJhY3Rpb25TdGVwKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0ZXAgLyAodGhpcy5tYXggLSB0aGlzLm1pbik7XG4gICAgfVxuXG4gICAgZ2V0IGNvbXB1dGVkS2V5U3RlcHMoKTogVHVpS2V5U3RlcHMge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wdXRlUHVyZUtleVN0ZXBzKHRoaXMua2V5U3RlcHMsIHRoaXMubWluLCB0aGlzLm1heCk7XG4gICAgfVxuXG4gICAgZ2V0IHNlZ21lbnRXaWR0aFJhdGlvKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiAxIC8gdGhpcy5zZWdtZW50cztcbiAgICB9XG5cbiAgICBASG9zdEJpbmRpbmcoJ3N0eWxlLi0tbGVmdC4lJylcbiAgICBnZXQgbGVmdCgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRQZXJjZW50YWdlRnJvbVZhbHVlKHRoaXMudmFsdWVbMF0pO1xuICAgIH1cblxuICAgIEBIb3N0QmluZGluZygnc3R5bGUuLS1yaWdodC4lJylcbiAgICBnZXQgcmlnaHQoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIDEwMCAtIHRoaXMuZ2V0UGVyY2VudGFnZUZyb21WYWx1ZSh0aGlzLnZhbHVlWzFdKTtcbiAgICB9XG5cbiAgICBASG9zdExpc3RlbmVyKCdmb2N1c2luJywgWyd0cnVlJ10pXG4gICAgQEhvc3RMaXN0ZW5lcignZm9jdXNvdXQnLCBbJ2ZhbHNlJ10pXG4gICAgb25Gb2N1c2VkKGZvY3VzZWQ6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgICAgdGhpcy51cGRhdGVGb2N1c2VkKGZvY3VzZWQpO1xuICAgIH1cblxuICAgIEBIb3N0TGlzdGVuZXIoJ2tleWRvd24uYXJyb3dVcC5wcmV2ZW50JywgWycxJywgJyRldmVudC50YXJnZXQnXSlcbiAgICBASG9zdExpc3RlbmVyKCdrZXlkb3duLmFycm93UmlnaHQucHJldmVudCcsIFsnMScsICckZXZlbnQudGFyZ2V0J10pXG4gICAgQEhvc3RMaXN0ZW5lcigna2V5ZG93bi5hcnJvd0xlZnQucHJldmVudCcsIFsnLTEnLCAnJGV2ZW50LnRhcmdldCddKVxuICAgIEBIb3N0TGlzdGVuZXIoJ2tleWRvd24uYXJyb3dEb3duLnByZXZlbnQnLCBbJy0xJywgJyRldmVudC50YXJnZXQnXSlcbiAgICBjaGFuZ2VCeVN0ZXAoY29lZmZpY2llbnQ6IG51bWJlciwgdGFyZ2V0OiBIVE1MRWxlbWVudCk6IHZvaWQge1xuICAgICAgICBjb25zdCBbc2xpZGVyTGVmdFJlZiwgc2xpZGVyUmlnaHRSZWZdID0gdGhpcy5zbGlkZXJzUmVmcztcbiAgICAgICAgY29uc3QgbGVmdFRodW1iRWxlbWVudCA9IHNsaWRlckxlZnRSZWYubmF0aXZlRWxlbWVudDtcbiAgICAgICAgY29uc3QgcmlnaHRUaHVtYkVsZW1lbnQgPSBzbGlkZXJSaWdodFJlZi5uYXRpdmVFbGVtZW50O1xuXG4gICAgICAgIGNvbnN0IGlzUmlnaHRUaHVtYiA9XG4gICAgICAgICAgICB0YXJnZXQgPT09IHRoaXMuZWwubmF0aXZlRWxlbWVudFxuICAgICAgICAgICAgICAgID8gdGhpcy5sYXN0QWN0aXZlVGh1bWIgPT09ICdyaWdodCdcbiAgICAgICAgICAgICAgICA6IHRhcmdldCA9PT0gcmlnaHRUaHVtYkVsZW1lbnQ7XG4gICAgICAgIGNvbnN0IGFjdGl2ZVRodW1iRWxlbWVudCA9IGlzUmlnaHRUaHVtYiA/IHJpZ2h0VGh1bWJFbGVtZW50IDogbGVmdFRodW1iRWxlbWVudDtcbiAgICAgICAgY29uc3QgcHJldmlvdXNWYWx1ZSA9IGlzUmlnaHRUaHVtYiA/IHRoaXMudmFsdWVbMV0gOiB0aGlzLnZhbHVlWzBdO1xuICAgICAgICAvKiogQGJhZCBUT0RPIHRoaW5rIGFib3V0IGEgc29sdXRpb24gd2l0aG91dCB0d2ljZSBjb252ZXJzaW9uICovXG4gICAgICAgIGNvbnN0IHByZXZpb3VzRnJhY3Rpb24gPSB0aGlzLmdldFBlcmNlbnRhZ2VGcm9tVmFsdWUocHJldmlvdXNWYWx1ZSkgLyAxMDA7XG4gICAgICAgIGNvbnN0IG5ld0ZyYWN0aW9uVmFsdWUgPSBwcmV2aW91c0ZyYWN0aW9uICsgY29lZmZpY2llbnQgKiB0aGlzLmZyYWN0aW9uU3RlcDtcblxuICAgICAgICB0aGlzLnByb2Nlc3NWYWx1ZSh0aGlzLmdldFZhbHVlRnJvbUZyYWN0aW9uKG5ld0ZyYWN0aW9uVmFsdWUpLCBpc1JpZ2h0VGh1bWIpO1xuXG4gICAgICAgIGlmIChhY3RpdmVUaHVtYkVsZW1lbnQpIHtcbiAgICAgICAgICAgIGFjdGl2ZVRodW1iRWxlbWVudC5mb2N1cygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJvY2Vzc1ZhbHVlKHZhbHVlOiBudW1iZXIsIHJpZ2h0OiBib29sZWFuKTogdm9pZCB7XG4gICAgICAgIGlmIChyaWdodCkge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVFbmQodmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVTdGFydCh2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmxhc3RBY3RpdmVUaHVtYiA9IHJpZ2h0ID8gJ3JpZ2h0JyA6ICdsZWZ0JztcbiAgICB9XG5cbiAgICBnZXRWYWx1ZUZyb21GcmFjdGlvbihmcmFjdGlvbjogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAgICAgY29uc3QgZ3VhcmRlZEZyYWN0aW9uID0gdHVpQ2xhbXAodHVpUXVhbnRpemUoZnJhY3Rpb24sIHRoaXMuZnJhY3Rpb25TdGVwKSwgMCwgMSk7XG5cbiAgICAgICAgcmV0dXJuIHR1aVBlcmNlbnRhZ2VUb0tleVN0ZXBWYWx1ZShndWFyZGVkRnJhY3Rpb24gKiAxMDAsIHRoaXMuY29tcHV0ZWRLZXlTdGVwcyk7XG4gICAgfVxuXG4gICAgZ2V0UGVyY2VudGFnZUZyb21WYWx1ZSh2YWx1ZTogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHR1aUtleVN0ZXBWYWx1ZVRvUGVyY2VudGFnZSh2YWx1ZSwgdGhpcy5jb21wdXRlZEtleVN0ZXBzKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0RmFsbGJhY2tWYWx1ZSgpOiBbbnVtYmVyLCBudW1iZXJdIHtcbiAgICAgICAgcmV0dXJuIFswLCAwXTtcbiAgICB9XG5cbiAgICBAdHVpUHVyZVxuICAgIHByaXZhdGUgY29tcHV0ZVB1cmVLZXlTdGVwcyhcbiAgICAgICAga2V5U3RlcHM6IFR1aUtleVN0ZXBzIHwgbnVsbCxcbiAgICAgICAgbWluOiBudW1iZXIsXG4gICAgICAgIG1heDogbnVtYmVyLFxuICAgICk6IFR1aUtleVN0ZXBzIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIGtleVN0ZXBzIHx8IFtcbiAgICAgICAgICAgICAgICBbMCwgbWluXSxcbiAgICAgICAgICAgICAgICBbMTAwLCBtYXhdLFxuICAgICAgICAgICAgXVxuICAgICAgICApO1xuICAgIH1cblxuICAgIHByaXZhdGUgdXBkYXRlU3RhcnQodmFsdWU6IG51bWJlcik6IHZvaWQge1xuICAgICAgICB0aGlzLnZhbHVlID0gW01hdGgubWluKHZhbHVlLCB0aGlzLnZhbHVlWzFdKSwgdGhpcy52YWx1ZVsxXV07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB1cGRhdGVFbmQodmFsdWU6IG51bWJlcik6IHZvaWQge1xuICAgICAgICB0aGlzLnZhbHVlID0gW3RoaXMudmFsdWVbMF0sIE1hdGgubWF4KHZhbHVlLCB0aGlzLnZhbHVlWzBdKV07XG4gICAgfVxufVxuIiwiPGRpdlxuICAgIGNsYXNzPVwidC10cmFja1wiXG4gICAgW3N0eWxlLi0tYmctc2l6ZS1yYXRpb109XCIxIC0gc2VnbWVudFdpZHRoUmF0aW9cIlxuICAgIFtzdHlsZS4tLXNlZ21lbnQtd2lkdGguJV09XCJzZWdtZW50V2lkdGhSYXRpbyAqIDEwMFwiXG4+XG4gICAgPGlucHV0XG4gICAgICAgIGF1dG9tYXRpb24taWQ9XCJ0dWktcmFuZ2VfX2xlZnRcIlxuICAgICAgICByZWFkb25seVxuICAgICAgICBzdGVwPVwiYW55XCJcbiAgICAgICAgdHVpU2xpZGVyXG4gICAgICAgIHR5cGU9XCJyYW5nZVwiXG4gICAgICAgIGNsYXNzPVwidC10aHVtYlwiXG4gICAgICAgIFtkaXNhYmxlZF09XCJjb21wdXRlZERpc2FibGVkXCJcbiAgICAgICAgW2tleVN0ZXBzXT1cImNvbXB1dGVkS2V5U3RlcHNcIlxuICAgICAgICBbbWF4XT1cIm1heFwiXG4gICAgICAgIFttaW5dPVwibWluXCJcbiAgICAgICAgW25nTW9kZWxdPVwidmFsdWVbMF1cIlxuICAgICAgICBbc2l6ZV09XCJzaXplXCJcbiAgICAgICAgW3R1aUZvY3VzYWJsZV09XCJmb2N1c2FibGVcIlxuICAgIC8+XG4gICAgPGlucHV0XG4gICAgICAgIGF1dG9tYXRpb24taWQ9XCJ0dWktcmFuZ2VfX3JpZ2h0XCJcbiAgICAgICAgcmVhZG9ubHlcbiAgICAgICAgc3RlcD1cImFueVwiXG4gICAgICAgIHR1aVNsaWRlclxuICAgICAgICB0eXBlPVwicmFuZ2VcIlxuICAgICAgICBjbGFzcz1cInQtdGh1bWJcIlxuICAgICAgICBbZGlzYWJsZWRdPVwiY29tcHV0ZWREaXNhYmxlZFwiXG4gICAgICAgIFtrZXlTdGVwc109XCJjb21wdXRlZEtleVN0ZXBzXCJcbiAgICAgICAgW21heF09XCJtYXhcIlxuICAgICAgICBbbWluXT1cIm1pblwiXG4gICAgICAgIFtuZ01vZGVsXT1cInZhbHVlWzFdXCJcbiAgICAgICAgW3NpemVdPVwic2l6ZVwiXG4gICAgICAgIFt0dWlGb2N1c2FibGVdPVwiZm9jdXNhYmxlXCJcbiAgICAvPlxuPC9kaXY+XG4iXX0=