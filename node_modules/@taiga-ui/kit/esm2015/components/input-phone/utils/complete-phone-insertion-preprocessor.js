const countDigits = (value) => value.replace(/\D/g, '').length;
/**
 * `InputPhone` component sets country code as non-removable prefix.
 * This prefix appears on focus and cannot be erased.
 * But users sometimes can copy complete phone number (from any different source)
 * and try to insert the whole string inside our `InputPhone` textfield.
 * This preprocessor helps to avoid country prefix duplication on paste/drop/autofill events.
 */
export function tuiCreateCompletePhoneInsertionPreprocessor(countryCode, phoneMaskAfterCountryCode) {
    const completePhoneLength = (countryCode + phoneMaskAfterCountryCode).replace(/[^#\d]+/g, '').length;
    const trimCountryPrefix = (value) => countryCode === '+7'
        ? value.replace(/^(\+?7?\s?8?)\s?/, '')
        : value.replace(new RegExp(`^(\\+?${countryCode.replace('+', '')}?)\\s?`), '');
    return ({ elementState, data }) => {
        const { value, selection } = elementState;
        return {
            elementState: {
                selection,
                value: 
                /**
                 * The only possible case when `value` includes digits more
                 * than mask expression allows â€“ browser autofill.
                 * It means that we are inside `input`-event
                 * and mask are ready to reject "extra" characters.
                 * We should cut leading country prefix to save trailing characters!
                 */
                countDigits(value) > completePhoneLength
                    ? trimCountryPrefix(value)
                    : value,
            },
            data: countDigits(data) >= completePhoneLength
                ? /**
                   * User tries to insert/drop the complete phone number (with country prefix).
                   * We should drop already existing non-removable prefix.
                   */
                    trimCountryPrefix(data)
                : data,
        };
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGxldGUtcGhvbmUtaW5zZXJ0aW9uLXByZXByb2Nlc3Nvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2tpdC9jb21wb25lbnRzL2lucHV0LXBob25lL3V0aWxzL2NvbXBsZXRlLXBob25lLWluc2VydGlvbi1wcmVwcm9jZXNzb3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxXQUFXLEdBQUcsQ0FBQyxLQUFhLEVBQVUsRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQztBQUUvRTs7Ozs7O0dBTUc7QUFDSCxNQUFNLFVBQVUsMkNBQTJDLENBQ3ZELFdBQW1CLEVBQ25CLHlCQUFpQztJQUVqQyxNQUFNLG1CQUFtQixHQUFHLENBQUMsV0FBVyxHQUFHLHlCQUF5QixDQUFDLENBQUMsT0FBTyxDQUN6RSxVQUFVLEVBQ1YsRUFBRSxDQUNMLENBQUMsTUFBTSxDQUFDO0lBRVQsTUFBTSxpQkFBaUIsR0FBRyxDQUFDLEtBQWEsRUFBVSxFQUFFLENBQ2hELFdBQVcsS0FBSyxJQUFJO1FBQ2hCLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLGtCQUFrQixFQUFFLEVBQUUsQ0FBQztRQUN2QyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FDVCxJQUFJLE1BQU0sQ0FBQyxTQUFTLFdBQVcsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsRUFDekQsRUFBRSxDQUNMLENBQUM7SUFFWixPQUFPLENBQUMsRUFBQyxZQUFZLEVBQUUsSUFBSSxFQUFDLEVBQUUsRUFBRTtRQUM1QixNQUFNLEVBQUMsS0FBSyxFQUFFLFNBQVMsRUFBQyxHQUFHLFlBQVksQ0FBQztRQUV4QyxPQUFPO1lBQ0gsWUFBWSxFQUFFO2dCQUNWLFNBQVM7Z0JBQ1QsS0FBSztnQkFDRDs7Ozs7O21CQU1HO2dCQUNILFdBQVcsQ0FBQyxLQUFLLENBQUMsR0FBRyxtQkFBbUI7b0JBQ3BDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLENBQUM7b0JBQzFCLENBQUMsQ0FBQyxLQUFLO2FBQ2xCO1lBQ0QsSUFBSSxFQUNBLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxtQkFBbUI7Z0JBQ3BDLENBQUMsQ0FBQzs7O3FCQUdHO29CQUNILGlCQUFpQixDQUFDLElBQUksQ0FBQztnQkFDekIsQ0FBQyxDQUFDLElBQUk7U0FDakIsQ0FBQztJQUNOLENBQUMsQ0FBQztBQUNOLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge01hc2tpdG9QcmVwcm9jZXNzb3J9IGZyb20gJ0BtYXNraXRvL2NvcmUnO1xuXG5jb25zdCBjb3VudERpZ2l0cyA9ICh2YWx1ZTogc3RyaW5nKTogbnVtYmVyID0+IHZhbHVlLnJlcGxhY2UoL1xcRC9nLCAnJykubGVuZ3RoO1xuXG4vKipcbiAqIGBJbnB1dFBob25lYCBjb21wb25lbnQgc2V0cyBjb3VudHJ5IGNvZGUgYXMgbm9uLXJlbW92YWJsZSBwcmVmaXguXG4gKiBUaGlzIHByZWZpeCBhcHBlYXJzIG9uIGZvY3VzIGFuZCBjYW5ub3QgYmUgZXJhc2VkLlxuICogQnV0IHVzZXJzIHNvbWV0aW1lcyBjYW4gY29weSBjb21wbGV0ZSBwaG9uZSBudW1iZXIgKGZyb20gYW55IGRpZmZlcmVudCBzb3VyY2UpXG4gKiBhbmQgdHJ5IHRvIGluc2VydCB0aGUgd2hvbGUgc3RyaW5nIGluc2lkZSBvdXIgYElucHV0UGhvbmVgIHRleHRmaWVsZC5cbiAqIFRoaXMgcHJlcHJvY2Vzc29yIGhlbHBzIHRvIGF2b2lkIGNvdW50cnkgcHJlZml4IGR1cGxpY2F0aW9uIG9uIHBhc3RlL2Ryb3AvYXV0b2ZpbGwgZXZlbnRzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdHVpQ3JlYXRlQ29tcGxldGVQaG9uZUluc2VydGlvblByZXByb2Nlc3NvcihcbiAgICBjb3VudHJ5Q29kZTogc3RyaW5nLFxuICAgIHBob25lTWFza0FmdGVyQ291bnRyeUNvZGU6IHN0cmluZyxcbik6IE1hc2tpdG9QcmVwcm9jZXNzb3Ige1xuICAgIGNvbnN0IGNvbXBsZXRlUGhvbmVMZW5ndGggPSAoY291bnRyeUNvZGUgKyBwaG9uZU1hc2tBZnRlckNvdW50cnlDb2RlKS5yZXBsYWNlKFxuICAgICAgICAvW14jXFxkXSsvZyxcbiAgICAgICAgJycsXG4gICAgKS5sZW5ndGg7XG5cbiAgICBjb25zdCB0cmltQ291bnRyeVByZWZpeCA9ICh2YWx1ZTogc3RyaW5nKTogc3RyaW5nID0+XG4gICAgICAgIGNvdW50cnlDb2RlID09PSAnKzcnXG4gICAgICAgICAgICA/IHZhbHVlLnJlcGxhY2UoL14oXFwrPzc/XFxzPzg/KVxccz8vLCAnJylcbiAgICAgICAgICAgIDogdmFsdWUucmVwbGFjZShcbiAgICAgICAgICAgICAgICAgIG5ldyBSZWdFeHAoYF4oXFxcXCs/JHtjb3VudHJ5Q29kZS5yZXBsYWNlKCcrJywgJycpfT8pXFxcXHM/YCksXG4gICAgICAgICAgICAgICAgICAnJyxcbiAgICAgICAgICAgICAgKTtcblxuICAgIHJldHVybiAoe2VsZW1lbnRTdGF0ZSwgZGF0YX0pID0+IHtcbiAgICAgICAgY29uc3Qge3ZhbHVlLCBzZWxlY3Rpb259ID0gZWxlbWVudFN0YXRlO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBlbGVtZW50U3RhdGU6IHtcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb24sXG4gICAgICAgICAgICAgICAgdmFsdWU6XG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBUaGUgb25seSBwb3NzaWJsZSBjYXNlIHdoZW4gYHZhbHVlYCBpbmNsdWRlcyBkaWdpdHMgbW9yZVxuICAgICAgICAgICAgICAgICAgICAgKiB0aGFuIG1hc2sgZXhwcmVzc2lvbiBhbGxvd3Mg4oCTIGJyb3dzZXIgYXV0b2ZpbGwuXG4gICAgICAgICAgICAgICAgICAgICAqIEl0IG1lYW5zIHRoYXQgd2UgYXJlIGluc2lkZSBgaW5wdXRgLWV2ZW50XG4gICAgICAgICAgICAgICAgICAgICAqIGFuZCBtYXNrIGFyZSByZWFkeSB0byByZWplY3QgXCJleHRyYVwiIGNoYXJhY3RlcnMuXG4gICAgICAgICAgICAgICAgICAgICAqIFdlIHNob3VsZCBjdXQgbGVhZGluZyBjb3VudHJ5IHByZWZpeCB0byBzYXZlIHRyYWlsaW5nIGNoYXJhY3RlcnMhXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBjb3VudERpZ2l0cyh2YWx1ZSkgPiBjb21wbGV0ZVBob25lTGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHRyaW1Db3VudHJ5UHJlZml4KHZhbHVlKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiB2YWx1ZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkYXRhOlxuICAgICAgICAgICAgICAgIGNvdW50RGlnaXRzKGRhdGEpID49IGNvbXBsZXRlUGhvbmVMZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgPyAvKipcbiAgICAgICAgICAgICAgICAgICAgICAgKiBVc2VyIHRyaWVzIHRvIGluc2VydC9kcm9wIHRoZSBjb21wbGV0ZSBwaG9uZSBudW1iZXIgKHdpdGggY291bnRyeSBwcmVmaXgpLlxuICAgICAgICAgICAgICAgICAgICAgICAqIFdlIHNob3VsZCBkcm9wIGFscmVhZHkgZXhpc3Rpbmcgbm9uLXJlbW92YWJsZSBwcmVmaXguXG4gICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgICAgdHJpbUNvdW50cnlQcmVmaXgoZGF0YSlcbiAgICAgICAgICAgICAgICAgICAgOiBkYXRhLFxuICAgICAgICB9O1xuICAgIH07XG59XG4iXX0=