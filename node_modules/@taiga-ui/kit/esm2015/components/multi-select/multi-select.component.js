import { __decorate } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, EventEmitter, HostBinding, Inject, Input, Optional, Output, Self, TemplateRef, ViewChild, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AbstractTuiMultipleControl, ALWAYS_TRUE_HANDLER, EMPTY_ARRAY, TUI_IS_MOBILE, tuiArrayToggle, tuiAsControl, tuiAsFocusableItemAccessor, tuiIsNativeFocused, tuiIsString, tuiPure, } from '@taiga-ui/cdk';
import { TEXTFIELD_CONTROLLER_PROVIDER, TUI_DATA_LIST_ACCESSOR, TUI_TEXTFIELD_WATCHED_CONTROLLER, tuiAsDataListHost, TuiDataListDirective, TuiHostedDropdownComponent, } from '@taiga-ui/core';
import { TuiStringifiableItem } from '@taiga-ui/kit/classes';
import { TUI_ARROW_MODE } from '@taiga-ui/kit/components/arrow';
import { TuiInputTagComponent } from '@taiga-ui/kit/components/input-tag';
import { FIXED_DROPDOWN_CONTROLLER_PROVIDER } from '@taiga-ui/kit/providers';
import { TUI_ITEMS_HANDLERS } from '@taiga-ui/kit/tokens';
import { TUI_MULTI_SELECT_OPTIONS } from './multi-select.options';
import { AbstractTuiNativeMultiSelect } from './native-multi-select/native-multi-select';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core";
import * as i2 from "@taiga-ui/kit/components/input-tag";
import * as i3 from "@taiga-ui/cdk";
import * as i4 from "@angular/forms";
import * as i5 from "@angular/common";
import * as i6 from "@tinkoff/ng-polymorpheus";
export class TuiMultiSelectComponent extends AbstractTuiMultipleControl {
    constructor(control, cdr, arrowMode, itemsHandlers, options, controller, isMobile) {
        super(control, cdr);
        this.arrowMode = arrowMode;
        this.itemsHandlers = itemsHandlers;
        this.options = options;
        this.controller = controller;
        this.isMobile = isMobile;
        this.stringify = this.itemsHandlers.stringify;
        this.identityMatcher = this.itemsHandlers.identityMatcher;
        this.expandable = this.options.expandable;
        this.search = '';
        this.placeholder = '';
        this.editable = true;
        this.disabledItemHandler = this.itemsHandlers.disabledItemHandler;
        this.valueContent = this.options.valueContent;
        this.tagValidator = ALWAYS_TRUE_HANDLER;
        this.rows = Infinity;
        this.searchChange = new EventEmitter();
        this.open = false;
        this.valueMapper = (value, stringify, group) => group
            ? EMPTY_ARRAY
            : value.map(item => new TuiStringifiableItem(item, stringify));
        this.disabledItemHandlerWrapper = handler => stringifiable => tuiIsString(stringifiable) || handler(stringifiable.item);
    }
    get size() {
        return this.controller.size;
    }
    get arrow() {
        return this.interactive ? this.arrowMode.interactive : this.arrowMode.disabled;
    }
    get nativeFocusableElement() {
        var _a, _b;
        return (_b = (_a = this.input) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement) !== null && _b !== void 0 ? _b : null;
    }
    get focused() {
        var _a, _b;
        return !!((_a = this.input) === null || _a === void 0 ? void 0 : _a.focused) || !!((_b = this.hostedDropdown) === null || _b === void 0 ? void 0 : _b.focused);
    }
    get nativeDropdownMode() {
        return !!this.nativeSelect && this.isMobile && !this.editable;
    }
    get computedValue() {
        return this.computedGroup ? EMPTY_ARRAY : this.value;
    }
    // @bad TODO: think of a better way
    get searchOrSpace() {
        return this.computedGroup ? ' ' : this.searchString;
    }
    get searchString() {
        return this.search === null ? '' : this.search;
    }
    get computedGroup() {
        return (!!this.valueContent &&
            this.value.length > 0 &&
            (!this.focused || !this.editable));
    }
    getStringifier(stringify) {
        return ({ $implicit }) => stringify($implicit);
    }
    onSpace(event) {
        var _a;
        if (!this.editable) {
            event.preventDefault();
        }
        if (!this.readOnly) {
            (_a = this.hostedDropdown) === null || _a === void 0 ? void 0 : _a.updateOpen(true);
        }
    }
    handleOption(option) {
        const { value, identityMatcher } = this;
        const index = value.findIndex(item => identityMatcher(item, option));
        this.value =
            index === -1 ? [...value, option] : value.filter((_, i) => i !== index);
        this.updateSearch(null);
    }
    onEnter(event) {
        const { value } = this;
        const options = this.accessor ? this.accessor.getOptions() : [];
        if (options.length !== 1) {
            return;
        }
        event.preventDefault();
        this.value = tuiArrayToggle(value, options[0]);
        this.updateSearch(null);
    }
    onClick({ nativeFocusableElement }) {
        var _a;
        if (this.interactive &&
            nativeFocusableElement &&
            tuiIsNativeFocused(nativeFocusableElement)) {
            (_a = this.hostedDropdown) === null || _a === void 0 ? void 0 : _a.updateOpen(!this.open);
        }
    }
    onInput(value) {
        this.value = value.map(({ item }) => item);
    }
    onValueChange(value) {
        this.value = value;
    }
    onSearch(search) {
        var _a;
        // Clearing sets the empty value, the dropdown should not be opened on clear.
        if (search !== '') {
            (_a = this.hostedDropdown) === null || _a === void 0 ? void 0 : _a.updateOpen(true);
        }
        this.updateSearch(search);
    }
    onActiveZone(active) {
        this.updateFocused(active);
    }
    setDisabledState() {
        var _a;
        super.setDisabledState();
        (_a = this.hostedDropdown) === null || _a === void 0 ? void 0 : _a.updateOpen(false);
    }
    updateSearch(search) {
        if (this.search === search) {
            return;
        }
        this.search = search;
        this.searchChange.emit(search);
    }
}
TuiMultiSelectComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiMultiSelectComponent, deps: [{ token: NgControl, optional: true, self: true }, { token: ChangeDetectorRef }, { token: TUI_ARROW_MODE }, { token: TUI_ITEMS_HANDLERS }, { token: TUI_MULTI_SELECT_OPTIONS }, { token: TUI_TEXTFIELD_WATCHED_CONTROLLER }, { token: TUI_IS_MOBILE }], target: i0.ɵɵFactoryTarget.Component });
TuiMultiSelectComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiMultiSelectComponent, selector: "tui-multi-select", inputs: { stringify: "stringify", identityMatcher: "identityMatcher", expandable: "expandable", search: "search", placeholder: "placeholder", editable: "editable", disabledItemHandler: "disabledItemHandler", valueContent: "valueContent", tagValidator: "tagValidator", rows: "rows" }, outputs: { searchChange: "searchChange" }, host: { properties: { "class._editable": "this.editable", "attr.data-size": "this.size" } }, providers: [
        tuiAsFocusableItemAccessor(TuiMultiSelectComponent),
        tuiAsControl(TuiMultiSelectComponent),
        tuiAsDataListHost(TuiMultiSelectComponent),
        TEXTFIELD_CONTROLLER_PROVIDER,
    ], queries: [{ propertyName: "accessor", first: true, predicate: TUI_DATA_LIST_ACCESSOR, descendants: true }, { propertyName: "nativeSelect", first: true, predicate: AbstractTuiNativeMultiSelect, descendants: true, static: true }, { propertyName: "datalist", first: true, predicate: TuiDataListDirective, descendants: true, read: TemplateRef }], viewQueries: [{ propertyName: "hostedDropdown", first: true, predicate: TuiHostedDropdownComponent, descendants: true }, { propertyName: "input", first: true, predicate: TuiInputTagComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: "<tui-hosted-dropdown\n    class=\"t-hosted\"\n    [canOpen]=\"interactive && !nativeDropdownMode\"\n    [content]=\"datalist || ''\"\n    [(open)]=\"open\"\n    (tuiActiveZoneChange)=\"onActiveZone($event)\"\n>\n    <tui-input-tag\n        #inputTag\n        automation-id=\"tui-multi-select__input\"\n        class=\"t-input\"\n        [disabled]=\"disabled\"\n        [disabledItemHandler]=\"disabledItemHandler | tuiMapper: disabledItemHandlerWrapper\"\n        [editable]=\"false\"\n        [expandable]=\"expandable\"\n        [inputHidden]=\"!editable\"\n        [nativeId]=\"nativeId\"\n        [ngModel]=\"computedValue | tuiMapper: valueMapper : stringify\"\n        [placeholder]=\"placeholder\"\n        [pseudoFocus]=\"computedFocused\"\n        [pseudoHover]=\"pseudoHover\"\n        [pseudoInvalid]=\"computedInvalid\"\n        [readOnly]=\"readOnly\"\n        [removable]=\"!nativeDropdownMode\"\n        [rows]=\"rows\"\n        [search]=\"searchOrSpace\"\n        [tagValidator]=\"tagValidator | tuiMapper: disabledItemHandlerWrapper\"\n        [tuiTextfieldIcon]=\"arrow ? icon : ''\"\n        (click.prevent)=\"onClick(inputTag)\"\n        (keydown.enter)=\"onEnter($event)\"\n        (keydown.space)=\"onSpace($event)\"\n        (ngModelChange)=\"onInput($event)\"\n        (searchChange)=\"onSearch($event)\"\n    >\n        <ng-content></ng-content>\n        <ng-template #select>\n            <ng-content\n                *ngIf=\"isMobile\"\n                select=\"select\"\n            ></ng-content>\n        </ng-template>\n\n        <ng-container\n            *ngTemplateOutlet=\"select\"\n            ngProjectAs=\"select\"\n        ></ng-container>\n\n        <div\n            *ngIf=\"computedGroup\"\n            ngProjectAs=\"tuiContent\"\n            class=\"t-content\"\n            [class.t-content_fullsize]=\"inputTag.labelOutside\"\n        >\n            <span\n                *polymorpheusOutlet=\"valueContent as text; context: {$implicit: value}\"\n                class=\"t-primitive\"\n            >\n                {{ text }}\n            </span>\n        </div>\n    </tui-input-tag>\n\n    <ng-template #icon>\n        <div\n            appearance=\"icon\"\n            automation-id=\"tui-multi-select__arrow\"\n            tuiPreventDefault=\"mousedown\"\n            tuiWrapper\n            class=\"t-arrow\"\n            [class.t-arrow_native-dropdown]=\"nativeDropdownMode\"\n        >\n            <ng-container *polymorpheusOutlet=\"arrow as text\">\n                {{ text }}\n            </ng-container>\n        </div>\n    </ng-template>\n</tui-hosted-dropdown>\n", styles: [":host{position:relative;display:block;border-radius:var(--tui-radius-m)}:host._disabled{pointer-events:none}.t-hosted{display:block;border-radius:inherit}.t-input{border-radius:inherit}:host:not(._editable):not(._readonly) .t-input{cursor:pointer}.t-content{display:flex;align-items:center;pointer-events:none;box-sizing:border-box}.t-primitive{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.t-arrow{pointer-events:auto;cursor:pointer}.t-arrow_native-dropdown{pointer-events:none}\n"], components: [{ type: i1.TuiHostedDropdownComponent, selector: "tui-hosted-dropdown", inputs: ["content", "sided", "canOpen", "open"], outputs: ["openChange", "focusedChange"] }, { type: i2.TuiInputTagComponent, selector: "tui-input-tag", inputs: ["separator", "search", "editable", "tagValidator", "expandable", "rows", "inputHidden", "uniqueTags", "maxLength", "placeholder", "removable", "disabledItemHandler", "pseudoFocused"], outputs: ["searchChange"] }], directives: [{ type: i3.TuiActiveZoneDirective, selector: "[tuiActiveZone]:not(ng-container), [tuiActiveZoneChange]:not(ng-container), [tuiActiveZoneParent]:not(ng-container)", inputs: ["tuiActiveZoneParent"], outputs: ["tuiActiveZoneChange"], exportAs: ["tuiActiveZone"] }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i1.TuiTextfieldIconDirective, selector: "[tuiTextfieldIcon]", inputs: ["tuiTextfieldIcon"] }, { type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i6.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { type: i3.TuiPreventDefaultDirective, selector: "[tuiPreventDefault]", inputs: ["tuiPreventDefault"] }, { type: i1.TuiWrapperDirective, selector: "[tuiWrapper]", inputs: ["disabled", "readOnly", "hover", "active", "focus", "invalid", "appearance"] }], pipes: { "tuiMapper": i3.TuiMapperPipe }, viewProviders: [FIXED_DROPDOWN_CONTROLLER_PROVIDER], changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiPure
], TuiMultiSelectComponent.prototype, "getStringifier", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiMultiSelectComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-multi-select',
                    templateUrl: './multi-select.template.html',
                    styleUrls: ['./multi-select.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        tuiAsFocusableItemAccessor(TuiMultiSelectComponent),
                        tuiAsControl(TuiMultiSelectComponent),
                        tuiAsDataListHost(TuiMultiSelectComponent),
                        TEXTFIELD_CONTROLLER_PROVIDER,
                    ],
                    viewProviders: [FIXED_DROPDOWN_CONTROLLER_PROVIDER],
                }]
        }], ctorParameters: function () { return [{ type: i4.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }, {
                    type: Inject,
                    args: [NgControl]
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_ARROW_MODE]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_ITEMS_HANDLERS]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_MULTI_SELECT_OPTIONS]
                }] }, { type: i1.TuiTextfieldController, decorators: [{
                    type: Inject,
                    args: [TUI_TEXTFIELD_WATCHED_CONTROLLER]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_IS_MOBILE]
                }] }]; }, propDecorators: { accessor: [{
                type: ContentChild,
                args: [TUI_DATA_LIST_ACCESSOR]
            }], nativeSelect: [{
                type: ContentChild,
                args: [AbstractTuiNativeMultiSelect, { static: true }]
            }], hostedDropdown: [{
                type: ViewChild,
                args: [TuiHostedDropdownComponent]
            }], input: [{
                type: ViewChild,
                args: [TuiInputTagComponent]
            }], stringify: [{
                type: Input
            }], identityMatcher: [{
                type: Input
            }], expandable: [{
                type: Input
            }], search: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], editable: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['class._editable']
            }], disabledItemHandler: [{
                type: Input
            }], valueContent: [{
                type: Input
            }], tagValidator: [{
                type: Input
            }], rows: [{
                type: Input
            }], searchChange: [{
                type: Output
            }], datalist: [{
                type: ContentChild,
                args: [TuiDataListDirective, { read: TemplateRef }]
            }], size: [{
                type: HostBinding,
                args: ['attr.data-size']
            }], getStringifier: [] } });
//# sourceMappingURL=data:application/json;base64,