import { ChangeDetectionStrategy, ChangeDetectorRef, Component, HostBinding, Inject, Input, Optional, Self, ViewChild, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AbstractTuiControl, tuiAsControl, tuiAsFocusableItemAccessor, tuiIsNativeFocused, } from '@taiga-ui/cdk';
import { TuiModeDirective } from '@taiga-ui/core';
import { TUI_TOGGLE_OPTIONS } from './toggle.options';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core";
import * as i2 from "@angular/common";
import * as i3 from "@tinkoff/ng-polymorpheus";
import * as i4 from "@taiga-ui/cdk";
import * as i5 from "@angular/forms";
export class TuiToggleComponent extends AbstractTuiControl {
    constructor(control, cdr, modeDirective, options) {
        super(control, cdr);
        this.modeDirective = modeDirective;
        this.options = options;
        this.singleColor = this.options.singleColor;
        this.showIcons = this.options.showIcons;
        this.showLoader = false;
        this.size = this.options.size;
    }
    get iconOn() {
        return this.options.icons.toggleOn;
    }
    get iconOff() {
        return this.options.icons.toggleOff;
    }
    get nativeFocusableElement() {
        var _a, _b;
        return (_b = (_a = this.focusableElement) === null || _a === void 0 ? void 0 : _a.nativeElement) !== null && _b !== void 0 ? _b : null;
    }
    get focused() {
        return tuiIsNativeFocused(this.nativeFocusableElement);
    }
    get appearance() {
        return this.singleColor || this.value
            ? this.options.appearances.checked
            : this.options.appearances.unchecked;
    }
    get sizeM() {
        return this.size === 'm';
    }
    get loaderSize() {
        return this.sizeM ? 'xs' : 's';
    }
    get hostMode() {
        var _a, _b;
        return (_b = (_a = this.modeDirective) === null || _a === void 0 ? void 0 : _a.mode) !== null && _b !== void 0 ? _b : null;
    }
    /** @deprecated use 'value' setter */
    onChecked(checked) {
        this.value = checked;
    }
    onFocused(focused) {
        this.updateFocused(focused);
    }
    onFocusVisible(focusVisible) {
        this.updateFocusVisible(focusVisible);
    }
    getFallbackValue() {
        return false;
    }
}
TuiToggleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiToggleComponent, deps: [{ token: NgControl, optional: true, self: true }, { token: ChangeDetectorRef }, { token: TuiModeDirective, optional: true }, { token: TUI_TOGGLE_OPTIONS }], target: i0.ɵɵFactoryTarget.Component });
TuiToggleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiToggleComponent, selector: "tui-toggle", inputs: { singleColor: "singleColor", showIcons: "showIcons", showLoader: "showLoader", size: "size" }, host: { properties: { "class._checked": "value", "attr.data-size": "this.size", "attr.data-mode": "this.hostMode" } }, providers: [
        tuiAsFocusableItemAccessor(TuiToggleComponent),
        tuiAsControl(TuiToggleComponent),
    ], viewQueries: [{ propertyName: "focusableElement", first: true, predicate: ["focusableElement"], descendants: true }], usesInheritance: true, ngImport: i0, template: "<div\n    tuiWrapper\n    [active]=\"pseudoActive\"\n    [appearance]=\"appearance\"\n    [disabled]=\"computedDisabled\"\n    [focus]=\"computedFocusVisible\"\n    [hover]=\"pseudoHover\"\n    [invalid]=\"computedInvalid\"\n    [readOnly]=\"readOnly\"\n>\n    <div class=\"t-toggle\">\n        <tui-loader\n            *ngIf=\"showLoader\"\n            class=\"t-loader\"\n            [inheritColor]=\"true\"\n            [showLoader]=\"value\"\n            [size]=\"loaderSize\"\n        ></tui-loader>\n        <span\n            *ngIf=\"showIcons && !showLoader\"\n            class=\"t-icon-wrapper\"\n        >\n            <tui-svg\n                *polymorpheusOutlet=\"iconOn as src; context: {$implicit: size}\"\n                automation-id=\"tui-toggle__check-icon\"\n                class=\"t-icon\"\n                [src]=\"src\"\n            ></tui-svg>\n        </span>\n        <div class=\"t-circle\"></div>\n        <tui-loader\n            *ngIf=\"showLoader\"\n            class=\"t-loader\"\n            [inheritColor]=\"true\"\n            [showLoader]=\"!value\"\n            [size]=\"loaderSize\"\n        ></tui-loader>\n        <span\n            *ngIf=\"showIcons && !showLoader\"\n            class=\"t-icon-wrapper\"\n        >\n            <tui-svg\n                *polymorpheusOutlet=\"iconOff as src; context: {$implicit: size}\"\n                automation-id=\"tui-toggle__cancel-icon\"\n                class=\"t-icon t-icon_off\"\n                [src]=\"src\"\n            ></tui-svg>\n        </span>\n    </div>\n    <input\n        #focusableElement\n        automation-id=\"tui-toggle__checkbox\"\n        role=\"switch\"\n        type=\"checkbox\"\n        class=\"t-checkbox\"\n        [attr.aria-checked]=\"value\"\n        [disabled]=\"disabled\"\n        [id]=\"id\"\n        [tuiFocusable]=\"focusable\"\n        [(tuiChecked)]=\"value\"\n        (tuiFocusedChange)=\"onFocused($event)\"\n        (tuiFocusVisibleChange)=\"onFocusVisible($event)\"\n    />\n</div>\n", styles: [":host{position:relative;display:inline-block;vertical-align:middle;overflow:hidden;border-radius:6.25rem}:host[data-size=m]{width:2rem;height:1rem}:host[data-size=l]{width:3rem;height:1.5rem}.t-checkbox{padding:0;margin:0;border-width:0;border-radius:inherit;background:none;font-size:inherit;line-height:inherit;font-weight:inherit;color:inherit;caret-color:currentColor;outline:none;-webkit-appearance:none;-moz-appearance:none;appearance:none;word-break:keep-all;-webkit-text-fill-color:currentColor;position:absolute;top:0;left:0;height:100%;width:100%;opacity:0;cursor:pointer}.t-checkbox:-webkit-autofill,.t-checkbox:-webkit-autofill:hover,.t-checkbox:-webkit-autofill:focus{caret-color:var(--tui-base-09);border-radius:inherit;color:inherit!important;background-color:transparent!important;-webkit-text-fill-color:var(--tui-text-01)!important;border-color:var(--tui-autofill);-webkit-box-shadow:0 0 0 100rem var(--tui-autofill) inset!important}:host._disabled .t-checkbox{pointer-events:none;cursor:default}.t-toggle{transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;display:flex;align-items:center;justify-content:center}:host[data-size=m] .t-toggle{width:3rem;height:1rem;transform:translate(-1rem)}:host[data-size=l] .t-toggle{width:4.5rem;height:1.5rem;transform:translate(-1.5rem)}:host._checked .t-toggle{transform:translate(0)}.t-circle{margin:.125rem 0;flex-shrink:0;border-radius:100%;background-color:var(--tui-base-01)}:host._disabled .t-circle_light{opacity:.24}:host[data-size=m] .t-circle{width:.75rem;height:.75rem}:host[data-size=l] .t-circle{width:1rem;height:1rem}:host._disabled .t-circle{background-color:var(--tui-base-01)}.t-loader{min-width:auto}:host:not(._checked) .t-loader{color:var(--tui-base-06)}:host:not(._checked)._disabled .t-loader{color:var(--tui-base-05)}:host:not(._checked)[data-mode=onDark] .t-loader{color:var(--tui-text-03-night)}:host:not(._checked)[data-mode=onDark]._disabled .t-loader{color:var(--tui-clear-inverse-active)}:host:not(._checked)[data-mode=onLight] .t-loader{color:var(--tui-text-03)}:host:not(._checked)[data-mode=onLight]._disabled .t-loader{color:var(--tui-clear-active)}:host[data-size=m] .t-loader{width:.75rem;margin:0 .2rem;transform:scale(.75)}:host[data-size=l] .t-loader{width:1rem;margin:0 .25rem}.t-icon-wrapper{display:flex}.t-icon{opacity:.8}.t-icon_off{color:var(--tui-base-06)}:host._disabled .t-icon_off{color:var(--tui-base-05)}:host[data-mode=onDark] .t-icon_off{color:var(--tui-text-03-night)}:host[data-mode=onDark]._disabled .t-icon_off{color:var(--tui-clear-inverse-active)}:host[data-mode=onLight] .t-icon_off{color:var(--tui-text-03)}:host[data-mode=onLight]._disabled .t-icon_off{color:var(--tui-clear-active)}:host[data-size=m] .t-icon{width:1rem;height:1rem;transform:scale(.75)}:host[data-size=l] .t-icon{margin:0 .125rem;width:1.5rem;height:1.5rem}:host:hover .t-icon{opacity:1}\n"], components: [{ type: i1.TuiLoaderComponent, selector: "tui-loader", inputs: ["size", "inheritColor", "overlay", "textContent", "showLoader"] }, { type: i1.TuiSvgComponent, selector: "tui-svg", inputs: ["src"] }], directives: [{ type: i1.TuiWrapperDirective, selector: "[tuiWrapper]", inputs: ["disabled", "readOnly", "hover", "active", "focus", "invalid", "appearance"] }, { type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { type: i4.TuiCheckedDirective, selector: "input[tuiChecked], input[tuiCheckedChange]", inputs: ["tuiChecked"], outputs: ["tuiCheckedChange"] }, { type: i4.TuiFocusableDirective, selector: "[tuiFocusable]", inputs: ["tuiFocusable"] }, { type: i4.TuiFocusedDirective, selector: "[tuiFocusedChange]", outputs: ["tuiFocusedChange"] }, { type: i4.TuiFocusVisibleDirective, selector: "[tuiFocusVisibleChange]", outputs: ["tuiFocusVisibleChange"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiToggleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-toggle',
                    templateUrl: './toggle.template.html',
                    styleUrls: ['./toggle.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        tuiAsFocusableItemAccessor(TuiToggleComponent),
                        tuiAsControl(TuiToggleComponent),
                    ],
                    host: { '[class._checked]': 'value' },
                }]
        }], ctorParameters: function () { return [{ type: i5.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }, {
                    type: Inject,
                    args: [NgControl]
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: i1.TuiModeDirective, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TuiModeDirective]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_TOGGLE_OPTIONS]
                }] }]; }, propDecorators: { focusableElement: [{
                type: ViewChild,
                args: ['focusableElement']
            }], singleColor: [{
                type: Input
            }], showIcons: [{
                type: Input
            }], showLoader: [{
                type: Input
            }], size: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.data-size']
            }], hostMode: [{
                type: HostBinding,
                args: ['attr.data-mode']
            }] } });
//# sourceMappingURL=data:application/json;base64,