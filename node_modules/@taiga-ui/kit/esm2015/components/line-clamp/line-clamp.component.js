import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, HostListener, Inject, Input, NgZone, Output, Renderer2, ViewChild, } from '@angular/core';
import { tuiIsCurrentTarget, tuiPx, tuiTypedFromEvent, tuiZonefree } from '@taiga-ui/cdk';
import { TUI_HINT_COMPONENT, TuiHintDirective } from '@taiga-ui/core';
import { BehaviorSubject, of, Subject, timer } from 'rxjs';
import { distinctUntilChanged, filter, map, pairwise, startWith, switchMap, } from 'rxjs/operators';
import { TUI_LINE_CLAMP_OPTIONS } from './line-clamp.options';
import { TuiLineClampBoxComponent } from './line-clamp-box.component';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/cdk";
import * as i2 from "./line-clamp-position.directive";
import * as i3 from "@taiga-ui/core";
import * as i4 from "@tinkoff/ng-polymorpheus";
import * as i5 from "@angular/common";
export class TuiLineClampComponent {
    constructor(el, renderer, cd, zone, options) {
        this.el = el;
        this.renderer = renderer;
        this.cd = cd;
        this.zone = zone;
        this.options = options;
        this.linesLimit$ = new BehaviorSubject(1);
        this.isOverflown$ = new Subject();
        this.initialized = false;
        this.lineHeight = 24;
        this.overflownChange = this.isOverflown$.pipe(distinctUntilChanged());
        this.lineClamp$ = this.linesLimit$.pipe(startWith(1), pairwise(), switchMap(([prev, next]) => next >= prev
            ? of(next)
            : tuiTypedFromEvent(this.el.nativeElement, 'transitionend').pipe(filter(tuiIsCurrentTarget), map(() => next))));
        this.skipInitialTransition();
    }
    set linesLimit(linesLimit) {
        this.linesLimit$.next(linesLimit);
    }
    get overflown() {
        if (!this.outlet) {
            return false;
        }
        const { scrollHeight, scrollWidth } = this.outlet.nativeElement;
        const { clientHeight, clientWidth } = this.el.nativeElement;
        // 4px buffer for IE/Edge incorrectly rounding scrollHeight
        return scrollHeight - clientHeight > 4 || scrollWidth - clientWidth > 0;
    }
    get computedContent() {
        return this.options.showHint && this.overflown ? this.content : '';
    }
    updateView() {
        this.cd.detectChanges();
    }
    ngDoCheck() {
        this.update();
        this.isOverflown$.next(this.overflown);
    }
    ngAfterViewInit() {
        this.initialized = true;
    }
    skipInitialTransition() {
        timer(0)
            .pipe(tuiZonefree(this.zone))
            .subscribe(() => {
            this.renderer.addClass(this.el.nativeElement, '_initialized');
            this.cd.detectChanges();
        });
    }
    update() {
        if (this.outlet) {
            this.renderer.setStyle(this.el.nativeElement, 'height', tuiPx(this.outlet.nativeElement.scrollHeight + 4));
        }
        if (this.initialized) {
            this.renderer.setStyle(this.el.nativeElement, 'max-height', tuiPx(this.lineHeight * this.linesLimit$.value));
        }
    }
}
TuiLineClampComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiLineClampComponent, deps: [{ token: ElementRef }, { token: Renderer2 }, { token: ChangeDetectorRef }, { token: NgZone }, { token: TUI_LINE_CLAMP_OPTIONS }], target: i0.ɵɵFactoryTarget.Component });
TuiLineClampComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiLineClampComponent, selector: "tui-line-clamp", inputs: { linesLimit: "linesLimit", lineHeight: "lineHeight", content: "content" }, outputs: { overflownChange: "overflownChange" }, host: { listeners: { "transitionend": "updateView()" } }, providers: [
        {
            provide: TUI_HINT_COMPONENT,
            useValue: TuiLineClampBoxComponent,
        },
    ], viewQueries: [{ propertyName: "outlet", first: true, predicate: TuiHintDirective, descendants: true, read: ElementRef }], ngImport: i0, template: "<div\n    *tuiLet=\"lineClamp$ | async as lineClamp\"\n    tuiHintCustomPosition\n    class=\"t-wrapper\"\n    [style.-webkit-line-clamp]=\"lineClamp\"\n    [style.word-break]=\"(lineClamp || 0) > 1 ? 'break-word' : 'break-all'\"\n    [tuiHint]=\"computedContent\"\n    (mouseenter)=\"updateView()\"\n    (tuiResize)=\"updateView()\"\n>\n    <ng-container *polymorpheusOutlet=\"content as text\">\n        {{ text }}\n    </ng-container>\n</div>\n", styles: [":host{position:relative;display:block;overflow:hidden}:host._initialized{transition-property:max-height;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out}.t-wrapper{display:-webkit-box;-webkit-box-orient:vertical;overflow:hidden;overflow-wrap:anywhere}.t-wrapper ::ng-deep>*{white-space:initial}\n"], directives: [{ type: i1.TuiLetDirective, selector: "[tuiLet]", inputs: ["tuiLet"] }, { type: i2.TuiLineClampPositionDirective, selector: "[tuiHintCustomPosition]" }, { type: i3.TuiHintDirective, selector: "[tuiHint]:not(ng-container):not(ng-template)", inputs: ["tuiHint", "tuiHintContext", "tuiHintAppearance"] }, { type: i3.TuiHintDriverDirective, selector: "[tuiHint]:not(ng-container):not(ng-template)" }, { type: i3.TuiHintHoverDirective, selector: "[tuiHint]:not(ng-container):not(ng-template)", inputs: ["tuiHintShowDelay", "tuiHintHideDelay"], exportAs: ["tuiHintHover"] }, { type: i1.TuiResizeDirective, selector: "[tuiResize]", outputs: ["tuiResize"] }, { type: i4.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }], pipes: { "async": i5.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiLineClampComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-line-clamp',
                    templateUrl: './line-clamp.template.html',
                    styleUrls: ['./line-clamp.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: TUI_HINT_COMPONENT,
                            useValue: TuiLineClampBoxComponent,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: i0.Renderer2, decorators: [{
                    type: Inject,
                    args: [Renderer2]
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: i0.NgZone, decorators: [{
                    type: Inject,
                    args: [NgZone]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_LINE_CLAMP_OPTIONS]
                }] }]; }, propDecorators: { outlet: [{
                type: ViewChild,
                args: [TuiHintDirective, { read: ElementRef }]
            }], linesLimit: [{
                type: Input
            }], lineHeight: [{
                type: Input
            }], content: [{
                type: Input
            }], overflownChange: [{
                type: Output
            }], updateView: [{
                type: HostListener,
                args: ['transitionend']
            }] } });
//# sourceMappingURL=data:application/json;base64,