import { Directive, Input } from '@angular/core';
import { TUI_TREE_CONTROLLER } from '../misc/tree.tokens';
import * as i0 from "@angular/core";
export class TuiTreeItemControllerDirective {
    constructor() {
        this.map = new WeakMap();
        this.fallback = true;
    }
    isExpanded(item) {
        var _a;
        return (_a = this.map.get(item)) !== null && _a !== void 0 ? _a : this.fallback;
    }
    toggle(item) {
        this.map.set(item, !this.isExpanded(item));
    }
}
TuiTreeItemControllerDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTreeItemControllerDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
TuiTreeItemControllerDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiTreeItemControllerDirective, selector: "[tuiTreeController]:not([map])", inputs: { fallback: ["tuiTreeController", "fallback"] }, providers: [
        {
            provide: TUI_TREE_CONTROLLER,
            useExisting: TuiTreeItemControllerDirective,
        },
    ], exportAs: ["tuiTreeController"], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTreeItemControllerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiTreeController]:not([map])',
                    providers: [
                        {
                            provide: TUI_TREE_CONTROLLER,
                            useExisting: TuiTreeItemControllerDirective,
                        },
                    ],
                    exportAs: 'tuiTreeController',
                }]
        }], propDecorators: { fallback: [{
                type: Input,
                args: ['tuiTreeController']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1pdGVtLWNvbnRyb2xsZXIuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMva2l0L2NvbXBvbmVudHMvdHJlZS9kaXJlY3RpdmVzL3RyZWUtaXRlbS1jb250cm9sbGVyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLEtBQUssRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUkvQyxPQUFPLEVBQUMsbUJBQW1CLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQzs7QUFZeEQsTUFBTSxPQUFPLDhCQUE4QjtJQVYzQztRQVdxQixRQUFHLEdBQUcsSUFBSSxPQUFPLEVBQWlDLENBQUM7UUFHcEUsYUFBUSxHQUFHLElBQUksQ0FBQztLQVNuQjtJQVBHLFVBQVUsQ0FBQyxJQUEwQjs7UUFDakMsT0FBTyxNQUFBLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxtQ0FBSSxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQy9DLENBQUM7SUFFRCxNQUFNLENBQUMsSUFBMEI7UUFDN0IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQy9DLENBQUM7OzRIQVpRLDhCQUE4QjtnSEFBOUIsOEJBQThCLGtIQVI1QjtRQUNQO1lBQ0ksT0FBTyxFQUFFLG1CQUFtQjtZQUM1QixXQUFXLEVBQUUsOEJBQThCO1NBQzlDO0tBQ0o7NEZBR1EsOEJBQThCO2tCQVYxQyxTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSxnQ0FBZ0M7b0JBQzFDLFNBQVMsRUFBRTt3QkFDUDs0QkFDSSxPQUFPLEVBQUUsbUJBQW1COzRCQUM1QixXQUFXLGdDQUFnQzt5QkFDOUM7cUJBQ0o7b0JBQ0QsUUFBUSxFQUFFLG1CQUFtQjtpQkFDaEM7OEJBS0csUUFBUTtzQkFEUCxLQUFLO3VCQUFDLG1CQUFtQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGlyZWN0aXZlLCBJbnB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7VHVpVHJlZUl0ZW1Db21wb25lbnR9IGZyb20gJy4uL2NvbXBvbmVudHMvdHJlZS1pdGVtL3RyZWUtaXRlbS5jb21wb25lbnQnO1xuaW1wb3J0IHtUdWlUcmVlQ29udHJvbGxlcn0gZnJvbSAnLi4vbWlzYy90cmVlLmludGVyZmFjZXMnO1xuaW1wb3J0IHtUVUlfVFJFRV9DT05UUk9MTEVSfSBmcm9tICcuLi9taXNjL3RyZWUudG9rZW5zJztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbdHVpVHJlZUNvbnRyb2xsZXJdOm5vdChbbWFwXSknLFxuICAgIHByb3ZpZGVyczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBwcm92aWRlOiBUVUlfVFJFRV9DT05UUk9MTEVSLFxuICAgICAgICAgICAgdXNlRXhpc3Rpbmc6IFR1aVRyZWVJdGVtQ29udHJvbGxlckRpcmVjdGl2ZSxcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIGV4cG9ydEFzOiAndHVpVHJlZUNvbnRyb2xsZXInLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlUcmVlSXRlbUNvbnRyb2xsZXJEaXJlY3RpdmUgaW1wbGVtZW50cyBUdWlUcmVlQ29udHJvbGxlciB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBtYXAgPSBuZXcgV2Vha01hcDxUdWlUcmVlSXRlbUNvbXBvbmVudCwgYm9vbGVhbj4oKTtcblxuICAgIEBJbnB1dCgndHVpVHJlZUNvbnRyb2xsZXInKVxuICAgIGZhbGxiYWNrID0gdHJ1ZTtcblxuICAgIGlzRXhwYW5kZWQoaXRlbTogVHVpVHJlZUl0ZW1Db21wb25lbnQpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWFwLmdldChpdGVtKSA/PyB0aGlzLmZhbGxiYWNrO1xuICAgIH1cblxuICAgIHRvZ2dsZShpdGVtOiBUdWlUcmVlSXRlbUNvbXBvbmVudCk6IHZvaWQge1xuICAgICAgICB0aGlzLm1hcC5zZXQoaXRlbSwgIXRoaXMuaXNFeHBhbmRlZChpdGVtKSk7XG4gICAgfVxufVxuIl19