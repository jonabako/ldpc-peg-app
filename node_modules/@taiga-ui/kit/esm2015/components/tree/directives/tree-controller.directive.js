import { Directive, EventEmitter, Input, Output } from '@angular/core';
import { tuiIsPresent } from '@taiga-ui/cdk';
import { TUI_TREE_ACCESSOR, TUI_TREE_CONTROLLER } from '../misc/tree.tokens';
import * as i0 from "@angular/core";
export class TuiTreeControllerDirective {
    constructor() {
        this.fallback = true;
        this.map = new Map();
        this.toggled = new EventEmitter();
        this.items = new Map();
    }
    register(item, value) {
        this.items.set(item, value);
    }
    unregister(item) {
        this.items.delete(item);
    }
    isExpanded(item) {
        var _a;
        const value = this.items.get(item);
        return (_a = (value && this.map.get(value))) !== null && _a !== void 0 ? _a : this.fallback;
    }
    toggle(item) {
        const value = this.items.get(item);
        const expanded = this.isExpanded(item);
        if (!tuiIsPresent(value)) {
            return;
        }
        this.toggled.emit(value);
        this.map.set(value, !expanded);
    }
}
TuiTreeControllerDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTreeControllerDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
TuiTreeControllerDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiTreeControllerDirective, selector: "[tuiTreeController][map]", inputs: { fallback: ["tuiTreeController", "fallback"], map: "map" }, outputs: { toggled: "toggled" }, providers: [
        {
            provide: TUI_TREE_ACCESSOR,
            useExisting: TuiTreeControllerDirective,
        },
        {
            provide: TUI_TREE_CONTROLLER,
            useExisting: TuiTreeControllerDirective,
        },
    ], exportAs: ["tuiTreeController"], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTreeControllerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiTreeController][map]',
                    providers: [
                        {
                            provide: TUI_TREE_ACCESSOR,
                            useExisting: TuiTreeControllerDirective,
                        },
                        {
                            provide: TUI_TREE_CONTROLLER,
                            useExisting: TuiTreeControllerDirective,
                        },
                    ],
                    exportAs: 'tuiTreeController',
                }]
        }], propDecorators: { fallback: [{
                type: Input,
                args: ['tuiTreeController']
            }], map: [{
                type: Input
            }], toggled: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1jb250cm9sbGVyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2tpdC9jb21wb25lbnRzL3RyZWUvZGlyZWN0aXZlcy90cmVlLWNvbnRyb2xsZXIuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDckUsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUkzQyxPQUFPLEVBQUMsaUJBQWlCLEVBQUUsbUJBQW1CLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQzs7QUFnQjNFLE1BQU0sT0FBTywwQkFBMEI7SUFkdkM7UUFrQkksYUFBUSxHQUFHLElBQUksQ0FBQztRQUdoQixRQUFHLEdBQUcsSUFBSSxHQUFHLEVBQWMsQ0FBQztRQUduQixZQUFPLEdBQUcsSUFBSSxZQUFZLEVBQUssQ0FBQztRQUVoQyxVQUFLLEdBQUcsSUFBSSxHQUFHLEVBQTJCLENBQUM7S0EyQnZEO0lBekJHLFFBQVEsQ0FBQyxJQUEwQixFQUFFLEtBQVE7UUFDekMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFRCxVQUFVLENBQUMsSUFBMEI7UUFDakMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUVELFVBQVUsQ0FBQyxJQUEwQjs7UUFDakMsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFbkMsT0FBTyxNQUFBLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLG1DQUFJLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDM0QsQ0FBQztJQUVELE1BQU0sQ0FBQyxJQUEwQjtRQUM3QixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNuQyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXZDLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDdEIsT0FBTztTQUNWO1FBRUQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDekIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDbkMsQ0FBQzs7d0hBdENRLDBCQUEwQjs0R0FBMUIsMEJBQTBCLHlKQVp4QjtRQUNQO1lBQ0ksT0FBTyxFQUFFLGlCQUFpQjtZQUMxQixXQUFXLEVBQUUsMEJBQTBCO1NBQzFDO1FBQ0Q7WUFDSSxPQUFPLEVBQUUsbUJBQW1CO1lBQzVCLFdBQVcsRUFBRSwwQkFBMEI7U0FDMUM7S0FDSjs0RkFHUSwwQkFBMEI7a0JBZHRDLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLDBCQUEwQjtvQkFDcEMsU0FBUyxFQUFFO3dCQUNQOzRCQUNJLE9BQU8sRUFBRSxpQkFBaUI7NEJBQzFCLFdBQVcsNEJBQTRCO3lCQUMxQzt3QkFDRDs0QkFDSSxPQUFPLEVBQUUsbUJBQW1COzRCQUM1QixXQUFXLDRCQUE0Qjt5QkFDMUM7cUJBQ0o7b0JBQ0QsUUFBUSxFQUFFLG1CQUFtQjtpQkFDaEM7OEJBS0csUUFBUTtzQkFEUCxLQUFLO3VCQUFDLG1CQUFtQjtnQkFJMUIsR0FBRztzQkFERixLQUFLO2dCQUlHLE9BQU87c0JBRGYsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGlyZWN0aXZlLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHt0dWlJc1ByZXNlbnR9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuXG5pbXBvcnQge1R1aVRyZWVJdGVtQ29tcG9uZW50fSBmcm9tICcuLi9jb21wb25lbnRzL3RyZWUtaXRlbS90cmVlLWl0ZW0uY29tcG9uZW50JztcbmltcG9ydCB7VHVpVHJlZUFjY2Vzc29yLCBUdWlUcmVlQ29udHJvbGxlcn0gZnJvbSAnLi4vbWlzYy90cmVlLmludGVyZmFjZXMnO1xuaW1wb3J0IHtUVUlfVFJFRV9BQ0NFU1NPUiwgVFVJX1RSRUVfQ09OVFJPTExFUn0gZnJvbSAnLi4vbWlzYy90cmVlLnRva2Vucyc7XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW3R1aVRyZWVDb250cm9sbGVyXVttYXBdJyxcbiAgICBwcm92aWRlcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgcHJvdmlkZTogVFVJX1RSRUVfQUNDRVNTT1IsXG4gICAgICAgICAgICB1c2VFeGlzdGluZzogVHVpVHJlZUNvbnRyb2xsZXJEaXJlY3RpdmUsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIHByb3ZpZGU6IFRVSV9UUkVFX0NPTlRST0xMRVIsXG4gICAgICAgICAgICB1c2VFeGlzdGluZzogVHVpVHJlZUNvbnRyb2xsZXJEaXJlY3RpdmUsXG4gICAgICAgIH0sXG4gICAgXSxcbiAgICBleHBvcnRBczogJ3R1aVRyZWVDb250cm9sbGVyJyxcbn0pXG5leHBvcnQgY2xhc3MgVHVpVHJlZUNvbnRyb2xsZXJEaXJlY3RpdmU8VD5cbiAgICBpbXBsZW1lbnRzIFR1aVRyZWVDb250cm9sbGVyLCBUdWlUcmVlQWNjZXNzb3I8VD5cbntcbiAgICBASW5wdXQoJ3R1aVRyZWVDb250cm9sbGVyJylcbiAgICBmYWxsYmFjayA9IHRydWU7XG5cbiAgICBASW5wdXQoKVxuICAgIG1hcCA9IG5ldyBNYXA8VCwgYm9vbGVhbj4oKTtcblxuICAgIEBPdXRwdXQoKVxuICAgIHJlYWRvbmx5IHRvZ2dsZWQgPSBuZXcgRXZlbnRFbWl0dGVyPFQ+KCk7XG5cbiAgICByZWFkb25seSBpdGVtcyA9IG5ldyBNYXA8VHVpVHJlZUl0ZW1Db21wb25lbnQsIFQ+KCk7XG5cbiAgICByZWdpc3RlcihpdGVtOiBUdWlUcmVlSXRlbUNvbXBvbmVudCwgdmFsdWU6IFQpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5pdGVtcy5zZXQoaXRlbSwgdmFsdWUpO1xuICAgIH1cblxuICAgIHVucmVnaXN0ZXIoaXRlbTogVHVpVHJlZUl0ZW1Db21wb25lbnQpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5pdGVtcy5kZWxldGUoaXRlbSk7XG4gICAgfVxuXG4gICAgaXNFeHBhbmRlZChpdGVtOiBUdWlUcmVlSXRlbUNvbXBvbmVudCk6IGJvb2xlYW4ge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuaXRlbXMuZ2V0KGl0ZW0pO1xuXG4gICAgICAgIHJldHVybiAodmFsdWUgJiYgdGhpcy5tYXAuZ2V0KHZhbHVlKSkgPz8gdGhpcy5mYWxsYmFjaztcbiAgICB9XG5cbiAgICB0b2dnbGUoaXRlbTogVHVpVHJlZUl0ZW1Db21wb25lbnQpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLml0ZW1zLmdldChpdGVtKTtcbiAgICAgICAgY29uc3QgZXhwYW5kZWQgPSB0aGlzLmlzRXhwYW5kZWQoaXRlbSk7XG5cbiAgICAgICAgaWYgKCF0dWlJc1ByZXNlbnQodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnRvZ2dsZWQuZW1pdCh2YWx1ZSk7XG4gICAgICAgIHRoaXMubWFwLnNldCh2YWx1ZSwgIWV4cGFuZGVkKTtcbiAgICB9XG59XG4iXX0=