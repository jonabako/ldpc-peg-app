import { ChangeDetectionStrategy, Component, Inject, Input, Optional, ViewChild, } from '@angular/core';
import { Subject } from 'rxjs';
import { distinctUntilChanged, map, startWith } from 'rxjs/operators';
import { TuiTreeChildrenDirective } from '../../directives/tree-children.directive';
import { TUI_TREE_NODE } from '../../misc/tree.tokens';
import { TuiTreeItemComponent } from '../tree-item/tree-item.component';
import * as i0 from "@angular/core";
import * as i1 from "../tree-item/tree-item.component";
import * as i2 from "@taiga-ui/cdk";
import * as i3 from "../../directives/tree-node.directive";
import * as i4 from "@angular/common";
import * as i5 from "@tinkoff/ng-polymorpheus";
import * as i6 from "../../directives/tree-children.directive";
export class TuiTreeComponent {
    constructor(directive) {
        this.directive = directive;
        this.check$ = new Subject();
        this.children$ = this.check$.pipe(startWith(null), map(() => this.handler(this.value)), distinctUntilChanged());
        this.trackBy = (_, item) => item;
        this.content = ({ $implicit }) => String($implicit);
    }
    ngDoCheck() {
        this.checkChanges();
    }
    checkChanges() {
        var _a, _b;
        this.check$.next();
        (_a = this.item) === null || _a === void 0 ? void 0 : _a.checkChanges();
        (_b = this.child) === null || _b === void 0 ? void 0 : _b.checkChanges();
    }
    get handler() {
        var _a;
        return ((_a = this.directive) === null || _a === void 0 ? void 0 : _a.childrenHandler) || TuiTreeChildrenDirective.defaultHandler;
    }
}
TuiTreeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTreeComponent, deps: [{ token: TuiTreeChildrenDirective, optional: true }], target: i0.ɵɵFactoryTarget.Component });
TuiTreeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiTreeComponent, selector: "tui-tree[value]", inputs: { value: "value", trackBy: "trackBy", content: "content" }, host: { attributes: { "role": "tree" } }, providers: [
        {
            provide: TUI_TREE_NODE,
            useExisting: TuiTreeComponent,
        },
    ], viewQueries: [{ propertyName: "item", first: true, predicate: TuiTreeItemComponent, descendants: true }, { propertyName: "child", first: true, predicate: TuiTreeComponent, descendants: true }], ngImport: i0, template: "<tui-tree-item\n    *tuiLet=\"children$ | async as children\"\n    #view\n    [tuiTreeNode]=\"value\"\n>\n    <ng-container *ngIf=\"$any(value) !== children\">\n        <ng-container *polymorpheusOutlet=\"content as text; context: {$implicit: value, node: view}\">\n            {{ text }}\n        </ng-container>\n    </ng-container>\n    <tui-tree\n        *ngFor=\"let child of children; trackBy: trackBy\"\n        [content]=\"content\"\n        [trackBy]=\"trackBy\"\n        [value]=\"child\"\n    ></tui-tree>\n</tui-tree-item>\n", styles: [":host{position:relative;display:block}\n"], components: [{ type: i1.TuiTreeItemComponent, selector: "tui-tree-item" }, { type: TuiTreeComponent, selector: "tui-tree[value]", inputs: ["value", "trackBy", "content"] }], directives: [{ type: i2.TuiLetDirective, selector: "[tuiLet]", inputs: ["tuiLet"] }, { type: i3.TuiTreeNodeDirective, selector: "tui-tree-item[tuiTreeNode]", inputs: ["tuiTreeNode"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "async": i4.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTreeComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-tree[value]',
                    templateUrl: './tree.template.html',
                    styleUrls: ['./tree.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: TUI_TREE_NODE,
                            useExisting: TuiTreeComponent,
                        },
                    ],
                    host: {
                        role: 'tree',
                    },
                }]
        }], ctorParameters: function () { return [{ type: i6.TuiTreeChildrenDirective, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TuiTreeChildrenDirective]
                }] }]; }, propDecorators: { value: [{
                type: Input
            }], item: [{
                type: ViewChild,
                args: [TuiTreeItemComponent]
            }], child: [{
                type: ViewChild,
                args: [TuiTreeComponent]
            }], trackBy: [{
                type: Input
            }], content: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9raXQvY29tcG9uZW50cy90cmVlL2NvbXBvbmVudHMvdHJlZS90cmVlLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2tpdC9jb21wb25lbnRzL3RyZWUvY29tcG9uZW50cy90cmVlL3RyZWUudGVtcGxhdGUuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0gsdUJBQXVCLEVBQ3ZCLFNBQVMsRUFFVCxNQUFNLEVBQ04sS0FBSyxFQUNMLFFBQVEsRUFFUixTQUFTLEdBQ1osTUFBTSxlQUFlLENBQUM7QUFHdkIsT0FBTyxFQUFDLE9BQU8sRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUM3QixPQUFPLEVBQUMsb0JBQW9CLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBRXBFLE9BQU8sRUFBQyx3QkFBd0IsRUFBQyxNQUFNLDBDQUEwQyxDQUFDO0FBRWxGLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSx3QkFBd0IsQ0FBQztBQUNyRCxPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSxrQ0FBa0MsQ0FBQzs7Ozs7Ozs7QUFpQnRFLE1BQU0sT0FBTyxnQkFBZ0I7SUFrQnpCLFlBR2EsU0FBNkM7UUFBN0MsY0FBUyxHQUFULFNBQVMsQ0FBb0M7UUFwQnpDLFdBQU0sR0FBRyxJQUFJLE9BQU8sRUFBUSxDQUFDO1FBV3JDLGNBQVMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDakMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUNmLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUNuQyxvQkFBb0IsRUFBRSxDQUN6QixDQUFDO1FBU0YsWUFBTyxHQUF1QixDQUFDLENBQVMsRUFBRSxJQUFPLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQztRQUczRCxZQUFPLEdBQTJDLENBQUMsRUFBQyxTQUFTLEVBQUMsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBTmxGLENBQUM7SUFRSixTQUFTO1FBQ0wsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3hCLENBQUM7SUFFRCxZQUFZOztRQUNSLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDbkIsTUFBQSxJQUFJLENBQUMsSUFBSSwwQ0FBRSxZQUFZLEVBQUUsQ0FBQztRQUMxQixNQUFBLElBQUksQ0FBQyxLQUFLLDBDQUFFLFlBQVksRUFBRSxDQUFDO0lBQy9CLENBQUM7SUFFRCxJQUFZLE9BQU87O1FBQ2YsT0FBTyxDQUFBLE1BQUEsSUFBSSxDQUFDLFNBQVMsMENBQUUsZUFBZSxLQUFJLHdCQUF3QixDQUFDLGNBQWMsQ0FBQztJQUN0RixDQUFDOzs4R0ExQ1EsZ0JBQWdCLGtCQW9CYix3QkFBd0I7a0dBcEIzQixnQkFBZ0Isd0pBVmQ7UUFDUDtZQUNJLE9BQU8sRUFBRSxhQUFhO1lBQ3RCLFdBQVcsRUFBRSxnQkFBZ0I7U0FDaEM7S0FDSixnRUFXVSxvQkFBb0Isd0VBR3BCLGdCQUFnQixnREM1Qy9CLDBoQkFpQkEsMklEa0JhLGdCQUFnQjs0RkFBaEIsZ0JBQWdCO2tCQWY1QixTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSxpQkFBaUI7b0JBQzNCLFdBQVcsRUFBRSxzQkFBc0I7b0JBQ25DLFNBQVMsRUFBRSxDQUFDLG1CQUFtQixDQUFDO29CQUNoQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFDL0MsU0FBUyxFQUFFO3dCQUNQOzRCQUNJLE9BQU8sRUFBRSxhQUFhOzRCQUN0QixXQUFXLGtCQUFrQjt5QkFDaEM7cUJBQ0o7b0JBQ0QsSUFBSSxFQUFFO3dCQUNGLElBQUksRUFBRSxNQUFNO3FCQUNmO2lCQUNKOzswQkFvQlEsUUFBUTs7MEJBQ1IsTUFBTTsyQkFBQyx3QkFBd0I7NENBaEJwQyxLQUFLO3NCQURKLEtBQUs7Z0JBSUcsSUFBSTtzQkFEWixTQUFTO3VCQUFDLG9CQUFvQjtnQkFJdEIsS0FBSztzQkFEYixTQUFTO3VCQUFDLGdCQUFnQjtnQkFnQjNCLE9BQU87c0JBRE4sS0FBSztnQkFJTixPQUFPO3NCQUROLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICAgIENvbXBvbmVudCxcbiAgICBEb0NoZWNrLFxuICAgIEluamVjdCxcbiAgICBJbnB1dCxcbiAgICBPcHRpb25hbCxcbiAgICBUcmFja0J5RnVuY3Rpb24sXG4gICAgVmlld0NoaWxkLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7VHVpSGFuZGxlcn0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge1BvbHltb3JwaGV1c0NvbnRlbnR9IGZyb20gJ0B0aW5rb2ZmL25nLXBvbHltb3JwaGV1cyc7XG5pbXBvcnQge1N1YmplY3R9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtkaXN0aW5jdFVudGlsQ2hhbmdlZCwgbWFwLCBzdGFydFdpdGh9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHtUdWlUcmVlQ2hpbGRyZW5EaXJlY3RpdmV9IGZyb20gJy4uLy4uL2RpcmVjdGl2ZXMvdHJlZS1jaGlsZHJlbi5kaXJlY3RpdmUnO1xuaW1wb3J0IHtUdWlUcmVlQ29udGV4dH0gZnJvbSAnLi4vLi4vbWlzYy90cmVlLmludGVyZmFjZXMnO1xuaW1wb3J0IHtUVUlfVFJFRV9OT0RFfSBmcm9tICcuLi8uLi9taXNjL3RyZWUudG9rZW5zJztcbmltcG9ydCB7VHVpVHJlZUl0ZW1Db21wb25lbnR9IGZyb20gJy4uL3RyZWUtaXRlbS90cmVlLWl0ZW0uY29tcG9uZW50JztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICd0dWktdHJlZVt2YWx1ZV0nLFxuICAgIHRlbXBsYXRlVXJsOiAnLi90cmVlLnRlbXBsYXRlLmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL3RyZWUuc3R5bGUubGVzcyddLFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICAgIHByb3ZpZGVyczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBwcm92aWRlOiBUVUlfVFJFRV9OT0RFLFxuICAgICAgICAgICAgdXNlRXhpc3Rpbmc6IFR1aVRyZWVDb21wb25lbnQsXG4gICAgICAgIH0sXG4gICAgXSxcbiAgICBob3N0OiB7XG4gICAgICAgIHJvbGU6ICd0cmVlJyxcbiAgICB9LFxufSlcbmV4cG9ydCBjbGFzcyBUdWlUcmVlQ29tcG9uZW50PFQ+IGltcGxlbWVudHMgRG9DaGVjayB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBjaGVjayQgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuXG4gICAgQElucHV0KClcbiAgICB2YWx1ZSE6IFQ7XG5cbiAgICBAVmlld0NoaWxkKFR1aVRyZWVJdGVtQ29tcG9uZW50KVxuICAgIHJlYWRvbmx5IGl0ZW0/OiBUdWlUcmVlSXRlbUNvbXBvbmVudDtcblxuICAgIEBWaWV3Q2hpbGQoVHVpVHJlZUNvbXBvbmVudClcbiAgICByZWFkb25seSBjaGlsZD86IFR1aVRyZWVDb21wb25lbnQ8VD47XG5cbiAgICByZWFkb25seSBjaGlsZHJlbiQgPSB0aGlzLmNoZWNrJC5waXBlKFxuICAgICAgICBzdGFydFdpdGgobnVsbCksXG4gICAgICAgIG1hcCgoKSA9PiB0aGlzLmhhbmRsZXIodGhpcy52YWx1ZSkpLFxuICAgICAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpLFxuICAgICk7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQE9wdGlvbmFsKClcbiAgICAgICAgQEluamVjdChUdWlUcmVlQ2hpbGRyZW5EaXJlY3RpdmUpXG4gICAgICAgIHJlYWRvbmx5IGRpcmVjdGl2ZTogVHVpVHJlZUNoaWxkcmVuRGlyZWN0aXZlPFQ+IHwgbnVsbCxcbiAgICApIHt9XG5cbiAgICBASW5wdXQoKVxuICAgIHRyYWNrQnk6IFRyYWNrQnlGdW5jdGlvbjxUPiA9IChfOiBudW1iZXIsIGl0ZW06IFQpID0+IGl0ZW07XG5cbiAgICBASW5wdXQoKVxuICAgIGNvbnRlbnQ6IFBvbHltb3JwaGV1c0NvbnRlbnQ8VHVpVHJlZUNvbnRleHQ8VD4+ID0gKHskaW1wbGljaXR9KSA9PiBTdHJpbmcoJGltcGxpY2l0KTtcblxuICAgIG5nRG9DaGVjaygpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5jaGVja0NoYW5nZXMoKTtcbiAgICB9XG5cbiAgICBjaGVja0NoYW5nZXMoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuY2hlY2skLm5leHQoKTtcbiAgICAgICAgdGhpcy5pdGVtPy5jaGVja0NoYW5nZXMoKTtcbiAgICAgICAgdGhpcy5jaGlsZD8uY2hlY2tDaGFuZ2VzKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXQgaGFuZGxlcigpOiBUdWlIYW5kbGVyPFQsIHJlYWRvbmx5IFRbXT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5kaXJlY3RpdmU/LmNoaWxkcmVuSGFuZGxlciB8fCBUdWlUcmVlQ2hpbGRyZW5EaXJlY3RpdmUuZGVmYXVsdEhhbmRsZXI7XG4gICAgfVxufVxuIiwiPHR1aS10cmVlLWl0ZW1cbiAgICAqdHVpTGV0PVwiY2hpbGRyZW4kIHwgYXN5bmMgYXMgY2hpbGRyZW5cIlxuICAgICN2aWV3XG4gICAgW3R1aVRyZWVOb2RlXT1cInZhbHVlXCJcbj5cbiAgICA8bmctY29udGFpbmVyICpuZ0lmPVwiJGFueSh2YWx1ZSkgIT09IGNoaWxkcmVuXCI+XG4gICAgICAgIDxuZy1jb250YWluZXIgKnBvbHltb3JwaGV1c091dGxldD1cImNvbnRlbnQgYXMgdGV4dDsgY29udGV4dDogeyRpbXBsaWNpdDogdmFsdWUsIG5vZGU6IHZpZXd9XCI+XG4gICAgICAgICAgICB7eyB0ZXh0IH19XG4gICAgICAgIDwvbmctY29udGFpbmVyPlxuICAgIDwvbmctY29udGFpbmVyPlxuICAgIDx0dWktdHJlZVxuICAgICAgICAqbmdGb3I9XCJsZXQgY2hpbGQgb2YgY2hpbGRyZW47IHRyYWNrQnk6IHRyYWNrQnlcIlxuICAgICAgICBbY29udGVudF09XCJjb250ZW50XCJcbiAgICAgICAgW3RyYWNrQnldPVwidHJhY2tCeVwiXG4gICAgICAgIFt2YWx1ZV09XCJjaGlsZFwiXG4gICAgPjwvdHVpLXRyZWU+XG48L3R1aS10cmVlLWl0ZW0+XG4iXX0=