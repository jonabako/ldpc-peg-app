import { ChangeDetectionStrategy, Component, ContentChildren, ElementRef, forwardRef, HostBinding, Inject, } from '@angular/core';
import { EMPTY_QUERY } from '@taiga-ui/cdk';
import { Subject } from 'rxjs';
import { distinctUntilChanged, map, startWith } from 'rxjs/operators';
import { TUI_TREE_CONTENT, TUI_TREE_CONTROLLER, TUI_TREE_LEVEL, TUI_TREE_NODE, } from '../../misc/tree.tokens';
import { TUI_TREE_ITEM_PROVIDERS } from './tree-item.providers';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core";
import * as i2 from "@tinkoff/ng-polymorpheus";
import * as i3 from "@angular/common";
export class TuiTreeItemComponent {
    constructor(el, controller, level, content) {
        this.el = el;
        this.controller = controller;
        this.level = level;
        this.content = content;
        this.nested = EMPTY_QUERY;
        this.change$ = new Subject();
        this.expanded$ = this.change$.pipe(startWith(null), map(() => this.isExpanded));
        this.attached$ = this.change$.pipe(map(() => this.el.nativeElement.isConnected), distinctUntilChanged());
    }
    get isExpandable() {
        return !!this.nested.length;
    }
    get isExpanded() {
        return this.controller.isExpanded(this);
    }
    ngDoCheck() {
        this.checkChanges();
    }
    checkChanges() {
        this.change$.next();
    }
}
TuiTreeItemComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTreeItemComponent, deps: [{ token: ElementRef }, { token: forwardRef(() => TUI_TREE_CONTROLLER) }, { token: forwardRef(() => TUI_TREE_LEVEL) }, { token: forwardRef(() => TUI_TREE_CONTENT) }], target: i0.ɵɵFactoryTarget.Component });
TuiTreeItemComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiTreeItemComponent, selector: "tui-tree-item", host: { attributes: { "role": "treeitem" }, properties: { "class._expandable": "this.isExpandable" } }, providers: TUI_TREE_ITEM_PROVIDERS, queries: [{ propertyName: "nested", predicate: TUI_TREE_NODE }], ngImport: i0, template: "<ng-template #template>\n    <ng-content></ng-content>\n</ng-template>\n<ng-container *polymorpheusOutlet=\"content as text; context: {$implicit: this, template: template}\">\n    {{ text }}\n</ng-container>\n<tui-expand\n    *ngIf=\"isExpandable\"\n    role=\"group\"\n    class=\"t-children\"\n    [expanded]=\"expanded$ | async\"\n>\n    <div>\n        <ng-content select=\"tui-tree-item\"></ng-content>\n        <ng-content select=\"tui-tree\"></ng-content>\n    </div>\n</tui-expand>\n<ng-container *ngIf=\"attached$ | async\"></ng-container>\n", styles: [":host{display:block}.t-children{position:relative;margin-left:var(--tui-tree-item-indent, 1.5rem)}\n"], components: [{ type: i1.TuiExpandComponent, selector: "tui-expand", inputs: ["async", "expanded"] }], directives: [{ type: i2.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i3.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTreeItemComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-tree-item',
                    templateUrl: './tree-item.template.html',
                    styleUrls: ['./tree-item.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: TUI_TREE_ITEM_PROVIDERS,
                    host: {
                        role: 'treeitem',
                    },
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [forwardRef(() => TUI_TREE_CONTROLLER)]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [forwardRef(() => TUI_TREE_LEVEL)]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [forwardRef(() => TUI_TREE_CONTENT)]
                }] }]; }, propDecorators: { nested: [{
                type: ContentChildren,
                args: [TUI_TREE_NODE]
            }], isExpandable: [{
                type: HostBinding,
                args: ['class._expandable']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1pdGVtLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2tpdC9jb21wb25lbnRzL3RyZWUvY29tcG9uZW50cy90cmVlLWl0ZW0vdHJlZS1pdGVtLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2tpdC9jb21wb25lbnRzL3RyZWUvY29tcG9uZW50cy90cmVlLWl0ZW0vdHJlZS1pdGVtLnRlbXBsYXRlLmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNILHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsZUFBZSxFQUVmLFVBQVUsRUFDVixVQUFVLEVBQ1YsV0FBVyxFQUNYLE1BQU0sR0FFVCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUMsV0FBVyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRTFDLE9BQU8sRUFBQyxPQUFPLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDN0IsT0FBTyxFQUFDLG9CQUFvQixFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUdwRSxPQUFPLEVBQ0gsZ0JBQWdCLEVBQ2hCLG1CQUFtQixFQUNuQixjQUFjLEVBQ2QsYUFBYSxHQUNoQixNQUFNLHdCQUF3QixDQUFDO0FBQ2hDLE9BQU8sRUFBQyx1QkFBdUIsRUFBQyxNQUFNLHVCQUF1QixDQUFDOzs7OztBQVk5RCxNQUFNLE9BQU8sb0JBQW9CO0lBZ0I3QixZQUVxQixFQUEyQixFQUUzQixVQUE2QixFQUVyQyxLQUFhLEVBRWIsT0FBZ0Q7UUFOeEMsT0FBRSxHQUFGLEVBQUUsQ0FBeUI7UUFFM0IsZUFBVSxHQUFWLFVBQVUsQ0FBbUI7UUFFckMsVUFBSyxHQUFMLEtBQUssQ0FBUTtRQUViLFlBQU8sR0FBUCxPQUFPLENBQXlDO1FBdEI1QyxXQUFNLEdBQXVCLFdBQVcsQ0FBQztRQUV6QyxZQUFPLEdBQUcsSUFBSSxPQUFPLEVBQVEsQ0FBQztRQUV0QyxjQUFTLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQ2xDLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFDZixHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUM3QixDQUFDO1FBRU8sY0FBUyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUNsQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLEVBQzVDLG9CQUFvQixFQUFFLENBQ3pCLENBQUM7SUFXQyxDQUFDO0lBRUosSUFDSSxZQUFZO1FBQ1osT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFDaEMsQ0FBQztJQUVELElBQUksVUFBVTtRQUNWLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVELFNBQVM7UUFDTCxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDeEIsQ0FBQztJQUVELFlBQVk7UUFDUixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3hCLENBQUM7O2tIQTFDUSxvQkFBb0Isa0JBaUJqQixVQUFVLGFBRVYsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLG1CQUFtQixDQUFDLGFBRXJDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxjQUFjLENBQUMsYUFFaEMsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDO3NHQXZCckMsb0JBQW9CLGdKQUxsQix1QkFBdUIsaURBTWpCLGFBQW9CLDZCQ3BDekMsdWlCQWtCQTs0RkRpQmEsb0JBQW9CO2tCQVZoQyxTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSxlQUFlO29CQUN6QixXQUFXLEVBQUUsMkJBQTJCO29CQUN4QyxTQUFTLEVBQUUsQ0FBQyx3QkFBd0IsQ0FBQztvQkFDckMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07b0JBQy9DLFNBQVMsRUFBRSx1QkFBdUI7b0JBQ2xDLElBQUksRUFBRTt3QkFDRixJQUFJLEVBQUUsVUFBVTtxQkFDbkI7aUJBQ0o7OzBCQWtCUSxNQUFNOzJCQUFDLFVBQVU7OzBCQUVqQixNQUFNOzJCQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQzs7MEJBRTVDLE1BQU07MkJBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLGNBQWMsQ0FBQzs7MEJBRXZDLE1BQU07MkJBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDOzRDQXJCN0IsTUFBTTtzQkFEdEIsZUFBZTt1QkFBQyxhQUFvQjtnQkEyQmpDLFlBQVk7c0JBRGYsV0FBVzt1QkFBQyxtQkFBbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICAgIENvbXBvbmVudCxcbiAgICBDb250ZW50Q2hpbGRyZW4sXG4gICAgRG9DaGVjayxcbiAgICBFbGVtZW50UmVmLFxuICAgIGZvcndhcmRSZWYsXG4gICAgSG9zdEJpbmRpbmcsXG4gICAgSW5qZWN0LFxuICAgIFF1ZXJ5TGlzdCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0VNUFRZX1FVRVJZfSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7UG9seW1vcnBoZXVzQ29udGVudH0gZnJvbSAnQHRpbmtvZmYvbmctcG9seW1vcnBoZXVzJztcbmltcG9ydCB7U3ViamVjdH0gZnJvbSAncnhqcyc7XG5pbXBvcnQge2Rpc3RpbmN0VW50aWxDaGFuZ2VkLCBtYXAsIHN0YXJ0V2l0aH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgdHlwZSB7VHVpVHJlZUNvbnRyb2xsZXIsIFR1aVRyZWVJdGVtQ29udGV4dH0gZnJvbSAnLi4vLi4vbWlzYy90cmVlLmludGVyZmFjZXMnO1xuaW1wb3J0IHtcbiAgICBUVUlfVFJFRV9DT05URU5ULFxuICAgIFRVSV9UUkVFX0NPTlRST0xMRVIsXG4gICAgVFVJX1RSRUVfTEVWRUwsXG4gICAgVFVJX1RSRUVfTk9ERSxcbn0gZnJvbSAnLi4vLi4vbWlzYy90cmVlLnRva2Vucyc7XG5pbXBvcnQge1RVSV9UUkVFX0lURU1fUFJPVklERVJTfSBmcm9tICcuL3RyZWUtaXRlbS5wcm92aWRlcnMnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ3R1aS10cmVlLWl0ZW0nLFxuICAgIHRlbXBsYXRlVXJsOiAnLi90cmVlLWl0ZW0udGVtcGxhdGUuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vdHJlZS1pdGVtLnN0eWxlLmxlc3MnXSxcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgICBwcm92aWRlcnM6IFRVSV9UUkVFX0lURU1fUFJPVklERVJTLFxuICAgIGhvc3Q6IHtcbiAgICAgICAgcm9sZTogJ3RyZWVpdGVtJyxcbiAgICB9LFxufSlcbmV4cG9ydCBjbGFzcyBUdWlUcmVlSXRlbUNvbXBvbmVudCBpbXBsZW1lbnRzIERvQ2hlY2sge1xuICAgIEBDb250ZW50Q2hpbGRyZW4oVFVJX1RSRUVfTk9ERSBhcyBhbnkpXG4gICAgcHJpdmF0ZSByZWFkb25seSBuZXN0ZWQ6IFF1ZXJ5TGlzdDx1bmtub3duPiA9IEVNUFRZX1FVRVJZO1xuXG4gICAgcHJpdmF0ZSByZWFkb25seSBjaGFuZ2UkID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcblxuICAgIHJlYWRvbmx5IGV4cGFuZGVkJCA9IHRoaXMuY2hhbmdlJC5waXBlKFxuICAgICAgICBzdGFydFdpdGgobnVsbCksXG4gICAgICAgIG1hcCgoKSA9PiB0aGlzLmlzRXhwYW5kZWQpLFxuICAgICk7XG5cbiAgICByZWFkb25seSBhdHRhY2hlZCQgPSB0aGlzLmNoYW5nZSQucGlwZShcbiAgICAgICAgbWFwKCgpID0+IHRoaXMuZWwubmF0aXZlRWxlbWVudC5pc0Nvbm5lY3RlZCksXG4gICAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKCksXG4gICAgKTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KEVsZW1lbnRSZWYpXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgZWw6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+LFxuICAgICAgICBASW5qZWN0KGZvcndhcmRSZWYoKCkgPT4gVFVJX1RSRUVfQ09OVFJPTExFUikpXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgY29udHJvbGxlcjogVHVpVHJlZUNvbnRyb2xsZXIsXG4gICAgICAgIEBJbmplY3QoZm9yd2FyZFJlZigoKSA9PiBUVUlfVFJFRV9MRVZFTCkpXG4gICAgICAgIHJlYWRvbmx5IGxldmVsOiBudW1iZXIsXG4gICAgICAgIEBJbmplY3QoZm9yd2FyZFJlZigoKSA9PiBUVUlfVFJFRV9DT05URU5UKSlcbiAgICAgICAgcmVhZG9ubHkgY29udGVudDogUG9seW1vcnBoZXVzQ29udGVudDxUdWlUcmVlSXRlbUNvbnRleHQ+LFxuICAgICkge31cblxuICAgIEBIb3N0QmluZGluZygnY2xhc3MuX2V4cGFuZGFibGUnKVxuICAgIGdldCBpc0V4cGFuZGFibGUoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiAhIXRoaXMubmVzdGVkLmxlbmd0aDtcbiAgICB9XG5cbiAgICBnZXQgaXNFeHBhbmRlZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udHJvbGxlci5pc0V4cGFuZGVkKHRoaXMpO1xuICAgIH1cblxuICAgIG5nRG9DaGVjaygpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5jaGVja0NoYW5nZXMoKTtcbiAgICB9XG5cbiAgICBjaGVja0NoYW5nZXMoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuY2hhbmdlJC5uZXh0KCk7XG4gICAgfVxufVxuIiwiPG5nLXRlbXBsYXRlICN0ZW1wbGF0ZT5cbiAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG48L25nLXRlbXBsYXRlPlxuPG5nLWNvbnRhaW5lciAqcG9seW1vcnBoZXVzT3V0bGV0PVwiY29udGVudCBhcyB0ZXh0OyBjb250ZXh0OiB7JGltcGxpY2l0OiB0aGlzLCB0ZW1wbGF0ZTogdGVtcGxhdGV9XCI+XG4gICAge3sgdGV4dCB9fVxuPC9uZy1jb250YWluZXI+XG48dHVpLWV4cGFuZFxuICAgICpuZ0lmPVwiaXNFeHBhbmRhYmxlXCJcbiAgICByb2xlPVwiZ3JvdXBcIlxuICAgIGNsYXNzPVwidC1jaGlsZHJlblwiXG4gICAgW2V4cGFuZGVkXT1cImV4cGFuZGVkJCB8IGFzeW5jXCJcbj5cbiAgICA8ZGl2PlxuICAgICAgICA8bmctY29udGVudCBzZWxlY3Q9XCJ0dWktdHJlZS1pdGVtXCI+PC9uZy1jb250ZW50PlxuICAgICAgICA8bmctY29udGVudCBzZWxlY3Q9XCJ0dWktdHJlZVwiPjwvbmctY29udGVudD5cbiAgICA8L2Rpdj5cbjwvdHVpLWV4cGFuZD5cbjxuZy1jb250YWluZXIgKm5nSWY9XCJhdHRhY2hlZCQgfCBhc3luY1wiPjwvbmctY29udGFpbmVyPlxuIl19