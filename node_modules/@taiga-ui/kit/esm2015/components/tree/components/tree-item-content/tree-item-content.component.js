import { ChangeDetectionStrategy, Component, forwardRef, HostBinding, Inject, } from '@angular/core';
import { TUI_COMMON_ICONS } from '@taiga-ui/core';
import { POLYMORPHEUS_CONTEXT } from '@tinkoff/ng-polymorpheus';
import { TUI_DEFAULT_TREE_CONTROLLER } from '../../misc/tree.constants';
import { TUI_TREE_CONTROLLER } from '../../misc/tree.tokens';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core";
import * as i2 from "@angular/common";
export class TuiTreeItemContentComponent {
    constructor(icons, context, controller) {
        this.icons = icons;
        this.context = context;
        this.controller = controller;
    }
    get isExpanded() {
        return this.context.$implicit.isExpanded;
    }
    get isExpandable() {
        return (this.context.$implicit.isExpandable &&
            this.controller !== TUI_DEFAULT_TREE_CONTROLLER);
    }
    onClick() {
        this.controller.toggle(this.context.$implicit);
    }
}
TuiTreeItemContentComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTreeItemContentComponent, deps: [{ token: TUI_COMMON_ICONS }, { token: POLYMORPHEUS_CONTEXT }, { token: forwardRef(() => TUI_TREE_CONTROLLER) }], target: i0.ɵɵFactoryTarget.Component });
TuiTreeItemContentComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiTreeItemContentComponent, selector: "tui-tree-item-content", host: { properties: { "class._expandable": "this.isExpandable" } }, ngImport: i0, template: "<button\n    *ngIf=\"isExpandable\"\n    appearance=\"flat\"\n    shape=\"rounded\"\n    size=\"xs\"\n    tuiIconButton\n    type=\"button\"\n    class=\"t-button\"\n    [class.t-button_expanded]=\"isExpanded\"\n    [icon]=\"icons.more\"\n    (click)=\"onClick()\"\n></button>\n<ng-container [ngTemplateOutlet]=\"context.template\"></ng-container>\n", styles: [":host{display:flex;align-items:center}:host :host-context(tui-tree-item._expandable):not(._expandable){padding-left:2rem}.t-button{transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;margin-right:.5rem}.t-button_expanded{transform:rotate(90deg)}\n"], components: [{ type: i1.TuiButtonComponent, selector: "button[tuiButton], button[tuiIconButton], a[tuiButton], a[tuiIconButton]", inputs: ["appearance", "disabled", "icon", "iconRight", "shape", "showLoader", "size"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTreeItemContentComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-tree-item-content',
                    templateUrl: './tree-item-content.template.html',
                    styleUrls: ['./tree-item-content.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_COMMON_ICONS]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [POLYMORPHEUS_CONTEXT]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [forwardRef(() => TUI_TREE_CONTROLLER)]
                }] }]; }, propDecorators: { isExpandable: [{
                type: HostBinding,
                args: ['class._expandable']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1pdGVtLWNvbnRlbnQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMva2l0L2NvbXBvbmVudHMvdHJlZS9jb21wb25lbnRzL3RyZWUtaXRlbS1jb250ZW50L3RyZWUtaXRlbS1jb250ZW50LmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2tpdC9jb21wb25lbnRzL3RyZWUvY29tcG9uZW50cy90cmVlLWl0ZW0tY29udGVudC90cmVlLWl0ZW0tY29udGVudC50ZW1wbGF0ZS5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDSCx1QkFBdUIsRUFDdkIsU0FBUyxFQUNULFVBQVUsRUFDVixXQUFXLEVBQ1gsTUFBTSxHQUNULE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBQyxnQkFBZ0IsRUFBaUIsTUFBTSxnQkFBZ0IsQ0FBQztBQUNoRSxPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUU5RCxPQUFPLEVBQUMsMkJBQTJCLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQztBQUV0RSxPQUFPLEVBQUMsbUJBQW1CLEVBQUMsTUFBTSx3QkFBd0IsQ0FBQzs7OztBQVEzRCxNQUFNLE9BQU8sMkJBQTJCO0lBQ3BDLFlBQ3VDLEtBQXFCLEVBQ2pCLE9BQTJCLEVBRWpELFVBQTZCO1FBSFgsVUFBSyxHQUFMLEtBQUssQ0FBZ0I7UUFDakIsWUFBTyxHQUFQLE9BQU8sQ0FBb0I7UUFFakQsZUFBVSxHQUFWLFVBQVUsQ0FBbUI7SUFDL0MsQ0FBQztJQUVKLElBQUksVUFBVTtRQUNWLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDO0lBQzdDLENBQUM7SUFFRCxJQUNJLFlBQVk7UUFDWixPQUFPLENBQ0gsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsWUFBWTtZQUNuQyxJQUFJLENBQUMsVUFBVSxLQUFLLDJCQUEyQixDQUNsRCxDQUFDO0lBQ04sQ0FBQztJQUVELE9BQU87UUFDSCxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ25ELENBQUM7O3lIQXRCUSwyQkFBMkIsa0JBRXhCLGdCQUFnQixhQUNoQixvQkFBb0IsYUFDcEIsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLG1CQUFtQixDQUFDOzZHQUp4QywyQkFBMkIsaUlDcEJ4QywrVkFhQTs0RkRPYSwyQkFBMkI7a0JBTnZDLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLHVCQUF1QjtvQkFDakMsV0FBVyxFQUFFLG1DQUFtQztvQkFDaEQsU0FBUyxFQUFFLENBQUMsZ0NBQWdDLENBQUM7b0JBQzdDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2lCQUNsRDs7MEJBR1EsTUFBTTsyQkFBQyxnQkFBZ0I7OzBCQUN2QixNQUFNOzJCQUFDLG9CQUFvQjs7MEJBQzNCLE1BQU07MkJBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLG1CQUFtQixDQUFDOzRDQVM3QyxZQUFZO3NCQURmLFdBQVc7dUJBQUMsbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgICBDb21wb25lbnQsXG4gICAgZm9yd2FyZFJlZixcbiAgICBIb3N0QmluZGluZyxcbiAgICBJbmplY3QsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtUVUlfQ09NTU9OX0lDT05TLCBUdWlDb21tb25JY29uc30gZnJvbSAnQHRhaWdhLXVpL2NvcmUnO1xuaW1wb3J0IHtQT0xZTU9SUEhFVVNfQ09OVEVYVH0gZnJvbSAnQHRpbmtvZmYvbmctcG9seW1vcnBoZXVzJztcblxuaW1wb3J0IHtUVUlfREVGQVVMVF9UUkVFX0NPTlRST0xMRVJ9IGZyb20gJy4uLy4uL21pc2MvdHJlZS5jb25zdGFudHMnO1xuaW1wb3J0IHR5cGUge1R1aVRyZWVDb250cm9sbGVyLCBUdWlUcmVlSXRlbUNvbnRleHR9IGZyb20gJy4uLy4uL21pc2MvdHJlZS5pbnRlcmZhY2VzJztcbmltcG9ydCB7VFVJX1RSRUVfQ09OVFJPTExFUn0gZnJvbSAnLi4vLi4vbWlzYy90cmVlLnRva2Vucyc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAndHVpLXRyZWUtaXRlbS1jb250ZW50JyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vdHJlZS1pdGVtLWNvbnRlbnQudGVtcGxhdGUuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vdHJlZS1pdGVtLWNvbnRlbnQuc3R5bGUubGVzcyddLFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlUcmVlSXRlbUNvbnRlbnRDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KFRVSV9DT01NT05fSUNPTlMpIHJlYWRvbmx5IGljb25zOiBUdWlDb21tb25JY29ucyxcbiAgICAgICAgQEluamVjdChQT0xZTU9SUEhFVVNfQ09OVEVYVCkgcmVhZG9ubHkgY29udGV4dDogVHVpVHJlZUl0ZW1Db250ZXh0LFxuICAgICAgICBASW5qZWN0KGZvcndhcmRSZWYoKCkgPT4gVFVJX1RSRUVfQ09OVFJPTExFUikpXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgY29udHJvbGxlcjogVHVpVHJlZUNvbnRyb2xsZXIsXG4gICAgKSB7fVxuXG4gICAgZ2V0IGlzRXhwYW5kZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRleHQuJGltcGxpY2l0LmlzRXhwYW5kZWQ7XG4gICAgfVxuXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5fZXhwYW5kYWJsZScpXG4gICAgZ2V0IGlzRXhwYW5kYWJsZSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC4kaW1wbGljaXQuaXNFeHBhbmRhYmxlICYmXG4gICAgICAgICAgICB0aGlzLmNvbnRyb2xsZXIgIT09IFRVSV9ERUZBVUxUX1RSRUVfQ09OVFJPTExFUlxuICAgICAgICApO1xuICAgIH1cblxuICAgIG9uQ2xpY2soKTogdm9pZCB7XG4gICAgICAgIHRoaXMuY29udHJvbGxlci50b2dnbGUodGhpcy5jb250ZXh0LiRpbXBsaWNpdCk7XG4gICAgfVxufVxuIiwiPGJ1dHRvblxuICAgICpuZ0lmPVwiaXNFeHBhbmRhYmxlXCJcbiAgICBhcHBlYXJhbmNlPVwiZmxhdFwiXG4gICAgc2hhcGU9XCJyb3VuZGVkXCJcbiAgICBzaXplPVwieHNcIlxuICAgIHR1aUljb25CdXR0b25cbiAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICBjbGFzcz1cInQtYnV0dG9uXCJcbiAgICBbY2xhc3MudC1idXR0b25fZXhwYW5kZWRdPVwiaXNFeHBhbmRlZFwiXG4gICAgW2ljb25dPVwiaWNvbnMubW9yZVwiXG4gICAgKGNsaWNrKT1cIm9uQ2xpY2soKVwiXG4+PC9idXR0b24+XG48bmctY29udGFpbmVyIFtuZ1RlbXBsYXRlT3V0bGV0XT1cImNvbnRleHQudGVtcGxhdGVcIj48L25nLWNvbnRhaW5lcj5cbiJdfQ==