import { ChangeDetectionStrategy, Component, ElementRef, HostListener, Inject, Input, NgZone, } from '@angular/core';
import { ANIMATION_FRAME } from '@ng-web-apis/common';
import { tuiZonefree } from '@taiga-ui/cdk';
import { MODE_PROVIDER, TUI_MODE } from '@taiga-ui/core';
import { asCallable } from '@tinkoff/ng-event-plugins';
import { of, ReplaySubject } from 'rxjs';
import { debounceTime, map, share, switchMap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "rxjs";
export class TuiUnderlineComponent {
    constructor({ nativeElement }, zone, animationFrame$, mode$) {
        this.zone = zone;
        this.animationFrame$ = animationFrame$;
        this.mode$ = mode$;
        this.el$ = new ReplaySubject(1);
        this.refresh$ = this.el$.pipe(switchMap(element => element
            ? this.animationFrame$.pipe(map(() => element), tuiZonefree(this.zone))
            : of(null)), share());
        this.transition$ = asCallable(this.el$.pipe(map(element => element && 'all'), debounceTime(50)));
        this.transform$ = asCallable(this.refresh$.pipe(map(element => element ? `translate3d(${element.offsetLeft}px, 0, 0)` : null)));
        this.width$ = asCallable(this.refresh$.pipe(map(element => (element === null || element === void 0 ? void 0 : element.clientWidth) || 0)));
        nativeElement['$.style.transitionProperty'] = this.transition$;
        nativeElement['$.style.transform'] = this.transform$;
        nativeElement['$.style.width.px'] = this.width$;
    }
    set element(element) {
        this.el$.next(element);
    }
}
TuiUnderlineComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiUnderlineComponent, deps: [{ token: ElementRef }, { token: NgZone }, { token: ANIMATION_FRAME }, { token: TUI_MODE }], target: i0.ɵɵFactoryTarget.Component });
TuiUnderlineComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiUnderlineComponent, selector: "tui-underline", inputs: { element: "element" }, host: { listeners: { "$.data-mode.attr": "mode$", "$.style.transitionProperty": "transition$()", "$.style.transform": "transform$()", "$.style.width.px": "width$()" } }, providers: [MODE_PROVIDER], ngImport: i0, template: '', isInline: true, styles: [":host{transition-property:none;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;position:absolute;left:0;height:100%;color:var(--tui-primary);transform:scale(0);box-shadow:inset 0 -.1875rem 0 -.0625rem;pointer-events:none}:host[data-mode=onDark]{color:var(--tui-text-01-night)}:host[data-mode=onLight]{color:var(--tui-text-02)}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiUnderlineComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-underline',
                    template: '',
                    styleUrls: ['./underline.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [MODE_PROVIDER],
                    host: {
                        '($.data-mode.attr)': 'mode$',
                    },
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: i0.NgZone, decorators: [{
                    type: Inject,
                    args: [NgZone]
                }] }, { type: i1.Observable, decorators: [{
                    type: Inject,
                    args: [ANIMATION_FRAME]
                }] }, { type: i1.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_MODE]
                }] }]; }, propDecorators: { element: [{
                type: Input
            }], transition$: [{
                type: HostListener,
                args: ['$.style.transitionProperty']
            }], transform$: [{
                type: HostListener,
                args: ['$.style.transform']
            }], width$: [{
                type: HostListener,
                args: ['$.style.width.px']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5kZXJsaW5lLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2tpdC9jb21wb25lbnRzL3RhYnMvdW5kZXJsaW5lL3VuZGVybGluZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNILHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsVUFBVSxFQUNWLFlBQVksRUFDWixNQUFNLEVBQ04sS0FBSyxFQUNMLE1BQU0sR0FDVCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0scUJBQXFCLENBQUM7QUFDcEQsT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUMxQyxPQUFPLEVBQUMsYUFBYSxFQUFFLFFBQVEsRUFBZ0IsTUFBTSxnQkFBZ0IsQ0FBQztBQUN0RSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFDckQsT0FBTyxFQUFhLEVBQUUsRUFBRSxhQUFhLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDbkQsT0FBTyxFQUFDLFlBQVksRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDOzs7QUFZbkUsTUFBTSxPQUFPLHFCQUFxQjtJQTBDOUIsWUFDd0IsRUFBQyxhQUFhLEVBQWEsRUFDZCxJQUFZLEVBQ0gsZUFBbUMsRUFDbEQsS0FBdUM7UUFGakMsU0FBSSxHQUFKLElBQUksQ0FBUTtRQUNILG9CQUFlLEdBQWYsZUFBZSxDQUFvQjtRQUNsRCxVQUFLLEdBQUwsS0FBSyxDQUFrQztRQTdDckQsUUFBRyxHQUFHLElBQUksYUFBYSxDQUFxQixDQUFDLENBQUMsQ0FBQztRQUUvQyxhQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQ3JDLFNBQVMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUNoQixPQUFPO1lBQ0gsQ0FBQyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUNyQixHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLEVBQ2xCLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQ3pCO1lBQ0gsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FDakIsRUFDRCxLQUFLLEVBQUUsQ0FDVixDQUFDO1FBUU8sZ0JBQVcsR0FBRyxVQUFVLENBQzdCLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUNULEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLE9BQU8sSUFBSSxLQUFLLENBQUMsRUFDaEMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUNuQixDQUNKLENBQUM7UUFHTyxlQUFVLEdBQUcsVUFBVSxDQUM1QixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FDZCxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FDVixPQUFPLENBQUMsQ0FBQyxDQUFDLGVBQWUsT0FBTyxDQUFDLFVBQVUsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQ2hFLENBQ0osQ0FDSixDQUFDO1FBR08sV0FBTSxHQUFHLFVBQVUsQ0FDeEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQSxPQUFPLGFBQVAsT0FBTyx1QkFBUCxPQUFPLENBQUUsV0FBVyxLQUFJLENBQUMsQ0FBQyxDQUFDLENBQ2hFLENBQUM7UUFRRSxhQUFhLENBQUMsNEJBQTRCLENBQUMsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO1FBQy9ELGFBQWEsQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7UUFDckQsYUFBYSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNwRCxDQUFDO0lBcENELElBQ0ksT0FBTyxDQUFDLE9BQTJCO1FBQ25DLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzNCLENBQUM7O21IQWxCUSxxQkFBcUIsa0JBMkNsQixVQUFVLGFBQ1YsTUFBTSxhQUNOLGVBQWUsYUFDZixRQUFRO3VHQTlDWCxxQkFBcUIsa1BBTG5CLENBQUMsYUFBYSxDQUFDLDBCQUhoQixFQUFFOzRGQVFILHFCQUFxQjtrQkFWakMsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsZUFBZTtvQkFDekIsUUFBUSxFQUFFLEVBQUU7b0JBQ1osU0FBUyxFQUFFLENBQUMsd0JBQXdCLENBQUM7b0JBQ3JDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO29CQUMvQyxTQUFTLEVBQUUsQ0FBQyxhQUFhLENBQUM7b0JBQzFCLElBQUksRUFBRTt3QkFDRixvQkFBb0IsRUFBRSxPQUFPO3FCQUNoQztpQkFDSjs7MEJBNENRLE1BQU07MkJBQUMsVUFBVTs7MEJBQ2pCLE1BQU07MkJBQUMsTUFBTTs7MEJBQ2IsTUFBTTsyQkFBQyxlQUFlOzswQkFDdEIsTUFBTTsyQkFBQyxRQUFROzRDQTlCaEIsT0FBTztzQkFEVixLQUFLO2dCQU1HLFdBQVc7c0JBRG5CLFlBQVk7dUJBQUMsNEJBQTRCO2dCQVNqQyxVQUFVO3NCQURsQixZQUFZO3VCQUFDLG1CQUFtQjtnQkFVeEIsTUFBTTtzQkFEZCxZQUFZO3VCQUFDLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gICAgQ29tcG9uZW50LFxuICAgIEVsZW1lbnRSZWYsXG4gICAgSG9zdExpc3RlbmVyLFxuICAgIEluamVjdCxcbiAgICBJbnB1dCxcbiAgICBOZ1pvbmUsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtBTklNQVRJT05fRlJBTUV9IGZyb20gJ0BuZy13ZWItYXBpcy9jb21tb24nO1xuaW1wb3J0IHt0dWlab25lZnJlZX0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge01PREVfUFJPVklERVIsIFRVSV9NT0RFLCBUdWlCcmlnaHRuZXNzfSBmcm9tICdAdGFpZ2EtdWkvY29yZSc7XG5pbXBvcnQge2FzQ2FsbGFibGV9IGZyb20gJ0B0aW5rb2ZmL25nLWV2ZW50LXBsdWdpbnMnO1xuaW1wb3J0IHtPYnNlcnZhYmxlLCBvZiwgUmVwbGF5U3ViamVjdH0gZnJvbSAncnhqcyc7XG5pbXBvcnQge2RlYm91bmNlVGltZSwgbWFwLCBzaGFyZSwgc3dpdGNoTWFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAndHVpLXVuZGVybGluZScsXG4gICAgdGVtcGxhdGU6ICcnLFxuICAgIHN0eWxlVXJsczogWycuL3VuZGVybGluZS5zdHlsZS5sZXNzJ10sXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gICAgcHJvdmlkZXJzOiBbTU9ERV9QUk9WSURFUl0sXG4gICAgaG9zdDoge1xuICAgICAgICAnKCQuZGF0YS1tb2RlLmF0dHIpJzogJ21vZGUkJyxcbiAgICB9LFxufSlcbmV4cG9ydCBjbGFzcyBUdWlVbmRlcmxpbmVDb21wb25lbnQge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgZWwkID0gbmV3IFJlcGxheVN1YmplY3Q8SFRNTEVsZW1lbnQgfCBudWxsPigxKTtcblxuICAgIHByaXZhdGUgcmVhZG9ubHkgcmVmcmVzaCQgPSB0aGlzLmVsJC5waXBlKFxuICAgICAgICBzd2l0Y2hNYXAoZWxlbWVudCA9PlxuICAgICAgICAgICAgZWxlbWVudFxuICAgICAgICAgICAgICAgID8gdGhpcy5hbmltYXRpb25GcmFtZSQucGlwZShcbiAgICAgICAgICAgICAgICAgICAgICBtYXAoKCkgPT4gZWxlbWVudCksXG4gICAgICAgICAgICAgICAgICAgICAgdHVpWm9uZWZyZWUodGhpcy56b25lKSxcbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICA6IG9mKG51bGwpLFxuICAgICAgICApLFxuICAgICAgICBzaGFyZSgpLFxuICAgICk7XG5cbiAgICBASW5wdXQoKVxuICAgIHNldCBlbGVtZW50KGVsZW1lbnQ6IEhUTUxFbGVtZW50IHwgbnVsbCkge1xuICAgICAgICB0aGlzLmVsJC5uZXh0KGVsZW1lbnQpO1xuICAgIH1cblxuICAgIEBIb3N0TGlzdGVuZXIoJyQuc3R5bGUudHJhbnNpdGlvblByb3BlcnR5JylcbiAgICByZWFkb25seSB0cmFuc2l0aW9uJCA9IGFzQ2FsbGFibGUoXG4gICAgICAgIHRoaXMuZWwkLnBpcGUoXG4gICAgICAgICAgICBtYXAoZWxlbWVudCA9PiBlbGVtZW50ICYmICdhbGwnKSxcbiAgICAgICAgICAgIGRlYm91bmNlVGltZSg1MCksXG4gICAgICAgICksXG4gICAgKTtcblxuICAgIEBIb3N0TGlzdGVuZXIoJyQuc3R5bGUudHJhbnNmb3JtJylcbiAgICByZWFkb25seSB0cmFuc2Zvcm0kID0gYXNDYWxsYWJsZShcbiAgICAgICAgdGhpcy5yZWZyZXNoJC5waXBlKFxuICAgICAgICAgICAgbWFwKGVsZW1lbnQgPT5cbiAgICAgICAgICAgICAgICBlbGVtZW50ID8gYHRyYW5zbGF0ZTNkKCR7ZWxlbWVudC5vZmZzZXRMZWZ0fXB4LCAwLCAwKWAgOiBudWxsLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgKSxcbiAgICApO1xuXG4gICAgQEhvc3RMaXN0ZW5lcignJC5zdHlsZS53aWR0aC5weCcpXG4gICAgcmVhZG9ubHkgd2lkdGgkID0gYXNDYWxsYWJsZShcbiAgICAgICAgdGhpcy5yZWZyZXNoJC5waXBlKG1hcChlbGVtZW50ID0+IGVsZW1lbnQ/LmNsaWVudFdpZHRoIHx8IDApKSxcbiAgICApO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoRWxlbWVudFJlZikge25hdGl2ZUVsZW1lbnR9OiBFbGVtZW50UmVmLFxuICAgICAgICBASW5qZWN0KE5nWm9uZSkgcHJpdmF0ZSByZWFkb25seSB6b25lOiBOZ1pvbmUsXG4gICAgICAgIEBJbmplY3QoQU5JTUFUSU9OX0ZSQU1FKSBwcml2YXRlIHJlYWRvbmx5IGFuaW1hdGlvbkZyYW1lJDogT2JzZXJ2YWJsZTxudW1iZXI+LFxuICAgICAgICBASW5qZWN0KFRVSV9NT0RFKSByZWFkb25seSBtb2RlJDogT2JzZXJ2YWJsZTxUdWlCcmlnaHRuZXNzIHwgbnVsbD4sXG4gICAgKSB7XG4gICAgICAgIG5hdGl2ZUVsZW1lbnRbJyQuc3R5bGUudHJhbnNpdGlvblByb3BlcnR5J10gPSB0aGlzLnRyYW5zaXRpb24kO1xuICAgICAgICBuYXRpdmVFbGVtZW50WyckLnN0eWxlLnRyYW5zZm9ybSddID0gdGhpcy50cmFuc2Zvcm0kO1xuICAgICAgICBuYXRpdmVFbGVtZW50WyckLnN0eWxlLndpZHRoLnB4J10gPSB0aGlzLndpZHRoJDtcbiAgICB9XG59XG4iXX0=