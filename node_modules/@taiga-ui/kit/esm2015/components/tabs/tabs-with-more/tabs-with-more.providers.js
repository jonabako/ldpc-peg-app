import { DOCUMENT } from '@angular/common';
import { ChangeDetectorRef, ElementRef, InjectionToken } from '@angular/core';
import { MUTATION_OBSERVER_INIT, MutationObserverService, } from '@ng-web-apis/mutation-observer';
import { TuiDestroyService, TuiResizeService } from '@taiga-ui/cdk';
import { tuiDropdownOptionsProvider } from '@taiga-ui/core';
import { merge } from 'rxjs';
import { debounceTime, filter, startWith, takeUntil, tap } from 'rxjs/operators';
export const TUI_TABS_REFRESH = new InjectionToken('[TUI_TABS_REFRESH]');
export const TUI_TABS_PROVIDERS = [
    TuiResizeService,
    TuiDestroyService,
    MutationObserverService,
    tuiDropdownOptionsProvider({ align: 'right' }),
    {
        provide: MUTATION_OBSERVER_INIT,
        useValue: {
            childList: true,
            subtree: true,
            characterData: true,
        },
    },
    {
        provide: TUI_TABS_REFRESH,
        deps: [
            TuiResizeService,
            MutationObserverService,
            TuiDestroyService,
            DOCUMENT,
            ElementRef,
            ChangeDetectorRef,
        ],
        useFactory: (resize$, mutations$, destroy$, { body }, { nativeElement }, cdr) => merge(resize$, mutations$.pipe(tap(() => cdr.detectChanges()))).pipe(
        // Ignoring cases when host is detached from DOM
        filter(() => body.contains(nativeElement)), debounceTime(0), startWith(null), takeUntil(destroy$)),
    },
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFicy13aXRoLW1vcmUucHJvdmlkZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMva2l0L2NvbXBvbmVudHMvdGFicy90YWJzLXdpdGgtbW9yZS90YWJzLXdpdGgtbW9yZS5wcm92aWRlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQ3pDLE9BQU8sRUFBQyxpQkFBaUIsRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFXLE1BQU0sZUFBZSxDQUFDO0FBQ3RGLE9BQU8sRUFDSCxzQkFBc0IsRUFDdEIsdUJBQXVCLEdBQzFCLE1BQU0sZ0NBQWdDLENBQUM7QUFDeEMsT0FBTyxFQUFDLGlCQUFpQixFQUFFLGdCQUFnQixFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ2xFLE9BQU8sRUFBQywwQkFBMEIsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQzFELE9BQU8sRUFBQyxLQUFLLEVBQWEsTUFBTSxNQUFNLENBQUM7QUFDdkMsT0FBTyxFQUFDLFlBQVksRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUUvRSxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLGNBQWMsQ0FDOUMsb0JBQW9CLENBQ3ZCLENBQUM7QUFDRixNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBZTtJQUMxQyxnQkFBZ0I7SUFDaEIsaUJBQWlCO0lBQ2pCLHVCQUF1QjtJQUN2QiwwQkFBMEIsQ0FBQyxFQUFDLEtBQUssRUFBRSxPQUFPLEVBQUMsQ0FBQztJQUM1QztRQUNJLE9BQU8sRUFBRSxzQkFBc0I7UUFDL0IsUUFBUSxFQUFFO1lBQ04sU0FBUyxFQUFFLElBQUk7WUFDZixPQUFPLEVBQUUsSUFBSTtZQUNiLGFBQWEsRUFBRSxJQUFJO1NBQ3RCO0tBQ0o7SUFDRDtRQUNJLE9BQU8sRUFBRSxnQkFBZ0I7UUFDekIsSUFBSSxFQUFFO1lBQ0YsZ0JBQWdCO1lBQ2hCLHVCQUF1QjtZQUN2QixpQkFBaUI7WUFDakIsUUFBUTtZQUNSLFVBQVU7WUFDVixpQkFBaUI7U0FDcEI7UUFDRCxVQUFVLEVBQUUsQ0FDUixPQUE0QixFQUM1QixVQUErQixFQUMvQixRQUE2QixFQUM3QixFQUFDLElBQUksRUFBVyxFQUNoQixFQUFDLGFBQWEsRUFBbUIsRUFDakMsR0FBc0IsRUFDSCxFQUFFLENBQ3JCLEtBQUssQ0FBQyxPQUFPLEVBQUUsVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUk7UUFDaEUsZ0RBQWdEO1FBQ2hELE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDLEVBQzFDLFlBQVksQ0FBQyxDQUFDLENBQUMsRUFDZixTQUFTLENBQUMsSUFBSSxDQUFDLEVBQ2YsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUN0QjtLQUNSO0NBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RE9DVU1FTlR9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQge0NoYW5nZURldGVjdG9yUmVmLCBFbGVtZW50UmVmLCBJbmplY3Rpb25Ub2tlbiwgUHJvdmlkZXJ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgICBNVVRBVElPTl9PQlNFUlZFUl9JTklULFxuICAgIE11dGF0aW9uT2JzZXJ2ZXJTZXJ2aWNlLFxufSBmcm9tICdAbmctd2ViLWFwaXMvbXV0YXRpb24tb2JzZXJ2ZXInO1xuaW1wb3J0IHtUdWlEZXN0cm95U2VydmljZSwgVHVpUmVzaXplU2VydmljZX0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge3R1aURyb3Bkb3duT3B0aW9uc1Byb3ZpZGVyfSBmcm9tICdAdGFpZ2EtdWkvY29yZSc7XG5pbXBvcnQge21lcmdlLCBPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcbmltcG9ydCB7ZGVib3VuY2VUaW1lLCBmaWx0ZXIsIHN0YXJ0V2l0aCwgdGFrZVVudGlsLCB0YXB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuZXhwb3J0IGNvbnN0IFRVSV9UQUJTX1JFRlJFU0ggPSBuZXcgSW5qZWN0aW9uVG9rZW48T2JzZXJ2YWJsZTx1bmtub3duPj4oXG4gICAgJ1tUVUlfVEFCU19SRUZSRVNIXScsXG4pO1xuZXhwb3J0IGNvbnN0IFRVSV9UQUJTX1BST1ZJREVSUzogUHJvdmlkZXJbXSA9IFtcbiAgICBUdWlSZXNpemVTZXJ2aWNlLFxuICAgIFR1aURlc3Ryb3lTZXJ2aWNlLFxuICAgIE11dGF0aW9uT2JzZXJ2ZXJTZXJ2aWNlLFxuICAgIHR1aURyb3Bkb3duT3B0aW9uc1Byb3ZpZGVyKHthbGlnbjogJ3JpZ2h0J30pLFxuICAgIHtcbiAgICAgICAgcHJvdmlkZTogTVVUQVRJT05fT0JTRVJWRVJfSU5JVCxcbiAgICAgICAgdXNlVmFsdWU6IHtcbiAgICAgICAgICAgIGNoaWxkTGlzdDogdHJ1ZSxcbiAgICAgICAgICAgIHN1YnRyZWU6IHRydWUsXG4gICAgICAgICAgICBjaGFyYWN0ZXJEYXRhOiB0cnVlLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAge1xuICAgICAgICBwcm92aWRlOiBUVUlfVEFCU19SRUZSRVNILFxuICAgICAgICBkZXBzOiBbXG4gICAgICAgICAgICBUdWlSZXNpemVTZXJ2aWNlLFxuICAgICAgICAgICAgTXV0YXRpb25PYnNlcnZlclNlcnZpY2UsXG4gICAgICAgICAgICBUdWlEZXN0cm95U2VydmljZSxcbiAgICAgICAgICAgIERPQ1VNRU5ULFxuICAgICAgICAgICAgRWxlbWVudFJlZixcbiAgICAgICAgICAgIENoYW5nZURldGVjdG9yUmVmLFxuICAgICAgICBdLFxuICAgICAgICB1c2VGYWN0b3J5OiAoXG4gICAgICAgICAgICByZXNpemUkOiBPYnNlcnZhYmxlPHVua25vd24+LFxuICAgICAgICAgICAgbXV0YXRpb25zJDogT2JzZXJ2YWJsZTx1bmtub3duPixcbiAgICAgICAgICAgIGRlc3Ryb3kkOiBPYnNlcnZhYmxlPHVua25vd24+LFxuICAgICAgICAgICAge2JvZHl9OiBEb2N1bWVudCxcbiAgICAgICAgICAgIHtuYXRpdmVFbGVtZW50fTogRWxlbWVudFJlZjxOb2RlPixcbiAgICAgICAgICAgIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgICAgICk6IE9ic2VydmFibGU8dW5rbm93bj4gPT5cbiAgICAgICAgICAgIG1lcmdlKHJlc2l6ZSQsIG11dGF0aW9ucyQucGlwZSh0YXAoKCkgPT4gY2RyLmRldGVjdENoYW5nZXMoKSkpKS5waXBlKFxuICAgICAgICAgICAgICAgIC8vIElnbm9yaW5nIGNhc2VzIHdoZW4gaG9zdCBpcyBkZXRhY2hlZCBmcm9tIERPTVxuICAgICAgICAgICAgICAgIGZpbHRlcigoKSA9PiBib2R5LmNvbnRhaW5zKG5hdGl2ZUVsZW1lbnQpKSxcbiAgICAgICAgICAgICAgICBkZWJvdW5jZVRpbWUoMCksXG4gICAgICAgICAgICAgICAgc3RhcnRXaXRoKG51bGwpLFxuICAgICAgICAgICAgICAgIHRha2VVbnRpbChkZXN0cm95JCksXG4gICAgICAgICAgICApLFxuICAgIH0sXG5dO1xuIl19