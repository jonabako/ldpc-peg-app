import { ChangeDetectionStrategy, ChangeDetectorRef, Component, HostBinding, Inject, Input, Optional, Self, ViewChild, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AbstractTuiNullableControl, tuiAsControl, tuiAsFocusableItemAccessor, tuiIsNativeFocused, } from '@taiga-ui/cdk';
import { TuiAppearance, TuiModeDirective, } from '@taiga-ui/core';
import { TuiCheckboxComponent } from '@taiga-ui/kit/components/checkbox';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/kit/components/checkbox";
import * as i2 from "@angular/common";
import * as i3 from "@taiga-ui/core";
import * as i4 from "@angular/forms";
export class TuiCheckboxBlockComponent extends AbstractTuiNullableControl {
    constructor(control, cdr, modeDirective) {
        super(control, cdr);
        this.modeDirective = modeDirective;
        this.contentAlign = 'right';
        this.hideCheckbox = false;
        this.size = 'l';
    }
    get nativeFocusableElement() {
        var _a, _b;
        return (_b = (_a = this.checkbox) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement) !== null && _b !== void 0 ? _b : null;
    }
    get checked() {
        return this.value !== false && this.hideCheckbox;
    }
    get checkboxSize() {
        return this.size === 'l' ? 'l' : 'm';
    }
    get focused() {
        return tuiIsNativeFocused(this.nativeFocusableElement);
    }
    get appearance() {
        var _a;
        if (!((_a = this.modeDirective) === null || _a === void 0 ? void 0 : _a.mode)) {
            return this.checked
                ? TuiAppearance.WhiteblockActive
                : TuiAppearance.Whiteblock;
        }
        return this.checked ? TuiAppearance.Primary : TuiAppearance.Secondary;
    }
    onFocused(focused) {
        this.updateFocused(focused);
    }
    onFocusVisible(focusVisible) {
        this.updateFocusVisible(focusVisible);
    }
    /** @deprecated use 'value' setter */
    onModelChange(value) {
        this.value = value;
    }
}
TuiCheckboxBlockComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiCheckboxBlockComponent, deps: [{ token: NgControl, optional: true, self: true }, { token: ChangeDetectorRef }, { token: TuiModeDirective, optional: true }], target: i0.ɵɵFactoryTarget.Component });
TuiCheckboxBlockComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiCheckboxBlockComponent, selector: "tui-checkbox-block", inputs: { contentAlign: "contentAlign", hideCheckbox: "hideCheckbox", size: "size" }, host: { properties: { "attr.data-align": "this.contentAlign", "class._hidden_input": "this.hideCheckbox", "attr.data-size": "this.size", "class._active": "this.checked" } }, providers: [
        tuiAsFocusableItemAccessor(TuiCheckboxBlockComponent),
        tuiAsControl(TuiCheckboxBlockComponent),
    ], viewQueries: [{ propertyName: "checkbox", first: true, predicate: TuiCheckboxComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: "<ng-container *ngIf=\"modeDirective && (modeDirective.change$ | async)\"></ng-container>\n<label\n    tuiWrapper\n    class=\"t-wrapper\"\n    [active]=\"pseudoActive\"\n    [appearance]=\"appearance\"\n    [disabled]=\"computedDisabled\"\n    [focus]=\"computedFocusVisible\"\n    [hover]=\"pseudoHover\"\n    [invalid]=\"computedInvalid\"\n>\n    <tui-checkbox\n        class=\"t-view\"\n        [disabled]=\"computedDisabled || readOnly\"\n        [focusable]=\"focusable\"\n        [nativeId]=\"nativeId\"\n        [pseudoActive]=\"pseudoActive\"\n        [pseudoFocus]=\"false\"\n        [pseudoHover]=\"pseudoHover\"\n        [pseudoInvalid]=\"computedInvalid\"\n        [size]=\"checkboxSize\"\n        [(ngModel)]=\"value\"\n        (focusedChange)=\"onFocused($event)\"\n        (focusVisibleChange)=\"onFocusVisible($event)\"\n    ></tui-checkbox>\n    <div class=\"t-label\">\n        <div class=\"t-content\">\n            <ng-content></ng-content>\n        </div>\n    </div>\n</label>\n", styles: [":host{font:var(--tui-font-text-s);color:var(--tui-text-01);display:inline-block;vertical-align:top;align-items:flex-start;border-radius:var(--tui-radius-m)}:host[data-size=xs]{font:var(--tui-font-text-xs)}:host[data-size=m],:host[data-size=l]{font:var(--tui-font-text-m)}:host._disabled,:host._readonly{pointer-events:none}.t-wrapper{position:relative;display:flex;align-items:inherit;box-sizing:border-box;border-radius:inherit;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;user-select:none;padding:0 1rem 0 0}:host[data-size=xs] .t-wrapper{padding-right:.5rem}:host[data-align=right] .t-wrapper{flex-direction:row-reverse;padding:0 0 0 1rem}:host[data-align=right][data-size=xs] .t-wrapper{padding-left:.5rem}:host[data-size=xs]._hidden_input .t-wrapper{padding:0 .5rem}:host[data-size=xs]._hidden_input .t-wrapper:not(._focused):after{border-width:1px}:host[data-size=s]._hidden_input .t-wrapper{padding:0 1rem}:host[data-size=m]._hidden_input .t-wrapper{padding:0 1.5rem}:host[data-size=l]._hidden_input .t-wrapper{padding:0 2.25rem}:host[data-size=xs] .t-view{margin:calc(var(--tui-height-xs) / 2 - .5rem) .25rem;transform:scale(.75)}:host[data-size=s] .t-view{margin:calc(var(--tui-height-s) / 2 - .5rem) .5rem}:host[data-size=m] .t-view{margin:calc(var(--tui-height-m) / 2 - .5rem) .75rem}:host[data-size=l] .t-view{margin:calc(var(--tui-height-l) / 2 - .75rem) 1rem}:host._hidden_input .t-view{position:absolute;height:1px;width:1px;margin:-1px;border:0;padding:0;overflow:hidden;clip:rect(0,0,0,0);-webkit-clip-path:inset(0);clip-path:inset(0)}.t-label{display:flex;flex-grow:1;align-self:flex-start;align-items:center;overflow:hidden}:host[data-size=xs] .t-label{min-height:var(--tui-height-xs)}:host[data-size=s] .t-label{min-height:var(--tui-height-s)}:host[data-size=m] .t-label{min-height:var(--tui-height-m)}:host[data-size=l] .t-label{min-height:var(--tui-height-l)}:host._hidden_input .t-label{text-align:center;justify-content:center}.t-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}\n"], components: [{ type: i1.TuiCheckboxComponent, selector: "tui-checkbox", inputs: ["size"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.TuiWrapperDirective, selector: "[tuiWrapper]", inputs: ["disabled", "readOnly", "hover", "active", "focus", "invalid", "appearance"] }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }], pipes: { "async": i2.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiCheckboxBlockComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-checkbox-block',
                    templateUrl: './checkbox-block.template.html',
                    styleUrls: ['./checkbox-block.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        tuiAsFocusableItemAccessor(TuiCheckboxBlockComponent),
                        tuiAsControl(TuiCheckboxBlockComponent),
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i4.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }, {
                    type: Inject,
                    args: [NgControl]
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: i3.TuiModeDirective, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TuiModeDirective]
                }] }]; }, propDecorators: { checkbox: [{
                type: ViewChild,
                args: [TuiCheckboxComponent]
            }], contentAlign: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.data-align']
            }], hideCheckbox: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['class._hidden_input']
            }], size: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.data-size']
            }], checked: [{
                type: HostBinding,
                args: ['class._active']
            }] } });
//# sourceMappingURL=data:application/json;base64,