import { Directive, EventEmitter, forwardRef, Input, Output, ViewChildren, } from '@angular/core';
import { EMPTY_QUERY, tuiIsNativeFocused, tuiIsPresent } from '@taiga-ui/cdk';
import { TuiOptionComponent, } from '@taiga-ui/core';
import * as i0 from "@angular/core";
export class AbstractTuiDataListWrapper {
    constructor(itemsHandlers, defaultSize) {
        this.itemsHandlers = itemsHandlers;
        this.defaultSize = defaultSize;
        this.optionsQuery = EMPTY_QUERY;
        this.disabledItemHandler = this.itemsHandlers.disabledItemHandler;
        this.size = this.defaultSize;
        this.itemClick = new EventEmitter();
        this.itemContent = ({ $implicit }) => this.itemsHandlers.stringify($implicit);
    }
    getContext($implicit, { nativeElement }) {
        return { $implicit, active: tuiIsNativeFocused(nativeElement) };
    }
    getOptions(includeDisabled = false) {
        return this.optionsQuery
            .filter(({ disabled }) => includeDisabled || !disabled)
            .map(({ value }) => value)
            .filter(tuiIsPresent);
    }
}
AbstractTuiDataListWrapper.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: AbstractTuiDataListWrapper, deps: "invalid", target: i0.ɵɵFactoryTarget.Directive });
AbstractTuiDataListWrapper.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: AbstractTuiDataListWrapper, inputs: { disabledItemHandler: "disabledItemHandler", emptyContent: "emptyContent", size: "size", itemContent: "itemContent" }, outputs: { itemClick: "itemClick" }, viewQueries: [{ propertyName: "optionsQuery", predicate: i0.forwardRef(function () { return TuiOptionComponent; }), descendants: true }], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: AbstractTuiDataListWrapper, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: undefined }, { type: undefined }]; }, propDecorators: { optionsQuery: [{
                type: ViewChildren,
                args: [forwardRef(() => TuiOptionComponent)]
            }], disabledItemHandler: [{
                type: Input
            }], emptyContent: [{
                type: Input
            }], size: [{
                type: Input
            }], itemClick: [{
                type: Output
            }], itemContent: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS1saXN0LXdyYXBwZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9raXQvY29tcG9uZW50cy9kYXRhLWxpc3Qtd3JhcHBlci9kYXRhLWxpc3Qtd3JhcHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0gsU0FBUyxFQUVULFlBQVksRUFDWixVQUFVLEVBQ1YsS0FBSyxFQUNMLE1BQU0sRUFFTixZQUFZLEdBQ2YsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFDLFdBQVcsRUFBRSxrQkFBa0IsRUFBRSxZQUFZLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDNUUsT0FBTyxFQUNILGtCQUFrQixHQUlyQixNQUFNLGdCQUFnQixDQUFDOztBQUt4QixNQUFNLE9BQWdCLDBCQUEwQjtJQWlCNUMsWUFDdUIsYUFBa0MsRUFDbEMsV0FBaUM7UUFEakMsa0JBQWEsR0FBYixhQUFhLENBQXFCO1FBQ2xDLGdCQUFXLEdBQVgsV0FBVyxDQUFzQjtRQWpCckMsaUJBQVksR0FBcUMsV0FBVyxDQUFDO1FBR2hGLHdCQUFtQixHQUNmLElBQUksQ0FBQyxhQUFhLENBQUMsbUJBQW1CLENBQUM7UUFNM0MsU0FBSSxHQUF5QixJQUFJLENBQUMsV0FBVyxDQUFDO1FBR3JDLGNBQVMsR0FBRyxJQUFJLFlBQVksRUFBSyxDQUFDO1FBUTNDLGdCQUFXLEdBQW1ELENBQUMsRUFBQyxTQUFTLEVBQUMsRUFBRSxFQUFFLENBQzFFLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBSnpDLENBQUM7SUFNSixVQUFVLENBQ04sU0FBWSxFQUNaLEVBQUMsYUFBYSxFQUEwQjtRQUV4QyxPQUFPLEVBQUMsU0FBUyxFQUFFLE1BQU0sRUFBRSxrQkFBa0IsQ0FBQyxhQUFhLENBQUMsRUFBQyxDQUFDO0lBQ2xFLENBQUM7SUFFRCxVQUFVLENBQUMsa0JBQTJCLEtBQUs7UUFDdkMsT0FBTyxJQUFJLENBQUMsWUFBWTthQUNuQixNQUFNLENBQUMsQ0FBQyxFQUFDLFFBQVEsRUFBQyxFQUFFLEVBQUUsQ0FBQyxlQUFlLElBQUksQ0FBQyxRQUFRLENBQUM7YUFDcEQsR0FBRyxDQUFDLENBQUMsRUFBQyxLQUFLLEVBQUMsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDO2FBQ3ZCLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUM5QixDQUFDOzt3SEF0Q2lCLDBCQUEwQjs0R0FBMUIsMEJBQTBCLG1RQUNiLGtCQUFrQjs0RkFEL0IsMEJBQTBCO2tCQUQvQyxTQUFTO2tIQUdhLFlBQVk7c0JBRDlCLFlBQVk7dUJBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLGtCQUFrQixDQUFDO2dCQUlsRCxtQkFBbUI7c0JBRGxCLEtBQUs7Z0JBS04sWUFBWTtzQkFEWCxLQUFLO2dCQUlOLElBQUk7c0JBREgsS0FBSztnQkFJRyxTQUFTO3NCQURqQixNQUFNO2dCQVNQLFdBQVc7c0JBRFYsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgRGlyZWN0aXZlLFxuICAgIEVsZW1lbnRSZWYsXG4gICAgRXZlbnRFbWl0dGVyLFxuICAgIGZvcndhcmRSZWYsXG4gICAgSW5wdXQsXG4gICAgT3V0cHV0LFxuICAgIFF1ZXJ5TGlzdCxcbiAgICBWaWV3Q2hpbGRyZW4sXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtFTVBUWV9RVUVSWSwgdHVpSXNOYXRpdmVGb2N1c2VkLCB0dWlJc1ByZXNlbnR9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtcbiAgICBUdWlPcHRpb25Db21wb25lbnQsXG4gICAgVHVpU2l6ZUwsXG4gICAgVHVpU2l6ZVhTLFxuICAgIFR1aVZhbHVlQ29udGVudENvbnRleHQsXG59IGZyb20gJ0B0YWlnYS11aS9jb3JlJztcbmltcG9ydCB7VHVpSXRlbXNIYW5kbGVyc30gZnJvbSAnQHRhaWdhLXVpL2tpdC90b2tlbnMnO1xuaW1wb3J0IHtQb2x5bW9ycGhldXNDb250ZW50fSBmcm9tICdAdGlua29mZi9uZy1wb2x5bW9ycGhldXMnO1xuXG5ARGlyZWN0aXZlKClcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBYnN0cmFjdFR1aURhdGFMaXN0V3JhcHBlcjxUPiB7XG4gICAgQFZpZXdDaGlsZHJlbihmb3J3YXJkUmVmKCgpID0+IFR1aU9wdGlvbkNvbXBvbmVudCkpXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IG9wdGlvbnNRdWVyeTogUXVlcnlMaXN0PFR1aU9wdGlvbkNvbXBvbmVudDxUPj4gPSBFTVBUWV9RVUVSWTtcblxuICAgIEBJbnB1dCgpXG4gICAgZGlzYWJsZWRJdGVtSGFuZGxlcjogVHVpSXRlbXNIYW5kbGVyczxUPlsnZGlzYWJsZWRJdGVtSGFuZGxlciddID1cbiAgICAgICAgdGhpcy5pdGVtc0hhbmRsZXJzLmRpc2FibGVkSXRlbUhhbmRsZXI7XG5cbiAgICBASW5wdXQoKVxuICAgIGVtcHR5Q29udGVudDogUG9seW1vcnBoZXVzQ29udGVudDtcblxuICAgIEBJbnB1dCgpXG4gICAgc2l6ZTogVHVpU2l6ZUwgfCBUdWlTaXplWFMgPSB0aGlzLmRlZmF1bHRTaXplO1xuXG4gICAgQE91dHB1dCgpXG4gICAgcmVhZG9ubHkgaXRlbUNsaWNrID0gbmV3IEV2ZW50RW1pdHRlcjxUPigpO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByb3RlY3RlZCByZWFkb25seSBpdGVtc0hhbmRsZXJzOiBUdWlJdGVtc0hhbmRsZXJzPFQ+LFxuICAgICAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgZGVmYXVsdFNpemU6IFR1aVNpemVMIHwgVHVpU2l6ZVhTLFxuICAgICkge31cblxuICAgIEBJbnB1dCgpXG4gICAgaXRlbUNvbnRlbnQ6IFBvbHltb3JwaGV1c0NvbnRlbnQ8VHVpVmFsdWVDb250ZW50Q29udGV4dDxUPj4gPSAoeyRpbXBsaWNpdH0pID0+XG4gICAgICAgIHRoaXMuaXRlbXNIYW5kbGVycy5zdHJpbmdpZnkoJGltcGxpY2l0KTtcblxuICAgIGdldENvbnRleHQoXG4gICAgICAgICRpbXBsaWNpdDogVCxcbiAgICAgICAge25hdGl2ZUVsZW1lbnR9OiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PixcbiAgICApOiBUdWlWYWx1ZUNvbnRlbnRDb250ZXh0PFQ+IHtcbiAgICAgICAgcmV0dXJuIHskaW1wbGljaXQsIGFjdGl2ZTogdHVpSXNOYXRpdmVGb2N1c2VkKG5hdGl2ZUVsZW1lbnQpfTtcbiAgICB9XG5cbiAgICBnZXRPcHRpb25zKGluY2x1ZGVEaXNhYmxlZDogYm9vbGVhbiA9IGZhbHNlKTogcmVhZG9ubHkgVFtdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9uc1F1ZXJ5XG4gICAgICAgICAgICAuZmlsdGVyKCh7ZGlzYWJsZWR9KSA9PiBpbmNsdWRlRGlzYWJsZWQgfHwgIWRpc2FibGVkKVxuICAgICAgICAgICAgLm1hcCgoe3ZhbHVlfSkgPT4gdmFsdWUpXG4gICAgICAgICAgICAuZmlsdGVyKHR1aUlzUHJlc2VudCk7XG4gICAgfVxufVxuIl19