import { ChangeDetectionStrategy, Component, ElementRef, HostBinding, HostListener, Inject, Input, } from '@angular/core';
import { AbstractTuiInteractive, tuiAsFocusableItemAccessor, TuiDestroyService, TuiFocusVisibleService, tuiIsNativeFocused, } from '@taiga-ui/cdk';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/kit/components/marker-icon";
import * as i2 from "@angular/common";
import * as i3 from "@taiga-ui/cdk";
export class TuiActionComponent extends AbstractTuiInteractive {
    constructor(focusVisible$, el) {
        super();
        this.el = el;
        this.icon = '';
        this.disabled = false;
        focusVisible$.subscribe(visible => {
            this.updateFocusVisible(visible);
        });
    }
    get nativeFocusableElement() {
        return this.el.nativeElement;
    }
    get focused() {
        return tuiIsNativeFocused(this.nativeFocusableElement);
    }
    get tabIndex() {
        return this.computedFocusable ? 0 : -1;
    }
    onFocused(focused) {
        this.updateFocused(focused);
    }
}
TuiActionComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiActionComponent, deps: [{ token: TuiFocusVisibleService }, { token: ElementRef }], target: i0.ɵɵFactoryTarget.Component });
TuiActionComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiActionComponent, selector: "button[tuiAction], a[tuiAction]", inputs: { icon: "icon" }, host: { listeners: { "focusin": "onFocused(true)", "focusout": "onFocused(false)" }, properties: { "tabIndex": "this.tabIndex" }, classAttribute: "tui-island tui-island_hoverable" }, providers: [
        TuiDestroyService,
        TuiFocusVisibleService,
        tuiAsFocusableItemAccessor(TuiActionComponent),
    ], usesInheritance: true, ngImport: i0, template: "<ng-content></ng-content>\n<tui-marker-icon\n    *ngIf=\"icon\"\n    size=\"s\"\n    class=\"t-icon tui-island__marker\"\n    [src]=\"icon\"\n></tui-marker-icon>\n", styles: [":host{-webkit-appearance:none;-moz-appearance:none;appearance:none;border:0;background:none;font-size:inherit;line-height:inherit;text-decoration:none;display:flex;justify-content:space-between;font:var(--tui-font-text-m);padding:.875rem;border:2px solid transparent;text-align:start}:host._focus-visible{border-color:var(--tui-focus)}:host:after{display:none}.t-icon{color:var(--tui-action-color, var(--tui-link));background-color:var(--tui-action-background, var(--tui-base-02))}\n"], components: [{ type: i1.TuiMarkerIconComponent, selector: "tui-marker-icon, a[tuiMarkerIcon], button[tuiMarkerIcon]", inputs: ["mode", "size", "src"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiActionComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'button[tuiAction], a[tuiAction]',
                    templateUrl: './action.template.html',
                    styleUrls: ['./action.style.less'],
                    host: {
                        class: 'tui-island tui-island_hoverable',
                    },
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        TuiDestroyService,
                        TuiFocusVisibleService,
                        tuiAsFocusableItemAccessor(TuiActionComponent),
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i3.TuiFocusVisibleService, decorators: [{
                    type: Inject,
                    args: [TuiFocusVisibleService]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }]; }, propDecorators: { icon: [{
                type: Input
            }], tabIndex: [{
                type: HostBinding,
                args: ['tabIndex']
            }], onFocused: [{
                type: HostListener,
                args: ['focusin', ['true']]
            }, {
                type: HostListener,
                args: ['focusout', ['false']]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2tpdC9jb21wb25lbnRzL2FjdGlvbi9hY3Rpb24uY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMva2l0L2NvbXBvbmVudHMvYWN0aW9uL2FjdGlvbi50ZW1wbGF0ZS5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDSCx1QkFBdUIsRUFDdkIsU0FBUyxFQUNULFVBQVUsRUFDVixXQUFXLEVBQ1gsWUFBWSxFQUNaLE1BQU0sRUFDTixLQUFLLEdBQ1IsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUNILHNCQUFzQixFQUN0QiwwQkFBMEIsRUFDMUIsaUJBQWlCLEVBQ2pCLHNCQUFzQixFQUN0QixrQkFBa0IsR0FFckIsTUFBTSxlQUFlLENBQUM7Ozs7O0FBZ0J2QixNQUFNLE9BQU8sa0JBQW1CLFNBQVEsc0JBQXNCO0lBTTFELFlBQ29DLGFBQXFDLEVBQ2hDLEVBQTJCO1FBRWhFLEtBQUssRUFBRSxDQUFDO1FBRjZCLE9BQUUsR0FBRixFQUFFLENBQXlCO1FBTnBFLFNBQUksR0FBRyxFQUFFLENBQUM7UUFFRCxhQUFRLEdBQUcsS0FBSyxDQUFDO1FBUXRCLGFBQWEsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDOUIsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3JDLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELElBQUksc0JBQXNCO1FBQ3RCLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUM7SUFDakMsQ0FBQztJQUVELElBQUksT0FBTztRQUNQLE9BQU8sa0JBQWtCLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLENBQUM7SUFDM0QsQ0FBQztJQUVELElBQ0ksUUFBUTtRQUNSLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFJRCxTQUFTLENBQUMsT0FBZ0I7UUFDdEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNoQyxDQUFDOztnSEFsQ1Esa0JBQWtCLGtCQU9mLHNCQUFzQixhQUN0QixVQUFVO29HQVJiLGtCQUFrQiwyUUFOaEI7UUFDUCxpQkFBaUI7UUFDakIsc0JBQXNCO1FBQ3RCLDBCQUEwQixDQUFDLGtCQUFrQixDQUFDO0tBQ2pELGlEQzlCTCxxS0FPQTs0RkR5QmEsa0JBQWtCO2tCQWQ5QixTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSxpQ0FBaUM7b0JBQzNDLFdBQVcsRUFBRSx3QkFBd0I7b0JBQ3JDLFNBQVMsRUFBRSxDQUFDLHFCQUFxQixDQUFDO29CQUNsQyxJQUFJLEVBQUU7d0JBQ0YsS0FBSyxFQUFFLGlDQUFpQztxQkFDM0M7b0JBQ0QsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07b0JBQy9DLFNBQVMsRUFBRTt3QkFDUCxpQkFBaUI7d0JBQ2pCLHNCQUFzQjt3QkFDdEIsMEJBQTBCLG9CQUFvQjtxQkFDakQ7aUJBQ0o7OzBCQVFRLE1BQU07MkJBQUMsc0JBQXNCOzswQkFDN0IsTUFBTTsyQkFBQyxVQUFVOzRDQU50QixJQUFJO3NCQURILEtBQUs7Z0JBeUJGLFFBQVE7c0JBRFgsV0FBVzt1QkFBQyxVQUFVO2dCQU92QixTQUFTO3NCQUZSLFlBQVk7dUJBQUMsU0FBUyxFQUFFLENBQUMsTUFBTSxDQUFDOztzQkFDaEMsWUFBWTt1QkFBQyxVQUFVLEVBQUUsQ0FBQyxPQUFPLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICAgIENvbXBvbmVudCxcbiAgICBFbGVtZW50UmVmLFxuICAgIEhvc3RCaW5kaW5nLFxuICAgIEhvc3RMaXN0ZW5lcixcbiAgICBJbmplY3QsXG4gICAgSW5wdXQsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgICBBYnN0cmFjdFR1aUludGVyYWN0aXZlLFxuICAgIHR1aUFzRm9jdXNhYmxlSXRlbUFjY2Vzc29yLFxuICAgIFR1aURlc3Ryb3lTZXJ2aWNlLFxuICAgIFR1aUZvY3VzVmlzaWJsZVNlcnZpY2UsXG4gICAgdHVpSXNOYXRpdmVGb2N1c2VkLFxuICAgIFR1aU5hdGl2ZUZvY3VzYWJsZUVsZW1lbnQsXG59IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2J1dHRvblt0dWlBY3Rpb25dLCBhW3R1aUFjdGlvbl0nLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9hY3Rpb24udGVtcGxhdGUuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vYWN0aW9uLnN0eWxlLmxlc3MnXSxcbiAgICBob3N0OiB7XG4gICAgICAgIGNsYXNzOiAndHVpLWlzbGFuZCB0dWktaXNsYW5kX2hvdmVyYWJsZScsXG4gICAgfSxcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgVHVpRGVzdHJveVNlcnZpY2UsXG4gICAgICAgIFR1aUZvY3VzVmlzaWJsZVNlcnZpY2UsXG4gICAgICAgIHR1aUFzRm9jdXNhYmxlSXRlbUFjY2Vzc29yKFR1aUFjdGlvbkNvbXBvbmVudCksXG4gICAgXSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpQWN0aW9uQ29tcG9uZW50IGV4dGVuZHMgQWJzdHJhY3RUdWlJbnRlcmFjdGl2ZSB7XG4gICAgQElucHV0KClcbiAgICBpY29uID0gJyc7XG5cbiAgICByZWFkb25seSBkaXNhYmxlZCA9IGZhbHNlO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoVHVpRm9jdXNWaXNpYmxlU2VydmljZSkgZm9jdXNWaXNpYmxlJDogVHVpRm9jdXNWaXNpYmxlU2VydmljZSxcbiAgICAgICAgQEluamVjdChFbGVtZW50UmVmKSBwcml2YXRlIHJlYWRvbmx5IGVsOiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PixcbiAgICApIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICBmb2N1c1Zpc2libGUkLnN1YnNjcmliZSh2aXNpYmxlID0+IHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlRm9jdXNWaXNpYmxlKHZpc2libGUpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBnZXQgbmF0aXZlRm9jdXNhYmxlRWxlbWVudCgpOiBUdWlOYXRpdmVGb2N1c2FibGVFbGVtZW50IHwgbnVsbCB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQ7XG4gICAgfVxuXG4gICAgZ2V0IGZvY3VzZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0dWlJc05hdGl2ZUZvY3VzZWQodGhpcy5uYXRpdmVGb2N1c2FibGVFbGVtZW50KTtcbiAgICB9XG5cbiAgICBASG9zdEJpbmRpbmcoJ3RhYkluZGV4JylcbiAgICBnZXQgdGFiSW5kZXgoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcHV0ZWRGb2N1c2FibGUgPyAwIDogLTE7XG4gICAgfVxuXG4gICAgQEhvc3RMaXN0ZW5lcignZm9jdXNpbicsIFsndHJ1ZSddKVxuICAgIEBIb3N0TGlzdGVuZXIoJ2ZvY3Vzb3V0JywgWydmYWxzZSddKVxuICAgIG9uRm9jdXNlZChmb2N1c2VkOiBib29sZWFuKTogdm9pZCB7XG4gICAgICAgIHRoaXMudXBkYXRlRm9jdXNlZChmb2N1c2VkKTtcbiAgICB9XG59XG4iLCI8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG48dHVpLW1hcmtlci1pY29uXG4gICAgKm5nSWY9XCJpY29uXCJcbiAgICBzaXplPVwic1wiXG4gICAgY2xhc3M9XCJ0LWljb24gdHVpLWlzbGFuZF9fbWFya2VyXCJcbiAgICBbc3JjXT1cImljb25cIlxuPjwvdHVpLW1hcmtlci1pY29uPlxuIl19