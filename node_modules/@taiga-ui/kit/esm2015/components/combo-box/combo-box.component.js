import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, EventEmitter, HostBinding, Inject, Input, Optional, Output, Self, TemplateRef, ViewChild, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AbstractTuiNullableControl, TUI_STRICT_MATCHER, tuiAsControl, tuiAsFocusableItemAccessor, tuiIsNativeFocused, tuiIsPresent, } from '@taiga-ui/cdk';
import { TUI_DATA_LIST_ACCESSOR, TUI_TEXTFIELD_SIZE, tuiAsDataListHost, tuiAsOptionContent, TuiDataListDirective, TuiHostedDropdownComponent, TuiPrimitiveTextfieldComponent, } from '@taiga-ui/core';
import { TUI_ARROW_MODE } from '@taiga-ui/kit/components/arrow';
import { TUI_SELECT_OPTION } from '@taiga-ui/kit/components/select-option';
import { FIXED_DROPDOWN_CONTROLLER_PROVIDER } from '@taiga-ui/kit/providers';
import { TUI_ITEMS_HANDLERS } from '@taiga-ui/kit/tokens';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core";
import * as i2 from "@taiga-ui/cdk";
import * as i3 from "@angular/common";
import * as i4 from "@tinkoff/ng-polymorpheus";
import * as i5 from "@angular/forms";
export class TuiComboBoxComponent extends AbstractTuiNullableControl {
    constructor(control, cdr, arrowMode, itemsHandlers, textfieldSize) {
        super(control, cdr);
        this.arrowMode = arrowMode;
        this.itemsHandlers = itemsHandlers;
        this.textfieldSize = textfieldSize;
        this.stringify = this.itemsHandlers.stringify;
        this.strictMatcher = TUI_STRICT_MATCHER;
        this.identityMatcher = this.itemsHandlers.identityMatcher;
        this.strict = true;
        this.search = null;
        this.searchChange = new EventEmitter();
        this.open = false;
    }
    get size() {
        return this.textfieldSize.size;
    }
    get arrow() {
        return !this.interactive ? this.arrowMode.disabled : this.arrowMode.interactive;
    }
    get nativeFocusableElement() {
        var _a, _b;
        return (_b = (_a = this.textfield) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement) !== null && _b !== void 0 ? _b : null;
    }
    get focused() {
        var _a;
        return (tuiIsNativeFocused(this.nativeFocusableElement) ||
            !!((_a = this.hostedDropdown) === null || _a === void 0 ? void 0 : _a.focused));
    }
    get nativeValue() {
        return this.value === null ? this.search || '' : this.stringify(this.value);
    }
    get showValueTemplate() {
        return tuiIsPresent(this.value) && !this.focused;
    }
    get computedContent() {
        return this.valueContent || this.nativeValue;
    }
    onActiveZone(active) {
        this.updateFocused(active);
    }
    checkOption(option) {
        if (!this.isStrictMatch(option)) {
            return;
        }
        this.value = option;
        this.updateSearch(null);
    }
    handleOption(item) {
        this.focusInput();
        this.close();
        this.updateSearch(null);
        this.value = item;
        if (this.value) {
            this.setNativeValue(this.stringify(item));
        }
    }
    onFieldKeyDownEnter(event) {
        var _a;
        if (this.open) {
            event.preventDefault();
        }
        const options = ((_a = this.accessor) === null || _a === void 0 ? void 0 : _a.getOptions()) || [];
        if (options.length !== 1) {
            return;
        }
        this.value = options[0];
        this.updateSearch(null);
        this.close();
    }
    onValueChange(value) {
        var _a, _b;
        this.updateSearch(value);
        const match = (_a = this.accessor) === null || _a === void 0 ? void 0 : _a.getOptions().find(item => this.isStrictMatch(item));
        if (match !== undefined) {
            this.value = match;
            this.updateSearch(null);
            return;
        }
        if (this.strict || this.search === '') {
            this.value = null;
        }
        // Clearing sets the empty value, the dropdown should not be opened on clear.
        if (this.search !== '') {
            (_b = this.hostedDropdown) === null || _b === void 0 ? void 0 : _b.updateOpen(true);
        }
    }
    /** @deprecated use 'value' setter */
    updateValue(value) {
        super.updateValue(value);
    }
    toggle() {
        var _a;
        (_a = this.hostedDropdown) === null || _a === void 0 ? void 0 : _a.updateOpen(!this.open);
    }
    isStrictMatch(item) {
        var _a;
        return !!this.search && !!((_a = this.strictMatcher) === null || _a === void 0 ? void 0 : _a.call(this, item, this.search, this.stringify));
    }
    close() {
        var _a;
        (_a = this.hostedDropdown) === null || _a === void 0 ? void 0 : _a.updateOpen(false);
    }
    updateSearch(search) {
        if (this.search === search) {
            return;
        }
        this.search = search;
        this.searchChange.emit(search);
    }
    setNativeValue(value) {
        if (this.nativeFocusableElement) {
            this.nativeFocusableElement.value = value;
        }
    }
    focusInput(preventScroll = false) {
        if (this.nativeFocusableElement) {
            this.nativeFocusableElement.focus({ preventScroll });
        }
    }
}
TuiComboBoxComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiComboBoxComponent, deps: [{ token: NgControl, optional: true, self: true }, { token: ChangeDetectorRef }, { token: TUI_ARROW_MODE }, { token: TUI_ITEMS_HANDLERS }, { token: TUI_TEXTFIELD_SIZE }], target: i0.ɵɵFactoryTarget.Component });
TuiComboBoxComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiComboBoxComponent, selector: "tui-combo-box", inputs: { stringify: "stringify", strictMatcher: "strictMatcher", identityMatcher: "identityMatcher", valueContent: "valueContent", strict: "strict", search: "search" }, outputs: { searchChange: "searchChange" }, host: { properties: { "attr.data-size": "this.size" } }, providers: [
        tuiAsFocusableItemAccessor(TuiComboBoxComponent),
        tuiAsDataListHost(TuiComboBoxComponent),
        tuiAsControl(TuiComboBoxComponent),
        tuiAsOptionContent(TUI_SELECT_OPTION),
    ], queries: [{ propertyName: "accessor", first: true, predicate: TUI_DATA_LIST_ACCESSOR, descendants: true }, { propertyName: "datalist", first: true, predicate: TuiDataListDirective, descendants: true, read: TemplateRef }], viewQueries: [{ propertyName: "hostedDropdown", first: true, predicate: TuiHostedDropdownComponent, descendants: true }, { propertyName: "textfield", first: true, predicate: TuiPrimitiveTextfieldComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: "<tui-hosted-dropdown\n    class=\"t-hosted\"\n    [canOpen]=\"interactive && !!datalist\"\n    [content]=\"datalist || ''\"\n    [(open)]=\"open\"\n    (tuiActiveZoneChange)=\"onActiveZone($event)\"\n>\n    <tui-primitive-textfield\n        automation-id=\"tui-combo-box__textfield\"\n        class=\"t-textfield\"\n        [disabled]=\"computedDisabled\"\n        [focusable]=\"computedFocusable\"\n        [invalid]=\"computedInvalid\"\n        [nativeId]=\"nativeId\"\n        [pseudoFocus]=\"computedFocused\"\n        [pseudoHover]=\"pseudoHover\"\n        [readOnly]=\"readOnly\"\n        [tuiTextfieldIcon]=\"arrow ? icon : ''\"\n        [value]=\"nativeValue\"\n        (click)=\"toggle()\"\n        (keydown.enter)=\"onFieldKeyDownEnter($event)\"\n        (valueChange)=\"onValueChange($event)\"\n    >\n        <ng-content></ng-content>\n        <ng-content\n            ngProjectAs=\"input\"\n            select=\"input\"\n        ></ng-content>\n        <div\n            *ngIf=\"showValueTemplate\"\n            automation-id=\"tui-combo-box__template\"\n            ngProjectAs=\"tuiContent\"\n            class=\"t-value\"\n        >\n            <ng-container\n                *polymorpheusOutlet=\"computedContent as text; context: {$implicit: value!, active: computedFocused}\"\n            >\n                {{ text }}\n            </ng-container>\n        </div>\n    </tui-primitive-textfield>\n\n    <ng-template #icon>\n        <div\n            appearance=\"icon\"\n            tuiWrapper\n            class=\"t-icon\"\n        >\n            <ng-container *polymorpheusOutlet=\"arrow\"></ng-container>\n        </div>\n    </ng-template>\n</tui-hosted-dropdown>\n", styles: [":host{display:block;border-radius:var(--tui-radius-m);text-align:left}.t-hosted{display:block;border-radius:inherit}.t-textfield{border-radius:inherit;text-align:inherit}.t-value{display:flex;width:100%;align-items:center}.t-icon{pointer-events:auto}\n"], components: [{ type: i1.TuiHostedDropdownComponent, selector: "tui-hosted-dropdown", inputs: ["content", "sided", "canOpen", "open"], outputs: ["openChange", "focusedChange"] }, { type: i1.TuiPrimitiveTextfieldComponent, selector: "tui-primitive-textfield", inputs: ["editable", "filler", "iconCleaner", "readOnly", "invalid", "disabled", "prefix", "postfix", "value"], outputs: ["valueChange"] }], directives: [{ type: i2.TuiActiveZoneDirective, selector: "[tuiActiveZone]:not(ng-container), [tuiActiveZoneChange]:not(ng-container), [tuiActiveZoneParent]:not(ng-container)", inputs: ["tuiActiveZoneParent"], outputs: ["tuiActiveZoneChange"], exportAs: ["tuiActiveZone"] }, { type: i1.TuiPrimitiveTextfieldDirective, selector: "tui-primitive-textfield" }, { type: i1.TuiTextfieldIconDirective, selector: "[tuiTextfieldIcon]", inputs: ["tuiTextfieldIcon"] }, { type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { type: i1.TuiWrapperDirective, selector: "[tuiWrapper]", inputs: ["disabled", "readOnly", "hover", "active", "focus", "invalid", "appearance"] }], viewProviders: [FIXED_DROPDOWN_CONTROLLER_PROVIDER], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiComboBoxComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-combo-box',
                    templateUrl: './combo-box.template.html',
                    styleUrls: ['./combo-box.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        tuiAsFocusableItemAccessor(TuiComboBoxComponent),
                        tuiAsDataListHost(TuiComboBoxComponent),
                        tuiAsControl(TuiComboBoxComponent),
                        tuiAsOptionContent(TUI_SELECT_OPTION),
                    ],
                    viewProviders: [FIXED_DROPDOWN_CONTROLLER_PROVIDER],
                }]
        }], ctorParameters: function () { return [{ type: i5.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }, {
                    type: Inject,
                    args: [NgControl]
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_ARROW_MODE]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_ITEMS_HANDLERS]
                }] }, { type: i1.TuiTextfieldSizeDirective, decorators: [{
                    type: Inject,
                    args: [TUI_TEXTFIELD_SIZE]
                }] }]; }, propDecorators: { accessor: [{
                type: ContentChild,
                args: [TUI_DATA_LIST_ACCESSOR]
            }], hostedDropdown: [{
                type: ViewChild,
                args: [TuiHostedDropdownComponent]
            }], textfield: [{
                type: ViewChild,
                args: [TuiPrimitiveTextfieldComponent]
            }], stringify: [{
                type: Input
            }], strictMatcher: [{
                type: Input
            }], identityMatcher: [{
                type: Input
            }], valueContent: [{
                type: Input
            }], strict: [{
                type: Input
            }], search: [{
                type: Input
            }], searchChange: [{
                type: Output
            }], datalist: [{
                type: ContentChild,
                args: [TuiDataListDirective, { read: TemplateRef }]
            }], size: [{
                type: HostBinding,
                args: ['attr.data-size']
            }] } });
//# sourceMappingURL=data:application/json;base64,