import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, Inject, Input, Output, } from '@angular/core';
import { ALWAYS_FALSE_HANDLER, TUI_FIRST_DAY, TUI_LAST_DAY, TuiDay, TuiMonth, TuiMonthRange, tuiNullableSame, tuiPure, } from '@taiga-ui/cdk';
import { TuiInteractiveState, TuiRangeState } from '@taiga-ui/core';
import { TUI_CALENDAR_MONTHS } from '@taiga-ui/kit/tokens';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core";
import * as i2 from "@angular/common";
import * as i3 from "@taiga-ui/cdk";
import * as i4 from "rxjs";
const TODAY = TuiDay.currentLocal();
export class TuiCalendarMonthComponent {
    constructor(months$) {
        this.months$ = months$;
        this.value = null;
        this.year = TODAY;
        this.disabledItemHandler = ALWAYS_FALSE_HANDLER;
        this.min = TUI_FIRST_DAY;
        this.max = TUI_LAST_DAY;
        this.monthClick = new EventEmitter();
        this.hoveredItemChange = new EventEmitter();
        this.yearChange = new EventEmitter();
        this.isYearPickerShown = false;
        this.hoveredItem = null;
        this.pressedItem = null;
    }
    get isSingle() {
        return (this.value !== null &&
            (this.value instanceof TuiMonth || this.value.isSingleMonth));
    }
    get computedMin() {
        var _a;
        return (_a = this.min) !== null && _a !== void 0 ? _a : TUI_FIRST_DAY;
    }
    get computedMax() {
        var _a;
        return (_a = this.max) !== null && _a !== void 0 ? _a : TUI_LAST_DAY;
    }
    get previousYearDisabled() {
        return this.year.yearSameOrBefore(this.computedMin);
    }
    get nextYearDisabled() {
        return this.year.yearSameOrAfter(this.computedMax);
    }
    getItemState(item) {
        const { disabledItemHandlerWithMinMax, pressedItem, hoveredItem } = this;
        if (disabledItemHandlerWithMinMax(item)) {
            return TuiInteractiveState.Disabled;
        }
        if (pressedItem === null || pressedItem === void 0 ? void 0 : pressedItem.monthSame(item)) {
            return TuiInteractiveState.Active;
        }
        if (hoveredItem === null || hoveredItem === void 0 ? void 0 : hoveredItem.monthSame(item)) {
            return TuiInteractiveState.Hover;
        }
        return null;
    }
    getItemRange(item) {
        const { value, hoveredItem } = this;
        if (value === null) {
            return null;
        }
        if (value instanceof TuiMonth) {
            return value.monthSame(item) ? TuiRangeState.Single : null;
        }
        const theFirstOfRange = value.from.monthSame(item) && !value.isSingleMonth;
        const hoveredItemAfterFrom = (hoveredItem === null || hoveredItem === void 0 ? void 0 : hoveredItem.monthAfter(value.from)) &&
            value.from.monthSame(item) &&
            value.isSingleMonth;
        const hoveredItemIsCandidateToBeFrom = (hoveredItem === null || hoveredItem === void 0 ? void 0 : hoveredItem.monthSame(item)) &&
            (hoveredItem === null || hoveredItem === void 0 ? void 0 : hoveredItem.monthBefore(value.from)) &&
            value.isSingleMonth;
        if (theFirstOfRange || hoveredItemAfterFrom || hoveredItemIsCandidateToBeFrom) {
            return TuiRangeState.Start;
        }
        const theLastOfRange = value.to.monthSame(item) && !value.isSingleMonth;
        const hoveredItemBeforeTo = value.to.monthSame(item) &&
            (hoveredItem === null || hoveredItem === void 0 ? void 0 : hoveredItem.monthBefore(value.to)) &&
            value.isSingleMonth;
        const hoveredItemIsCandidateToBeTo = (hoveredItem === null || hoveredItem === void 0 ? void 0 : hoveredItem.monthSame(item)) &&
            (hoveredItem === null || hoveredItem === void 0 ? void 0 : hoveredItem.monthAfter(value.from)) &&
            value.isSingleMonth;
        if (theLastOfRange || hoveredItemBeforeTo || hoveredItemIsCandidateToBeTo) {
            return TuiRangeState.End;
        }
        return value.isSingleMonth && value.from.monthSame(item)
            ? TuiRangeState.Single
            : null;
    }
    getTuiMonth(monthNumber, yearNumber) {
        return new TuiMonth(yearNumber, monthNumber);
    }
    isItemToday(item) {
        return TODAY.monthSame(item);
    }
    isItemInsideRange(month) {
        const { value, hoveredItem } = this;
        if (value === null || value instanceof TuiMonth) {
            return false;
        }
        if (!value.isSingleMonth) {
            return value.from.monthSameOrBefore(month) && value.to.monthAfter(month);
        }
        if (hoveredItem === null) {
            return false;
        }
        const range = TuiMonthRange.sort(value.from, hoveredItem);
        return range.from.monthSameOrBefore(month) && range.to.monthAfter(month);
    }
    onPickerYearClick(year) {
        this.isYearPickerShown = false;
        if (this.year.yearSame(year)) {
            return;
        }
        this.updateActiveYear(year);
    }
    onItemClick(month) {
        if (this.disabledItemHandlerWithMinMax(month)) {
            return;
        }
        this.monthClick.emit(month);
    }
    onYearClick() {
        this.isYearPickerShown = true;
    }
    onNextYear() {
        this.updateActiveYear(this.year.append({ year: 1 }));
    }
    onPreviousYear() {
        this.updateActiveYear(this.year.append({ year: -1 }));
    }
    onItemHovered(hovered, item) {
        this.updateHoveredItem(hovered ? item : null);
    }
    onItemPressed(pressed, item) {
        this.updatePressedItem(pressed ? item : null);
    }
    calculateDisabledItemHandlerWithMinMax(disabledItemHandler, value, min, max) {
        return item => item.monthBefore(min) ||
            item.monthAfter(max) ||
            disabledItemHandler(item, { value });
    }
    get disabledItemHandlerWithMinMax() {
        return this.calculateDisabledItemHandlerWithMinMax(this.disabledItemHandler, this.value, this.computedMin, this.computedMax);
    }
    updateHoveredItem(month) {
        if (tuiNullableSame(this.hoveredItem, month, (a, b) => a.monthSame(b))) {
            return;
        }
        this.hoveredItem = month;
        this.hoveredItemChange.emit(month);
    }
    updatePressedItem(item) {
        this.pressedItem = item;
    }
    updateActiveYear(year) {
        this.year = year;
        this.yearChange.emit(year);
    }
}
TuiCalendarMonthComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiCalendarMonthComponent, deps: [{ token: TUI_CALENDAR_MONTHS }], target: i0.ɵɵFactoryTarget.Component });
TuiCalendarMonthComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiCalendarMonthComponent, selector: "tui-calendar-month", inputs: { value: "value", year: "year", disabledItemHandler: "disabledItemHandler", min: "min", max: "max" }, outputs: { monthClick: "monthClick", hoveredItemChange: "hoveredItemChange", yearChange: "yearChange" }, host: { properties: { "class._single": "this.isSingle" } }, ngImport: i0, template: "<tui-scrollbar\n    *ngIf=\"isYearPickerShown; else monthSelect\"\n    class=\"t-scrollbar\"\n>\n    <tui-primitive-year-picker\n        [initialItem]=\"year\"\n        [max]=\"computedMax\"\n        [min]=\"computedMin\"\n        [value]=\"value\"\n        (yearClick)=\"onPickerYearClick($event)\"\n    ></tui-primitive-year-picker>\n</tui-scrollbar>\n<ng-template #monthSelect>\n    <tui-primitive-spin-button\n        [focusable]=\"false\"\n        [leftDisabled]=\"previousYearDisabled\"\n        [rightDisabled]=\"nextYearDisabled\"\n        (leftClick)=\"onPreviousYear()\"\n        (rightClick)=\"onNextYear()\"\n    >\n        <button\n            automation-id=\"tui-calendar-month__active-year\"\n            tuiLink\n            type=\"button\"\n            [tuiFocusable]=\"false\"\n            (click)=\"onYearClick()\"\n        >\n            {{ year.formattedYear }}\n        </button>\n    </tui-primitive-spin-button>\n    <div class=\"t-row\">\n        <ng-container *ngFor=\"let month of months$ | async; let index = index\">\n            <div\n                *tuiLet=\"getTuiMonth(index, year.year) as item\"\n                class=\"t-cell\"\n                [attr.data-range]=\"getItemRange(item)\"\n                [attr.data-state]=\"getItemState(item)\"\n                [class.t-cell_interval]=\"isItemInsideRange(item)\"\n                [class.t-cell_today]=\"isItemToday(item)\"\n                (click)=\"onItemClick(item)\"\n                (tuiHoveredChange)=\"onItemHovered($event, item)\"\n                (tuiPressedChange)=\"onItemHovered($event, item)\"\n            >\n                <div class=\"t-item\">{{ month }}</div>\n            </div>\n        </ng-container>\n    </div>\n</ng-template>\n", styles: [":host{display:block;font:var(--tui-font-text-m)}.t-row{position:relative;display:flex;justify-content:space-between;height:2.25rem;isolation:isolate}.t-item{position:relative;flex:1;line-height:2rem;border-radius:var(--tui-radius-m)}.t-item:before,.t-item:after{content:\"\";position:absolute;top:0;left:0;right:0;bottom:0;z-index:-1;border-radius:var(--tui-radius-m)}.t-item:after{border-radius:.5rem}.t-cell{position:relative;display:flex;align-items:center;justify-content:center;width:3.9375rem;text-align:center;outline:none;cursor:pointer;background-clip:content-box;box-sizing:border-box;border:.125rem solid transparent}.t-cell:before{content:\"\";position:absolute;top:0;left:0;right:0;bottom:0;z-index:-1;border-radius:var(--tui-radius-m)}.t-cell_today:after{position:absolute;left:50%;transform:translate(-50%);content:\"\";bottom:.3125rem;height:.125rem;width:.75rem;border-radius:.375rem;background-color:var(--tui-text-01)}.t-cell_interval:before{background:var(--tui-base-02)}:host._single .t-cell_interval:before{background:var(--tui-secondary-hover)}.t-cell_interval:not(:last-child):before{right:-.25rem;border-top-right-radius:0;border-bottom-right-radius:0}.t-cell_interval:not([data-range=\"start\"]):not(:first-child):before{border-top-left-radius:0;border-bottom-left-radius:0}.t-cell_interval:last-child:first-child:before{right:0}.t-cell_interval:first-child>.t-item{border-top-left-radius:var(--tui-radius-m);border-bottom-left-radius:var(--tui-radius-m)}.t-cell_interval:last-child>.t-item{border-top-right-radius:var(--tui-radius-m);border-bottom-right-radius:var(--tui-radius-m)}.t-cell_interval>.t-item{border-radius:0}.t-cell[data-range]:after{background-color:var(--tui-primary-text)}.t-cell[data-range]>.t-item{color:var(--tui-primary-text)}.t-cell[data-range]>.t-item:before,.t-cell[data-range]>.t-item:after{background-color:var(--tui-primary)}.t-cell[data-range][data-state=hover]>.t-item:before,.t-cell[data-range][data-state=hover]>.t-item:after{background-color:var(--tui-primary-hover)}.t-cell[data-range][data-state=active]>.t-item:before,.t-cell[data-range][data-state=active]>.t-item:after{background-color:var(--tui-primary-active)}.t-cell[data-range=end]:before{background:var(--tui-base-02)}:host._single .t-cell[data-range=end]:before{background:var(--tui-secondary-hover)}.t-cell[data-range=end]:not(:first-child):before{border-top-left-radius:0;border-bottom-left-radius:0}.t-cell[data-range=end]>.t-item:before{left:.625rem;border-top-left-radius:0;border-bottom-left-radius:0}.t-cell[data-range=end]>.t-item:after{left:-2rem;right:100%;transform:translate(1.6rem) scaleY(.83) scaleX(.5) rotate(45deg)}.t-cell[data-range=start]>.t-item:before{right:.625rem;border-top-right-radius:0;border-bottom-right-radius:0}.t-cell[data-range=start]>.t-item:after{left:100%;right:-2rem;transform:translate(-1.6rem) scaleY(.83) scaleX(.5) rotate(45deg)}.t-cell[data-range=single]>.t-item:after{display:none}.t-cell[data-state=disabled]{pointer-events:none}.t-cell[data-state=disabled]>.t-item{opacity:.36}.t-cell[data-state=hover]:hover:not([data-range])>.t-item{background-color:var(--tui-secondary-hover)}.t-cell[data-state=active]:hover:not([data-range])>.t-item{background-color:var(--tui-secondary-active)}:host{display:block;height:13.625rem;width:15.75rem;padding:1.125rem;box-sizing:content-box}.t-row{flex-wrap:wrap;margin-top:1.4375rem}.t-cell:nth-child(n + 5){margin-top:1.75rem}.t-cell_interval:nth-child(4n):before{right:0}.t-scrollbar{height:inherit;width:inherit}\n"], components: [{ type: i1.TuiScrollbarComponent, selector: "tui-scrollbar", inputs: ["hidden"] }, { type: i1.TuiPrimitiveYearPickerComponent, selector: "tui-primitive-year-picker", inputs: ["value", "initialItem", "min", "max", "disabledItemHandler"], outputs: ["yearClick"] }, { type: i1.TuiPrimitiveSpinButtonComponent, selector: "tui-primitive-spin-button", inputs: ["disabled", "leftDisabled", "rightDisabled"], outputs: ["leftClick", "rightClick"] }, { type: i1.TuiLinkComponent, selector: "a[tuiLink], button[tuiLink]", inputs: ["pseudo", "icon", "iconAlign", "iconRotated", "mode"], exportAs: ["tuiLink"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.TuiFocusableDirective, selector: "[tuiFocusable]", inputs: ["tuiFocusable"] }, { type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3.TuiLetDirective, selector: "[tuiLet]", inputs: ["tuiLet"] }, { type: i3.TuiHoveredDirective, selector: "[tuiHoveredChange]", outputs: ["tuiHoveredChange"] }, { type: i3.TuiPressedDirective, selector: "[tuiPressedChange]", outputs: ["tuiPressedChange"] }], pipes: { "async": i2.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiPure
], TuiCalendarMonthComponent.prototype, "calculateDisabledItemHandlerWithMinMax", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiCalendarMonthComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-calendar-month',
                    templateUrl: './calendar-month.template.html',
                    styleUrls: ['./calendar-month.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i4.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_CALENDAR_MONTHS]
                }] }]; }, propDecorators: { value: [{
                type: Input
            }], year: [{
                type: Input
            }], disabledItemHandler: [{
                type: Input
            }], min: [{
                type: Input
            }], max: [{
                type: Input
            }], monthClick: [{
                type: Output
            }], hoveredItemChange: [{
                type: Output
            }], yearChange: [{
                type: Output
            }], isSingle: [{
                type: HostBinding,
                args: ['class._single']
            }], calculateDisabledItemHandlerWithMinMax: [] } });
//# sourceMappingURL=data:application/json;base64,