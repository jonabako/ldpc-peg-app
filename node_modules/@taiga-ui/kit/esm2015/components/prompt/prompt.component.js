import { ChangeDetectionStrategy, Component, Inject } from '@angular/core';
import { TUI_IS_MOBILE } from '@taiga-ui/cdk';
import { TuiAppearance } from '@taiga-ui/core';
import { TUI_PROMPT_WORDS } from '@taiga-ui/kit/tokens';
import { POLYMORPHEUS_CONTEXT, PolymorpheusComponent, } from '@tinkoff/ng-polymorpheus';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core";
import * as i2 from "@tinkoff/ng-polymorpheus";
import * as i3 from "@angular/common";
import * as i4 from "@taiga-ui/cdk";
import * as i5 from "rxjs";
// TODO: Rename to tui-confirm in 4.0
export class TuiPromptComponent {
    constructor(words$, context, isMobile) {
        this.words$ = words$;
        this.context = context;
        this.isMobile = isMobile;
    }
    get appearance() {
        return this.isMobile ? TuiAppearance.Secondary : TuiAppearance.Flat;
    }
}
TuiPromptComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPromptComponent, deps: [{ token: TUI_PROMPT_WORDS }, { token: POLYMORPHEUS_CONTEXT }, { token: TUI_IS_MOBILE }], target: i0.ɵɵFactoryTarget.Component });
TuiPromptComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiPromptComponent, selector: "tui-prompt", ngImport: i0, template: "<div\n    *polymorpheusOutlet=\"context.data?.content as text\"\n    class=\"t-content\"\n    [innerHTML]=\"text\"\n></div>\n<div\n    *ngIf=\"words$ | async as words\"\n    class=\"t-buttons\"\n>\n    <button\n        size=\"m\"\n        tuiButton\n        type=\"button\"\n        class=\"t-button\"\n        [appearance]=\"appearance\"\n        (click)=\"context.completeWith(false)\"\n    >\n        {{ context.data?.no || words.no }}\n    </button>\n    <button\n        size=\"m\"\n        tuiAutoFocus\n        tuiButton\n        type=\"button\"\n        class=\"t-button\"\n        (click)=\"context.completeWith(true)\"\n    >\n        {{ context.data?.yes || words.yes }}\n    </button>\n</div>\n", styles: [".t-content:not(:empty){margin-bottom:.875rem}.t-buttons{display:flex;justify-content:flex-end;flex-wrap:wrap-reverse;margin:.375rem -.375rem -.375rem}.t-button{margin:.375rem;white-space:nowrap}:host-context(tui-root._mobile) .t-button{flex:1}\n"], components: [{ type: i1.TuiButtonComponent, selector: "button[tuiButton], button[tuiIconButton], a[tuiButton], a[tuiIconButton]", inputs: ["appearance", "disabled", "icon", "iconRight", "shape", "showLoader", "size"] }], directives: [{ type: i2.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.TuiAutoFocusDirective, selector: "[tuiAutoFocus]", inputs: ["tuiAutoFocus"] }], pipes: { "async": i3.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPromptComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-prompt',
                    templateUrl: './prompt.template.html',
                    styleUrls: ['./prompt.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i5.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_PROMPT_WORDS]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [POLYMORPHEUS_CONTEXT]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_IS_MOBILE]
                }] }]; } });
export const TUI_PROMPT = new PolymorpheusComponent(TuiPromptComponent);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvbXB0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2tpdC9jb21wb25lbnRzL3Byb21wdC9wcm9tcHQuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMva2l0L2NvbXBvbmVudHMvcHJvbXB0L3Byb21wdC50ZW1wbGF0ZS5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3pFLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDNUMsT0FBTyxFQUFDLGFBQWEsRUFBbUIsTUFBTSxnQkFBZ0IsQ0FBQztBQUMvRCxPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUN0RCxPQUFPLEVBQ0gsb0JBQW9CLEVBQ3BCLHFCQUFxQixHQUV4QixNQUFNLDBCQUEwQixDQUFDOzs7Ozs7O0FBU2xDLHFDQUFxQztBQU9yQyxNQUFNLE9BQU8sa0JBQWtCO0lBQzNCLFlBQ3VDLE1BQTZDLEVBRXZFLE9BQTZELEVBQzlCLFFBQWlCO1FBSHRCLFdBQU0sR0FBTixNQUFNLENBQXVDO1FBRXZFLFlBQU8sR0FBUCxPQUFPLENBQXNEO1FBQzlCLGFBQVEsR0FBUixRQUFRLENBQVM7SUFDMUQsQ0FBQztJQUVKLElBQUksVUFBVTtRQUNWLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQztJQUN4RSxDQUFDOztnSEFWUSxrQkFBa0Isa0JBRWYsZ0JBQWdCLGFBQ2hCLG9CQUFvQixhQUVwQixhQUFhO29HQUxoQixrQkFBa0Isa0RDeEIvQixvc0JBOEJBOzRGRE5hLGtCQUFrQjtrQkFOOUIsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsWUFBWTtvQkFDdEIsV0FBVyxFQUFFLHdCQUF3QjtvQkFDckMsU0FBUyxFQUFFLENBQUMscUJBQXFCLENBQUM7b0JBQ2xDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2lCQUNsRDs7MEJBR1EsTUFBTTsyQkFBQyxnQkFBZ0I7OzBCQUN2QixNQUFNOzJCQUFDLG9CQUFvQjs7MEJBRTNCLE1BQU07MkJBQUMsYUFBYTs7QUFRN0IsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLElBQUkscUJBQXFCLENBQUMsa0JBQWtCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgSW5qZWN0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7VFVJX0lTX01PQklMRX0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge1R1aUFwcGVhcmFuY2UsIFR1aURpYWxvZ0NvbnRleHR9IGZyb20gJ0B0YWlnYS11aS9jb3JlJztcbmltcG9ydCB7VFVJX1BST01QVF9XT1JEU30gZnJvbSAnQHRhaWdhLXVpL2tpdC90b2tlbnMnO1xuaW1wb3J0IHtcbiAgICBQT0xZTU9SUEhFVVNfQ09OVEVYVCxcbiAgICBQb2x5bW9ycGhldXNDb21wb25lbnQsXG4gICAgUG9seW1vcnBoZXVzQ29udGVudCxcbn0gZnJvbSAnQHRpbmtvZmYvbmctcG9seW1vcnBoZXVzJztcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVHVpUHJvbXB0RGF0YSB7XG4gICAgcmVhZG9ubHkgY29udGVudD86IFBvbHltb3JwaGV1c0NvbnRlbnQ7XG4gICAgcmVhZG9ubHkgbm8/OiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgeWVzPzogc3RyaW5nO1xufVxuXG4vLyBUT0RPOiBSZW5hbWUgdG8gdHVpLWNvbmZpcm0gaW4gNC4wXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ3R1aS1wcm9tcHQnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9wcm9tcHQudGVtcGxhdGUuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vcHJvbXB0LnN0eWxlLmxlc3MnXSxcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbn0pXG5leHBvcnQgY2xhc3MgVHVpUHJvbXB0Q29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChUVUlfUFJPTVBUX1dPUkRTKSByZWFkb25seSB3b3JkcyQ6IE9ic2VydmFibGU8e25vOiBzdHJpbmc7IHllczogc3RyaW5nfT4sXG4gICAgICAgIEBJbmplY3QoUE9MWU1PUlBIRVVTX0NPTlRFWFQpXG4gICAgICAgIHJlYWRvbmx5IGNvbnRleHQ6IFR1aURpYWxvZ0NvbnRleHQ8Ym9vbGVhbiwgVHVpUHJvbXB0RGF0YSB8IHVuZGVmaW5lZD4sXG4gICAgICAgIEBJbmplY3QoVFVJX0lTX01PQklMRSkgcHJpdmF0ZSByZWFkb25seSBpc01vYmlsZTogYm9vbGVhbixcbiAgICApIHt9XG5cbiAgICBnZXQgYXBwZWFyYW5jZSgpOiBUdWlBcHBlYXJhbmNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNNb2JpbGUgPyBUdWlBcHBlYXJhbmNlLlNlY29uZGFyeSA6IFR1aUFwcGVhcmFuY2UuRmxhdDtcbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBUVUlfUFJPTVBUID0gbmV3IFBvbHltb3JwaGV1c0NvbXBvbmVudChUdWlQcm9tcHRDb21wb25lbnQpO1xuIiwiPGRpdlxuICAgICpwb2x5bW9ycGhldXNPdXRsZXQ9XCJjb250ZXh0LmRhdGE/LmNvbnRlbnQgYXMgdGV4dFwiXG4gICAgY2xhc3M9XCJ0LWNvbnRlbnRcIlxuICAgIFtpbm5lckhUTUxdPVwidGV4dFwiXG4+PC9kaXY+XG48ZGl2XG4gICAgKm5nSWY9XCJ3b3JkcyQgfCBhc3luYyBhcyB3b3Jkc1wiXG4gICAgY2xhc3M9XCJ0LWJ1dHRvbnNcIlxuPlxuICAgIDxidXR0b25cbiAgICAgICAgc2l6ZT1cIm1cIlxuICAgICAgICB0dWlCdXR0b25cbiAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgIGNsYXNzPVwidC1idXR0b25cIlxuICAgICAgICBbYXBwZWFyYW5jZV09XCJhcHBlYXJhbmNlXCJcbiAgICAgICAgKGNsaWNrKT1cImNvbnRleHQuY29tcGxldGVXaXRoKGZhbHNlKVwiXG4gICAgPlxuICAgICAgICB7eyBjb250ZXh0LmRhdGE/Lm5vIHx8IHdvcmRzLm5vIH19XG4gICAgPC9idXR0b24+XG4gICAgPGJ1dHRvblxuICAgICAgICBzaXplPVwibVwiXG4gICAgICAgIHR1aUF1dG9Gb2N1c1xuICAgICAgICB0dWlCdXR0b25cbiAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgIGNsYXNzPVwidC1idXR0b25cIlxuICAgICAgICAoY2xpY2spPVwiY29udGV4dC5jb21wbGV0ZVdpdGgodHJ1ZSlcIlxuICAgID5cbiAgICAgICAge3sgY29udGV4dC5kYXRhPy55ZXMgfHwgd29yZHMueWVzIH19XG4gICAgPC9idXR0b24+XG48L2Rpdj5cbiJdfQ==