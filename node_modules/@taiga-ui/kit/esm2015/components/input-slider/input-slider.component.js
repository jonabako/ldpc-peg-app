import { __decorate } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, Inject, Input, Optional, Self, ViewChild, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AbstractTuiControl, tuiAsControl, tuiAsFocusableItemAccessor, tuiClamp, tuiIsNativeFocused, tuiPure, tuiRound, } from '@taiga-ui/cdk';
import { TEXTFIELD_CONTROLLER_PROVIDER, TUI_TEXTFIELD_WATCHED_CONTROLLER, tuiGetFractionPartPadded, } from '@taiga-ui/core';
import { TuiInputNumberComponent } from '@taiga-ui/kit/components/input-number';
import { TuiSliderComponent, tuiSliderOptionsProvider, } from '@taiga-ui/kit/components/slider';
import { TUI_FLOATING_PRECISION } from '@taiga-ui/kit/constants';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/kit/components/input-number";
import * as i2 from "@taiga-ui/kit/components/slider";
import * as i3 from "@taiga-ui/core";
import * as i4 from "@angular/forms";
import * as i5 from "@angular/common";
import * as i6 from "@tinkoff/ng-polymorpheus";
import * as i7 from "@taiga-ui/cdk";
export class TuiInputSliderComponent extends AbstractTuiControl {
    constructor(control, cdr, controller) {
        super(control, cdr);
        this.controller = controller;
        this.min = 0;
        this.max = 100;
        this.quantum = 1;
        this.steps = 0;
        this.segments = 1;
        this.keySteps = null;
        /** @deprecated use `tuiTextfieldPrefix` from {@link TuiTextfieldControllerModule} instead */
        this.textfieldPrefix = '';
        /** @deprecated use `tuiTextfieldPostfix` from {@link TuiTextfieldControllerModule} instead */
        this.textfieldPostfix = '';
        this.textfieldValue = this.safeCurrentValue;
    }
    get prefix() {
        return this.textfieldPrefix || this.controller.prefix;
    }
    get postfix() {
        return this.textfieldPostfix || this.controller.postfix;
    }
    get nativeFocusableElement() {
        var _a;
        return !((_a = this.inputNumberRef) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement) || this.computedDisabled
            ? null
            : this.inputNumberRef.nativeFocusableElement;
    }
    get focused() {
        var _a;
        return (tuiIsNativeFocused(this.nativeFocusableElement) ||
            tuiIsNativeFocused(((_a = this.sliderRef) === null || _a === void 0 ? void 0 : _a.nativeElement) || null));
    }
    get computedSteps() {
        return this.steps || (this.max - this.min) / this.quantum;
    }
    get precision() {
        return tuiGetFractionPartPadded(this.quantum).length;
    }
    get decimal() {
        return this.precision ? 'not-zero' : 'never';
    }
    get showValueContent() {
        return Boolean(this.valueContent && !this.focused);
    }
    get step() {
        return (this.max - this.min) / this.computedSteps;
    }
    computeKeySteps(keySteps, min, max) {
        return (keySteps || [
            [0, min],
            [100, max],
        ]);
    }
    focusTextInput() {
        var _a;
        const focusableElement = (_a = this.inputNumberRef) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement;
        if (focusableElement) {
            focusableElement.focus();
        }
    }
    safelyUpdateValue(value) {
        this.value = this.valueGuard(value !== null && value !== void 0 ? value : this.safeCurrentValue);
    }
    onVerticalArrowKeyDown(coefficient) {
        if (this.readOnly || !this.step) {
            return;
        }
        const value = this.value + coefficient * this.step;
        if (value !== this.value) {
            this.safelyUpdateValue(value);
            this.textfieldValue = this.value;
        }
    }
    onSliderChange(newValue) {
        this.safelyUpdateValue(newValue);
        this.textfieldValue = this.value;
    }
    onFocused(focused) {
        const { value, textfieldValue } = this;
        if (!focused && textfieldValue !== value) {
            this.textfieldValue = value;
        }
        this.updateFocused(focused);
    }
    writeValue(value) {
        super.writeValue(value);
        this.textfieldValue = this.value;
    }
    getFallbackValue() {
        return 0;
    }
    valueGuard(value) {
        const roundedValue = tuiRound(Math.round(value / this.quantum) * this.quantum, TUI_FLOATING_PRECISION);
        return tuiClamp(roundedValue, this.min, this.max);
    }
}
TuiInputSliderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputSliderComponent, deps: [{ token: NgControl, optional: true, self: true }, { token: ChangeDetectorRef }, { token: TUI_TEXTFIELD_WATCHED_CONTROLLER }], target: i0.ɵɵFactoryTarget.Component });
TuiInputSliderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiInputSliderComponent, selector: "tui-input-slider", inputs: { min: "min", max: "max", quantum: "quantum", steps: "steps", segments: "segments", keySteps: "keySteps", valueContent: "valueContent", textfieldPrefix: ["prefix", "textfieldPrefix"], textfieldPostfix: ["postfix", "textfieldPostfix"] }, host: { properties: { "attr.data-size": "controller.size", "class._label-outside": "controller.labelOutside" } }, providers: [
        tuiAsFocusableItemAccessor(TuiInputSliderComponent),
        tuiAsControl(TuiInputSliderComponent),
        tuiSliderOptionsProvider({ trackColor: 'transparent' }),
        TEXTFIELD_CONTROLLER_PROVIDER,
    ], viewQueries: [{ propertyName: "inputNumberRef", first: true, predicate: TuiInputNumberComponent, descendants: true }, { propertyName: "sliderRef", first: true, predicate: TuiSliderComponent, descendants: true, read: ElementRef }], usesInheritance: true, ngImport: i0, template: "<tui-input-number\n    [decimal]=\"decimal\"\n    [disabled]=\"computedDisabled\"\n    [max]=\"max\"\n    [min]=\"min\"\n    [precision]=\"precision\"\n    [pseudoActive]=\"pseudoActive\"\n    [pseudoFocus]=\"computedFocused\"\n    [pseudoHover]=\"pseudoHover\"\n    [pseudoInvalid]=\"pseudoInvalid\"\n    [readOnly]=\"readOnly\"\n    [tuiTextfieldPostfix]=\"showValueContent ? '' : postfix\"\n    [tuiTextfieldPrefix]=\"showValueContent ? '' : prefix\"\n    [(ngModel)]=\"textfieldValue\"\n    (focusedChange)=\"onFocused($event)\"\n    (keydown.arrowDown.prevent)=\"onVerticalArrowKeyDown(-1)\"\n    (keydown.arrowUp.prevent)=\"onVerticalArrowKeyDown(1)\"\n    (ngModelChange)=\"safelyUpdateValue($event)\"\n>\n    <ng-content></ng-content>\n    <div\n        *ngIf=\"showValueContent\"\n        automation-id=\"tui-input-slider__value-content\"\n        ngProjectAs=\"tuiContent\"\n    >\n        <ng-container *polymorpheusOutlet=\"valueContent as text; context: {$implicit: value}\">\n            {{ text }}\n        </ng-container>\n    </div>\n</tui-input-number>\n\n<input\n    tuiSlider\n    type=\"range\"\n    [disabled]=\"readOnly || computedDisabled\"\n    [keySteps]=\"computeKeySteps(keySteps, min, max)\"\n    [max]=\"computedSteps\"\n    [ngModel]=\"value\"\n    [segments]=\"segments\"\n    [tuiFocusable]=\"false\"\n    (click)=\"focusTextInput()\"\n    (ngModelChange)=\"onSliderChange($event)\"\n/>\n", styles: [":host{position:relative;display:block;height:-webkit-max-content;height:max-content;isolation:isolate}input[type=range]{position:absolute;top:100%;left:calc(var(--tui-radius-m) / 2);right:0;width:calc(100% - calc(var(--tui-radius-m) / 2));box-sizing:border-box;height:1rem;margin:-.5625rem 0 0;border-top-left-radius:0;border-bottom-left-radius:calc(var(--tui-radius-m) * 5) calc(var(--tui-radius-m) * 1.5)}\n"], components: [{ type: i1.TuiInputNumberComponent, selector: "tui-input-number", inputs: ["min", "max", "decimal", "precision", "step", "prefix", "postfix"] }, { type: i2.TuiSliderComponent, selector: "input[type=range][tuiSlider]", inputs: ["size", "segments"] }], directives: [{ type: i1.TuiInputNumberDirective, selector: "tui-input-number" }, { type: i3.TuiTextfieldPostfixDirective, selector: "[tuiTextfieldPostfix]", inputs: ["tuiTextfieldPostfix"] }, { type: i3.TuiTextfieldPrefixDirective, selector: "[tuiTextfieldPrefix]", inputs: ["tuiTextfieldPrefix"] }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i6.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { type: i2.TuiSliderKeyStepsDirective, selector: "input[tuiSlider][keySteps]", inputs: ["keySteps"] }, { type: i4.RangeValueAccessor, selector: "input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]" }, { type: i4.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i7.TuiFocusableDirective, selector: "[tuiFocusable]", inputs: ["tuiFocusable"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiPure
], TuiInputSliderComponent.prototype, "computeKeySteps", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputSliderComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-input-slider',
                    templateUrl: './input-slider.template.html',
                    styleUrls: ['./input-slider.style.less'],
                    host: {
                        '[attr.data-size]': 'controller.size',
                        '[class._label-outside]': 'controller.labelOutside',
                    },
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        tuiAsFocusableItemAccessor(TuiInputSliderComponent),
                        tuiAsControl(TuiInputSliderComponent),
                        tuiSliderOptionsProvider({ trackColor: 'transparent' }),
                        TEXTFIELD_CONTROLLER_PROVIDER,
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i4.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }, {
                    type: Inject,
                    args: [NgControl]
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: i3.TuiTextfieldController, decorators: [{
                    type: Inject,
                    args: [TUI_TEXTFIELD_WATCHED_CONTROLLER]
                }] }]; }, propDecorators: { inputNumberRef: [{
                type: ViewChild,
                args: [TuiInputNumberComponent]
            }], sliderRef: [{
                type: ViewChild,
                args: [TuiSliderComponent, { read: ElementRef }]
            }], min: [{
                type: Input
            }], max: [{
                type: Input
            }], quantum: [{
                type: Input
            }], steps: [{
                type: Input
            }], segments: [{
                type: Input
            }], keySteps: [{
                type: Input
            }], valueContent: [{
                type: Input
            }], textfieldPrefix: [{
                type: Input,
                args: ['prefix']
            }], textfieldPostfix: [{
                type: Input,
                args: ['postfix']
            }], computeKeySteps: [] } });
//# sourceMappingURL=data:application/json;base64,