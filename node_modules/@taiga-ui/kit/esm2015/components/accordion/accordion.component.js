import { ChangeDetectionStrategy, Component, ContentChildren, Inject, Input, Self, } from '@angular/core';
import { EMPTY_QUERY, TuiDestroyService, tuiIsPresent, tuiQueryListChanges, } from '@taiga-ui/cdk';
import { identity, merge } from 'rxjs';
import { filter, map, pairwise, switchMap, takeUntil } from 'rxjs/operators';
import { TuiAccordionItemComponent } from './accordion-item/accordion-item.component';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core";
import * as i2 from "@taiga-ui/cdk";
export class TuiAccordionComponent {
    constructor(destroy$) {
        this.destroy$ = destroy$;
        this.closeOthers = true;
        this.rounded = true;
        this.accordionItems = EMPTY_QUERY;
    }
    ngAfterContentInit() {
        const { accordionItems } = this;
        const rows$ = tuiQueryListChanges(accordionItems);
        const newOpenRow$ = rows$.pipe(pairwise(), map(([previous, current]) => current.find(item => !previous.includes(item) && item.open)), filter(tuiIsPresent));
        const rowsOpen$ = merge(rows$.pipe(switchMap(rows => merge(...rows.map(row => row.openChange.pipe(filter(identity), map(() => row)))))), newOpenRow$).pipe(filter(() => this.closeOthers), takeUntil(this.destroy$));
        rowsOpen$.subscribe(currentRow => {
            accordionItems.forEach(row => {
                if (currentRow !== row) {
                    row.close();
                }
            });
        });
    }
}
TuiAccordionComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiAccordionComponent, deps: [{ token: TuiDestroyService, self: true }], target: i0.ɵɵFactoryTarget.Component });
TuiAccordionComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiAccordionComponent, selector: "tui-accordion", inputs: { closeOthers: "closeOthers", rounded: "rounded" }, providers: [TuiDestroyService], queries: [{ propertyName: "accordionItems", predicate: TuiAccordionItemComponent }], ngImport: i0, template: "<!--TODO: Unnecessary nesting, probably accordion can be a directive-->\n<div\n    automation-id=\"tui-accordion__group\"\n    orientation=\"vertical\"\n    size=\"l\"\n    tuiGroup\n    class=\"t-group\"\n    [collapsed]=\"true\"\n    [rounded]=\"rounded\"\n>\n    <ng-content select=\"tui-accordion-item\"></ng-content>\n</div>\n", styles: [":host{display:block}.t-group{display:flex}\n"], directives: [{ type: i1.TuiGroupDirective, selector: "[tuiGroup]:not(ng-container)", inputs: ["orientation", "adaptive", "collapsed", "rounded", "size"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiAccordionComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-accordion',
                    templateUrl: './accordion.template.html',
                    styleUrls: ['./accordion.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [TuiDestroyService],
                }]
        }], ctorParameters: function () { return [{ type: i2.TuiDestroyService, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiDestroyService]
                }] }]; }, propDecorators: { closeOthers: [{
                type: Input
            }], rounded: [{
                type: Input
            }], accordionItems: [{
                type: ContentChildren,
                args: [TuiAccordionItemComponent]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3JkaW9uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2tpdC9jb21wb25lbnRzL2FjY29yZGlvbi9hY2NvcmRpb24uY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMva2l0L2NvbXBvbmVudHMvYWNjb3JkaW9uL2FjY29yZGlvbi50ZW1wbGF0ZS5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFFSCx1QkFBdUIsRUFDdkIsU0FBUyxFQUNULGVBQWUsRUFDZixNQUFNLEVBQ04sS0FBSyxFQUVMLElBQUksR0FDUCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQ0gsV0FBVyxFQUNYLGlCQUFpQixFQUNqQixZQUFZLEVBQ1osbUJBQW1CLEdBQ3RCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBQyxRQUFRLEVBQUUsS0FBSyxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBQ3JDLE9BQU8sRUFBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFFM0UsT0FBTyxFQUFDLHlCQUF5QixFQUFDLE1BQU0sMkNBQTJDLENBQUM7Ozs7QUFTcEYsTUFBTSxPQUFPLHFCQUFxQjtJQVU5QixZQUdxQixRQUEyQjtRQUEzQixhQUFRLEdBQVIsUUFBUSxDQUFtQjtRQVhoRCxnQkFBVyxHQUFHLElBQUksQ0FBQztRQUduQixZQUFPLEdBQUcsSUFBSSxDQUFDO1FBR04sbUJBQWMsR0FBeUMsV0FBVyxDQUFDO0lBTXpFLENBQUM7SUFFSixrQkFBa0I7UUFDZCxNQUFNLEVBQUMsY0FBYyxFQUFDLEdBQUcsSUFBSSxDQUFDO1FBQzlCLE1BQU0sS0FBSyxHQUFHLG1CQUFtQixDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ2xELE1BQU0sV0FBVyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQzFCLFFBQVEsRUFBRSxFQUNWLEdBQUcsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxFQUFFLEVBQUUsQ0FDeEIsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQzlELEVBQ0QsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUN2QixDQUFDO1FBQ0YsTUFBTSxTQUFTLEdBQUcsS0FBSyxDQUNuQixLQUFLLENBQUMsSUFBSSxDQUNOLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUNiLEtBQUssQ0FDRCxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FDZCxHQUFHLENBQUMsVUFBVSxDQUFDLElBQUksQ0FDZixNQUFNLENBQUMsUUFBUSxDQUFDLEVBQ2hCLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FDakIsQ0FDSixDQUNKLENBQ0osQ0FDSixFQUNELFdBQVcsQ0FDZCxDQUFDLElBQUksQ0FDRixNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUM5QixTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUMzQixDQUFDO1FBRUYsU0FBUyxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUM3QixjQUFjLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUN6QixJQUFJLFVBQVUsS0FBSyxHQUFHLEVBQUU7b0JBQ3BCLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztpQkFDZjtZQUNMLENBQUMsQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDOzttSEFwRFEscUJBQXFCLGtCQVlsQixpQkFBaUI7dUdBWnBCLHFCQUFxQixvR0FGbkIsQ0FBQyxpQkFBaUIsQ0FBQyx5REFTYix5QkFBeUIsNkJDbkM5Qyw2VUFZQTs0RkRnQmEscUJBQXFCO2tCQVBqQyxTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSxlQUFlO29CQUN6QixXQUFXLEVBQUUsMkJBQTJCO29CQUN4QyxTQUFTLEVBQUUsQ0FBQyx3QkFBd0IsQ0FBQztvQkFDckMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07b0JBQy9DLFNBQVMsRUFBRSxDQUFDLGlCQUFpQixDQUFDO2lCQUNqQzs7MEJBWVEsSUFBSTs7MEJBQ0osTUFBTTsyQkFBQyxpQkFBaUI7NENBVjdCLFdBQVc7c0JBRFYsS0FBSztnQkFJTixPQUFPO3NCQUROLEtBQUs7Z0JBSUcsY0FBYztzQkFEdEIsZUFBZTt1QkFBQyx5QkFBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIEFmdGVyQ29udGVudEluaXQsXG4gICAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gICAgQ29tcG9uZW50LFxuICAgIENvbnRlbnRDaGlsZHJlbixcbiAgICBJbmplY3QsXG4gICAgSW5wdXQsXG4gICAgUXVlcnlMaXN0LFxuICAgIFNlbGYsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgICBFTVBUWV9RVUVSWSxcbiAgICBUdWlEZXN0cm95U2VydmljZSxcbiAgICB0dWlJc1ByZXNlbnQsXG4gICAgdHVpUXVlcnlMaXN0Q2hhbmdlcyxcbn0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge2lkZW50aXR5LCBtZXJnZX0gZnJvbSAncnhqcyc7XG5pbXBvcnQge2ZpbHRlciwgbWFwLCBwYWlyd2lzZSwgc3dpdGNoTWFwLCB0YWtlVW50aWx9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHtUdWlBY2NvcmRpb25JdGVtQ29tcG9uZW50fSBmcm9tICcuL2FjY29yZGlvbi1pdGVtL2FjY29yZGlvbi1pdGVtLmNvbXBvbmVudCc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAndHVpLWFjY29yZGlvbicsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2FjY29yZGlvbi50ZW1wbGF0ZS5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9hY2NvcmRpb24uc3R5bGUubGVzcyddLFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICAgIHByb3ZpZGVyczogW1R1aURlc3Ryb3lTZXJ2aWNlXSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpQWNjb3JkaW9uQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCB7XG4gICAgQElucHV0KClcbiAgICBjbG9zZU90aGVycyA9IHRydWU7XG5cbiAgICBASW5wdXQoKVxuICAgIHJvdW5kZWQgPSB0cnVlO1xuXG4gICAgQENvbnRlbnRDaGlsZHJlbihUdWlBY2NvcmRpb25JdGVtQ29tcG9uZW50KVxuICAgIHJlYWRvbmx5IGFjY29yZGlvbkl0ZW1zOiBRdWVyeUxpc3Q8VHVpQWNjb3JkaW9uSXRlbUNvbXBvbmVudD4gPSBFTVBUWV9RVUVSWTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBAU2VsZigpXG4gICAgICAgIEBJbmplY3QoVHVpRGVzdHJveVNlcnZpY2UpXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgZGVzdHJveSQ6IFR1aURlc3Ryb3lTZXJ2aWNlLFxuICAgICkge31cblxuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkIHtcbiAgICAgICAgY29uc3Qge2FjY29yZGlvbkl0ZW1zfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHJvd3MkID0gdHVpUXVlcnlMaXN0Q2hhbmdlcyhhY2NvcmRpb25JdGVtcyk7XG4gICAgICAgIGNvbnN0IG5ld09wZW5Sb3ckID0gcm93cyQucGlwZShcbiAgICAgICAgICAgIHBhaXJ3aXNlKCksXG4gICAgICAgICAgICBtYXAoKFtwcmV2aW91cywgY3VycmVudF0pID0+XG4gICAgICAgICAgICAgICAgY3VycmVudC5maW5kKGl0ZW0gPT4gIXByZXZpb3VzLmluY2x1ZGVzKGl0ZW0pICYmIGl0ZW0ub3BlbiksXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgZmlsdGVyKHR1aUlzUHJlc2VudCksXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IHJvd3NPcGVuJCA9IG1lcmdlKFxuICAgICAgICAgICAgcm93cyQucGlwZShcbiAgICAgICAgICAgICAgICBzd2l0Y2hNYXAocm93cyA9PlxuICAgICAgICAgICAgICAgICAgICBtZXJnZShcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLnJvd3MubWFwKHJvdyA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdy5vcGVuQ2hhbmdlLnBpcGUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlcihpZGVudGl0eSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcCgoKSA9PiByb3cpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgbmV3T3BlblJvdyQsXG4gICAgICAgICkucGlwZShcbiAgICAgICAgICAgIGZpbHRlcigoKSA9PiB0aGlzLmNsb3NlT3RoZXJzKSxcbiAgICAgICAgICAgIHRha2VVbnRpbCh0aGlzLmRlc3Ryb3kkKSxcbiAgICAgICAgKTtcblxuICAgICAgICByb3dzT3BlbiQuc3Vic2NyaWJlKGN1cnJlbnRSb3cgPT4ge1xuICAgICAgICAgICAgYWNjb3JkaW9uSXRlbXMuZm9yRWFjaChyb3cgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50Um93ICE9PSByb3cpIHtcbiAgICAgICAgICAgICAgICAgICAgcm93LmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiIsIjwhLS1UT0RPOiBVbm5lY2Vzc2FyeSBuZXN0aW5nLCBwcm9iYWJseSBhY2NvcmRpb24gY2FuIGJlIGEgZGlyZWN0aXZlLS0+XG48ZGl2XG4gICAgYXV0b21hdGlvbi1pZD1cInR1aS1hY2NvcmRpb25fX2dyb3VwXCJcbiAgICBvcmllbnRhdGlvbj1cInZlcnRpY2FsXCJcbiAgICBzaXplPVwibFwiXG4gICAgdHVpR3JvdXBcbiAgICBjbGFzcz1cInQtZ3JvdXBcIlxuICAgIFtjb2xsYXBzZWRdPVwidHJ1ZVwiXG4gICAgW3JvdW5kZWRdPVwicm91bmRlZFwiXG4+XG4gICAgPG5nLWNvbnRlbnQgc2VsZWN0PVwidHVpLWFjY29yZGlvbi1pdGVtXCI+PC9uZy1jb250ZW50PlxuPC9kaXY+XG4iXX0=