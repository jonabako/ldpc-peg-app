import { ChangeDetectionStrategy, ChangeDetectorRef, Component, HostBinding, Inject, Input, Optional, Self, ViewChild, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AbstractTuiNullableControl, ALWAYS_FALSE_HANDLER, TUI_IS_MOBILE, tuiAsControl, tuiAsFocusableItemAccessor, tuiDateClamp, TuiDay, TuiMonth, } from '@taiga-ui/cdk';
import { TUI_TEXTFIELD_SIZE, TuiMonthPipe, TuiPrimitiveTextfieldComponent, } from '@taiga-ui/core';
import { TUI_MONTH_FORMATTER_PROVIDER } from '@taiga-ui/kit/providers';
import { TUI_INPUT_DATE_OPTIONS, TUI_MONTH_FORMATTER, } from '@taiga-ui/kit/tokens';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core";
import * as i2 from "@taiga-ui/kit/components/calendar-month";
import * as i3 from "@angular/common";
import * as i4 from "@angular/forms";
import * as i5 from "@taiga-ui/cdk";
export class TuiInputMonthComponent extends AbstractTuiNullableControl {
    constructor(control, cdr, formatter, isMobile, options, textfieldSize) {
        super(control, cdr);
        this.formatter = formatter;
        this.isMobile = isMobile;
        this.options = options;
        this.textfieldSize = textfieldSize;
        this.min = this.options.min;
        this.max = this.options.max;
        this.disabledItemHandler = ALWAYS_FALSE_HANDLER;
        this.defaultActiveYear = TuiDay.currentLocal();
        this.open = false;
    }
    get size() {
        return this.textfieldSize.size;
    }
    get computedMin() {
        var _a;
        return (_a = this.min) !== null && _a !== void 0 ? _a : this.options.min;
    }
    get computedMax() {
        var _a;
        return (_a = this.max) !== null && _a !== void 0 ? _a : this.options.max;
    }
    get nativeFocusableElement() {
        var _a;
        return ((_a = this.textfield) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement) || null;
    }
    get computedDefaultActiveYear() {
        return (this.activeYear ||
            this.value ||
            tuiDateClamp(this.defaultActiveYear, this.computedMin, this.computedMax));
    }
    get focused() {
        var _a;
        return !!((_a = this.textfield) === null || _a === void 0 ? void 0 : _a.focused);
    }
    get calendarIcon() {
        return this.options.icon;
    }
    get nativePicker() {
        return this.isMobile && this.options.nativePicker;
    }
    get nativePickerMin() {
        return this.computedMin.toJSON();
    }
    get nativePickerMax() {
        return this.computedMax.toJSON();
    }
    get nativeValue() {
        var _a;
        return ((_a = this.value) === null || _a === void 0 ? void 0 : _a.toJSON()) || '';
    }
    onNativeChange(value) {
        const [year, month] = value.split('-').map(Number);
        this.value = value
            ? tuiDateClamp(new TuiMonth(year, month - 1), this.computedMin, this.computedMax)
            : null;
    }
    onValueChange(value) {
        if (value) {
            return;
        }
        this.value = null;
        this.onOpenChange(!this.nativePicker);
    }
    onMonthClick(month) {
        this.value = month;
        this.close();
    }
    onFocused(focused) {
        this.updateFocused(focused);
    }
    onOpenChange(open) {
        if (open && this.value) {
            this.activeYear = this.value;
        }
        this.open = open;
    }
    setDisabledState() {
        super.setDisabledState();
        this.close();
    }
    close() {
        this.open = false;
    }
}
TuiInputMonthComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputMonthComponent, deps: [{ token: NgControl, optional: true, self: true }, { token: ChangeDetectorRef }, { token: TUI_MONTH_FORMATTER }, { token: TUI_IS_MOBILE }, { token: TUI_INPUT_DATE_OPTIONS }, { token: TUI_TEXTFIELD_SIZE }], target: i0.ɵɵFactoryTarget.Component });
TuiInputMonthComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiInputMonthComponent, selector: "tui-input-month", inputs: { min: "min", max: "max", disabledItemHandler: "disabledItemHandler", defaultActiveYear: "defaultActiveYear" }, host: { properties: { "attr.data-size": "this.size" } }, providers: [
        tuiAsFocusableItemAccessor(TuiInputMonthComponent),
        tuiAsControl(TuiInputMonthComponent),
        TUI_MONTH_FORMATTER_PROVIDER,
        TuiMonthPipe,
    ], viewQueries: [{ propertyName: "textfield", first: true, predicate: TuiPrimitiveTextfieldComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: "<tui-hosted-dropdown\n    class=\"t-hosted\"\n    [canOpen]=\"interactive && !nativePicker\"\n    [content]=\"dropdown\"\n    [open]=\"open && interactive\"\n    (openChange)=\"onOpenChange($event)\"\n>\n    <tui-primitive-textfield\n        class=\"t-textfield\"\n        [disabled]=\"computedDisabled\"\n        [editable]=\"false\"\n        [invalid]=\"computedInvalid\"\n        [nativeId]=\"nativeId\"\n        [pseudoFocus]=\"pseudoFocus\"\n        [pseudoHover]=\"pseudoHover\"\n        [readOnly]=\"readOnly\"\n        [tuiTextfieldIcon]=\"calendarIcon\"\n        [value]=\"(value | tuiMapper: formatter | async) || ''\"\n        (focusedChange)=\"onFocused($event)\"\n        (valueChange)=\"onValueChange($event)\"\n    >\n        <ng-content></ng-content>\n        <ng-content\n            ngProjectAs=\"input\"\n            select=\"input\"\n        ></ng-content>\n        <input\n            *ngIf=\"nativePicker\"\n            type=\"month\"\n            class=\"t-mobile\"\n            [max]=\"nativePickerMax\"\n            [min]=\"nativePickerMin\"\n            [ngModel]=\"nativeValue\"\n            (click.stop.silent)=\"(0)\"\n            (mousedown.stop.silent)=\"(0)\"\n            (ngModelChange)=\"onNativeChange($event)\"\n        />\n    </tui-primitive-textfield>\n\n    <ng-template #dropdown>\n        <tui-calendar-month\n            tuiPreventDefault=\"mousedown\"\n            [disabledItemHandler]=\"disabledItemHandler\"\n            [max]=\"computedMax\"\n            [min]=\"computedMin\"\n            [value]=\"value\"\n            [year]=\"computedDefaultActiveYear\"\n            (monthClick)=\"onMonthClick($event)\"\n            (yearChange)=\"activeYear = $event\"\n        ></tui-calendar-month>\n    </ng-template>\n</tui-hosted-dropdown>\n", styles: [":host{display:block;border-radius:var(--tui-radius-m);text-align:left}.t-hosted{display:block;border-radius:inherit}.t-textfield{border-radius:inherit;text-align:inherit}.t-mobile{position:absolute;top:0;left:0;width:100%;height:100%;opacity:0;border:0}\n"], components: [{ type: i1.TuiHostedDropdownComponent, selector: "tui-hosted-dropdown", inputs: ["content", "sided", "canOpen", "open"], outputs: ["openChange", "focusedChange"] }, { type: i1.TuiPrimitiveTextfieldComponent, selector: "tui-primitive-textfield", inputs: ["editable", "filler", "iconCleaner", "readOnly", "invalid", "disabled", "prefix", "postfix", "value"], outputs: ["valueChange"] }, { type: i2.TuiCalendarMonthComponent, selector: "tui-calendar-month", inputs: ["value", "year", "disabledItemHandler", "min", "max"], outputs: ["monthClick", "hoveredItemChange", "yearChange"] }], directives: [{ type: i1.TuiPrimitiveTextfieldDirective, selector: "tui-primitive-textfield" }, { type: i1.TuiTextfieldIconDirective, selector: "[tuiTextfieldIcon]", inputs: ["tuiTextfieldIcon"] }, { type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i5.TuiPreventDefaultDirective, selector: "[tuiPreventDefault]", inputs: ["tuiPreventDefault"] }], pipes: { "async": i3.AsyncPipe, "tuiMapper": i5.TuiMapperPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputMonthComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-input-month',
                    templateUrl: './input-month.template.html',
                    styleUrls: ['./input-month.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        tuiAsFocusableItemAccessor(TuiInputMonthComponent),
                        tuiAsControl(TuiInputMonthComponent),
                        TUI_MONTH_FORMATTER_PROVIDER,
                        TuiMonthPipe,
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i4.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }, {
                    type: Inject,
                    args: [NgControl]
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_MONTH_FORMATTER]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_IS_MOBILE]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_INPUT_DATE_OPTIONS]
                }] }, { type: i1.TuiTextfieldSizeDirective, decorators: [{
                    type: Inject,
                    args: [TUI_TEXTFIELD_SIZE]
                }] }]; }, propDecorators: { textfield: [{
                type: ViewChild,
                args: [TuiPrimitiveTextfieldComponent]
            }], min: [{
                type: Input
            }], max: [{
                type: Input
            }], disabledItemHandler: [{
                type: Input
            }], defaultActiveYear: [{
                type: Input
            }], size: [{
                type: HostBinding,
                args: ['attr.data-size']
            }] } });
//# sourceMappingURL=data:application/json;base64,