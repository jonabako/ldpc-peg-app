import { __decorate } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, HostBinding, HostListener, Inject, Input, Optional, Self, ViewChild, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { maskitoTimeOptionsGenerator } from '@maskito/kit';
import { AbstractTuiNullableControl, ALWAYS_FALSE_HANDLER, TUI_IS_IOS, TUI_IS_MOBILE, TUI_STRICT_MATCHER, tuiAsControl, tuiAsFocusableItemAccessor, tuiIsElement, tuiIsInput, tuiIsNativeFocused, tuiPure, TuiTime, } from '@taiga-ui/cdk';
import { TUI_TEXTFIELD_SIZE, tuiAsDataListHost, tuiAsOptionContent, TuiPrimitiveTextfieldComponent, } from '@taiga-ui/core';
import { TUI_SELECT_OPTION } from '@taiga-ui/kit/components/select-option';
import { FIXED_DROPDOWN_CONTROLLER_PROVIDER } from '@taiga-ui/kit/providers';
import { TUI_TIME_TEXTS } from '@taiga-ui/kit/tokens';
import { timer } from 'rxjs';
import { map, takeUntil } from 'rxjs/operators';
import { TUI_INPUT_TIME_OPTIONS } from './input-time.options';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core";
import * as i2 from "./native-time/native-time.component";
import * as i3 from "@taiga-ui/kit/directives";
import * as i4 from "@maskito/angular";
import * as i5 from "@angular/common";
import * as i6 from "@tinkoff/ng-polymorpheus";
import * as i7 from "@angular/forms";
import * as i8 from "rxjs";
export class TuiInputTimeComponent extends AbstractTuiNullableControl {
    constructor(control, cdr, timeTexts$, options, isMobile, isIos, textfieldSize) {
        super(control, cdr);
        this.timeTexts$ = timeTexts$;
        this.options = options;
        this.isMobile = isMobile;
        this.isIos = isIos;
        this.textfieldSize = textfieldSize;
        this.disabledItemHandler = ALWAYS_FALSE_HANDLER;
        this.items = [];
        this.itemSize = this.options.itemSize;
        this.strict = false;
        this.mode = this.options.mode;
        /** @deprecated use `tuiTextfieldPostfix` from {@link TuiTextfieldControllerModule} instead */
        this.postfix = this.options.postfix;
        this.open = false;
    }
    get size() {
        return this.textfieldSize.size;
    }
    get nativeFocusableElement() {
        var _a, _b;
        return (_b = (_a = this.textfield) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement) !== null && _b !== void 0 ? _b : null;
    }
    get focused() {
        return tuiIsNativeFocused(this.nativeFocusableElement);
    }
    get canOpen() {
        return this.interactive && !!this.filtered.length;
    }
    get filtered() {
        return this.filter(this.items, this.mode, this.computedSearch);
    }
    get showNativePicker() {
        return (this.nativePicker &&
            (!this.isIos || (this.mode === 'HH:MM' && !this.items.length)));
    }
    get nativeDatalist() {
        return this.nativePicker && !this.isIos;
    }
    get maskOptions() {
        return this.calculateMask(this.mode);
    }
    get computedValue() {
        return this.value ? this.value.toString(this.mode) : this.nativeValue;
    }
    get computedSearch() {
        return this.computedValue.length !== this.mode.length ? this.computedValue : '';
    }
    get innerPseudoFocused() {
        if (this.pseudoFocus === false) {
            return false;
        }
        if ((this.open && this.canOpen) || this.computedFocused) {
            return true;
        }
        return null;
    }
    get icon() {
        return this.options.icon;
    }
    get nativeValue() {
        var _a;
        return ((_a = this.nativeFocusableElement) === null || _a === void 0 ? void 0 : _a.value) || '';
    }
    set nativeValue(value) {
        if (!this.nativeFocusableElement) {
            return;
        }
        this.nativeFocusableElement.value = value;
    }
    getFiller$(mode) {
        return this.timeTexts$.pipe(map(texts => texts[mode]));
    }
    onClick() {
        this.open = !this.open;
    }
    onValueChange(value) {
        this.open = !!this.items.length;
        if (this.control) {
            this.control.updateValueAndValidity({ emitEvent: false });
        }
        const match = this.getMatch(value);
        if (match !== undefined) {
            this.value = match;
            return;
        }
        if (value.length !== this.mode.length) {
            this.value = null;
            return;
        }
        const time = TuiTime.fromString(value);
        this.value = this.strict ? this.findNearestTimeFromItems(time) : time;
    }
    onFocused(focused) {
        this.updateFocused(focused);
        if (focused ||
            this.value !== null ||
            this.nativeValue === '' ||
            this.mode === 'HH:MM') {
            return;
        }
        this.value = TuiTime.fromString(this.nativeValue);
        timer(0)
            .pipe(takeUntil(this.destroy$))
            .subscribe(() => {
            if (this.nativeValue.endsWith('.') || this.nativeValue.endsWith(':')) {
                this.nativeValue = this.nativeValue.slice(0, -1);
            }
        });
    }
    onArrowUp(event) {
        if (this.items.length) {
            return;
        }
        this.processArrow(event, 1);
    }
    onArrowDown(event) {
        if (this.items.length) {
            return;
        }
        this.processArrow(event, -1);
    }
    handleOption(item) {
        this.focusInput();
        this.value = item;
    }
    onOpen(open) {
        this.open = open;
    }
    writeValue(value) {
        super.writeValue(value);
        this.nativeValue = value ? this.computedValue : '';
    }
    get nativePicker() {
        return !!this.options.nativePicker && this.isMobile;
    }
    calculateMask(mode) {
        const { HH, MM, SS, MS } = this.options.maxValues;
        return maskitoTimeOptionsGenerator({
            mode,
            timeSegmentMaxValues: {
                hours: HH,
                minutes: MM,
                seconds: SS,
                milliseconds: MS,
            },
        });
    }
    filter(items, mode, search) {
        return items.filter(item => item.toString(mode).includes(search));
    }
    findNearestTimeFromItems(value) {
        return this.items.reduce((previous, current) => Math.abs(current.valueOf() - value.valueOf()) <
            Math.abs(previous.valueOf() - value.valueOf())
            ? current
            : previous, new TuiTime(0, 0));
    }
    getMatch(value) {
        return this.items.find(item => TUI_STRICT_MATCHER(item, value));
    }
    close() {
        this.open = false;
    }
    processArrow(event, shift) {
        const { target } = event;
        if (this.readOnly || !tuiIsElement(target) || !tuiIsInput(target)) {
            return;
        }
        const selectionStart = target.selectionStart || 0;
        this.shiftTime(this.calculateShift(selectionStart, shift));
        target.setSelectionRange(selectionStart, selectionStart);
        event.preventDefault();
    }
    calculateShift(selectionStart, shift) {
        if (selectionStart <= 2) {
            return { hours: shift };
        }
        if (selectionStart <= 5) {
            return { minutes: shift };
        }
        if (selectionStart <= 8) {
            return { seconds: shift };
        }
        return { ms: shift };
    }
    shiftTime(shift) {
        if (this.value === null) {
            return;
        }
        const increasedTime = this.value.shift(shift);
        // Manual update so we can set caret position properly
        this.nativeValue = increasedTime.toString(this.mode);
        this.value = increasedTime;
    }
    focusInput(preventScroll = false) {
        if (this.nativeFocusableElement) {
            this.nativeFocusableElement.focus({ preventScroll });
            this.close();
        }
    }
}
TuiInputTimeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputTimeComponent, deps: [{ token: NgControl, optional: true, self: true }, { token: ChangeDetectorRef }, { token: TUI_TIME_TEXTS }, { token: TUI_INPUT_TIME_OPTIONS }, { token: TUI_IS_MOBILE }, { token: TUI_IS_IOS }, { token: TUI_TEXTFIELD_SIZE }], target: i0.ɵɵFactoryTarget.Component });
TuiInputTimeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiInputTimeComponent, selector: "tui-input-time", inputs: { disabledItemHandler: "disabledItemHandler", items: "items", itemSize: "itemSize", strict: "strict", mode: "mode", postfix: "postfix" }, host: { listeners: { "click": "onClick()" }, properties: { "attr.data-size": "this.size" } }, providers: [
        tuiAsFocusableItemAccessor(TuiInputTimeComponent),
        tuiAsControl(TuiInputTimeComponent),
        tuiAsDataListHost(TuiInputTimeComponent),
        tuiAsOptionContent(TUI_SELECT_OPTION),
    ], viewQueries: [{ propertyName: "textfield", first: true, predicate: TuiPrimitiveTextfieldComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: "<tui-hosted-dropdown\n    class=\"t-wrapper\"\n    [canOpen]=\"canOpen && !nativeDatalist\"\n    [content]=\"dropdownContent\"\n    [open]=\"canOpen && open\"\n    (focusedChange)=\"onFocused($event)\"\n    (openChange)=\"onOpen($event)\"\n>\n    <tui-primitive-textfield\n        tuiValueAccessor\n        class=\"t-textfield\"\n        [disabled]=\"disabled\"\n        [focusable]=\"focusable\"\n        [invalid]=\"computedInvalid\"\n        [maskito]=\"maskOptions\"\n        [nativeId]=\"nativeId\"\n        [postfix]=\"postfix\"\n        [pseudoActive]=\"pseudoActive\"\n        [pseudoFocus]=\"innerPseudoFocused\"\n        [pseudoHover]=\"pseudoHover\"\n        [readOnly]=\"readOnly\"\n        [tuiTextfieldFiller]=\"(getFiller$(mode) | async) || ''\"\n        [tuiTextfieldIcon]=\"iconContent\"\n        [value]=\"computedValue\"\n        (keydown.arrowDown)=\"onArrowDown($event)\"\n        (keydown.arrowUp)=\"onArrowUp($event)\"\n        (valueChange)=\"onValueChange($event)\"\n    >\n        <ng-content></ng-content>\n        <input\n            inputmode=\"numeric\"\n            tuiTextfield\n        />\n    </tui-primitive-textfield>\n</tui-hosted-dropdown>\n<ng-template #dropdownContent>\n    <tui-data-list\n        automation-id=\"tui-input-time__dropdown\"\n        [size]=\"itemSize\"\n    >\n        <button\n            *ngFor=\"let item of filtered\"\n            automation-id=\"tui-input-time__item\"\n            tuiOption\n            [disabled]=\"disabledItemHandler(item)\"\n            [value]=\"item\"\n        >\n            {{ item }}\n        </button>\n    </tui-data-list>\n</ng-template>\n\n<ng-template #iconContent>\n    <tui-svg\n        *polymorpheusOutlet=\"icon as src; context: {$implicit: size}\"\n        appearance=\"icon\"\n        tuiWrapper\n        [src]=\"src\"\n    ></tui-svg>\n    <input\n        *ngIf=\"showNativePicker\"\n        tuiTime\n    />\n</ng-template>\n", styles: [":host{display:block;border-radius:var(--tui-radius-m);text-align:left}:host._disabled{pointer-events:none}.t-wrapper{display:block;border-radius:inherit}.t-textfield{border-radius:inherit;text-align:inherit}\n"], components: [{ type: i1.TuiHostedDropdownComponent, selector: "tui-hosted-dropdown", inputs: ["content", "sided", "canOpen", "open"], outputs: ["openChange", "focusedChange"] }, { type: i1.TuiPrimitiveTextfieldComponent, selector: "tui-primitive-textfield", inputs: ["editable", "filler", "iconCleaner", "readOnly", "invalid", "disabled", "prefix", "postfix", "value"], outputs: ["valueChange"] }, { type: i1.TuiTextfieldComponent, selector: "input[tuiTextfield], textarea[tuiTextfield]" }, { type: i1.TuiDataListComponent, selector: "tui-data-list", inputs: ["role", "emptyContent", "size"] }, { type: i1.TuiOptionComponent, selector: "button[tuiOption], a[tuiOption]", inputs: ["size", "role", "disabled", "value"] }, { type: i1.TuiSvgComponent, selector: "tui-svg", inputs: ["src"] }, { type: i2.TuiNativeTimeComponent, selector: "input[tuiTime]" }], directives: [{ type: i1.TuiPrimitiveTextfieldDirective, selector: "tui-primitive-textfield" }, { type: i3.TuiValueAccessorDirective, selector: "[tuiValueAccessor]" }, { type: i4.MaskitoDirective, selector: "[maskito]", inputs: ["maskito", "maskitoElement"] }, { type: i1.TuiTextfieldFillerDirective, selector: "[tuiTextfieldFiller]", inputs: ["tuiTextfieldFiller"] }, { type: i1.TuiTextfieldIconDirective, selector: "[tuiTextfieldIcon]", inputs: ["tuiTextfieldIcon"] }, { type: i5.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i6.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { type: i1.TuiWrapperDirective, selector: "[tuiWrapper]", inputs: ["disabled", "readOnly", "hover", "active", "focus", "invalid", "appearance"] }, { type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i5.AsyncPipe }, viewProviders: [FIXED_DROPDOWN_CONTROLLER_PROVIDER], changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiPure
], TuiInputTimeComponent.prototype, "getFiller$", null);
__decorate([
    tuiPure
], TuiInputTimeComponent.prototype, "calculateMask", null);
__decorate([
    tuiPure
], TuiInputTimeComponent.prototype, "filter", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputTimeComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-input-time',
                    templateUrl: './input-time.template.html',
                    styleUrls: ['./input-time.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        tuiAsFocusableItemAccessor(TuiInputTimeComponent),
                        tuiAsControl(TuiInputTimeComponent),
                        tuiAsDataListHost(TuiInputTimeComponent),
                        tuiAsOptionContent(TUI_SELECT_OPTION),
                    ],
                    viewProviders: [FIXED_DROPDOWN_CONTROLLER_PROVIDER],
                }]
        }], ctorParameters: function () { return [{ type: i7.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }, {
                    type: Inject,
                    args: [NgControl]
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: i8.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_TIME_TEXTS]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_INPUT_TIME_OPTIONS]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_IS_MOBILE]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_IS_IOS]
                }] }, { type: i1.TuiTextfieldSizeDirective, decorators: [{
                    type: Inject,
                    args: [TUI_TEXTFIELD_SIZE]
                }] }]; }, propDecorators: { textfield: [{
                type: ViewChild,
                args: [TuiPrimitiveTextfieldComponent]
            }], disabledItemHandler: [{
                type: Input
            }], items: [{
                type: Input
            }], itemSize: [{
                type: Input
            }], strict: [{
                type: Input
            }], mode: [{
                type: Input
            }], postfix: [{
                type: Input
            }], size: [{
                type: HostBinding,
                args: ['attr.data-size']
            }], getFiller$: [], onClick: [{
                type: HostListener,
                args: ['click']
            }], calculateMask: [], filter: [] } });
//# sourceMappingURL=data:application/json;base64,