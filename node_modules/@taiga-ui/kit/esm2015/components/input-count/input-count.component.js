import { ChangeDetectionStrategy, ChangeDetectorRef, Component, HostBinding, Inject, Input, Optional, Self, ViewChild, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { maskitoParseNumber } from '@maskito/kit';
import { AbstractTuiNullableControl, TUI_IS_MOBILE, tuiAsControl, tuiAsFocusableItemAccessor, tuiClamp, tuiIsNativeFocused, tuiIsPresent, } from '@taiga-ui/cdk';
import { TEXTFIELD_CONTROLLER_PROVIDER, TUI_NUMBER_FORMAT, TUI_TEXTFIELD_WATCHED_CONTROLLER, } from '@taiga-ui/core';
import { TuiInputNumberComponent } from '@taiga-ui/kit/components/input-number';
import { TUI_PLUS_MINUS_TEXTS } from '@taiga-ui/kit/tokens';
import { TUI_INPUT_COUNT_OPTIONS } from './input-count.options';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/kit/components/input-number";
import * as i2 from "@taiga-ui/core";
import * as i3 from "@angular/forms";
import * as i4 from "@angular/common";
import * as i5 from "rxjs";
/**
 * @deprecated use {@link TuiInputNumberComponent} with [step] instead
 */
export class TuiInputCountComponent extends AbstractTuiNullableControl {
    constructor(control, cdr, textfieldController, minusTexts$, isMobile, options, numberFormat) {
        super(control, cdr);
        this.textfieldController = textfieldController;
        this.minusTexts$ = minusTexts$;
        this.isMobile = isMobile;
        this.options = options;
        this.numberFormat = numberFormat;
        this.step = this.options.step;
        this.min = this.options.min;
        this.max = this.options.max;
        this.hideButtons = this.options.hideButtons;
        /** @deprecated use `tuiTextfieldPrefix` from {@link TuiTextfieldControllerModule} instead */
        this.prefix = '';
        /** @deprecated use `tuiTextfieldPostfix` from {@link TuiTextfieldControllerModule} instead */
        this.postfix = this.options.postfix;
    }
    get computedMin() {
        var _a;
        return (_a = this.min) !== null && _a !== void 0 ? _a : this.options.min;
    }
    get computedMax() {
        var _a;
        return (_a = this.max) !== null && _a !== void 0 ? _a : this.options.max;
    }
    get buttonsHidden() {
        return this.hideButtons || this.textfieldController.appearance === 'table';
    }
    get iconUp() {
        return this.options.icons.up;
    }
    get iconDown() {
        return this.options.icons.down;
    }
    get nativeFocusableElement() {
        return !this.inputNumber || this.computedDisabled
            ? null
            : this.inputNumber.nativeFocusableElement;
    }
    get size() {
        return this.textfieldController.size;
    }
    get focused() {
        return tuiIsNativeFocused(this.nativeFocusableElement);
    }
    get minusButtonDisabled() {
        return (!this.interactive ||
            (tuiIsPresent(this.value) && this.value <= this.computedMin));
    }
    get plusButtonDisabled() {
        return (!this.interactive ||
            (tuiIsPresent(this.value) && this.value >= this.computedMax));
    }
    onButtonMouseDown(event, disabled = false) {
        if (disabled || !this.nativeFocusableElement || this.isMobile) {
            return;
        }
        event.preventDefault();
        this.nativeFocusableElement.focus();
    }
    onFocused(focused) {
        this.updateFocused(focused);
    }
    /**
     * @deprecated
     * TODO: drop in v4.0 as unused method
     */
    onInputNumberChange(value) {
        this.value = value;
    }
    /** @deprecated */
    onValueChange(value) {
        this.value = maskitoParseNumber(value, this.numberFormat.decimalSeparator);
    }
    decreaseValue() {
        if (this.readOnly) {
            return;
        }
        const newValue = (this.value || 0) - this.step;
        this.safeUpdateValue(newValue);
    }
    increaseValue() {
        if (this.readOnly) {
            return;
        }
        const newValue = (this.value || 0) + this.step;
        this.safeUpdateValue(newValue);
    }
    onKeydown(event) {
        switch (event.key) {
            case 'ArrowUp':
            case 'Up':
                this.increaseValue();
                event.preventDefault();
                break;
            case 'ArrowDown':
            case 'Down':
                this.decreaseValue();
                event.preventDefault();
                break;
            default:
                break;
        }
    }
    safeUpdateValue(newValue) {
        this.value = tuiClamp(newValue, this.computedMin, this.computedMax);
    }
}
TuiInputCountComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputCountComponent, deps: [{ token: NgControl, optional: true, self: true }, { token: ChangeDetectorRef }, { token: TUI_TEXTFIELD_WATCHED_CONTROLLER }, { token: TUI_PLUS_MINUS_TEXTS }, { token: TUI_IS_MOBILE }, { token: TUI_INPUT_COUNT_OPTIONS }, { token: TUI_NUMBER_FORMAT }], target: i0.ɵɵFactoryTarget.Component });
TuiInputCountComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiInputCountComponent, selector: "tui-input-count", inputs: { step: "step", min: "min", max: "max", hideButtons: "hideButtons", prefix: "prefix", postfix: "postfix" }, host: { properties: { "class._hide-buttons": "this.buttonsHidden", "attr.data-size": "this.size" } }, providers: [
        tuiAsFocusableItemAccessor(TuiInputCountComponent),
        tuiAsControl(TuiInputCountComponent),
        TEXTFIELD_CONTROLLER_PROVIDER,
    ], viewQueries: [{ propertyName: "inputNumber", first: true, predicate: TuiInputNumberComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: "<tui-input-number\n    decimal=\"never\"\n    class=\"t-textfield\"\n    [disabled]=\"computedDisabled\"\n    [focusable]=\"focusable\"\n    [max]=\"computedMax\"\n    [min]=\"computedMin\"\n    [nativeId]=\"nativeId\"\n    [postfix]=\"postfix\"\n    [prefix]=\"prefix\"\n    [pseudoActive]=\"pseudoActive\"\n    [pseudoFocus]=\"pseudoFocus\"\n    [pseudoHover]=\"pseudoHover\"\n    [pseudoInvalid]=\"pseudoInvalid\"\n    [readOnly]=\"readOnly\"\n    [(ngModel)]=\"value\"\n    (focusedChange)=\"onFocused($event)\"\n    (keydown)=\"onKeydown($event)\"\n>\n    <ng-content></ng-content>\n    <ng-content\n        ngProjectAs=\"input\"\n        select=\"input\"\n    ></ng-content>\n</tui-input-number>\n<ng-container *ngIf=\"!buttonsHidden\">\n    <ng-container *ngIf=\"minusTexts$ | async as texts\">\n        <section class=\"t-buttons\">\n            <button\n                automation-id=\"tui-input-count__plus-button\"\n                size=\"s\"\n                tuiIconButton\n                type=\"button\"\n                class=\"t-button t-button_plus\"\n                [appearance]=\"options.appearance\"\n                [disabled]=\"plusButtonDisabled\"\n                [focusable]=\"false\"\n                [icon]=\"iconUp\"\n                [title]=\"texts[0]\"\n                (click)=\"increaseValue()\"\n                (mousedown)=\"onButtonMouseDown($event, plusButtonDisabled)\"\n            ></button>\n            <button\n                automation-id=\"tui-input-count__minus-button\"\n                size=\"s\"\n                tuiIconButton\n                type=\"button\"\n                class=\"t-button t-button_minus\"\n                [appearance]=\"options.appearance\"\n                [disabled]=\"minusButtonDisabled\"\n                [focusable]=\"false\"\n                [icon]=\"iconDown\"\n                [title]=\"texts[1]\"\n                (click)=\"decreaseValue()\"\n                (mousedown)=\"onButtonMouseDown($event, minusButtonDisabled)\"\n            ></button>\n        </section>\n    </ng-container>\n</ng-container>\n", styles: [":host{display:flex;font:var(--tui-font-text-s);border-radius:var(--tui-radius-m);height:var(--tui-height-m);color:var(--tui-text-01);text-align:left}:host._disabled{pointer-events:none}:host[data-size=l]{font:var(--tui-font-text-m);height:var(--tui-height-l)}.t-textfield{position:relative;border-radius:inherit;text-align:inherit;flex-grow:1;min-width:0}:host:not(._hide-buttons) .t-textfield{border-top-right-radius:0;border-bottom-right-radius:0}.t-buttons{display:flex;flex-direction:column;margin-left:.125rem;height:100%;border-radius:inherit}.t-buttons .t-button{display:flex;width:calc(var(--tui-height-m) * .75);height:calc(50% - .0625rem);border-radius:0}.t-buttons .t-button_plus{margin-bottom:.125rem;border-top-right-radius:inherit}.t-buttons .t-button_minus{border-bottom-right-radius:inherit}:host[data-size=l] .t-buttons .t-button{width:calc(var(--tui-height-l) * .75)}\n"], components: [{ type: i1.TuiInputNumberComponent, selector: "tui-input-number", inputs: ["min", "max", "decimal", "precision", "step", "prefix", "postfix"] }, { type: i2.TuiButtonComponent, selector: "button[tuiButton], button[tuiIconButton], a[tuiButton], a[tuiIconButton]", inputs: ["appearance", "disabled", "icon", "iconRight", "shape", "showLoader", "size"] }], directives: [{ type: i1.TuiInputNumberDirective, selector: "tui-input-number" }, { type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i4.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputCountComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-input-count',
                    templateUrl: './input-count.template.html',
                    styleUrls: ['./input-count.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        tuiAsFocusableItemAccessor(TuiInputCountComponent),
                        tuiAsControl(TuiInputCountComponent),
                        TEXTFIELD_CONTROLLER_PROVIDER,
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i3.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }, {
                    type: Inject,
                    args: [NgControl]
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: i2.TuiTextfieldController, decorators: [{
                    type: Inject,
                    args: [TUI_TEXTFIELD_WATCHED_CONTROLLER]
                }] }, { type: i5.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_PLUS_MINUS_TEXTS]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_IS_MOBILE]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_INPUT_COUNT_OPTIONS]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_NUMBER_FORMAT]
                }] }]; }, propDecorators: { inputNumber: [{
                type: ViewChild,
                args: [TuiInputNumberComponent]
            }], step: [{
                type: Input
            }], min: [{
                type: Input
            }], max: [{
                type: Input
            }], hideButtons: [{
                type: Input
            }], prefix: [{
                type: Input
            }], postfix: [{
                type: Input
            }], buttonsHidden: [{
                type: HostBinding,
                args: ['class._hide-buttons']
            }], size: [{
                type: HostBinding,
                args: ['attr.data-size']
            }] } });
//# sourceMappingURL=data:application/json;base64,