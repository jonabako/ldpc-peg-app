import { ChangeDetectionStrategy, Component, Input, TemplateRef } from '@angular/core';
import { tuiAsDataList } from '@taiga-ui/core';
import { AbstractTuiNativeSelect } from '@taiga-ui/kit/abstract';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/kit/components/data-list-wrapper";
import * as i2 from "@taiga-ui/core";
import * as i3 from "@angular/common";
import * as i4 from "@taiga-ui/kit/pipes";
export class TuiNativeSelectGroupComponent extends AbstractTuiNativeSelect {
    constructor() {
        super(...arguments);
        this.items = [];
        this.labels = [];
    }
    get stringify() {
        return this.host.stringify;
    }
    selected(option) {
        return this.control.value === option;
    }
    onValueChange(index) {
        var _a;
        const flatItems = (_a = this.items) === null || _a === void 0 ? void 0 : _a.reduce((acc, val) => acc.concat(val), []);
        this.host.onValueChange((flatItems === null || flatItems === void 0 ? void 0 : flatItems[index]) || null);
    }
}
TuiNativeSelectGroupComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiNativeSelectGroupComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
TuiNativeSelectGroupComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiNativeSelectGroupComponent, selector: "select[tuiSelect][labels]:not([multiple])", inputs: { items: "items", labels: "labels" }, host: { listeners: { "change": "onValueChange($event.target.options.selectedIndex)" }, properties: { "attr.aria-invalid": "host.invalid", "disabled": "host.disabled || control.readOnly", "tabIndex": "host.focusable ? 0 : -1", "value": "host.value" } }, providers: [
        tuiAsDataList(TuiNativeSelectGroupComponent),
        {
            provide: TemplateRef,
            deps: [TuiNativeSelectGroupComponent],
            useFactory: ({ datalist }) => datalist,
        },
        {
            provide: AbstractTuiNativeSelect,
            useExisting: TuiNativeSelectGroupComponent,
        },
    ], usesInheritance: true, ngImport: i0, template: "<tui-data-list-wrapper\n    *tuiDataList\n    [disabledItemHandler]=\"disabledItemHandler || itemsHandlers.disabledItemHandler\"\n    [itemContent]=\"stringify | tuiStringifyContent\"\n    [items]=\"items\"\n    [labels]=\"labels\"\n></tui-data-list-wrapper>\n<optgroup\n    *ngFor=\"let group of items; let index = index\"\n    [label]=\"labels[index]\"\n>\n    <option\n        *ngFor=\"let option of group; let i = index\"\n        [disabled]=\"disabledItemHandler ? disabledItemHandler(option) : itemsHandlers.disabledItemHandler(option)\"\n        [selected]=\"selected(option)\"\n        [value]=\"stringify(option)\"\n    >\n        {{ stringify(option) }}\n    </option>\n</optgroup>\n", styles: [":host{position:absolute;top:0;left:0;width:100%;height:100%;opacity:0}\n"], components: [{ type: i1.TuiDataListGroupWrapperComponent, selector: "tui-data-list-wrapper[labels]", inputs: ["items", "labels"] }], directives: [{ type: i2.TuiDataListDirective, selector: "ng-template[tuiDataList]" }, { type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "tuiStringifyContent": i4.TuiStringifyContentPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiNativeSelectGroupComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'select[tuiSelect][labels]:not([multiple])',
                    templateUrl: './native-select-group.template.html',
                    styleUrls: ['./native-select.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        tuiAsDataList(TuiNativeSelectGroupComponent),
                        {
                            provide: TemplateRef,
                            deps: [TuiNativeSelectGroupComponent],
                            useFactory: ({ datalist }) => datalist,
                        },
                        {
                            provide: AbstractTuiNativeSelect,
                            useExisting: TuiNativeSelectGroupComponent,
                        },
                    ],
                    host: {
                        '[attr.aria-invalid]': 'host.invalid',
                        '[disabled]': 'host.disabled || control.readOnly',
                        '[tabIndex]': 'host.focusable ? 0 : -1',
                        '[value]': 'host.value',
                        '(change)': 'onValueChange($event.target.options.selectedIndex)',
                    },
                }]
        }], propDecorators: { items: [{
                type: Input
            }], labels: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF0aXZlLXNlbGVjdC1ncm91cC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9raXQvY29tcG9uZW50cy9zZWxlY3QvbmF0aXZlLXNlbGVjdC9uYXRpdmUtc2VsZWN0LWdyb3VwLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2tpdC9jb21wb25lbnRzL3NlbGVjdC9uYXRpdmUtc2VsZWN0L25hdGl2ZS1zZWxlY3QtZ3JvdXAudGVtcGxhdGUuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDckYsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQzdDLE9BQU8sRUFBQyx1QkFBdUIsRUFBQyxNQUFNLHdCQUF3QixDQUFDOzs7Ozs7QUE4Qi9ELE1BQU0sT0FBTyw2QkFBaUMsU0FBUSx1QkFHckQ7SUE1QkQ7O1FBOEJJLFVBQUssR0FBMEIsRUFBRSxDQUFDO1FBR2xDLFdBQU0sR0FBc0IsRUFBRSxDQUFDO0tBZWxDO0lBYkcsSUFBSSxTQUFTO1FBQ1QsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUMvQixDQUFDO0lBRUQsUUFBUSxDQUFDLE1BQVM7UUFDZCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxLQUFLLE1BQU0sQ0FBQztJQUN6QyxDQUFDO0lBRUQsYUFBYSxDQUFDLEtBQWE7O1FBQ3ZCLE1BQU0sU0FBUyxHQUFHLE1BQUEsSUFBSSxDQUFDLEtBQUssMENBQUUsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUV4RSxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFBLFNBQVMsYUFBVCxTQUFTLHVCQUFULFNBQVMsQ0FBRyxLQUFLLENBQUMsS0FBSSxJQUFJLENBQUMsQ0FBQztJQUN4RCxDQUFDOzsySEF0QlEsNkJBQTZCOytHQUE3Qiw2QkFBNkIsK1dBcEIzQjtRQUNQLGFBQWEsQ0FBQyw2QkFBNkIsQ0FBQztRQUM1QztZQUNJLE9BQU8sRUFBRSxXQUFXO1lBQ3BCLElBQUksRUFBRSxDQUFDLDZCQUE2QixDQUFDO1lBQ3JDLFVBQVUsRUFBRSxDQUFDLEVBQUMsUUFBUSxFQUF5QyxFQUFFLEVBQUUsQ0FBQyxRQUFRO1NBQy9FO1FBQ0Q7WUFDSSxPQUFPLEVBQUUsdUJBQXVCO1lBQ2hDLFdBQVcsRUFBRSw2QkFBNkI7U0FDN0M7S0FDSixpREN2QkwsdXJCQW9CQTs0RkRZYSw2QkFBNkI7a0JBekJ6QyxTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSwyQ0FBMkM7b0JBQ3JELFdBQVcsRUFBRSxxQ0FBcUM7b0JBQ2xELFNBQVMsRUFBRSxDQUFDLDRCQUE0QixDQUFDO29CQUN6QyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFDL0MsU0FBUyxFQUFFO3dCQUNQLGFBQWEsK0JBQStCO3dCQUM1Qzs0QkFDSSxPQUFPLEVBQUUsV0FBVzs0QkFDcEIsSUFBSSxFQUFFLCtCQUErQjs0QkFDckMsVUFBVSxFQUFFLENBQUMsRUFBQyxRQUFRLEVBQXlDLEVBQUUsRUFBRSxDQUFDLFFBQVE7eUJBQy9FO3dCQUNEOzRCQUNJLE9BQU8sRUFBRSx1QkFBdUI7NEJBQ2hDLFdBQVcsK0JBQStCO3lCQUM3QztxQkFDSjtvQkFDRCxJQUFJLEVBQUU7d0JBQ0YscUJBQXFCLEVBQUUsY0FBYzt3QkFDckMsWUFBWSxFQUFFLG1DQUFtQzt3QkFDakQsWUFBWSxFQUFFLHlCQUF5Qjt3QkFDdkMsU0FBUyxFQUFFLFlBQVk7d0JBQ3ZCLFVBQVUsRUFBRSxvREFBb0Q7cUJBQ25FO2lCQUNKOzhCQU1HLEtBQUs7c0JBREosS0FBSztnQkFJTixNQUFNO3NCQURMLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIElucHV0LCBUZW1wbGF0ZVJlZn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge3R1aUFzRGF0YUxpc3R9IGZyb20gJ0B0YWlnYS11aS9jb3JlJztcbmltcG9ydCB7QWJzdHJhY3RUdWlOYXRpdmVTZWxlY3R9IGZyb20gJ0B0YWlnYS11aS9raXQvYWJzdHJhY3QnO1xuaW1wb3J0IHtUdWlJdGVtc0hhbmRsZXJzfSBmcm9tICdAdGFpZ2EtdWkva2l0L3Rva2Vucyc7XG5cbmltcG9ydCB0eXBlIHtUdWlTZWxlY3REaXJlY3RpdmV9IGZyb20gJy4uL3NlbGVjdC5kaXJlY3RpdmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ3NlbGVjdFt0dWlTZWxlY3RdW2xhYmVsc106bm90KFttdWx0aXBsZV0pJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vbmF0aXZlLXNlbGVjdC1ncm91cC50ZW1wbGF0ZS5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9uYXRpdmUtc2VsZWN0LnN0eWxlLmxlc3MnXSxcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgdHVpQXNEYXRhTGlzdChUdWlOYXRpdmVTZWxlY3RHcm91cENvbXBvbmVudCksXG4gICAgICAgIHtcbiAgICAgICAgICAgIHByb3ZpZGU6IFRlbXBsYXRlUmVmLFxuICAgICAgICAgICAgZGVwczogW1R1aU5hdGl2ZVNlbGVjdEdyb3VwQ29tcG9uZW50XSxcbiAgICAgICAgICAgIHVzZUZhY3Rvcnk6ICh7ZGF0YWxpc3R9OiBUdWlOYXRpdmVTZWxlY3RHcm91cENvbXBvbmVudDx1bmtub3duPikgPT4gZGF0YWxpc3QsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIHByb3ZpZGU6IEFic3RyYWN0VHVpTmF0aXZlU2VsZWN0LFxuICAgICAgICAgICAgdXNlRXhpc3Rpbmc6IFR1aU5hdGl2ZVNlbGVjdEdyb3VwQ29tcG9uZW50LFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgaG9zdDoge1xuICAgICAgICAnW2F0dHIuYXJpYS1pbnZhbGlkXSc6ICdob3N0LmludmFsaWQnLFxuICAgICAgICAnW2Rpc2FibGVkXSc6ICdob3N0LmRpc2FibGVkIHx8IGNvbnRyb2wucmVhZE9ubHknLFxuICAgICAgICAnW3RhYkluZGV4XSc6ICdob3N0LmZvY3VzYWJsZSA/IDAgOiAtMScsXG4gICAgICAgICdbdmFsdWVdJzogJ2hvc3QudmFsdWUnLFxuICAgICAgICAnKGNoYW5nZSknOiAnb25WYWx1ZUNoYW5nZSgkZXZlbnQudGFyZ2V0Lm9wdGlvbnMuc2VsZWN0ZWRJbmRleCknLFxuICAgIH0sXG59KVxuZXhwb3J0IGNsYXNzIFR1aU5hdGl2ZVNlbGVjdEdyb3VwQ29tcG9uZW50PFQ+IGV4dGVuZHMgQWJzdHJhY3RUdWlOYXRpdmVTZWxlY3Q8XG4gICAgVHVpU2VsZWN0RGlyZWN0aXZlLFxuICAgIFRcbj4ge1xuICAgIEBJbnB1dCgpXG4gICAgaXRlbXM6IHJlYWRvbmx5IFRbXVtdIHwgbnVsbCA9IFtdO1xuXG4gICAgQElucHV0KClcbiAgICBsYWJlbHM6IHJlYWRvbmx5IHN0cmluZ1tdID0gW107XG5cbiAgICBnZXQgc3RyaW5naWZ5KCk6IFR1aUl0ZW1zSGFuZGxlcnM8VD5bJ3N0cmluZ2lmeSddIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5zdHJpbmdpZnk7XG4gICAgfVxuXG4gICAgc2VsZWN0ZWQob3B0aW9uOiBUKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRyb2wudmFsdWUgPT09IG9wdGlvbjtcbiAgICB9XG5cbiAgICBvblZhbHVlQ2hhbmdlKGluZGV4OiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgZmxhdEl0ZW1zID0gdGhpcy5pdGVtcz8ucmVkdWNlKChhY2MsIHZhbCkgPT4gYWNjLmNvbmNhdCh2YWwpLCBbXSk7XG5cbiAgICAgICAgdGhpcy5ob3N0Lm9uVmFsdWVDaGFuZ2UoZmxhdEl0ZW1zPy5baW5kZXhdIHx8IG51bGwpO1xuICAgIH1cbn1cbiIsIjx0dWktZGF0YS1saXN0LXdyYXBwZXJcbiAgICAqdHVpRGF0YUxpc3RcbiAgICBbZGlzYWJsZWRJdGVtSGFuZGxlcl09XCJkaXNhYmxlZEl0ZW1IYW5kbGVyIHx8IGl0ZW1zSGFuZGxlcnMuZGlzYWJsZWRJdGVtSGFuZGxlclwiXG4gICAgW2l0ZW1Db250ZW50XT1cInN0cmluZ2lmeSB8IHR1aVN0cmluZ2lmeUNvbnRlbnRcIlxuICAgIFtpdGVtc109XCJpdGVtc1wiXG4gICAgW2xhYmVsc109XCJsYWJlbHNcIlxuPjwvdHVpLWRhdGEtbGlzdC13cmFwcGVyPlxuPG9wdGdyb3VwXG4gICAgKm5nRm9yPVwibGV0IGdyb3VwIG9mIGl0ZW1zOyBsZXQgaW5kZXggPSBpbmRleFwiXG4gICAgW2xhYmVsXT1cImxhYmVsc1tpbmRleF1cIlxuPlxuICAgIDxvcHRpb25cbiAgICAgICAgKm5nRm9yPVwibGV0IG9wdGlvbiBvZiBncm91cDsgbGV0IGkgPSBpbmRleFwiXG4gICAgICAgIFtkaXNhYmxlZF09XCJkaXNhYmxlZEl0ZW1IYW5kbGVyID8gZGlzYWJsZWRJdGVtSGFuZGxlcihvcHRpb24pIDogaXRlbXNIYW5kbGVycy5kaXNhYmxlZEl0ZW1IYW5kbGVyKG9wdGlvbilcIlxuICAgICAgICBbc2VsZWN0ZWRdPVwic2VsZWN0ZWQob3B0aW9uKVwiXG4gICAgICAgIFt2YWx1ZV09XCJzdHJpbmdpZnkob3B0aW9uKVwiXG4gICAgPlxuICAgICAgICB7eyBzdHJpbmdpZnkob3B0aW9uKSB9fVxuICAgIDwvb3B0aW9uPlxuPC9vcHRncm91cD5cbiJdfQ==