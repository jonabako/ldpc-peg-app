import { __decorate, __rest } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, HostBinding, HostListener, Inject, InjectionToken, Input, Optional, Self, ViewChild, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { maskitoCaretGuard, maskitoNumberOptionsGenerator, maskitoParseNumber, } from '@maskito/kit';
import { AbstractTuiNullableControl, CHAR_HYPHEN, CHAR_MINUS, EMPTY_QUERY, TUI_IS_IOS, tuiAsControl, tuiAsFocusableItemAccessor, tuiClamp, tuiPure, } from '@taiga-ui/cdk';
import { TEXTFIELD_CONTROLLER_PROVIDER, TUI_NUMBER_FORMAT, TUI_TEXTFIELD_SIZE, TUI_TEXTFIELD_WATCHED_CONTROLLER, tuiFormatNumber, tuiGetFractionPartPadded, TuiPrimitiveTextfieldComponent, } from '@taiga-ui/core';
import { PolymorpheusOutletDirective } from '@tinkoff/ng-polymorpheus';
import { TUI_INPUT_NUMBER_OPTIONS } from './input-number.options';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core";
import * as i2 from "@taiga-ui/kit/directives";
import * as i3 from "@maskito/angular";
import * as i4 from "@angular/common";
import * as i5 from "@tinkoff/ng-polymorpheus";
import * as i6 from "@angular/forms";
import * as i7 from "@taiga-ui/cdk";
const DEFAULT_MAX_LENGTH = 18;
export const TUI_NUMBER_VALUE_TRANSFORMER = new InjectionToken('');
export class TuiInputNumberComponent extends AbstractTuiNullableControl {
    constructor(control, cdr, transformer, options, numberFormat, isIOS, textfieldSize, controller) {
        super(control, cdr, transformer);
        this.options = options;
        this.numberFormat = numberFormat;
        this.isIOS = isIOS;
        this.textfieldSize = textfieldSize;
        this.controller = controller;
        this.unfinishedValue = '';
        this.min = this.options.min;
        this.max = this.options.max;
        this.decimal = this.options.decimal;
        this.precision = this.options.precision;
        this.step = this.options.step;
        /** @deprecated use `tuiTextfieldPrefix` from {@link TuiTextfieldControllerModule} instead */
        this.prefix = '';
        /** @deprecated use `tuiTextfieldPostfix` from {@link TuiTextfieldControllerModule} instead */
        this.postfix = '';
        this.polymorpheusValueContent = EMPTY_QUERY;
    }
    get size() {
        return this.textfieldSize.size;
    }
    get computedMin() {
        return this.computeMin(this.min, this.max);
    }
    get computedMax() {
        return this.computeMax(this.min, this.max);
    }
    get nativeFocusableElement() {
        return !this.textfield || this.computedDisabled
            ? null
            : this.textfield.nativeFocusableElement;
    }
    get focused() {
        var _a;
        return !!((_a = this.textfield) === null || _a === void 0 ? void 0 : _a.focused);
    }
    get isNegativeAllowed() {
        return this.computedMin < 0;
    }
    get inputMode() {
        if (this.isIOS && this.isNegativeAllowed) {
            // iPhone does not have minus sign if inputMode is equal to 'numeric' / 'decimal'
            return 'text';
        }
        return this.decimal === 'never' ? 'numeric' : 'decimal';
    }
    get calculatedMaxLength() {
        const decimalPart = this.decimal !== 'never' &&
            this.nativeValue.includes(this.numberFormat.decimalSeparator);
        const precision = decimalPart ? Math.min(this.precision + 1, 20) : 0;
        const takeThousand = this.numberFormat.thousandSeparator.repeat(5).length;
        return DEFAULT_MAX_LENGTH + precision + takeThousand;
    }
    get formattedValue() {
        return this.value !== null ? this.getFormattedValue(this.value || 0) : '';
    }
    get computedValue() {
        return this.focused ? this.nativeValue : this.formattedValue;
    }
    get canDecrement() {
        return this.interactive && (this.value || 0) > this.computedMin;
    }
    get canIncrement() {
        return this.interactive && (this.value || 0) < this.computedMax;
    }
    get computedPrefix() {
        return this.prefix || this.controller.prefix;
    }
    get computedPostfix() {
        const postfix = this.postfix || this.controller.postfix;
        return postfix && ` ${postfix}`;
    }
    get mask() {
        return this.calculateMask(this.precision, this.decimal, this.numberFormat.decimalSeparator, this.numberFormat.thousandSeparator, this.computedMin, this.computedMax, this.computedPrefix, this.computedPostfix);
    }
    onArrow(step) {
        if (!step) {
            return;
        }
        this.value = tuiClamp((this.value || 0) + step, this.computedMin, this.computedMax);
        this.nativeValue = this.formattedValue;
    }
    onValueChange(nativeValue) {
        const parsedValue = maskitoParseNumber(nativeValue, this.numberFormat.decimalSeparator);
        this.unfinishedValue = null;
        if (Number.isNaN(parsedValue)) {
            this.value = null;
            return;
        }
        if (this.isNativeValueNotFinished) {
            this.unfinishedValue = nativeValue;
            return;
        }
        if (parsedValue < this.computedMin || parsedValue > this.computedMax) {
            return;
        }
        this.value = parsedValue;
    }
    onFocused(focused) {
        this.updateFocused(focused);
        const nativeNumberValue = this.unfinishedValue
            ? maskitoParseNumber(this.unfinishedValue, this.numberFormat.decimalSeparator)
            : this.nativeNumberValue;
        this.unfinishedValue = null;
        if (Number.isNaN(nativeNumberValue)) {
            this.nativeValue = focused ? this.computedPrefix + this.computedPostfix : '';
            this.value = null;
            return;
        }
        if (!focused) {
            this.value = nativeNumberValue;
            this.nativeValue = this.formattedValue;
        }
    }
    getFormattedValue(value) {
        const absValue = Math.abs(value);
        const hasFraction = absValue % 1 > 0;
        let decimalLimit = this.decimal === 'always' || (hasFraction && this.decimal !== 'never')
            ? this.precision
            : 0;
        const fraction = hasFraction
            ? tuiGetFractionPartPadded(value, this.precision)
            : '';
        if (this.focused && this.decimal !== 'always') {
            decimalLimit = fraction.length;
        }
        return (this.computedPrefix +
            tuiFormatNumber(value, Object.assign(Object.assign({}, this.numberFormat), { decimalLimit })).replace(CHAR_HYPHEN, CHAR_MINUS) +
            this.computedPostfix);
    }
    get isNativeValueNotFinished() {
        const nativeNumberValue = this.nativeNumberValue;
        return nativeNumberValue < 0
            ? nativeNumberValue > this.computedMax
            : nativeNumberValue < this.computedMin;
    }
    get nativeValue() {
        var _a;
        return ((_a = this.nativeFocusableElement) === null || _a === void 0 ? void 0 : _a.value) || '';
    }
    set nativeValue(value) {
        if (!this.textfield || !this.nativeFocusableElement) {
            return;
        }
        this.textfield.value = value;
        this.nativeFocusableElement.value = value;
    }
    writeValue(value) {
        super.writeValue(value);
        this.nativeValue = this.formattedValue;
    }
    get nativeNumberValue() {
        return maskitoParseNumber(this.nativeValue, this.numberFormat.decimalSeparator);
    }
    computeMin(min, max) {
        var _a, _b, _c, _d, _e, _f;
        return Math.min((_c = (_b = (_a = this.valueTransformer) === null || _a === void 0 ? void 0 : _a.fromControlValue(min)) !== null && _b !== void 0 ? _b : min) !== null && _c !== void 0 ? _c : this.options.min, (_f = (_e = (_d = this.valueTransformer) === null || _d === void 0 ? void 0 : _d.fromControlValue(max)) !== null && _e !== void 0 ? _e : max) !== null && _f !== void 0 ? _f : this.options.max);
    }
    computeMax(min, max) {
        var _a, _b, _c, _d, _e, _f;
        return Math.max((_c = (_b = (_a = this.valueTransformer) === null || _a === void 0 ? void 0 : _a.fromControlValue(min)) !== null && _b !== void 0 ? _b : min) !== null && _c !== void 0 ? _c : this.options.min, (_f = (_e = (_d = this.valueTransformer) === null || _d === void 0 ? void 0 : _d.fromControlValue(max)) !== null && _e !== void 0 ? _e : max) !== null && _f !== void 0 ? _f : this.options.max);
    }
    calculateMask(precision, decimalMode, decimalSeparator, thousandSeparator, min, max, prefix, postfix) {
        const _a = maskitoNumberOptionsGenerator({
            decimalSeparator,
            thousandSeparator,
            min,
            max,
            prefix,
            postfix,
            precision: decimalMode === 'never' ? 0 : precision,
            decimalZeroPadding: decimalMode === 'always',
        }), { plugins } = _a, options = __rest(_a, ["plugins"]);
        return Object.assign(Object.assign({}, options), { plugins: [
                ...plugins,
                maskitoCaretGuard(value => [
                    prefix.length,
                    value.length - postfix.length,
                ]),
            ] });
    }
}
TuiInputNumberComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputNumberComponent, deps: [{ token: NgControl, optional: true, self: true }, { token: ChangeDetectorRef }, { token: TUI_NUMBER_VALUE_TRANSFORMER, optional: true }, { token: TUI_INPUT_NUMBER_OPTIONS }, { token: TUI_NUMBER_FORMAT }, { token: TUI_IS_IOS }, { token: TUI_TEXTFIELD_SIZE }, { token: TUI_TEXTFIELD_WATCHED_CONTROLLER }], target: i0.ɵɵFactoryTarget.Component });
TuiInputNumberComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiInputNumberComponent, selector: "tui-input-number", inputs: { min: "min", max: "max", decimal: "decimal", precision: "precision", step: "step", prefix: "prefix", postfix: "postfix" }, host: { listeners: { "keydown.arrowDown": "onArrow(-step)", "keydown.arrowUp": "onArrow(step)" }, properties: { "attr.data-size": "this.size" } }, providers: [
        tuiAsFocusableItemAccessor(TuiInputNumberComponent),
        tuiAsControl(TuiInputNumberComponent),
        TEXTFIELD_CONTROLLER_PROVIDER,
    ], queries: [{ propertyName: "polymorpheusValueContent", predicate: PolymorpheusOutletDirective, descendants: true }], viewQueries: [{ propertyName: "textfield", first: true, predicate: TuiPrimitiveTextfieldComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: "<tui-primitive-textfield\n    #textfield\n    tuiTextfieldPostfix=\"\"\n    tuiTextfieldPrefix=\"\"\n    tuiValueAccessor\n    class=\"t-textfield\"\n    [disabled]=\"computedDisabled\"\n    [focusable]=\"focusable\"\n    [invalid]=\"computedInvalid\"\n    [maskito]=\"mask\"\n    [pseudoActive]=\"pseudoActive\"\n    [pseudoFocus]=\"computedFocused\"\n    [pseudoHover]=\"pseudoHover\"\n    [readOnly]=\"readOnly\"\n    [value]=\"computedValue\"\n    (focusedChange)=\"onFocused($event)\"\n    (valueChange)=\"onValueChange($event)\"\n>\n    <ng-content></ng-content>\n    <ng-content\n        ngProjectAs=\"input\"\n        select=\"input\"\n    ></ng-content>\n    <div\n        *ngIf=\"polymorpheusValueContent.length\"\n        ngProjectAs=\"tuiContent\"\n        class=\"t-value-content\"\n    >\n        <ng-container *polymorpheusOutlet=\"valueContent as text\">\n            {{ text }}\n        </ng-container>\n    </div>\n</tui-primitive-textfield>\n\n<section\n    *ngIf=\"step\"\n    class=\"t-buttons\"\n>\n    <button\n        size=\"s\"\n        tuiIconButton\n        type=\"button\"\n        class=\"t-button\"\n        [appearance]=\"textfield.appearance\"\n        [disabled]=\"!canIncrement\"\n        [focusable]=\"false\"\n        [icon]=\"options.icons.up\"\n        (click.prevent)=\"onArrow(step)\"\n        (mousedown.prevent)=\"nativeFocusableElement?.focus()\"\n    >\n        +\n    </button>\n    <button\n        size=\"s\"\n        tuiIconButton\n        type=\"button\"\n        class=\"t-button\"\n        [appearance]=\"textfield.appearance\"\n        [disabled]=\"!canDecrement\"\n        [focusable]=\"false\"\n        [icon]=\"options.icons.down\"\n        (click.prevent)=\"onArrow(-step)\"\n        (mousedown.prevent)=\"nativeFocusableElement?.focus()\"\n    >\n        -\n    </button>\n</section>\n\n<ng-container *ngIf=\"polymorpheusValueContent.changes | async\"></ng-container>\n\n<ng-template #valueContent>\n    <ng-content select=\"tuiContent\"></ng-content>\n</ng-template>\n", styles: [":host{display:flex;border-radius:var(--tui-radius-m);text-align:left}.t-textfield{flex:1;max-width:100%;border-radius:inherit;text-align:inherit}.t-textfield:not(:last-child){border-top-right-radius:0;border-bottom-right-radius:0}.t-value-content{width:100%}.t-buttons{display:flex;flex-direction:column;align-items:stretch;margin-left:.125rem;border-radius:inherit}[data-size=s]+.t-buttons{flex-direction:row-reverse}[data-size=s]+.t-buttons .t-button:first-child{margin:0 0 0 .125rem;border-top-right-radius:inherit;border-bottom-right-radius:inherit}[data-size=s]+.t-buttons .t-button:last-child{border-radius:0}[data-size=m]+.t-buttons .t-button{width:calc(var(--tui-height-m) * .75)}[data-size=l]+.t-buttons .t-button{width:calc(var(--tui-height-l) * .75)}.t-button{display:flex;flex:1;height:auto;border-radius:0}.t-button:first-child{margin-bottom:.125rem;border-top-right-radius:inherit}.t-button:last-child{border-bottom-right-radius:inherit}\n"], components: [{ type: i1.TuiPrimitiveTextfieldComponent, selector: "tui-primitive-textfield", inputs: ["editable", "filler", "iconCleaner", "readOnly", "invalid", "disabled", "prefix", "postfix", "value"], outputs: ["valueChange"] }, { type: i1.TuiButtonComponent, selector: "button[tuiButton], button[tuiIconButton], a[tuiButton], a[tuiIconButton]", inputs: ["appearance", "disabled", "icon", "iconRight", "shape", "showLoader", "size"] }], directives: [{ type: i1.TuiPrimitiveTextfieldDirective, selector: "tui-primitive-textfield" }, { type: i1.TuiTextfieldPostfixDirective, selector: "[tuiTextfieldPostfix]", inputs: ["tuiTextfieldPostfix"] }, { type: i1.TuiTextfieldPrefixDirective, selector: "[tuiTextfieldPrefix]", inputs: ["tuiTextfieldPrefix"] }, { type: i2.TuiValueAccessorDirective, selector: "[tuiValueAccessor]" }, { type: i3.MaskitoDirective, selector: "[maskito]", inputs: ["maskito", "maskitoElement"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }], pipes: { "async": i4.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiPure
], TuiInputNumberComponent.prototype, "computeMin", null);
__decorate([
    tuiPure
], TuiInputNumberComponent.prototype, "computeMax", null);
__decorate([
    tuiPure
], TuiInputNumberComponent.prototype, "calculateMask", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputNumberComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-input-number',
                    templateUrl: './input-number.template.html',
                    styleUrls: ['./input-number.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        tuiAsFocusableItemAccessor(TuiInputNumberComponent),
                        tuiAsControl(TuiInputNumberComponent),
                        TEXTFIELD_CONTROLLER_PROVIDER,
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i6.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }, {
                    type: Inject,
                    args: [NgControl]
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: i7.AbstractTuiValueTransformer, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TUI_NUMBER_VALUE_TRANSFORMER]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_INPUT_NUMBER_OPTIONS]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_NUMBER_FORMAT]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_IS_IOS]
                }] }, { type: i1.TuiTextfieldSizeDirective, decorators: [{
                    type: Inject,
                    args: [TUI_TEXTFIELD_SIZE]
                }] }, { type: i1.TuiTextfieldController, decorators: [{
                    type: Inject,
                    args: [TUI_TEXTFIELD_WATCHED_CONTROLLER]
                }] }]; }, propDecorators: { textfield: [{
                type: ViewChild,
                args: [TuiPrimitiveTextfieldComponent]
            }], min: [{
                type: Input
            }], max: [{
                type: Input
            }], decimal: [{
                type: Input
            }], precision: [{
                type: Input
            }], step: [{
                type: Input
            }], prefix: [{
                type: Input
            }], postfix: [{
                type: Input
            }], polymorpheusValueContent: [{
                type: ContentChildren,
                args: [PolymorpheusOutletDirective, { descendants: true }]
            }], size: [{
                type: HostBinding,
                args: ['attr.data-size']
            }], onArrow: [{
                type: HostListener,
                args: ['keydown.arrowDown', ['-step']]
            }, {
                type: HostListener,
                args: ['keydown.arrowUp', ['step']]
            }], computeMin: [], computeMax: [], calculateMask: [] } });
//# sourceMappingURL=data:application/json;base64,