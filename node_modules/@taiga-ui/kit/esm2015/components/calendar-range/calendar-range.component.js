import { __decorate } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, HostListener, Inject, Input, Optional, Output, Self, } from '@angular/core';
import { ALWAYS_FALSE_HANDLER, TUI_FIRST_DAY, TUI_LAST_DAY, TuiDayRange, TuiDestroyService, tuiIsString, TuiMonth, tuiNullableSame, tuiObjectFromEntries, tuiPure, tuiWatch, } from '@taiga-ui/cdk';
import { TUI_COMMON_ICONS, TUI_DEFAULT_MARKER_HANDLER, } from '@taiga-ui/core';
import { MAX_DAY_RANGE_LENGTH_MAPPER } from '@taiga-ui/kit/constants';
import { TUI_CALENDAR_DATE_STREAM, TUI_OTHER_DATE_TEXT } from '@taiga-ui/kit/tokens';
import { takeUntil } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/kit/internal/primitive-calendar-range";
import * as i2 from "@taiga-ui/core";
import * as i3 from "@angular/common";
import * as i4 from "@taiga-ui/cdk";
import * as i5 from "rxjs";
export class TuiCalendarRangeComponent {
    constructor(valueChanges, cdr, destroy$, otherDateText$, icons) {
        this.otherDateText$ = otherDateText$;
        this.icons = icons;
        this.defaultViewedMonth = TuiMonth.currentLocal();
        this.disabledItemHandler = ALWAYS_FALSE_HANDLER;
        this.markerHandler = TUI_DEFAULT_MARKER_HANDLER;
        this.items = [];
        this.min = TUI_FIRST_DAY;
        this.max = TUI_LAST_DAY;
        this.minLength = null;
        this.maxLength = null;
        this.value = null;
        this.valueChange = new EventEmitter();
        this.previousValue = null;
        this.maxLengthMapper = MAX_DAY_RANGE_LENGTH_MAPPER;
        this.mapper = (items, min, max, minLength, otherDateText = '') => [
            ...items.filter(item => (minLength === null ||
                item.range.from.append(minLength).daySameOrBefore(item.range.to)) &&
                (min === null || item.range.to.daySameOrAfter(min)) &&
                (max === null || item.range.from.daySameOrBefore(max))),
            otherDateText,
        ];
        if (!valueChanges) {
            return;
        }
        valueChanges.pipe(tuiWatch(cdr), takeUntil(destroy$)).subscribe(value => {
            this.value = value;
        });
    }
    get computedMin() {
        var _a;
        return (_a = this.min) !== null && _a !== void 0 ? _a : TUI_FIRST_DAY;
    }
    get computedMax() {
        var _a;
        return (_a = this.max) !== null && _a !== void 0 ? _a : TUI_LAST_DAY;
    }
    onEsc(event) {
        var _a;
        if (event.key !== 'Escape' || !((_a = this.value) === null || _a === void 0 ? void 0 : _a.isSingleDay)) {
            return;
        }
        event.stopPropagation();
        this.value = this.previousValue;
    }
    get calculatedDisabledItemHandler() {
        return this.calculateDisabledItemHandler(this.disabledItemHandler, this.value, this.minLength);
    }
    get computedMonth() {
        return this.value ? this.value.to : this.defaultViewedMonth;
    }
    isItemActive(item) {
        const { activePeriod } = this;
        return (tuiIsString(item) && activePeriod === null) || activePeriod === item;
    }
    // TODO: investigate if it is used anywhere and (if not) delete it in v4.0
    onRangeChange(dayRange) {
        this.updateValue(dayRange);
    }
    onDayClick(day) {
        const { value } = this;
        this.previousValue = value;
        if (value === null || !value.isSingleDay) {
            this.value = new TuiDayRange(day, day);
            return;
        }
        this.updateValue(TuiDayRange.sort(value.from, day));
    }
    onItemSelect(item) {
        if (typeof item !== 'string') {
            this.updateValue(item.range.dayLimit(this.min, this.max));
            return;
        }
        if (this.activePeriod !== null) {
            this.updateValue(null);
        }
    }
    updateValue(value) {
        this.value = value;
        this.valueChange.emit(value);
    }
    get activePeriod() {
        return (this.items.find(item => tuiNullableSame(this.value, item.range, (a, b) => a.from.daySame(b.from.dayLimit(this.min, this.max)) &&
            a.to.daySame(b.to.dayLimit(this.min, this.max)))) || null);
    }
    calculateDisabledItemHandler(disabledItemHandler, value, minLength) {
        return item => {
            if (!(value === null || value === void 0 ? void 0 : value.isSingleDay) || !minLength) {
                return disabledItemHandler(item);
            }
            const negativeMinLength = tuiObjectFromEntries(Object.entries(minLength).map(([key, value]) => [key, -value]));
            const disabledBefore = value.from.append(negativeMinLength).append({ day: 1 });
            const disabledAfter = value.from.append(minLength).append({ day: -1 });
            const inDisabledRange = disabledBefore.dayBefore(item) && disabledAfter.dayAfter(item);
            return inDisabledRange || disabledItemHandler(item);
        };
    }
}
TuiCalendarRangeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiCalendarRangeComponent, deps: [{ token: TUI_CALENDAR_DATE_STREAM, optional: true }, { token: ChangeDetectorRef }, { token: TuiDestroyService, self: true }, { token: TUI_OTHER_DATE_TEXT }, { token: TUI_COMMON_ICONS }], target: i0.ɵɵFactoryTarget.Component });
TuiCalendarRangeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiCalendarRangeComponent, selector: "tui-calendar-range", inputs: { defaultViewedMonth: "defaultViewedMonth", disabledItemHandler: "disabledItemHandler", markerHandler: "markerHandler", items: "items", min: "min", max: "max", minLength: "minLength", maxLength: "maxLength", value: "value" }, outputs: { valueChange: "valueChange" }, host: { listeners: { "document:keydown.capture": "onEsc($event)" } }, providers: [TuiDestroyService], ngImport: i0, template: "<tui-primitive-calendar-range\n    *ngIf=\"!items.length; else presets\"\n    automation-id=\"tui-calendar-range__calendars\"\n    tuiPreventDefault=\"mousedown\"\n    [defaultViewedMonthFirst]=\"defaultViewedMonth\"\n    [disabledItemHandler]=\"calculatedDisabledItemHandler\"\n    [markerHandler]=\"markerHandler\"\n    [max]=\"computedMax | tuiMapper: maxLengthMapper : value : maxLength : false\"\n    [min]=\"computedMin | tuiMapper: maxLengthMapper : value : maxLength : true\"\n    [value]=\"value\"\n    (dayClick)=\"onDayClick($event)\"\n></tui-primitive-calendar-range>\n<ng-template #presets>\n    <div class=\"t-wrapper\">\n        <tui-calendar\n            automation-id=\"tui-calendar-range__calendar\"\n            tuiPreventDefault=\"mousedown\"\n            [disabledItemHandler]=\"calculatedDisabledItemHandler\"\n            [markerHandler]=\"markerHandler\"\n            [max]=\"computedMax | tuiMapper: maxLengthMapper : value : maxLength : false\"\n            [min]=\"computedMin | tuiMapper: maxLengthMapper : value : maxLength : true\"\n            [month]=\"computedMonth\"\n            [value]=\"value\"\n            (dayClick)=\"onDayClick($event)\"\n        ></tui-calendar>\n        <tui-data-list\n            automation-id=\"tui-calendar-range__menu\"\n            role=\"menu\"\n            class=\"t-menu\"\n        >\n            <button\n                *ngFor=\"let item of items | tuiMapper: mapper : min : max : minLength : (otherDateText$ | async)\"\n                automation-id=\"tui-calendar-range__menu__item\"\n                role=\"menuitemradio\"\n                tuiOption\n                tuiPreventDefault=\"mousedown\"\n                [attr.aria-checked]=\"isItemActive(item)\"\n                (click)=\"onItemSelect(item)\"\n                (keydown.enter.prevent)=\"onItemSelect(item)\"\n                (keydown.space.prevent)=\"onItemSelect(item)\"\n            >\n                {{ item }}\n                <tui-svg\n                    *ngIf=\"isItemActive(item)\"\n                    automation-id=\"tui-calendar-range__checkmark\"\n                    class=\"t-checkmark\"\n                    [src]=\"icons.check\"\n                ></tui-svg>\n            </button>\n        </tui-data-list>\n    </div>\n</ng-template>\n", styles: [":host{display:block}.t-wrapper{display:flex}.t-menu{width:11rem;border-left:1px solid var(--tui-base-03)}.t-checkmark{margin-left:auto;width:1rem;height:1rem}\n"], components: [{ type: i1.TuiPrimitiveCalendarRangeComponent, selector: "tui-primitive-calendar-range", inputs: ["disabledItemHandler", "markerHandler", "defaultViewedMonthFirst", "defaultViewedMonthSecond", "min", "max", "value"], outputs: ["dayClick"] }, { type: i2.TuiCalendarComponent, selector: "tui-calendar", inputs: ["initialView", "month", "disabledItemHandler", "min", "max", "minViewedMonth", "maxViewedMonth", "hoveredItem", "showAdjacent", "markerHandler", "value"], outputs: ["dayClick", "monthChange", "hoveredItemChange"] }, { type: i2.TuiDataListComponent, selector: "tui-data-list", inputs: ["role", "emptyContent", "size"] }, { type: i2.TuiOptionComponent, selector: "button[tuiOption], a[tuiOption]", inputs: ["size", "role", "disabled", "value"] }, { type: i2.TuiSvgComponent, selector: "tui-svg", inputs: ["src"] }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.TuiPreventDefaultDirective, selector: "[tuiPreventDefault]", inputs: ["tuiPreventDefault"] }, { type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "tuiMapper": i4.TuiMapperPipe, "async": i3.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiPure
], TuiCalendarRangeComponent.prototype, "calculateDisabledItemHandler", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiCalendarRangeComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-calendar-range',
                    templateUrl: './calendar-range.template.html',
                    styleUrls: ['./calendar-range.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [TuiDestroyService],
                }]
        }], ctorParameters: function () { return [{ type: i5.Observable, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TUI_CALENDAR_DATE_STREAM]
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: i4.TuiDestroyService, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiDestroyService]
                }] }, { type: i5.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_OTHER_DATE_TEXT]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_COMMON_ICONS]
                }] }]; }, propDecorators: { defaultViewedMonth: [{
                type: Input
            }], disabledItemHandler: [{
                type: Input
            }], markerHandler: [{
                type: Input
            }], items: [{
                type: Input
            }], min: [{
                type: Input
            }], max: [{
                type: Input
            }], minLength: [{
                type: Input
            }], maxLength: [{
                type: Input
            }], value: [{
                type: Input
            }], valueChange: [{
                type: Output
            }], onEsc: [{
                type: HostListener,
                args: ['document:keydown.capture', ['$event']]
            }], calculateDisabledItemHandler: [] } });
//# sourceMappingURL=data:application/json;base64,