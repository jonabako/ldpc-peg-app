import { ChangeDetectionStrategy, Component, HostBinding, Inject, Input, } from '@angular/core';
import { tuiIsString } from '@taiga-ui/cdk';
import { MODE_PROVIDER, TUI_MODE } from '@taiga-ui/core';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/cdk";
import * as i2 from "rxjs";
/**
 * @deprecated Use {@link http://taiga-ui.dev/experimental/progress-segmented TuiProgressSegmentedModule} (from `@taiga-ui/experimental`)
 * TODO: delete in v4.0
 */
export class TuiProgressSegmentedComponent {
    constructor(mode$) {
        this.mode$ = mode$;
        this.value = 0;
        this.max = 1;
        this.size = 'm';
        this.colors = 'currentColor';
    }
    getActiveColor(index = 0) {
        return tuiIsString(this.colors)
            ? this.colors
            : this.colors[index] || this.colors[this.colors.length - 1];
    }
}
TuiProgressSegmentedComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiProgressSegmentedComponent, deps: [{ token: TUI_MODE }], target: i0.ɵɵFactoryTarget.Component });
TuiProgressSegmentedComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiProgressSegmentedComponent, selector: "tui-progress-segmented", inputs: { value: "value", max: "max", size: "size", colors: "colors" }, host: { listeners: { "$.data-mode.attr": "mode$" }, properties: { "attr.data-size": "this.size" } }, providers: [MODE_PROVIDER], ngImport: i0, template: "<progress\n    class=\"t-hidden-progress\"\n    [max]=\"max\"\n    [value]=\"value\"\n></progress>\n\n<span\n    *tuiRepeatTimes=\"let index of max\"\n    aria-hidden=\"true\"\n    class=\"t-segment\"\n    [style.background]=\"index < value ? getActiveColor(index) : null\"\n></span>\n", styles: [":host{display:flex;color:var(--tui-primary)}:host[data-mode=onDark]{--tui-clear: var(--tui-clear-inverse)}.t-segment{transition-property:background;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;flex:1 1 100%;border-radius:var(--tui-radius-xs);background:var(--tui-clear)}.t-segment:not(:last-child){margin-right:.25rem}:host[data-size=s] .t-segment{height:.25rem}:host[data-size=m] .t-segment{height:.5rem}.t-hidden-progress{position:absolute;clip:rect(1px,1px,1px,1px);-webkit-clip-path:inset(50%);clip-path:inset(50%);height:1px;width:1px;margin:-1px;overflow:hidden;padding:0}\n"], directives: [{ type: i1.TuiRepeatTimesDirective, selector: "[tuiRepeatTimes][tuiRepeatTimesOf]", inputs: ["tuiRepeatTimesOf"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiProgressSegmentedComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-progress-segmented',
                    templateUrl: './progress-segmented.template.html',
                    styleUrls: ['./progress-segmented.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [MODE_PROVIDER],
                    host: {
                        '($.data-mode.attr)': 'mode$',
                    },
                }]
        }], ctorParameters: function () { return [{ type: i2.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_MODE]
                }] }]; }, propDecorators: { value: [{
                type: Input
            }], max: [{
                type: Input
            }], size: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.data-size']
            }], colors: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZ3Jlc3Mtc2VnbWVudGVkLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2tpdC9jb21wb25lbnRzL3Byb2dyZXNzL3Byb2dyZXNzLXNlZ21lbnRlZC9wcm9ncmVzcy1zZWdtZW50ZWQuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMva2l0L2NvbXBvbmVudHMvcHJvZ3Jlc3MvcHJvZ3Jlc3Mtc2VnbWVudGVkL3Byb2dyZXNzLXNlZ21lbnRlZC50ZW1wbGF0ZS5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDSCx1QkFBdUIsRUFDdkIsU0FBUyxFQUNULFdBQVcsRUFDWCxNQUFNLEVBQ04sS0FBSyxHQUNSLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDMUMsT0FBTyxFQUFDLGFBQWEsRUFBRSxRQUFRLEVBQTBCLE1BQU0sZ0JBQWdCLENBQUM7Ozs7QUFHaEY7OztHQUdHO0FBV0gsTUFBTSxPQUFPLDZCQUE2QjtJQWN0QyxZQUF1QyxLQUF1QztRQUF2QyxVQUFLLEdBQUwsS0FBSyxDQUFrQztRQVo5RSxVQUFLLEdBQUcsQ0FBQyxDQUFDO1FBR1YsUUFBRyxHQUFHLENBQUMsQ0FBQztRQUlSLFNBQUksR0FBYSxHQUFHLENBQUM7UUFHckIsV0FBTSxHQUErQixjQUFjLENBQUM7SUFFNkIsQ0FBQztJQUVsRixjQUFjLENBQUMsUUFBZ0IsQ0FBQztRQUM1QixPQUFPLFdBQVcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO1lBQzNCLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTTtZQUNiLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDcEUsQ0FBQzs7MkhBcEJRLDZCQUE2QixrQkFjbEIsUUFBUTsrR0FkbkIsNkJBQTZCLDhOQUwzQixDQUFDLGFBQWEsQ0FBQywwQkNwQjlCLCtSQVlBOzRGRGFhLDZCQUE2QjtrQkFWekMsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsd0JBQXdCO29CQUNsQyxXQUFXLEVBQUUsb0NBQW9DO29CQUNqRCxTQUFTLEVBQUUsQ0FBQyxpQ0FBaUMsQ0FBQztvQkFDOUMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07b0JBQy9DLFNBQVMsRUFBRSxDQUFDLGFBQWEsQ0FBQztvQkFDMUIsSUFBSSxFQUFFO3dCQUNGLG9CQUFvQixFQUFFLE9BQU87cUJBQ2hDO2lCQUNKOzswQkFlZ0IsTUFBTTsyQkFBQyxRQUFROzRDQVo1QixLQUFLO3NCQURKLEtBQUs7Z0JBSU4sR0FBRztzQkFERixLQUFLO2dCQUtOLElBQUk7c0JBRkgsS0FBSzs7c0JBQ0wsV0FBVzt1QkFBQyxnQkFBZ0I7Z0JBSTdCLE1BQU07c0JBREwsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gICAgQ29tcG9uZW50LFxuICAgIEhvc3RCaW5kaW5nLFxuICAgIEluamVjdCxcbiAgICBJbnB1dCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge3R1aUlzU3RyaW5nfSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7TU9ERV9QUk9WSURFUiwgVFVJX01PREUsIFR1aUJyaWdodG5lc3MsIFR1aVNpemVTfSBmcm9tICdAdGFpZ2EtdWkvY29yZSc7XG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuXG4vKipcbiAqIEBkZXByZWNhdGVkIFVzZSB7QGxpbmsgaHR0cDovL3RhaWdhLXVpLmRldi9leHBlcmltZW50YWwvcHJvZ3Jlc3Mtc2VnbWVudGVkIFR1aVByb2dyZXNzU2VnbWVudGVkTW9kdWxlfSAoZnJvbSBgQHRhaWdhLXVpL2V4cGVyaW1lbnRhbGApXG4gKiBUT0RPOiBkZWxldGUgaW4gdjQuMFxuICovXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ3R1aS1wcm9ncmVzcy1zZWdtZW50ZWQnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9wcm9ncmVzcy1zZWdtZW50ZWQudGVtcGxhdGUuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vcHJvZ3Jlc3Mtc2VnbWVudGVkLnN0eWxlLmxlc3MnXSxcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgICBwcm92aWRlcnM6IFtNT0RFX1BST1ZJREVSXSxcbiAgICBob3N0OiB7XG4gICAgICAgICcoJC5kYXRhLW1vZGUuYXR0ciknOiAnbW9kZSQnLFxuICAgIH0sXG59KVxuZXhwb3J0IGNsYXNzIFR1aVByb2dyZXNzU2VnbWVudGVkQ29tcG9uZW50IHtcbiAgICBASW5wdXQoKVxuICAgIHZhbHVlID0gMDtcblxuICAgIEBJbnB1dCgpXG4gICAgbWF4ID0gMTtcblxuICAgIEBJbnB1dCgpXG4gICAgQEhvc3RCaW5kaW5nKCdhdHRyLmRhdGEtc2l6ZScpXG4gICAgc2l6ZTogVHVpU2l6ZVMgPSAnbSc7XG5cbiAgICBASW5wdXQoKVxuICAgIGNvbG9yczogc3RyaW5nIHwgcmVhZG9ubHkgc3RyaW5nW10gPSAnY3VycmVudENvbG9yJztcblxuICAgIGNvbnN0cnVjdG9yKEBJbmplY3QoVFVJX01PREUpIHJlYWRvbmx5IG1vZGUkOiBPYnNlcnZhYmxlPFR1aUJyaWdodG5lc3MgfCBudWxsPikge31cblxuICAgIGdldEFjdGl2ZUNvbG9yKGluZGV4OiBudW1iZXIgPSAwKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgICAgIHJldHVybiB0dWlJc1N0cmluZyh0aGlzLmNvbG9ycylcbiAgICAgICAgICAgID8gdGhpcy5jb2xvcnNcbiAgICAgICAgICAgIDogdGhpcy5jb2xvcnNbaW5kZXhdIHx8IHRoaXMuY29sb3JzW3RoaXMuY29sb3JzLmxlbmd0aCAtIDFdO1xuICAgIH1cbn1cbiIsIjxwcm9ncmVzc1xuICAgIGNsYXNzPVwidC1oaWRkZW4tcHJvZ3Jlc3NcIlxuICAgIFttYXhdPVwibWF4XCJcbiAgICBbdmFsdWVdPVwidmFsdWVcIlxuPjwvcHJvZ3Jlc3M+XG5cbjxzcGFuXG4gICAgKnR1aVJlcGVhdFRpbWVzPVwibGV0IGluZGV4IG9mIG1heFwiXG4gICAgYXJpYS1oaWRkZW49XCJ0cnVlXCJcbiAgICBjbGFzcz1cInQtc2VnbWVudFwiXG4gICAgW3N0eWxlLmJhY2tncm91bmRdPVwiaW5kZXggPCB2YWx1ZSA/IGdldEFjdGl2ZUNvbG9yKGluZGV4KSA6IG51bGxcIlxuPjwvc3Bhbj5cbiJdfQ==