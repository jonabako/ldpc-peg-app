import { ElementRef, Inject, Injectable } from '@angular/core';
import { MutationObserverService } from '@ng-web-apis/mutation-observer';
import { tuiArrayShallowEquals, tuiPx, TuiResizeService } from '@taiga-ui/cdk';
import { BehaviorSubject, combineLatest, Subscription } from 'rxjs';
import { debounceTime, distinctUntilChanged, map, startWith } from 'rxjs/operators';
import { TuiTilesComponent } from './tiles.component';
import * as i0 from "@angular/core";
import * as i1 from "./tiles.component";
import * as i2 from "rxjs";
export class TuiTileService {
    constructor(el, tiles, resize$, mutation$) {
        this.el = el;
        this.tiles = tiles;
        this.resize$ = resize$;
        this.mutation$ = mutation$;
        this.sub = new Subscription();
        this.offset$ = new BehaviorSubject([NaN, NaN]);
        this.position$ = combineLatest([
            this.offset$.pipe(distinctUntilChanged(tuiArrayShallowEquals)),
            this.resize$.pipe(startWith(null)),
            this.mutation$.pipe(startWith(null)),
            this.tiles.order$.pipe(debounceTime(0)),
        ]).pipe(map(([offset]) => offset));
    }
    init(element) {
        this.sub.add(this.position$.subscribe(offset => {
            this.setPosition(element, offset);
            this.setRect(element, offset);
        }));
    }
    setOffset(offset) {
        this.offset$.next(offset);
    }
    ngOnDestroy() {
        this.sub.unsubscribe();
    }
    getRect([left, top]) {
        return {
            top: Number.isNaN(top) ? this.el.nativeElement.offsetTop : top,
            left: Number.isNaN(left) ? this.el.nativeElement.offsetLeft : left,
            width: this.el.nativeElement.clientWidth,
            height: this.el.nativeElement.clientHeight,
            right: NaN,
            bottom: NaN,
        };
    }
    setRect({ style }, offset) {
        const { top, left, width, height } = this.getRect(offset);
        style.top = tuiPx(top);
        style.left = tuiPx(left);
        style.width = tuiPx(width);
        style.height = tuiPx(height);
    }
    setPosition(element, [left]) {
        if (!Number.isNaN(left)) {
            element.style.setProperty('position', 'fixed');
            return;
        }
        const { style } = element;
        const rect = element.getBoundingClientRect();
        const host = this.el.nativeElement.getBoundingClientRect();
        style.removeProperty('position');
        style.top = tuiPx(rect.top - host.top + this.el.nativeElement.offsetTop);
        style.left = tuiPx(rect.left - host.left + this.el.nativeElement.offsetLeft);
    }
}
TuiTileService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTileService, deps: [{ token: ElementRef }, { token: TuiTilesComponent }, { token: TuiResizeService }, { token: MutationObserverService }], target: i0.ɵɵFactoryTarget.Injectable });
TuiTileService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTileService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTileService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: i1.TuiTilesComponent, decorators: [{
                    type: Inject,
                    args: [TuiTilesComponent]
                }] }, { type: i2.Observable, decorators: [{
                    type: Inject,
                    args: [TuiResizeService]
                }] }, { type: i2.Observable, decorators: [{
                    type: Inject,
                    args: [MutationObserverService]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGlsZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMva2l0L2NvbXBvbmVudHMvdGlsZXMvdGlsZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBWSxNQUFNLGVBQWUsQ0FBQztBQUN4RSxPQUFPLEVBQUMsdUJBQXVCLEVBQUMsTUFBTSxnQ0FBZ0MsQ0FBQztBQUN2RSxPQUFPLEVBQUMscUJBQXFCLEVBQUUsS0FBSyxFQUFFLGdCQUFnQixFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzdFLE9BQU8sRUFBQyxlQUFlLEVBQUUsYUFBYSxFQUFjLFlBQVksRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUM5RSxPQUFPLEVBQUMsWUFBWSxFQUFFLG9CQUFvQixFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUVsRixPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQzs7OztBQUdwRCxNQUFNLE9BQU8sY0FBYztJQVl2QixZQUN5QyxFQUEyQixFQUNwQixLQUF3QixFQUN6QixPQUE0QixFQUNyQixTQUE4QjtRQUgzQyxPQUFFLEdBQUYsRUFBRSxDQUF5QjtRQUNwQixVQUFLLEdBQUwsS0FBSyxDQUFtQjtRQUN6QixZQUFPLEdBQVAsT0FBTyxDQUFxQjtRQUNyQixjQUFTLEdBQVQsU0FBUyxDQUFxQjtRQWZuRSxRQUFHLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUV6QixZQUFPLEdBQUcsSUFBSSxlQUFlLENBQTRCLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFFckUsY0FBUyxHQUEwQyxhQUFhLENBQUM7WUFDOUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMscUJBQXFCLENBQUMsQ0FBQztZQUM5RCxJQUFJLENBQUMs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QUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ2pDLEtBQUssQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN6RSxLQUFLLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDakYsQ0FBQzs7NEdBdEVRLGNBQWMsa0JBYVgsVUFBVSxhQUNWLGlCQUFpQixhQUNqQixnQkFBZ0IsYUFDaEIsdUJBQXVCO2dIQWhCMUIsY0FBYzs0RkFBZCxjQUFjO2tCQUQxQixVQUFVOzswQkFjRixNQUFNOzJCQUFDLFVBQVU7OzBCQUNqQixNQUFNOzJCQUFDLGlCQUFpQjs7MEJBQ3hCLE1BQU07MkJBQUMsZ0JBQWdCOzswQkFDdkIsTUFBTTsyQkFBQyx1QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0VsZW1lbnRSZWYsIEluamVjdCwgSW5qZWN0YWJsZSwgT25EZXN0cm95fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7TXV0YXRpb25PYnNlcnZlclNlcnZpY2V9IGZyb20gJ0BuZy13ZWItYXBpcy9tdXRhdGlvbi1vYnNlcnZlcic7XG5pbXBvcnQge3R1aUFycmF5U2hhbGxvd0VxdWFscywgdHVpUHgsIFR1aVJlc2l6ZVNlcnZpY2V9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtCZWhhdmlvclN1YmplY3QsIGNvbWJpbmVMYXRlc3QsIE9ic2VydmFibGUsIFN1YnNjcmlwdGlvbn0gZnJvbSAncnhqcyc7XG5pbXBvcnQge2RlYm91bmNlVGltZSwgZGlzdGluY3RVbnRpbENoYW5nZWQsIG1hcCwgc3RhcnRXaXRofSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7VHVpVGlsZXNDb21wb25lbnR9IGZyb20gJy4vdGlsZXMuY29tcG9uZW50JztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFR1aVRpbGVTZXJ2aWNlIGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IHN1YiA9IG5ldyBTdWJzY3JpcHRpb24oKTtcblxuICAgIHByaXZhdGUgcmVhZG9ubHkgb2Zmc2V0JCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8cmVhZG9ubHkgW251bWJlciwgbnVtYmVyXT4oW05hTiwgTmFOXSk7XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IHBvc2l0aW9uJDogT2JzZXJ2YWJsZTxyZWFkb25seSBbbnVtYmVyLCBudW1iZXJdPiA9IGNvbWJpbmVMYXRlc3QoW1xuICAgICAgICB0aGlzLm9mZnNldCQucGlwZShkaXN0aW5jdFVudGlsQ2hhbmdlZCh0dWlBcnJheVNoYWxsb3dFcXVhbHMpKSxcbiAgICAgICAgdGhpcy5yZXNpemUkLnBpcGUoc3RhcnRXaXRoKG51bGwpKSxcbiAgICAgICAgdGhpcy5tdXRhdGlvbiQucGlwZShzdGFydFdpdGgobnVsbCkpLFxuICAgICAgICB0aGlzLnRpbGVzLm9yZGVyJC5waXBlKGRlYm91bmNlVGltZSgwKSksXG4gICAgXSkucGlwZShtYXAoKFtvZmZzZXRdKSA9PiBvZmZzZXQpKTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KEVsZW1lbnRSZWYpIHByaXZhdGUgcmVhZG9ubHkgZWw6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+LFxuICAgICAgICBASW5qZWN0KFR1aVRpbGVzQ29tcG9uZW50KSBwcml2YXRlIHJlYWRvbmx5IHRpbGVzOiBUdWlUaWxlc0NvbXBvbmVudCxcbiAgICAgICAgQEluamVjdChUdWlSZXNpemVTZXJ2aWNlKSBwcml2YXRlIHJlYWRvbmx5IHJlc2l6ZSQ6IE9ic2VydmFibGU8dW5rbm93bj4sXG4gICAgICAgIEBJbmplY3QoTXV0YXRpb25PYnNlcnZlclNlcnZpY2UpIHByaXZhdGUgcmVhZG9ubHkgbXV0YXRpb24kOiBPYnNlcnZhYmxlPHVua25vd24+LFxuICAgICkge31cblxuICAgIGluaXQoZWxlbWVudDogSFRNTEVsZW1lbnQpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5zdWIuYWRkKFxuICAgICAgICAgICAgdGhpcy5wb3NpdGlvbiQuc3Vic2NyaWJlKG9mZnNldCA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRQb3NpdGlvbihlbGVtZW50LCBvZmZzZXQpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0UmVjdChlbGVtZW50LCBvZmZzZXQpO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgc2V0T2Zmc2V0KG9mZnNldDogcmVhZG9ubHkgW251bWJlciwgbnVtYmVyXSk6IHZvaWQge1xuICAgICAgICB0aGlzLm9mZnNldCQubmV4dChvZmZzZXQpO1xuICAgIH1cblxuICAgIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgICAgICB0aGlzLnN1Yi51bnN1YnNjcmliZSgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0UmVjdChbbGVmdCwgdG9wXTogcmVhZG9ubHkgW251bWJlciwgbnVtYmVyXSk6IENsaWVudFJlY3Qge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdG9wOiBOdW1iZXIuaXNOYU4odG9wKSA/IHRoaXMuZWwubmF0aXZlRWxlbWVudC5vZmZzZXRUb3AgOiB0b3AsXG4gICAgICAgICAgICBsZWZ0OiBOdW1iZXIuaXNOYU4obGVmdCkgPyB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQub2Zmc2V0TGVmdCA6IGxlZnQsXG4gICAgICAgICAgICB3aWR0aDogdGhpcy5lbC5uYXRpdmVFbGVtZW50LmNsaWVudFdpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0OiB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuY2xpZW50SGVpZ2h0LFxuICAgICAgICAgICAgcmlnaHQ6IE5hTixcbiAgICAgICAgICAgIGJvdHRvbTogTmFOLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHByaXZhdGUgc2V0UmVjdCh7c3R5bGV9OiBIVE1MRWxlbWVudCwgb2Zmc2V0OiByZWFkb25seSBbbnVtYmVyLCBudW1iZXJdKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHt0b3AsIGxlZnQsIHdpZHRoLCBoZWlnaHR9ID0gdGhpcy5nZXRSZWN0KG9mZnNldCk7XG5cbiAgICAgICAgc3R5bGUudG9wID0gdHVpUHgodG9wKTtcbiAgICAgICAgc3R5bGUubGVmdCA9IHR1aVB4KGxlZnQpO1xuICAgICAgICBzdHlsZS53aWR0aCA9IHR1aVB4KHdpZHRoKTtcbiAgICAgICAgc3R5bGUuaGVpZ2h0ID0gdHVpUHgoaGVpZ2h0KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNldFBvc2l0aW9uKGVsZW1lbnQ6IEhUTUxFbGVtZW50LCBbbGVmdF06IHJlYWRvbmx5IFtudW1iZXIsIG51bWJlcl0pOiB2b2lkIHtcbiAgICAgICAgaWYgKCFOdW1iZXIuaXNOYU4obGVmdCkpIHtcbiAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUuc2V0UHJvcGVydHkoJ3Bvc2l0aW9uJywgJ2ZpeGVkJyk7XG5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHtzdHlsZX0gPSBlbGVtZW50O1xuICAgICAgICBjb25zdCByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgY29uc3QgaG9zdCA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgICBzdHlsZS5yZW1vdmVQcm9wZXJ0eSgncG9zaXRpb24nKTtcbiAgICAgICAgc3R5bGUudG9wID0gdHVpUHgocmVjdC50b3AgLSBob3N0LnRvcCArIHRoaXMuZWwubmF0aXZlRWxlbWVudC5vZmZzZXRUb3ApO1xuICAgICAgICBzdHlsZS5sZWZ0ID0gdHVpUHgocmVjdC5sZWZ0IC0gaG9zdC5sZWZ0ICsgdGhpcy5lbC5uYXRpdmVFbGVtZW50Lm9mZnNldExlZnQpO1xuICAgIH1cbn1cbiJdfQ==