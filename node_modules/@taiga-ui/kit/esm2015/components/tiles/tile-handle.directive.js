import { __decorate } from "tslib";
import { Directive, HostListener, Inject } from '@angular/core';
import { tuiGetActualTarget, tuiIsElement } from '@taiga-ui/cdk';
import { shouldCall } from '@tinkoff/ng-event-plugins';
import { TuiTileComponent } from './tile.component';
import * as i0 from "@angular/core";
import * as i1 from "./tile.component";
function isInteracting(x = NaN) {
    return !Number.isNaN(x) || !Number.isNaN(this['x']);
}
function isDragging() {
    return !Number.isNaN(this['x']);
}
export class TuiTileHandleDirective {
    constructor(tile) {
        this.tile = tile;
        this.x = NaN;
        this.y = NaN;
    }
    onStart(event) {
        const target = tuiGetActualTarget(event);
        const { x, y, pointerId } = event;
        if (tuiIsElement(target)) {
            target.releasePointerCapture(pointerId);
        }
        this.onPointer(x, y);
    }
    onPointer(x = NaN, y = NaN) {
        const { left, top } = this.tile.element.getBoundingClientRect();
        this.x = x - left;
        this.y = y - top;
        this.tile.onDrag([NaN, NaN]);
    }
    onMove(x, y) {
        this.tile.onDrag([x - this.x, y - this.y]);
    }
}
TuiTileHandleDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTileHandleDirective, deps: [{ token: TuiTileComponent }], target: i0.ɵɵFactoryTarget.Directive });
TuiTileHandleDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiTileHandleDirective, selector: "[tuiTileHandle]", host: { listeners: { "pointerdown.silent": "onStart($event)", "document:pointerup.silent": "onPointer()", "document:pointermove.silent": "onMove($event.x,$event.y)" }, properties: { "style.touchAction": "\"none\"", "style.userSelect": "\"none\"" } }, ngImport: i0 });
__decorate([
    shouldCall(isInteracting)
], TuiTileHandleDirective.prototype, "onPointer", null);
__decorate([
    shouldCall(isDragging)
], TuiTileHandleDirective.prototype, "onMove", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTileHandleDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiTileHandle]',
                    host: {
                        '[style.touchAction]': '"none"',
                        '[style.userSelect]': '"none"',
                    },
                }]
        }], ctorParameters: function () { return [{ type: i1.TuiTileComponent, decorators: [{
                    type: Inject,
                    args: [TuiTileComponent]
                }] }]; }, propDecorators: { onStart: [{
                type: HostListener,
                args: ['pointerdown.silent', ['$event']]
            }], onPointer: [{
                type: HostListener,
                args: ['document:pointerup.silent']
            }], onMove: [{
                type: HostListener,
                args: ['document:pointermove.silent', ['$event.x', '$event.y']]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGlsZS1oYW5kbGUuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMva2l0L2NvbXBvbmVudHMvdGlsZXMvdGlsZS1oYW5kbGUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFDLGtCQUFrQixFQUFFLFlBQVksRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUMvRCxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFFckQsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0sa0JBQWtCLENBQUM7OztBQUVsRCxTQUFTLGFBQWEsQ0FBK0IsQ0FBQyxHQUFHLEdBQUc7SUFDeEQsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3hELENBQUM7QUFFRCxTQUFTLFVBQVU7SUFDZixPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUNwQyxDQUFDO0FBU0QsTUFBTSxPQUFPLHNCQUFzQjtJQUkvQixZQUF1RCxJQUFzQjtRQUF0QixTQUFJLEdBQUosSUFBSSxDQUFrQjtRQUhyRSxNQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ1IsTUFBQyxHQUFHLEdBQUcsQ0FBQztJQUVnRSxDQUFDO0lBR2pGLE9BQU8sQ0FBQyxLQUFtQjtRQUN2QixNQUFNLE1BQU0sR0FBRyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN6QyxNQUFNLEVBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxTQUFTLEVBQUMsR0FBRyxLQUFLLENBQUM7UUFFaEMsSUFBSSxZQUFZLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDdEIsTUFBTSxDQUFDLHFCQUFxQixDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQzNDO1FBRUQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDekIsQ0FBQztJQUlELFNBQVMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsR0FBRyxHQUFHO1FBQ3RCLE1BQU0sRUFBQyxJQUFJLEVBQUUsR0FBRyxFQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMscUJBQXFCLEVBQUUsQ0FBQztRQUU5RCxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUM7UUFDbEIsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUlELE1BQU0sQ0FBQyxDQUFTLEVBQUUsQ0FBUztRQUN2QixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQyxDQUFDOztvSEFoQ1Esc0JBQXNCLGtCQUlYLGdCQUFnQjt3R0FKM0Isc0JBQXNCO0FBb0IvQjtJQUZDLFVBQVUsQ0FBQyxhQUFhLENBQUM7dURBUXpCO0FBSUQ7SUFGQyxVQUFVLENBQUMsVUFBVSxDQUFDO29EQUl0Qjs0RkFoQ1Esc0JBQXNCO2tCQVBsQyxTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSxpQkFBaUI7b0JBQzNCLElBQUksRUFBRTt3QkFDRixxQkFBcUIsRUFBRSxRQUFRO3dCQUMvQixvQkFBb0IsRUFBRSxRQUFRO3FCQUNqQztpQkFDSjs7MEJBS2dCLE1BQU07MkJBQUMsZ0JBQWdCOzRDQUdwQyxPQUFPO3NCQUROLFlBQVk7dUJBQUMsb0JBQW9CLEVBQUUsQ0FBQyxRQUFRLENBQUM7Z0JBYzlDLFNBQVM7c0JBRFIsWUFBWTt1QkFBQywyQkFBMkI7Z0JBV3pDLE1BQU07c0JBREwsWUFBWTt1QkFBQyw2QkFBNkIsRUFBRSxDQUFDLFVBQVUsRUFBRSxVQUFVLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgSG9zdExpc3RlbmVyLCBJbmplY3R9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHt0dWlHZXRBY3R1YWxUYXJnZXQsIHR1aUlzRWxlbWVudH0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge3Nob3VsZENhbGx9IGZyb20gJ0B0aW5rb2ZmL25nLWV2ZW50LXBsdWdpbnMnO1xuXG5pbXBvcnQge1R1aVRpbGVDb21wb25lbnR9IGZyb20gJy4vdGlsZS5jb21wb25lbnQnO1xuXG5mdW5jdGlvbiBpc0ludGVyYWN0aW5nKHRoaXM6IFR1aVRpbGVIYW5kbGVEaXJlY3RpdmUsIHggPSBOYU4pOiBib29sZWFuIHtcbiAgICByZXR1cm4gIU51bWJlci5pc05hTih4KSB8fCAhTnVtYmVyLmlzTmFOKHRoaXNbJ3gnXSk7XG59XG5cbmZ1bmN0aW9uIGlzRHJhZ2dpbmcodGhpczogVHVpVGlsZUhhbmRsZURpcmVjdGl2ZSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhTnVtYmVyLmlzTmFOKHRoaXNbJ3gnXSk7XG59XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW3R1aVRpbGVIYW5kbGVdJyxcbiAgICBob3N0OiB7XG4gICAgICAgICdbc3R5bGUudG91Y2hBY3Rpb25dJzogJ1wibm9uZVwiJyxcbiAgICAgICAgJ1tzdHlsZS51c2VyU2VsZWN0XSc6ICdcIm5vbmVcIicsXG4gICAgfSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpVGlsZUhhbmRsZURpcmVjdGl2ZSB7XG4gICAgcHJpdmF0ZSB4ID0gTmFOO1xuICAgIHByaXZhdGUgeSA9IE5hTjtcblxuICAgIGNvbnN0cnVjdG9yKEBJbmplY3QoVHVpVGlsZUNvbXBvbmVudCkgcHJpdmF0ZSByZWFkb25seSB0aWxlOiBUdWlUaWxlQ29tcG9uZW50KSB7fVxuXG4gICAgQEhvc3RMaXN0ZW5lcigncG9pbnRlcmRvd24uc2lsZW50JywgWyckZXZlbnQnXSlcbiAgICBvblN0YXJ0KGV2ZW50OiBQb2ludGVyRXZlbnQpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gdHVpR2V0QWN0dWFsVGFyZ2V0KGV2ZW50KTtcbiAgICAgICAgY29uc3Qge3gsIHksIHBvaW50ZXJJZH0gPSBldmVudDtcblxuICAgICAgICBpZiAodHVpSXNFbGVtZW50KHRhcmdldCkpIHtcbiAgICAgICAgICAgIHRhcmdldC5yZWxlYXNlUG9pbnRlckNhcHR1cmUocG9pbnRlcklkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMub25Qb2ludGVyKHgsIHkpO1xuICAgIH1cblxuICAgIEBzaG91bGRDYWxsKGlzSW50ZXJhY3RpbmcpXG4gICAgQEhvc3RMaXN0ZW5lcignZG9jdW1lbnQ6cG9pbnRlcnVwLnNpbGVudCcpXG4gICAgb25Qb2ludGVyKHggPSBOYU4sIHkgPSBOYU4pOiB2b2lkIHtcbiAgICAgICAgY29uc3Qge2xlZnQsIHRvcH0gPSB0aGlzLnRpbGUuZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgICB0aGlzLnggPSB4IC0gbGVmdDtcbiAgICAgICAgdGhpcy55ID0geSAtIHRvcDtcbiAgICAgICAgdGhpcy50aWxlLm9uRHJhZyhbTmFOLCBOYU5dKTtcbiAgICB9XG5cbiAgICBAc2hvdWxkQ2FsbChpc0RyYWdnaW5nKVxuICAgIEBIb3N0TGlzdGVuZXIoJ2RvY3VtZW50OnBvaW50ZXJtb3ZlLnNpbGVudCcsIFsnJGV2ZW50LngnLCAnJGV2ZW50LnknXSlcbiAgICBvbk1vdmUoeDogbnVtYmVyLCB5OiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgdGhpcy50aWxlLm9uRHJhZyhbeCAtIHRoaXMueCwgeSAtIHRoaXMueV0pO1xuICAgIH1cbn1cbiJdfQ==