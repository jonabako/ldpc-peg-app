import { ChangeDetectionStrategy, Component, ElementRef, HostBinding, HostListener, Inject, Input, Output, ViewEncapsulation, } from '@angular/core';
import { MUTATION_OBSERVER_INIT, MutationObserverService, } from '@ng-web-apis/mutation-observer';
import { TuiDestroyService, TuiResizeService } from '@taiga-ui/cdk';
import { BehaviorSubject, Subject, timer } from 'rxjs';
import { debounce, filter, map } from 'rxjs/operators';
import * as i0 from "@angular/core";
export class TuiTilesComponent {
    constructor(el) {
        this.el = el;
        this.el$ = new Subject();
        this.debounce = 0;
        this.orderChange = this.el$.pipe(debounce(() => timer(this.debounce)), filter(this.filter.bind(this)), map(element => this.reorder(element)));
        this.element = null;
        this.order$ = new BehaviorSubject(new Map());
    }
    set order(map) {
        this.order$.next(map);
    }
    get order() {
        return this.order$.value;
    }
    rearrange(element) {
        this.el$.next(element);
    }
    filter(element) {
        return !!this.element && !!element && this.element !== element;
    }
    reorder(element) {
        var _a, _b;
        const elements = Array.from(this.el.nativeElement.children);
        const currentIndex = elements.indexOf(this.element || element);
        const newIndex = elements.indexOf(element);
        const order = this.order.size
            ? new Map(this.order)
            : new Map(elements.map((_, index) => [index, index]));
        const dragged = (_a = order.get(currentIndex)) !== null && _a !== void 0 ? _a : currentIndex;
        const placement = (_b = order.get(newIndex)) !== null && _b !== void 0 ? _b : newIndex;
        order.set(currentIndex, placement);
        order.set(newIndex, dragged);
        this.order$.next(order);
        return order;
    }
}
TuiTilesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTilesComponent, deps: [{ token: ElementRef }], target: i0.ɵɵFactoryTarget.Component });
TuiTilesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiTilesComponent, selector: "tui-tiles", inputs: { debounce: "debounce", order: "order" }, outputs: { orderChange: "orderChange" }, host: { listeners: { "pointerleave.silent": "rearrange()" }, properties: { "class._dragged": "this.element" } }, providers: [
        TuiDestroyService,
        TuiResizeService,
        MutationObserverService,
        {
            provide: MUTATION_OBSERVER_INIT,
            useValue: { childList: true },
        },
    ], ngImport: i0, template: '<ng-content></ng-content>', isInline: true, styles: ["tui-tiles{position:relative;z-index:0;display:grid;grid-auto-flow:dense;justify-items:stretch}tui-tiles._dragged tui-tile>.t-wrapper{pointer-events:none}tui-tiles._dragged tui-tile:not(._dragged)>.t-wrapper{transition-property:all;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;transition-delay:1ms}tui-tiles:not(._dragged) tui-tile._dragged>.t-wrapper{transition-property:all;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;transition-delay:1ms}tui-tile>.t-wrapper{position:absolute;z-index:0;border-radius:inherit}tui-tile._dragged>.t-wrapper{z-index:1;transition:none}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTilesComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-tiles',
                    template: '<ng-content></ng-content>',
                    styleUrls: ['./tiles.style.less'],
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        TuiDestroyService,
                        TuiResizeService,
                        MutationObserverService,
                        {
                            provide: MUTATION_OBSERVER_INIT,
                            useValue: { childList: true },
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }]; }, propDecorators: { debounce: [{
                type: Input
            }], order: [{
                type: Input
            }], orderChange: [{
                type: Output
            }], element: [{
                type: HostBinding,
                args: ['class._dragged']
            }], rearrange: [{
                type: HostListener,
                args: ['pointerleave.silent']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGlsZXMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMva2l0L2NvbXBvbmVudHMvdGlsZXMvdGlsZXMuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDSCx1QkFBdUIsRUFDdkIsU0FBUyxFQUNULFVBQVUsRUFDVixXQUFXLEVBQ1gsWUFBWSxFQUNaLE1BQU0sRUFDTixLQUFLLEVBQ0wsTUFBTSxFQUNOLGlCQUFpQixHQUNwQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQ0gsc0JBQXNCLEVBQ3RCLHVCQUF1QixHQUMxQixNQUFNLGdDQUFnQyxDQUFDO0FBQ3hDLE9BQU8sRUFBQyxpQkFBaUIsRUFBRSxnQkFBZ0IsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNsRSxPQUFPLEVBQUMsZUFBZSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDckQsT0FBTyxFQUFDLFFBQVEsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7O0FBa0JyRCxNQUFNLE9BQU8saUJBQWlCO0lBMkIxQixZQUFpRCxFQUF1QjtRQUF2QixPQUFFLEdBQUYsRUFBRSxDQUFxQjtRQTFCdkQsUUFBRyxHQUFHLElBQUksT0FBTyxFQUF1QixDQUFDO1FBRzFELGFBQVEsR0FBRyxDQUFDLENBQUM7UUFZSixnQkFBVyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUNoQyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUNwQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsRUFDOUIsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUN4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O3NCQURQLEtBQUs7Z0JBSUYsS0FBSztzQkFEUixLQUFLO2dCQVVHLFdBQVc7c0JBRG5CLE1BQU07Z0JBUVAsT0FBTztzQkFETixXQUFXO3VCQUFDLGdCQUFnQjtnQkFRN0IsU0FBUztzQkFEUixZQUFZO3VCQUFDLHFCQUFxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gICAgQ29tcG9uZW50LFxuICAgIEVsZW1lbnRSZWYsXG4gICAgSG9zdEJpbmRpbmcsXG4gICAgSG9zdExpc3RlbmVyLFxuICAgIEluamVjdCxcbiAgICBJbnB1dCxcbiAgICBPdXRwdXQsXG4gICAgVmlld0VuY2Fwc3VsYXRpb24sXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgICBNVVRBVElPTl9PQlNFUlZFUl9JTklULFxuICAgIE11dGF0aW9uT2JzZXJ2ZXJTZXJ2aWNlLFxufSBmcm9tICdAbmctd2ViLWFwaXMvbXV0YXRpb24tb2JzZXJ2ZXInO1xuaW1wb3J0IHtUdWlEZXN0cm95U2VydmljZSwgVHVpUmVzaXplU2VydmljZX0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge0JlaGF2aW9yU3ViamVjdCwgU3ViamVjdCwgdGltZXJ9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtkZWJvdW5jZSwgZmlsdGVyLCBtYXB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICd0dWktdGlsZXMnLFxuICAgIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gICAgc3R5bGVVcmxzOiBbJy4vdGlsZXMuc3R5bGUubGVzcyddLFxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIFR1aURlc3Ryb3lTZXJ2aWNlLFxuICAgICAgICBUdWlSZXNpemVTZXJ2aWNlLFxuICAgICAgICBNdXRhdGlvbk9ic2VydmVyU2VydmljZSxcbiAgICAgICAge1xuICAgICAgICAgICAgcHJvdmlkZTogTVVUQVRJT05fT0JTRVJWRVJfSU5JVCxcbiAgICAgICAgICAgIHVzZVZhbHVlOiB7Y2hpbGRMaXN0OiB0cnVlfSxcbiAgICAgICAgfSxcbiAgICBdLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlUaWxlc0NvbXBvbmVudCB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBlbCQgPSBuZXcgU3ViamVjdDxFbGVtZW50IHwgdW5kZWZpbmVkPigpO1xuXG4gICAgQElucHV0KClcbiAgICBkZWJvdW5jZSA9IDA7XG5cbiAgICBASW5wdXQoKVxuICAgIHNldCBvcmRlcihtYXA6IE1hcDxudW1iZXIsIG51bWJlcj4pIHtcbiAgICAgICAgdGhpcy5vcmRlciQubmV4dChtYXApO1xuICAgIH1cblxuICAgIGdldCBvcmRlcigpOiBNYXA8bnVtYmVyLCBudW1iZXI+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3JkZXIkLnZhbHVlO1xuICAgIH1cblxuICAgIEBPdXRwdXQoKVxuICAgIHJlYWRvbmx5IG9yZGVyQ2hhbmdlID0gdGhpcy5lbCQucGlwZShcbiAgICAgICAgZGVib3VuY2UoKCkgPT4gdGltZXIodGhpcy5kZWJvdW5jZSkpLFxuICAgICAgICBmaWx0ZXIodGhpcy5maWx0ZXIuYmluZCh0aGlzKSksXG4gICAgICAgIG1hcChlbGVtZW50ID0+IHRoaXMucmVvcmRlcihlbGVtZW50KSksXG4gICAgKTtcblxuICAgIEBIb3N0QmluZGluZygnY2xhc3MuX2RyYWdnZWQnKVxuICAgIGVsZW1lbnQ6IEVsZW1lbnQgfCBudWxsID0gbnVsbDtcblxuICAgIHJlYWRvbmx5IG9yZGVyJCA9IG5ldyBCZWhhdmlvclN1YmplY3QobmV3IE1hcDxudW1iZXIsIG51bWJlcj4oKSk7XG5cbiAgICBjb25zdHJ1Y3RvcihASW5qZWN0KEVsZW1lbnRSZWYpIHByaXZhdGUgcmVhZG9ubHkgZWw6IEVsZW1lbnRSZWY8RWxlbWVudD4pIHt9XG5cbiAgICBASG9zdExpc3RlbmVyKCdwb2ludGVybGVhdmUuc2lsZW50JylcbiAgICByZWFycmFuZ2UoZWxlbWVudD86IEVsZW1lbnQpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5lbCQubmV4dChlbGVtZW50KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGZpbHRlcihlbGVtZW50PzogRWxlbWVudCk6IGVsZW1lbnQgaXMgRWxlbWVudCB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuZWxlbWVudCAmJiAhIWVsZW1lbnQgJiYgdGhpcy5lbGVtZW50ICE9PSBlbGVtZW50O1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVvcmRlcihlbGVtZW50OiBFbGVtZW50KTogTWFwPG51bWJlciwgbnVtYmVyPiB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnRzID0gQXJyYXkuZnJvbSh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuY2hpbGRyZW4pO1xuICAgICAgICBjb25zdCBjdXJyZW50SW5kZXggPSBlbGVtZW50cy5pbmRleE9mKHRoaXMuZWxlbWVudCB8fCBlbGVtZW50KTtcbiAgICAgICAgY29uc3QgbmV3SW5kZXggPSBlbGVtZW50cy5pbmRleE9mKGVsZW1lbnQpO1xuICAgICAgICBjb25zdCBvcmRlciA9IHRoaXMub3JkZXIuc2l6ZVxuICAgICAgICAgICAgPyBuZXcgTWFwKHRoaXMub3JkZXIpXG4gICAgICAgICAgICA6IG5ldyBNYXAoZWxlbWVudHMubWFwKChfLCBpbmRleCkgPT4gW2luZGV4LCBpbmRleF0pKTtcbiAgICAgICAgY29uc3QgZHJhZ2dlZCA9IG9yZGVyLmdldChjdXJyZW50SW5kZXgpID8/IGN1cnJlbnRJbmRleDtcbiAgICAgICAgY29uc3QgcGxhY2VtZW50ID0gb3JkZXIuZ2V0KG5ld0luZGV4KSA/PyBuZXdJbmRleDtcblxuICAgICAgICBvcmRlci5zZXQoY3VycmVudEluZGV4LCBwbGFjZW1lbnQpO1xuICAgICAgICBvcmRlci5zZXQobmV3SW5kZXgsIGRyYWdnZWQpO1xuXG4gICAgICAgIHRoaXMub3JkZXIkLm5leHQob3JkZXIpO1xuXG4gICAgICAgIHJldHVybiBvcmRlcjtcbiAgICB9XG59XG4iXX0=