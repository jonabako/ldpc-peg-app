import { ChangeDetectionStrategy, Component, ElementRef, HostBinding, HostListener, Inject, Input, ViewChild, } from '@angular/core';
import { TuiTileService } from './tile.service';
import { TuiTilesComponent } from './tiles.component';
import * as i0 from "@angular/core";
import * as i1 from "./tile.service";
import * as i2 from "./tiles.component";
export class TuiTileComponent {
    constructor(service, el, tiles) {
        this.service = service;
        this.el = el;
        this.tiles = tiles;
        this.width = 1;
        this.height = 1;
        this.dragged = false;
    }
    get column() {
        return `span var(--tui-width, ${this.width})`;
    }
    get row() {
        return `span var(--tui-height, ${this.height})`;
    }
    get element() {
        return this.el.nativeElement;
    }
    onEnter() {
        this.tiles.rearrange(this.element);
    }
    onDrag(offset) {
        const dragged = !Number.isNaN(offset[0]);
        this.dragged = this.dragged || dragged;
        this.tiles.element = dragged ? this.element : null;
        this.service.setOffset(offset);
    }
    onTransitionEnd() {
        this.dragged = false;
    }
    ngAfterViewInit() {
        if (this.wrapper) {
            this.service.init(this.wrapper.nativeElement);
        }
    }
    ngOnDestroy() {
        if (this.tiles.element === this.element) {
            this.tiles.element = null;
        }
    }
}
TuiTileComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTileComponent, deps: [{ token: TuiTileService }, { token: ElementRef }, { token: TuiTilesComponent }], target: i0.ɵɵFactoryTarget.Component });
TuiTileComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiTileComponent, selector: "tui-tile", inputs: { width: "width", height: "height" }, host: { listeners: { "pointerenter": "onEnter()" }, properties: { "class._dragged": "this.dragged", "style.gridColumn": "this.column", "style.gridRow": "this.row" } }, providers: [TuiTileService], viewQueries: [{ propertyName: "wrapper", first: true, predicate: ["wrapper"], descendants: true }], ngImport: i0, template: "<div\n    #wrapper\n    class=\"t-wrapper\"\n    (transitionend.self)=\"onTransitionEnd()\"\n>\n    <ng-content></ng-content>\n</div>\n", changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTileComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-tile',
                    templateUrl: './tile.template.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [TuiTileService],
                }]
        }], ctorParameters: function () { return [{ type: i1.TuiTileService, decorators: [{
                    type: Inject,
                    args: [TuiTileService]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: i2.TuiTilesComponent, decorators: [{
                    type: Inject,
                    args: [TuiTilesComponent]
                }] }]; }, propDecorators: { wrapper: [{
                type: ViewChild,
                args: ['wrapper']
            }], width: [{
                type: Input
            }], height: [{
                type: Input
            }], dragged: [{
                type: HostBinding,
                args: ['class._dragged']
            }], column: [{
                type: HostBinding,
                args: ['style.gridColumn']
            }], row: [{
                type: HostBinding,
                args: ['style.gridRow']
            }], onEnter: [{
                type: HostListener,
                args: ['pointerenter']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGlsZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9raXQvY29tcG9uZW50cy90aWxlcy90aWxlLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2tpdC9jb21wb25lbnRzL3RpbGVzL3RpbGUudGVtcGxhdGUuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBRUgsdUJBQXVCLEVBQ3ZCLFNBQVMsRUFDVCxVQUFVLEVBQ1YsV0FBVyxFQUNYLFlBQVksRUFDWixNQUFNLEVBQ04sS0FBSyxFQUVMLFNBQVMsR0FDWixNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDOUMsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sbUJBQW1CLENBQUM7Ozs7QUFRcEQsTUFBTSxPQUFPLGdCQUFnQjtJQWF6QixZQUM2QyxPQUF1QixFQUMzQixFQUEyQixFQUNwQixLQUF3QjtRQUYzQixZQUFPLEdBQVAsT0FBTyxDQUFnQjtRQUMzQixPQUFFLEdBQUYsRUFBRSxDQUF5QjtRQUNwQixVQUFLLEdBQUwsS0FBSyxDQUFtQjtRQVh4RSxVQUFLLEdBQUcsQ0FBQyxDQUFDO1FBR1YsV0FBTSxHQUFHLENBQUMsQ0FBQztRQUdYLFlBQU8sR0FBRyxLQUFLLENBQUM7SUFNYixDQUFDO0lBRUosSUFDSSxNQUFNO1FBQ04sT0FBTyx5QkFBeUIsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDO0lBQ2xELENBQUM7SUFFRCxJQUNJLEdBQUc7UUFDSCxPQUFPLDBCQUEwQixJQUFJLENBQUMsTUFBTSxHQUFHLENBQUM7SUFDcEQsQ0FBQztJQUVELElBQUksT0FBTztRQUNQLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUM7SUFDakMsQ0FBQztJQUdELE9BQU87UUFDSCxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUVELE1BQU0sQ0FBQyxNQUFpQztRQUNwQyxNQUFNLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFekMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQztRQUN2QyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUNuRCxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBRUQsZUFBZTtRQUNYLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO0lBQ3pCLENBQUM7SUFFRCxlQUFlO1FBQ1gsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztTQUNqRDtJQUNMLENBQUM7SUFFRCxXQUFXO1FBQ1AsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sS0FBSyxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ3JDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztTQUM3QjtJQUNMLENBQUM7OzhHQTVEUSxnQkFBZ0Isa0JBY2IsY0FBYyxhQUNkLFVBQVUsYUFDVixpQkFBaUI7a0dBaEJwQixnQkFBZ0IseVBBRmQsQ0FBQyxjQUFjLENBQUMsOEhDcEIvQix5SUFPQTs0RkRlYSxnQkFBZ0I7a0JBTjVCLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLFVBQVU7b0JBQ3BCLFdBQVcsRUFBRSxzQkFBc0I7b0JBQ25DLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO29CQUMvQyxTQUFTLEVBQUUsQ0FBQyxjQUFjLENBQUM7aUJBQzlCOzswQkFlUSxNQUFNOzJCQUFDLGNBQWM7OzBCQUNyQixNQUFNOzJCQUFDLFVBQVU7OzBCQUNqQixNQUFNOzJCQUFDLGlCQUFpQjs0Q0FkWixPQUFPO3NCQUR2QixTQUFTO3VCQUFDLFNBQVM7Z0JBSXBCLEtBQUs7c0JBREosS0FBSztnQkFJTixNQUFNO3NCQURMLEtBQUs7Z0JBSU4sT0FBTztzQkFETixXQUFXO3VCQUFDLGdCQUFnQjtnQkFVekIsTUFBTTtzQkFEVCxXQUFXO3VCQUFDLGtCQUFrQjtnQkFNM0IsR0FBRztzQkFETixXQUFXO3VCQUFDLGVBQWU7Z0JBVTVCLE9BQU87c0JBRE4sWUFBWTt1QkFBQyxjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBBZnRlclZpZXdJbml0LFxuICAgIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICAgIENvbXBvbmVudCxcbiAgICBFbGVtZW50UmVmLFxuICAgIEhvc3RCaW5kaW5nLFxuICAgIEhvc3RMaXN0ZW5lcixcbiAgICBJbmplY3QsXG4gICAgSW5wdXQsXG4gICAgT25EZXN0cm95LFxuICAgIFZpZXdDaGlsZCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7VHVpVGlsZVNlcnZpY2V9IGZyb20gJy4vdGlsZS5zZXJ2aWNlJztcbmltcG9ydCB7VHVpVGlsZXNDb21wb25lbnR9IGZyb20gJy4vdGlsZXMuY29tcG9uZW50JztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICd0dWktdGlsZScsXG4gICAgdGVtcGxhdGVVcmw6ICcuL3RpbGUudGVtcGxhdGUuaHRtbCcsXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gICAgcHJvdmlkZXJzOiBbVHVpVGlsZVNlcnZpY2VdLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlUaWxlQ29tcG9uZW50IGltcGxlbWVudHMgT25EZXN0cm95LCBBZnRlclZpZXdJbml0IHtcbiAgICBAVmlld0NoaWxkKCd3cmFwcGVyJylcbiAgICBwcml2YXRlIHJlYWRvbmx5IHdyYXBwZXI/OiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PjtcblxuICAgIEBJbnB1dCgpXG4gICAgd2lkdGggPSAxO1xuXG4gICAgQElucHV0KClcbiAgICBoZWlnaHQgPSAxO1xuXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5fZHJhZ2dlZCcpXG4gICAgZHJhZ2dlZCA9IGZhbHNlO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoVHVpVGlsZVNlcnZpY2UpIHByaXZhdGUgcmVhZG9ubHkgc2VydmljZTogVHVpVGlsZVNlcnZpY2UsXG4gICAgICAgIEBJbmplY3QoRWxlbWVudFJlZikgcHJpdmF0ZSByZWFkb25seSBlbDogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4sXG4gICAgICAgIEBJbmplY3QoVHVpVGlsZXNDb21wb25lbnQpIHByaXZhdGUgcmVhZG9ubHkgdGlsZXM6IFR1aVRpbGVzQ29tcG9uZW50LFxuICAgICkge31cblxuICAgIEBIb3N0QmluZGluZygnc3R5bGUuZ3JpZENvbHVtbicpXG4gICAgZ2V0IGNvbHVtbigpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gYHNwYW4gdmFyKC0tdHVpLXdpZHRoLCAke3RoaXMud2lkdGh9KWA7XG4gICAgfVxuXG4gICAgQEhvc3RCaW5kaW5nKCdzdHlsZS5ncmlkUm93JylcbiAgICBnZXQgcm93KCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBgc3BhbiB2YXIoLS10dWktaGVpZ2h0LCAke3RoaXMuaGVpZ2h0fSlgO1xuICAgIH1cblxuICAgIGdldCBlbGVtZW50KCk6IEhUTUxFbGVtZW50IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWwubmF0aXZlRWxlbWVudDtcbiAgICB9XG5cbiAgICBASG9zdExpc3RlbmVyKCdwb2ludGVyZW50ZXInKVxuICAgIG9uRW50ZXIoKTogdm9pZCB7XG4gICAgICAgIHRoaXMudGlsZXMucmVhcnJhbmdlKHRoaXMuZWxlbWVudCk7XG4gICAgfVxuXG4gICAgb25EcmFnKG9mZnNldDogcmVhZG9ubHkgW251bWJlciwgbnVtYmVyXSk6IHZvaWQge1xuICAgICAgICBjb25zdCBkcmFnZ2VkID0gIU51bWJlci5pc05hTihvZmZzZXRbMF0pO1xuXG4gICAgICAgIHRoaXMuZHJhZ2dlZCA9IHRoaXMuZHJhZ2dlZCB8fCBkcmFnZ2VkO1xuICAgICAgICB0aGlzLnRpbGVzLmVsZW1lbnQgPSBkcmFnZ2VkID8gdGhpcy5lbGVtZW50IDogbnVsbDtcbiAgICAgICAgdGhpcy5zZXJ2aWNlLnNldE9mZnNldChvZmZzZXQpO1xuICAgIH1cblxuICAgIG9uVHJhbnNpdGlvbkVuZCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5kcmFnZ2VkID0gZmFsc2U7XG4gICAgfVxuXG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy53cmFwcGVyKSB7XG4gICAgICAgICAgICB0aGlzLnNlcnZpY2UuaW5pdCh0aGlzLndyYXBwZXIubmF0aXZlRWxlbWVudCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMudGlsZXMuZWxlbWVudCA9PT0gdGhpcy5lbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLnRpbGVzLmVsZW1lbnQgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiPGRpdlxuICAgICN3cmFwcGVyXG4gICAgY2xhc3M9XCJ0LXdyYXBwZXJcIlxuICAgICh0cmFuc2l0aW9uZW5kLnNlbGYpPVwib25UcmFuc2l0aW9uRW5kKClcIlxuPlxuICAgIDxuZy1jb250ZW50PjwvbmctY29udGVudD5cbjwvZGl2PlxuIl19