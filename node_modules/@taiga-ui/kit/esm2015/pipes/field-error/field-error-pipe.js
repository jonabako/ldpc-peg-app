import { __decorate } from "tslib";
import { Inject, Optional, Pipe, Self, SkipSelf } from '@angular/core';
import { ControlContainer, NgControl, } from '@angular/forms';
import { tuiIsString, tuiPure, TuiValidationError } from '@taiga-ui/cdk';
import { TUI_VALIDATION_ERRORS } from '@taiga-ui/kit/tokens';
import { isObservable, of } from 'rxjs';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
const EMPTY_RECORD = {};
function unwrapObservable(content, context) {
    return content.pipe(map(error => new TuiValidationError(error || '', context)));
}
function defaultError(content, context) {
    return of(new TuiValidationError(content || '', context));
}
export class TuiFieldErrorPipe {
    constructor(parent, self, container, validationErrors) {
        this.parent = parent;
        this.self = self;
        this.container = container;
        this.validationErrors = validationErrors;
        this.order = [];
        if (this.self && !this.self.valueAccessor) {
            this.self.valueAccessor = this;
        }
    }
    transform(order) {
        this.order = order;
        return this.computedError;
    }
    get computedError() {
        return (this.invalid && this.touched && this.error) || of(null);
    }
    registerOnChange() { }
    registerOnTouched() { }
    setDisabledState() { }
    writeValue() { }
    get error() {
        const { errorId } = this;
        if (!errorId) {
            return null;
        }
        const firstError = this.controlErrors[errorId];
        const errorContent = this.validationErrors[errorId];
        return this.getError(firstError, errorContent);
    }
    get invalid() {
        var _a;
        return !!((_a = this.control) === null || _a === void 0 ? void 0 : _a.invalid);
    }
    get touched() {
        var _a;
        return !!((_a = this.control) === null || _a === void 0 ? void 0 : _a.touched);
    }
    get control() {
        var _a, _b, _c;
        return ((_a = this.self) === null || _a === void 0 ? void 0 : _a.control) || ((_b = this.parent) === null || _b === void 0 ? void 0 : _b.control) || ((_c = this.container) === null || _c === void 0 ? void 0 : _c.control);
    }
    get errorId() {
        return this.getErrorId(this.order, this.controlErrors);
    }
    get controlErrors() {
        var _a;
        return ((_a = this.control) === null || _a === void 0 ? void 0 : _a.errors) || EMPTY_RECORD;
    }
    getErrorId(order, controlErrors) {
        const id = order === null || order === void 0 ? void 0 : order.find(errorId => controlErrors[errorId]);
        const fallback = Object.keys(controlErrors)[0];
        return id || fallback || '';
    }
    getError(context, content) {
        if (context instanceof TuiValidationError) {
            return of(context);
        }
        if (content === undefined && tuiIsString(context)) {
            return of(new TuiValidationError(context));
        }
        if (isObservable(content)) {
            return unwrapObservable(content, context);
        }
        if (content instanceof Function) {
            const message = content(context);
            return isObservable(message)
                ? unwrapObservable(message, context)
                : defaultError(message, context);
        }
        return defaultError(content, context);
    }
}
TuiFieldErrorPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiFieldErrorPipe, deps: [{ token: NgControl, optional: true, skipSelf: true }, { token: NgControl, optional: true, self: true }, { token: ControlContainer, optional: true }, { token: TUI_VALIDATION_ERRORS }], target: i0.ɵɵFactoryTarget.Pipe });
TuiFieldErrorPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiFieldErrorPipe, name: "tuiFieldError", pure: false });
__decorate([
    tuiPure
], TuiFieldErrorPipe.prototype, "getErrorId", null);
__decorate([
    tuiPure
], TuiFieldErrorPipe.prototype, "getError", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiFieldErrorPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'tuiFieldError',
                    pure: false,
                }]
        }], ctorParameters: function () { return [{ type: i1.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }, {
                    type: Inject,
                    args: [NgControl]
                }] }, { type: i1.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }, {
                    type: Inject,
                    args: [NgControl]
                }] }, { type: i1.ControlContainer, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [ControlContainer]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_VALIDATION_ERRORS]
                }] }]; }, propDecorators: { getErrorId: [], getError: [] } });
//# sourceMappingURL=data:application/json;base64,