import { Inject, Pipe } from '@angular/core';
import { CHAR_PLUS } from '@taiga-ui/cdk';
import { TuiCountryIsoCode } from '@taiga-ui/i18n';
import { TUI_COUNTRIES_MASKS } from '@taiga-ui/kit/tokens';
import { tuiGetMaxAllowedPhoneLength, tuiIsoToCountryCode, tuiNotKzRegion, } from '@taiga-ui/kit/utils';
import * as i0 from "@angular/core";
export class TuiToCountryCodePipe {
    constructor(countriesMasks) {
        this.countriesMasks = countriesMasks;
    }
    transform(value, countries) {
        return countries.find(countryIsoCode => {
            const ruCodeTest = countryIsoCode === TuiCountryIsoCode.RU &&
                /^[78]/.test(value) &&
                /^(?!880[1-9 ])/.test(value) &&
                value.length + 1 ===
                    tuiGetMaxAllowedPhoneLength(this.countriesMasks, TuiCountryIsoCode.RU);
            const matched = ruCodeTest ||
                (value.startsWith(tuiIsoToCountryCode(this.countriesMasks, countryIsoCode).replace(CHAR_PLUS, '')) &&
                    value.length + 1 ===
                        tuiGetMaxAllowedPhoneLength(this.countriesMasks, countryIsoCode));
            if (matched) {
                switch (countryIsoCode) {
                    case TuiCountryIsoCode.RU:
                        return tuiNotKzRegion(value);
                    case TuiCountryIsoCode.KZ:
                        return !tuiNotKzRegion(value);
                    default:
                        return true;
                }
            }
            return false;
        });
    }
}
TuiToCountryCodePipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiToCountryCodePipe, deps: [{ token: TUI_COUNTRIES_MASKS }], target: i0.ɵɵFactoryTarget.Pipe });
TuiToCountryCodePipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiToCountryCodePipe, name: "tuiToCountryCode" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiToCountryCodePipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'tuiToCountryCode',
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_COUNTRIES_MASKS]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG8tY291bnRyeS1jb2RlLnBpcGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9raXQvcGlwZXMvdG8tY291bnRyeS1jb2RlL3RvLWNvdW50cnktY29kZS5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxNQUFNLEVBQUUsSUFBSSxFQUFnQixNQUFNLGVBQWUsQ0FBQztBQUMxRCxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3hDLE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQ2pELE9BQU8sRUFBQyxtQkFBbUIsRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBQ3pELE9BQU8sRUFDSCwyQkFBMkIsRUFDM0IsbUJBQW1CLEVBQ25CLGNBQWMsR0FDakIsTUFBTSxxQkFBcUIsQ0FBQzs7QUFLN0IsTUFBTSxPQUFPLG9CQUFvQjtJQUM3QixZQUVxQixjQUFpRDtRQUFqRCxtQkFBYyxHQUFkLGNBQWMsQ0FBbUM7SUFDbkUsQ0FBQztJQUVKLFNBQVMsQ0FDTCxLQUFhLEVBQ2IsU0FBdUM7UUFFdkMsT0FBTyxTQUFTLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxFQUFFO1lBQ25DLE1BQU0sVUFBVSxHQUNaLGNBQWMsS0FBSyxpQkFBaUIsQ0FBQyxFQUFFO2dCQUN2QyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztnQkFDbkIsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztnQkFDNUIsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDO29CQUNaLDJCQUEyQixDQUN2QixJQUFJLENBQUMsY0FBYyxFQUNuQixpQkFBaUIsQ0FBQyxFQUFFLENBQ3ZCLENBQUM7WUFFVixNQUFNLE9BQU8sR0FDVCxVQUFVO2dCQUNWLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FDYixtQkFBbUIsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLGNBQWMsQ0FBQyxDQUFDLE9BQU8sQ0FDNUQsU0FBUyxFQUNULEVBQUUsQ0FDTCxDQUNKO29CQUNHLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQzt3QkFDWiwyQkFBMkIsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLGNBQWMsQ0FBQyxDQUFDLENBQUM7WUFFOUUsSUFBSSxPQUFPLEVBQUU7Z0JBQ1QsUUFBUSxjQUFjLEVBQUU7b0JBQ3BCLEtBQUssaUJBQWlCLENBQUMsRUFBRTt3QkFDckIsT0FBTyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7b0JBQ2pDLEtBQUssaUJBQWlCLENBQUMsRUFBRTt3QkFDckIsT0FBTyxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQztvQkFDbEM7d0JBQ0ksT0FBTyxJQUFJLENBQUM7aUJBQ25CO2FBQ0o7WUFFRCxPQUFPLEtBQUssQ0FBQztRQUNqQixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7O2tIQTdDUSxvQkFBb0Isa0JBRWpCLG1CQUFtQjtnSEFGdEIsb0JBQW9COzRGQUFwQixvQkFBb0I7a0JBSGhDLElBQUk7bUJBQUM7b0JBQ0YsSUFBSSxFQUFFLGtCQUFrQjtpQkFDM0I7OzBCQUdRLE1BQU07MkJBQUMsbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3QsIFBpcGUsIFBpcGVUcmFuc2Zvcm19IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtDSEFSX1BMVVN9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtUdWlDb3VudHJ5SXNvQ29kZX0gZnJvbSAnQHRhaWdhLXVpL2kxOG4nO1xuaW1wb3J0IHtUVUlfQ09VTlRSSUVTX01BU0tTfSBmcm9tICdAdGFpZ2EtdWkva2l0L3Rva2Vucyc7XG5pbXBvcnQge1xuICAgIHR1aUdldE1heEFsbG93ZWRQaG9uZUxlbmd0aCxcbiAgICB0dWlJc29Ub0NvdW50cnlDb2RlLFxuICAgIHR1aU5vdEt6UmVnaW9uLFxufSBmcm9tICdAdGFpZ2EtdWkva2l0L3V0aWxzJztcblxuQFBpcGUoe1xuICAgIG5hbWU6ICd0dWlUb0NvdW50cnlDb2RlJyxcbn0pXG5leHBvcnQgY2xhc3MgVHVpVG9Db3VudHJ5Q29kZVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChUVUlfQ09VTlRSSUVTX01BU0tTKVxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGNvdW50cmllc01hc2tzOiBSZWNvcmQ8VHVpQ291bnRyeUlzb0NvZGUsIHN0cmluZz4sXG4gICAgKSB7fVxuXG4gICAgdHJhbnNmb3JtKFxuICAgICAgICB2YWx1ZTogc3RyaW5nLFxuICAgICAgICBjb3VudHJpZXM6IHJlYWRvbmx5IFR1aUNvdW50cnlJc29Db2RlW10sXG4gICAgKTogVHVpQ291bnRyeUlzb0NvZGUgfCB1bmRlZmluZWQge1xuICAgICAgICByZXR1cm4gY291bnRyaWVzLmZpbmQoY291bnRyeUlzb0NvZGUgPT4ge1xuICAgICAgICAgICAgY29uc3QgcnVDb2RlVGVzdCA9XG4gICAgICAgICAgICAgICAgY291bnRyeUlzb0NvZGUgPT09IFR1aUNvdW50cnlJc29Db2RlLlJVICYmXG4gICAgICAgICAgICAgICAgL15bNzhdLy50ZXN0KHZhbHVlKSAmJlxuICAgICAgICAgICAgICAgIC9eKD8hODgwWzEtOSBdKS8udGVzdCh2YWx1ZSkgJiZcbiAgICAgICAgICAgICAgICB2YWx1ZS5sZW5ndGggKyAxID09PVxuICAgICAgICAgICAgICAgICAgICB0dWlHZXRNYXhBbGxvd2VkUGhvbmVMZW5ndGgoXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvdW50cmllc01hc2tzLFxuICAgICAgICAgICAgICAgICAgICAgICAgVHVpQ291bnRyeUlzb0NvZGUuUlUsXG4gICAgICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGNvbnN0IG1hdGNoZWQgPVxuICAgICAgICAgICAgICAgIHJ1Q29kZVRlc3QgfHxcbiAgICAgICAgICAgICAgICAodmFsdWUuc3RhcnRzV2l0aChcbiAgICAgICAgICAgICAgICAgICAgdHVpSXNvVG9Db3VudHJ5Q29kZSh0aGlzLmNvdW50cmllc01hc2tzLCBjb3VudHJ5SXNvQ29kZSkucmVwbGFjZShcbiAgICAgICAgICAgICAgICAgICAgICAgIENIQVJfUExVUyxcbiAgICAgICAgICAgICAgICAgICAgICAgICcnLFxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICkgJiZcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUubGVuZ3RoICsgMSA9PT1cbiAgICAgICAgICAgICAgICAgICAgICAgIHR1aUdldE1heEFsbG93ZWRQaG9uZUxlbmd0aCh0aGlzLmNvdW50cmllc01hc2tzLCBjb3VudHJ5SXNvQ29kZSkpO1xuXG4gICAgICAgICAgICBpZiAobWF0Y2hlZCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoY291bnRyeUlzb0NvZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBUdWlDb3VudHJ5SXNvQ29kZS5SVTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0dWlOb3RLelJlZ2lvbih2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgVHVpQ291bnRyeUlzb0NvZGUuS1o6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gIXR1aU5vdEt6UmVnaW9uKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4iXX0=