import { Inject, Optional, Pipe } from '@angular/core';
import { TUI_DEFAULT_MATCHER, TUI_FOCUSABLE_ITEM_ACCESSOR, } from '@taiga-ui/cdk';
import { TuiMultiSelectDirective } from '@taiga-ui/kit/components/multi-select';
import { AbstractTuiFilterByInput } from './filter-by-input.base';
import * as i0 from "@angular/core";
/**
 * @deprecated Use {@link TuiFilterByInputPipe} instead
 */
export class TuiFilterByInputWithPipe extends AbstractTuiFilterByInput {
    constructor(accessor, multiSelect) {
        super();
        this.accessor = accessor;
        this.multiSelect = multiSelect;
    }
    transform(items, stringify) {
        return this.filter(items, TUI_DEFAULT_MATCHER, stringify, this.query);
    }
}
TuiFilterByInputWithPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiFilterByInputWithPipe, deps: [{ token: TUI_FOCUSABLE_ITEM_ACCESSOR }, { token: TuiMultiSelectDirective, optional: true }], target: i0.ɵɵFactoryTarget.Pipe });
TuiFilterByInputWithPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiFilterByInputWithPipe, name: "tuiFilterByInputWith", pure: false });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiFilterByInputWithPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'tuiFilterByInputWith',
                    pure: false,
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_FOCUSABLE_ITEM_ACCESSOR]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TuiMultiSelectDirective]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLWJ5LWlucHV0LXdpdGgucGlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2tpdC9waXBlcy9maWx0ZXItYnktaW5wdXQvZmlsdGVyLWJ5LWlucHV0LXdpdGgucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQWdCLE1BQU0sZUFBZSxDQUFDO0FBQ3BFLE9BQU8sRUFDSCxtQkFBbUIsRUFDbkIsMkJBQTJCLEdBRzlCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBQyx1QkFBdUIsRUFBQyxNQUFNLHVDQUF1QyxDQUFDO0FBRTlFLE9BQU8sRUFBQyx3QkFBd0IsRUFBa0IsTUFBTSx3QkFBd0IsQ0FBQzs7QUFFakY7O0dBRUc7QUFLSCxNQUFNLE9BQU8sd0JBQ1QsU0FBUSx3QkFBd0I7SUFHaEMsWUFFdUIsUUFBcUMsRUFHckMsV0FBb0I7UUFFdkMsS0FBSyxFQUFFLENBQUM7UUFMVyxhQUFRLEdBQVIsUUFBUSxDQUE2QjtRQUdyQyxnQkFBVyxHQUFYLFdBQVcsQ0FBUztJQUczQyxDQUFDO0lBR0QsU0FBUyxDQUNMLEtBQXdELEVBQ3hELFNBQThCO1FBRTlCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsbUJBQW1CLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMxRSxDQUFDOztzSEFwQlEsd0JBQXdCLGtCQUtyQiwyQkFBMkIsYUFHM0IsdUJBQXVCO29IQVIxQix3QkFBd0I7NEZBQXhCLHdCQUF3QjtrQkFKcEMsSUFBSTttQkFBQztvQkFDRixJQUFJLEVBQUUsc0JBQXNCO29CQUM1QixJQUFJLEVBQUUsS0FBSztpQkFDZDs7MEJBTVEsTUFBTTsyQkFBQywyQkFBMkI7OzBCQUVsQyxRQUFROzswQkFDUixNQUFNOzJCQUFDLHVCQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0LCBPcHRpb25hbCwgUGlwZSwgUGlwZVRyYW5zZm9ybX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICAgIFRVSV9ERUZBVUxUX01BVENIRVIsXG4gICAgVFVJX0ZPQ1VTQUJMRV9JVEVNX0FDQ0VTU09SLFxuICAgIFR1aUZvY3VzYWJsZUVsZW1lbnRBY2Nlc3NvcixcbiAgICBUdWlTdHJpbmdIYW5kbGVyLFxufSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7VHVpTXVsdGlTZWxlY3REaXJlY3RpdmV9IGZyb20gJ0B0YWlnYS11aS9raXQvY29tcG9uZW50cy9tdWx0aS1zZWxlY3QnO1xuXG5pbXBvcnQge0Fic3RyYWN0VHVpRmlsdGVyQnlJbnB1dCwgVHVpQXJyYXlFbGVtZW50fSBmcm9tICcuL2ZpbHRlci1ieS1pbnB1dC5iYXNlJztcblxuLyoqXG4gKiBAZGVwcmVjYXRlZCBVc2Uge0BsaW5rIFR1aUZpbHRlckJ5SW5wdXRQaXBlfSBpbnN0ZWFkXG4gKi9cbkBQaXBlKHtcbiAgICBuYW1lOiAndHVpRmlsdGVyQnlJbnB1dFdpdGgnLFxuICAgIHB1cmU6IGZhbHNlLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlGaWx0ZXJCeUlucHV0V2l0aFBpcGVcbiAgICBleHRlbmRzIEFic3RyYWN0VHVpRmlsdGVyQnlJbnB1dFxuICAgIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybVxue1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KFRVSV9GT0NVU0FCTEVfSVRFTV9BQ0NFU1NPUilcbiAgICAgICAgcHJvdGVjdGVkIHJlYWRvbmx5IGFjY2Vzc29yOiBUdWlGb2N1c2FibGVFbGVtZW50QWNjZXNzb3IsXG4gICAgICAgIEBPcHRpb25hbCgpXG4gICAgICAgIEBJbmplY3QoVHVpTXVsdGlTZWxlY3REaXJlY3RpdmUpXG4gICAgICAgIHByb3RlY3RlZCByZWFkb25seSBtdWx0aVNlbGVjdDogdW5rbm93bixcbiAgICApIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG5cbiAgICB0cmFuc2Zvcm08VD4oaXRlbXM6IFQsIG1hdGNoZXI/OiBUdWlTdHJpbmdIYW5kbGVyPFR1aUFycmF5RWxlbWVudDxUPj4pOiBUO1xuICAgIHRyYW5zZm9ybTxUPihcbiAgICAgICAgaXRlbXM6IFJlYWRvbmx5QXJyYXk8cmVhZG9ubHkgVFtdPiB8IHJlYWRvbmx5IFRbXSB8IG51bGwsXG4gICAgICAgIHN0cmluZ2lmeTogVHVpU3RyaW5nSGFuZGxlcjxUPixcbiAgICApOiBSZWFkb25seUFycmF5PHJlYWRvbmx5IFRbXT4gfCByZWFkb25seSBUW10gfCBudWxsIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyKGl0ZW1zLCBUVUlfREVGQVVMVF9NQVRDSEVSLCBzdHJpbmdpZnksIHRoaXMucXVlcnkpO1xuICAgIH1cbn1cbiJdfQ==