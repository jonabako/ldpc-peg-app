import { __decorate } from "tslib";
import { tuiIsPresent, tuiPure, } from '@taiga-ui/cdk';
import { tuiIsFlat } from '@taiga-ui/kit/utils';
export class AbstractTuiFilterByInput {
    get query() {
        return this.accessor.nativeFocusableElement
            ? this.accessor.nativeFocusableElement.value || ''
            : '';
    }
    filter(items, matcher, stringify, query) {
        if (!items) {
            return null;
        }
        return tuiIsFlat(items)
            ? this.filterFlat(items, matcher, stringify, query)
            : this.filter2d(items, matcher, stringify, query);
    }
    filterFlat(items, matcher, stringify, query) {
        const match = this.getMatch(items, stringify, query);
        return tuiIsPresent(match) && !this.multiSelect
            ? items
            : items.filter(item => matcher(item, query, stringify));
    }
    filter2d(items, matcher, stringify, query) {
        const match = items.find(item => tuiIsPresent(this.getMatch(item, stringify, query)));
        return tuiIsPresent(match) && !this.multiSelect
            ? items
            : items.map(inner => this.filterFlat(inner, matcher, stringify, query));
    }
    getMatch(items, stringify, query) {
        return items.find(item => stringify(item).toLocaleLowerCase() === query.toLocaleLowerCase());
    }
}
__decorate([
    tuiPure
], AbstractTuiFilterByInput.prototype, "filter", null);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLWJ5LWlucHV0LmJhc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9raXQvcGlwZXMvZmlsdGVyLWJ5LWlucHV0L2ZpbHRlci1ieS1pbnB1dC5iYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBRUgsWUFBWSxFQUNaLE9BQU8sR0FHVixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0scUJBQXFCLENBQUM7QUFlOUMsTUFBTSxPQUFnQix3QkFBd0I7SUFJMUMsSUFBYyxLQUFLO1FBQ2YsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLHNCQUFzQjtZQUN2QyxDQUFDLENBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxzQkFBMkMsQ0FBQyxLQUFLLElBQUksRUFBRTtZQUN4RSxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQ2IsQ0FBQztJQUdTLE1BQU0sQ0FDWixLQUF3RCxFQUN4RCxPQUE0QixFQUM1QixTQUE4QixFQUM5QixLQUFhO1FBRWIsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNSLE9BQU8sSUFBSSxDQUFDO1NBQ2Y7UUFFRCxPQUFPLFNBQVMsQ0FBQyxLQUFLLENBQUM7WUFDbkIsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxDQUFDO1lBQ25ELENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFFTyxVQUFVLENBQ2QsS0FBbUIsRUFDbkIsT0FBNEIsRUFDNUIsU0FBOEIsRUFDOUIsS0FBYTtRQUViLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUVyRCxPQUFPLFlBQVksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXO1lBQzNDLENBQUMsQ0FBQyxLQUFLO1lBQ1AsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDO0lBQ2hFLENBQUM7SUFFTyxRQUFRLENBQ1osS0FBa0MsRUFDbEMsT0FBNEIsRUFDNUIsU0FBOEIsRUFDOUIsS0FBYTtRQUViLE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FDNUIsWUFBWSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUN0RCxDQUFDO1FBRUYsT0FBTyxZQUFZLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVztZQUMzQyxDQUFDLENBQUMsS0FBSztZQUNQLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ2hGLENBQUM7SUFFTyxRQUFRLENBQ1osS0FBbUIsRUFDbkIsU0FBOEIsRUFDOUIsS0FBYTtRQUViLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FDYixJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxpQkFBaUIsRUFBRSxLQUFLLEtBQUssQ0FBQyxpQkFBaUIsRUFBRSxDQUM1RSxDQUFDO0lBQ04sQ0FBQztDQUNKO0FBcERHO0lBREMsT0FBTztzREFjUCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgVHVpRm9jdXNhYmxlRWxlbWVudEFjY2Vzc29yLFxuICAgIHR1aUlzUHJlc2VudCxcbiAgICB0dWlQdXJlLFxuICAgIFR1aVN0cmluZ0hhbmRsZXIsXG4gICAgVHVpU3RyaW5nTWF0Y2hlcixcbn0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge3R1aUlzRmxhdH0gZnJvbSAnQHRhaWdhLXVpL2tpdC91dGlscyc7XG5cbmV4cG9ydCB0eXBlIFR1aUFycmF5RWxlbWVudDxBPiA9IEEgZXh0ZW5kcyBSZWFkb25seUFycmF5PGluZmVyIFQ+XG4gICAgPyBBIGV4dGVuZHMgUmVhZG9ubHlBcnJheTxSZWFkb25seUFycmF5PGluZmVyIEc+PlxuICAgICAgICA/IEdcbiAgICAgICAgOiBUXG4gICAgOiBuZXZlcjtcblxuLyoqXG4gKiBAZGVwcmVjYXRlZDogdXNlIHtAbGluayBUdWlBcnJheUVsZW1lbnR9XG4gKiBUT0RPOiByZW1vdmUgaW4gdjQuMFxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uXG5leHBvcnQgdHlwZSBBcnJheUVsZW1lbnQ8QT4gPSBUdWlBcnJheUVsZW1lbnQ8QT47XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBYnN0cmFjdFR1aUZpbHRlckJ5SW5wdXQge1xuICAgIHByb3RlY3RlZCBhYnN0cmFjdCByZWFkb25seSBhY2Nlc3NvcjogVHVpRm9jdXNhYmxlRWxlbWVudEFjY2Vzc29yO1xuICAgIHByb3RlY3RlZCBhYnN0cmFjdCByZWFkb25seSBtdWx0aVNlbGVjdDogdW5rbm93bjtcblxuICAgIHByb3RlY3RlZCBnZXQgcXVlcnkoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWNjZXNzb3IubmF0aXZlRm9jdXNhYmxlRWxlbWVudFxuICAgICAgICAgICAgPyAodGhpcy5hY2Nlc3Nvci5uYXRpdmVGb2N1c2FibGVFbGVtZW50IGFzIEhUTUxJbnB1dEVsZW1lbnQpLnZhbHVlIHx8ICcnXG4gICAgICAgICAgICA6ICcnO1xuICAgIH1cblxuICAgIEB0dWlQdXJlXG4gICAgcHJvdGVjdGVkIGZpbHRlcjxUPihcbiAgICAgICAgaXRlbXM6IFJlYWRvbmx5QXJyYXk8cmVhZG9ubHkgVFtdPiB8IHJlYWRvbmx5IFRbXSB8IG51bGwsXG4gICAgICAgIG1hdGNoZXI6IFR1aVN0cmluZ01hdGNoZXI8VD4sXG4gICAgICAgIHN0cmluZ2lmeTogVHVpU3RyaW5nSGFuZGxlcjxUPixcbiAgICAgICAgcXVlcnk6IHN0cmluZyxcbiAgICApOiBSZWFkb25seUFycmF5PHJlYWRvbmx5IFRbXT4gfCByZWFkb25seSBUW10gfCBudWxsIHtcbiAgICAgICAgaWYgKCFpdGVtcykge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHVpSXNGbGF0KGl0ZW1zKVxuICAgICAgICAgICAgPyB0aGlzLmZpbHRlckZsYXQoaXRlbXMsIG1hdGNoZXIsIHN0cmluZ2lmeSwgcXVlcnkpXG4gICAgICAgICAgICA6IHRoaXMuZmlsdGVyMmQoaXRlbXMsIG1hdGNoZXIsIHN0cmluZ2lmeSwgcXVlcnkpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZmlsdGVyRmxhdDxUPihcbiAgICAgICAgaXRlbXM6IHJlYWRvbmx5IFRbXSxcbiAgICAgICAgbWF0Y2hlcjogVHVpU3RyaW5nTWF0Y2hlcjxUPixcbiAgICAgICAgc3RyaW5naWZ5OiBUdWlTdHJpbmdIYW5kbGVyPFQ+LFxuICAgICAgICBxdWVyeTogc3RyaW5nLFxuICAgICk6IHJlYWRvbmx5IFRbXSB7XG4gICAgICAgIGNvbnN0IG1hdGNoID0gdGhpcy5nZXRNYXRjaChpdGVtcywgc3RyaW5naWZ5LCBxdWVyeSk7XG5cbiAgICAgICAgcmV0dXJuIHR1aUlzUHJlc2VudChtYXRjaCkgJiYgIXRoaXMubXVsdGlTZWxlY3RcbiAgICAgICAgICAgID8gaXRlbXNcbiAgICAgICAgICAgIDogaXRlbXMuZmlsdGVyKGl0ZW0gPT4gbWF0Y2hlcihpdGVtLCBxdWVyeSwgc3RyaW5naWZ5KSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBmaWx0ZXIyZDxUPihcbiAgICAgICAgaXRlbXM6IFJlYWRvbmx5QXJyYXk8cmVhZG9ubHkgVFtdPixcbiAgICAgICAgbWF0Y2hlcjogVHVpU3RyaW5nTWF0Y2hlcjxUPixcbiAgICAgICAgc3RyaW5naWZ5OiBUdWlTdHJpbmdIYW5kbGVyPFQ+LFxuICAgICAgICBxdWVyeTogc3RyaW5nLFxuICAgICk6IFJlYWRvbmx5QXJyYXk8cmVhZG9ubHkgVFtdPiB7XG4gICAgICAgIGNvbnN0IG1hdGNoID0gaXRlbXMuZmluZChpdGVtID0+XG4gICAgICAgICAgICB0dWlJc1ByZXNlbnQodGhpcy5nZXRNYXRjaChpdGVtLCBzdHJpbmdpZnksIHF1ZXJ5KSksXG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuIHR1aUlzUHJlc2VudChtYXRjaCkgJiYgIXRoaXMubXVsdGlTZWxlY3RcbiAgICAgICAgICAgID8gaXRlbXNcbiAgICAgICAgICAgIDogaXRlbXMubWFwKGlubmVyID0+IHRoaXMuZmlsdGVyRmxhdChpbm5lciwgbWF0Y2hlciwgc3RyaW5naWZ5LCBxdWVyeSkpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0TWF0Y2g8VD4oXG4gICAgICAgIGl0ZW1zOiByZWFkb25seSBUW10sXG4gICAgICAgIHN0cmluZ2lmeTogVHVpU3RyaW5nSGFuZGxlcjxUPixcbiAgICAgICAgcXVlcnk6IHN0cmluZyxcbiAgICApOiBUIHwgdW5kZWZpbmVkIHtcbiAgICAgICAgcmV0dXJuIGl0ZW1zLmZpbmQoXG4gICAgICAgICAgICBpdGVtID0+IHN0cmluZ2lmeShpdGVtKS50b0xvY2FsZUxvd2VyQ2FzZSgpID09PSBxdWVyeS50b0xvY2FsZUxvd2VyQ2FzZSgpLFxuICAgICAgICApO1xuICAgIH1cbn1cbiJdfQ==