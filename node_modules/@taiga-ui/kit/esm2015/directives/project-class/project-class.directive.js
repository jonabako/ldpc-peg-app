import { Directive, ElementRef, Inject, Input } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * A directive for projecting classes from nested children to host
 */
export class TuiProjectClassDirective {
    constructor(el) {
        this.el = el;
        this.classNames = [];
    }
    ngAfterViewChecked() {
        this.classNames.forEach(className => {
            const hostElement = this.el.nativeElement;
            hostElement.classList.toggle(className, !!hostElement.querySelector(`.${className}`));
        });
    }
}
TuiProjectClassDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiProjectClassDirective, deps: [{ token: ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
TuiProjectClassDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiProjectClassDirective, selector: "[tuiProjectClass]", inputs: { classNames: ["tuiProjectClass", "classNames"] }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiProjectClassDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiProjectClass]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }]; }, propDecorators: { classNames: [{
                type: Input,
                args: ['tuiProjectClass']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvamVjdC1jbGFzcy5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9raXQvZGlyZWN0aXZlcy9wcm9qZWN0LWNsYXNzL3Byb2plY3QtY2xhc3MuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBbUIsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFDLE1BQU0sZUFBZSxDQUFDOztBQUVyRjs7R0FFRztBQUlILE1BQU0sT0FBTyx3QkFBd0I7SUFJakMsWUFBaUQsRUFBMkI7UUFBM0IsT0FBRSxHQUFGLEVBQUUsQ0FBeUI7UUFGNUUsZUFBVSxHQUFzQixFQUFFLENBQUM7SUFFNEMsQ0FBQztJQUVoRixrQkFBa0I7UUFDZCxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUNoQyxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQztZQUUxQyxXQUFXLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FDeEIsU0FBUyxFQUNULENBQUMsQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLElBQUksU0FBUyxFQUFFLENBQUMsQ0FDL0MsQ0FBQztRQUNOLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQzs7c0hBZlEsd0JBQXdCLGtCQUliLFVBQVU7MEdBSnJCLHdCQUF3Qjs0RkFBeEIsd0JBQXdCO2tCQUhwQyxTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSxtQkFBbUI7aUJBQ2hDOzswQkFLZ0IsTUFBTTsyQkFBQyxVQUFVOzRDQUY5QixVQUFVO3NCQURULEtBQUs7dUJBQUMsaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtBZnRlclZpZXdDaGVja2VkLCBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEluamVjdCwgSW5wdXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKipcbiAqIEEgZGlyZWN0aXZlIGZvciBwcm9qZWN0aW5nIGNsYXNzZXMgZnJvbSBuZXN0ZWQgY2hpbGRyZW4gdG8gaG9zdFxuICovXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1t0dWlQcm9qZWN0Q2xhc3NdJyxcbn0pXG5leHBvcnQgY2xhc3MgVHVpUHJvamVjdENsYXNzRGlyZWN0aXZlIGltcGxlbWVudHMgQWZ0ZXJWaWV3Q2hlY2tlZCB7XG4gICAgQElucHV0KCd0dWlQcm9qZWN0Q2xhc3MnKVxuICAgIGNsYXNzTmFtZXM6IHJlYWRvbmx5IHN0cmluZ1tdID0gW107XG5cbiAgICBjb25zdHJ1Y3RvcihASW5qZWN0KEVsZW1lbnRSZWYpIHByaXZhdGUgcmVhZG9ubHkgZWw6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+KSB7fVxuXG4gICAgbmdBZnRlclZpZXdDaGVja2VkKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmNsYXNzTmFtZXMuZm9yRWFjaChjbGFzc05hbWUgPT4ge1xuICAgICAgICAgICAgY29uc3QgaG9zdEVsZW1lbnQgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQ7XG5cbiAgICAgICAgICAgIGhvc3RFbGVtZW50LmNsYXNzTGlzdC50b2dnbGUoXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lLFxuICAgICAgICAgICAgICAgICEhaG9zdEVsZW1lbnQucXVlcnlTZWxlY3RvcihgLiR7Y2xhc3NOYW1lfWApLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIl19