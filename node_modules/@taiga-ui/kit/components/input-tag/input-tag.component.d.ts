import { ChangeDetectorRef, ElementRef, EventEmitter, TemplateRef } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AbstractTuiMultipleControl, TuiActiveZoneDirective, TuiBooleanHandler, TuiContextWithImplicit, TuiFocusableElementAccessor } from '@taiga-ui/cdk';
import { TuiBrightness, TuiCommonIcons, TuiDataListHost, TuiHintOptionsDirective, TuiModeDirective, TuiSizeL, TuiSizeS, TuiTextfieldController } from '@taiga-ui/core';
import { TuiStringifiableItem } from '@taiga-ui/kit/classes';
import { TuiStatus } from '@taiga-ui/kit/types';
import { PolymorpheusContent } from '@tinkoff/ng-polymorpheus';
import { Observable } from 'rxjs';
import { TuiInputTagOptions } from './input-tag.options';
import * as i0 from "@angular/core";
export declare class TuiInputTagComponent extends AbstractTuiMultipleControl<string> implements TuiFocusableElementAccessor, TuiDataListHost<string> {
    private readonly el;
    private readonly modeDirective;
    private readonly mode$;
    readonly hintOptions: TuiHintOptionsDirective | null;
    readonly controller: TuiTextfieldController;
    private readonly options;
    readonly icons: TuiCommonIcons;
    private readonly hostedDropdown?;
    private readonly focusableElement?;
    private readonly tagsContainer?;
    private readonly tags;
    private readonly cleanerSvg?;
    private readonly scrollBar?;
    separator: RegExp | string;
    search: string | null;
    editable: boolean;
    tagValidator: TuiBooleanHandler<string> | TuiBooleanHandler<TuiStringifiableItem<unknown> | string>;
    expandable: boolean;
    rows: number;
    inputHidden: boolean;
    uniqueTags: boolean;
    maxLength: number | null;
    placeholder: string;
    removable: boolean;
    disabledItemHandler: TuiBooleanHandler<TuiStringifiableItem<any> | string>;
    set pseudoFocusedSetter(value: boolean | null);
    readonly searchChange: EventEmitter<string>;
    readonly datalist?: TemplateRef<TuiContextWithImplicit<TuiActiveZoneDirective>>;
    readonly errorIconTemplate?: TemplateRef<Record<string, unknown>>;
    status$: Observable<TuiStatus>;
    open: boolean;
    constructor(control: NgControl | null, cdr: ChangeDetectorRef, el: ElementRef<HTMLElement>, modeDirective: TuiModeDirective | null, mode$: Observable<TuiBrightness | null>, hintOptions: TuiHintOptionsDirective | null, controller: TuiTextfieldController, options: TuiInputTagOptions, icons: TuiCommonIcons);
    get nativeFocusableElement(): HTMLInputElement | null;
    get focused(): boolean;
    get appearance(): string;
    get size(): TuiSizeL | TuiSizeS;
    get labelOutside(): boolean;
    get iconLeft(): PolymorpheusContent<TuiContextWithImplicit<TuiSizeL | TuiSizeS>>;
    get icon(): PolymorpheusContent<TuiContextWithImplicit<TuiSizeL | TuiSizeS>>;
    get iconCleaner(): PolymorpheusContent<TuiContextWithImplicit<TuiSizeL | TuiSizeS>>;
    get hasCleaner(): boolean;
    get hasNativeValue(): boolean;
    get hasValue(): boolean;
    get hasPlaceholder(): boolean;
    get placeholderRaised(): boolean;
    get hasExampleText(): boolean;
    get hasRightIcons(): boolean;
    get showHint(): boolean;
    get status(): TuiStatus;
    get canOpen(): boolean;
    get computeMaxHeight(): number | null;
    onFocusInOut(): void;
    detectRetargetFromLabel(event: Event): void;
    getLeftContent(tag: string): PolymorpheusContent;
    onCleanerClick(): void;
    onActiveZone(active: boolean): void;
    onMouseDown(event: MouseEvent): void;
    onFieldKeyDownBackspace(event: Event): void;
    onFieldKeyDownArrowLeft(event: Event): void;
    onFieldKeyDownEnter(): void;
    onTagKeyDownArrowLeft(currentIndex: number): void;
    onTagKeyDownArrowRight(currentIndex: number): void;
    onTagEdited(value: string, index: number): void;
    handleOption(item: string): void;
    onInput(value: string): void;
    onPaste(event: Event): void;
    onDrop({ dataTransfer }: DragEvent): void;
    setDisabledState(): void;
    trackByFn(_: number, tag: string): string;
    private scrollTo;
    private filterValue;
    private onScrollKeyDown;
    private updateSearch;
    private addTag;
    private deleteLastEnabledItem;
    private focusInput;
    private clippedValue;
    private get lineHeight();
    static ɵfac: i0.ɵɵFactoryDeclaration<TuiInputTagComponent, [{ optional: true; self: true; }, null, null, { optional: true; }, null, { optional: true; }, null, null, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TuiInputTagComponent, "tui-input-tag", never, { "separator": "separator"; "search": "search"; "editable": "editable"; "tagValidator": "tagValidator"; "expandable": "expandable"; "rows": "rows"; "inputHidden": "inputHidden"; "uniqueTags": "uniqueTags"; "maxLength": "maxLength"; "placeholder": "placeholder"; "removable": "removable"; "disabledItemHandler": "disabledItemHandler"; "pseudoFocusedSetter": "pseudoFocused"; }, { "searchChange": "searchChange"; }, ["datalist"], ["*", "tuiContent", "select"]>;
}
