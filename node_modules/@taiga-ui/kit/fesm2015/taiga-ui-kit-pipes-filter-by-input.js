import { __decorate } from 'tslib';
import { tuiIsPresent, tuiPure, TUI_DEFAULT_STRINGIFY, TUI_DEFAULT_MATCHER, TUI_FOCUSABLE_ITEM_ACCESSOR } from '@taiga-ui/cdk';
import { tuiIsFlat } from '@taiga-ui/kit/utils';
import * as i0 from '@angular/core';
import { Pipe, Inject, Optional, NgModule } from '@angular/core';
import { TUI_DATA_LIST_HOST } from '@taiga-ui/core';
import { TuiMultiSelectDirective } from '@taiga-ui/kit/components/multi-select';

class AbstractTuiFilterByInput {
    get query() {
        return this.accessor.nativeFocusableElement
            ? this.accessor.nativeFocusableElement.value || ''
            : '';
    }
    filter(items, matcher, stringify, query) {
        if (!items) {
            return null;
        }
        return tuiIsFlat(items)
            ? this.filterFlat(items, matcher, stringify, query)
            : this.filter2d(items, matcher, stringify, query);
    }
    filterFlat(items, matcher, stringify, query) {
        const match = this.getMatch(items, stringify, query);
        return tuiIsPresent(match) && !this.multiSelect
            ? items
            : items.filter(item => matcher(item, query, stringify));
    }
    filter2d(items, matcher, stringify, query) {
        const match = items.find(item => tuiIsPresent(this.getMatch(item, stringify, query)));
        return tuiIsPresent(match) && !this.multiSelect
            ? items
            : items.map(inner => this.filterFlat(inner, matcher, stringify, query));
    }
    getMatch(items, stringify, query) {
        return items.find(item => stringify(item).toLocaleLowerCase() === query.toLocaleLowerCase());
    }
}
__decorate([
    tuiPure
], AbstractTuiFilterByInput.prototype, "filter", null);

class TuiFilterByInputPipe extends AbstractTuiFilterByInput {
    constructor(accessor, host, multiSelect) {
        super();
        this.accessor = accessor;
        this.host = host;
        this.multiSelect = multiSelect;
    }
    transform(items, matcher = TUI_DEFAULT_MATCHER) {
        return this.filter(items, matcher, this.host.stringify || TUI_DEFAULT_STRINGIFY, this.query);
    }
}
TuiFilterByInputPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiFilterByInputPipe, deps: [{ token: TUI_FOCUSABLE_ITEM_ACCESSOR }, { token: TUI_DATA_LIST_HOST }, { token: TuiMultiSelectDirective, optional: true }], target: i0.ɵɵFactoryTarget.Pipe });
TuiFilterByInputPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiFilterByInputPipe, name: "tuiFilterByInput", pure: false });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiFilterByInputPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'tuiFilterByInput',
                    pure: false,
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_FOCUSABLE_ITEM_ACCESSOR]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_DATA_LIST_HOST]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TuiMultiSelectDirective]
                }] }]; } });

/**
 * @deprecated Use {@link TuiFilterByInputPipe} instead
 */
class TuiFilterByInputWithPipe extends AbstractTuiFilterByInput {
    constructor(accessor, multiSelect) {
        super();
        this.accessor = accessor;
        this.multiSelect = multiSelect;
    }
    transform(items, stringify) {
        return this.filter(items, TUI_DEFAULT_MATCHER, stringify, this.query);
    }
}
TuiFilterByInputWithPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiFilterByInputWithPipe, deps: [{ token: TUI_FOCUSABLE_ITEM_ACCESSOR }, { token: TuiMultiSelectDirective, optional: true }], target: i0.ɵɵFactoryTarget.Pipe });
TuiFilterByInputWithPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiFilterByInputWithPipe, name: "tuiFilterByInputWith", pure: false });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiFilterByInputWithPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'tuiFilterByInputWith',
                    pure: false,
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_FOCUSABLE_ITEM_ACCESSOR]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TuiMultiSelectDirective]
                }] }]; } });

class TuiFilterByInputPipeModule {
}
TuiFilterByInputPipeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiFilterByInputPipeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiFilterByInputPipeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiFilterByInputPipeModule, declarations: [TuiFilterByInputPipe, TuiFilterByInputWithPipe], exports: [TuiFilterByInputPipe, TuiFilterByInputWithPipe] });
TuiFilterByInputPipeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiFilterByInputPipeModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiFilterByInputPipeModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [TuiFilterByInputPipe, TuiFilterByInputWithPipe],
                    exports: [TuiFilterByInputPipe, TuiFilterByInputWithPipe],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { AbstractTuiFilterByInput, TuiFilterByInputPipe, TuiFilterByInputPipeModule, TuiFilterByInputWithPipe };
//# sourceMappingURL=taiga-ui-kit-pipes-filter-by-input.js.map
