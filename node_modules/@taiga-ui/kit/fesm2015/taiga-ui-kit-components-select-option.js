import * as i0 from '@angular/core';
import { ElementRef, Component, ChangeDetectionStrategy, Inject, Optional, NgModule } from '@angular/core';
import * as i3 from '@angular/forms';
import { NgControl } from '@angular/forms';
import * as i4 from '@taiga-ui/cdk';
import { tuiTypedFromEvent, TUI_DEFAULT_IDENTITY_MATCHER, tuiIsPresent, AbstractTuiControl } from '@taiga-ui/cdk';
import * as i1 from '@taiga-ui/core';
import { TUI_COMMON_ICONS, TUI_DATA_LIST_HOST, TuiOptionComponent, TuiDataListComponent, TuiSvgModule, TuiScrollIntoViewModule } from '@taiga-ui/core';
import { POLYMORPHEUS_CONTEXT, PolymorpheusComponent } from '@tinkoff/ng-polymorpheus';
import { Subject, merge, EMPTY } from 'rxjs';
import { startWith, map, distinctUntilChanged } from 'rxjs/operators';
import * as i2 from '@angular/common';
import { CommonModule } from '@angular/common';

class TuiSelectOptionComponent {
    constructor(icons, context, host, el, option, dataList, control, abstractControl) {
        this.icons = icons;
        this.context = context;
        this.host = host;
        this.el = el;
        this.option = option;
        this.dataList = dataList;
        this.control = control;
        this.abstractControl = abstractControl;
        this.changeDetection$ = new Subject();
        this.selected$ = merge(this.changeDetection$, this.control.valueChanges || EMPTY, tuiTypedFromEvent(this.el.nativeElement, 'animationstart')).pipe(startWith(null), map(() => this.selected), distinctUntilChanged());
    }
    get matcher() {
        return this.host.identityMatcher || TUI_DEFAULT_IDENTITY_MATCHER;
    }
    ngOnInit() {
        /**
         * This would cause changes inside already checked parent component (during the same change detection cycle),
         * and it might cause ExpressionChanged error due to potential HostBinding
         * (for example, inside {@link https://github.com/angular/angular/blob/main/packages/forms/src/directives/ng_control_status.ts#L99 NgControlStatus}).
         * Microtask keeps it in the same frame but allows change detection to run.
         */
        void Promise.resolve().then(() => {
            var _a, _b;
            if (tuiIsPresent(this.option.value) && !this.option.disabled) {
                (_b = (_a = this.host).checkOption) === null || _b === void 0 ? void 0 : _b.call(_a, this.option.value);
            }
        });
    }
    ngDoCheck() {
        this.changeDetection$.next();
    }
    get value() {
        var _a, _b;
        return (_b = (_a = this.abstractControl) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : this.control.value;
    }
    get selected() {
        return (tuiIsPresent(this.option.value) &&
            tuiIsPresent(this.value) &&
            this.matcher(this.value, this.option.value));
    }
}
TuiSelectOptionComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSelectOptionComponent, deps: [{ token: TUI_COMMON_ICONS }, { token: POLYMORPHEUS_CONTEXT }, { token: TUI_DATA_LIST_HOST }, { token: ElementRef }, { token: TuiOptionComponent }, { token: TuiDataListComponent, optional: true }, { token: NgControl }, { token: AbstractTuiControl, optional: true }], target: i0.ɵɵFactoryTarget.Component });
TuiSelectOptionComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiSelectOptionComponent, selector: "tui-select-option", ngImport: i0, template: "<ng-container [ngTemplateOutlet]=\"context.$implicit\"></ng-container>\n<tui-svg\n    *ngIf=\"selected$ | async; else dummy\"\n    automation-id=\"tui-select-option__checkmark\"\n    class=\"t-checkmark\"\n    [src]=\"icons.check\"\n    [tuiScrollIntoView]=\"true\"\n></tui-svg>\n<ng-template #dummy>\n    <span class=\"t-dummy\"></span>\n</ng-template>\n", styles: ["@keyframes retrigger{0%{left:1px}to{left:2px}}:host{display:flex;flex:1;align-items:center;max-width:100%;animation:retrigger 1s}.t-checkmark{-webkit-margin-start:auto;margin-inline-start:auto;-webkit-border-start:.25rem solid transparent;border-inline-start:.25rem solid transparent}:host-context(tui-data-list[data-list-size=\"s\"]) .t-checkmark{-webkit-margin-end:-.375rem;margin-inline-end:-.375rem}:host-context(tui-data-list[data-list-size=\"m\"]) .t-checkmark{-webkit-margin-end:-.125rem;margin-inline-end:-.125rem}.t-dummy{width:1.75rem}\n"], components: [{ type: i1.TuiSvgComponent, selector: "tui-svg", inputs: ["src"] }], directives: [{ type: i2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.TuiScrollIntoViewDirective, selector: "[tuiScrollIntoView]", inputs: ["tuiScrollIntoView"] }], pipes: { "async": i2.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSelectOptionComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-select-option',
                    templateUrl: './select-option.template.html',
                    styleUrls: ['./select-option.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_COMMON_ICONS]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [POLYMORPHEUS_CONTEXT]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_DATA_LIST_HOST]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: i1.TuiOptionComponent, decorators: [{
                    type: Inject,
                    args: [TuiOptionComponent]
                }] }, { type: i1.TuiDataListComponent, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TuiDataListComponent]
                }] }, { type: i3.NgControl, decorators: [{
                    type: Inject,
                    args: [NgControl]
                }] }, { type: i4.AbstractTuiControl, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [AbstractTuiControl]
                }] }]; } });
const TUI_SELECT_OPTION = new PolymorpheusComponent(TuiSelectOptionComponent);

class TuiSelectOptionModule {
}
TuiSelectOptionModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSelectOptionModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiSelectOptionModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSelectOptionModule, declarations: [TuiSelectOptionComponent], imports: [CommonModule, TuiSvgModule, TuiScrollIntoViewModule], exports: [TuiSelectOptionComponent] });
TuiSelectOptionModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSelectOptionModule, imports: [[CommonModule, TuiSvgModule, TuiScrollIntoViewModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSelectOptionModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, TuiSvgModule, TuiScrollIntoViewModule],
                    declarations: [TuiSelectOptionComponent],
                    exports: [TuiSelectOptionComponent],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TUI_SELECT_OPTION, TuiSelectOptionComponent, TuiSelectOptionModule };
//# sourceMappingURL=taiga-ui-kit-components-select-option.js.map
