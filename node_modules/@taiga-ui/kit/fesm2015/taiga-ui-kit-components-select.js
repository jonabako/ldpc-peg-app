import * as i0 from '@angular/core';
import { TemplateRef, Component, ChangeDetectionStrategy, Input, ChangeDetectorRef, Optional, Self, Inject, ViewChild, ContentChild, HostBinding, Directive, NgModule } from '@angular/core';
import * as i1$1 from '@taiga-ui/core';
import { tuiAsDataList, TUI_TEXTFIELD_CLEANER, TUI_TEXTFIELD_SIZE, tuiAsDataListHost, tuiAsOptionContent, TuiDataListDirective, TuiPrimitiveTextfieldComponent, TuiHostedDropdownComponent, AbstractTuiTextfieldHost, tuiAsTextfieldHost, TuiPrimitiveTextfieldModule, TuiHostedDropdownModule, TuiWrapperModule, TuiTextfieldControllerModule, TuiDataListModule, TuiTextfieldComponent } from '@taiga-ui/core';
import { AbstractTuiNativeSelect } from '@taiga-ui/kit/abstract';
import * as i1 from '@taiga-ui/kit/components/data-list-wrapper';
import { TuiDataListWrapperModule } from '@taiga-ui/kit/components/data-list-wrapper';
import * as i3 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i4 from '@taiga-ui/kit/pipes';
import { TuiStringifyContentPipeModule } from '@taiga-ui/kit/pipes';
import * as i5 from '@angular/forms';
import { NgControl } from '@angular/forms';
import * as i2 from '@taiga-ui/cdk';
import { tuiCreateToken, tuiProvideOptions, AbstractTuiNullableControl, tuiIsNativeFocused, TUI_IS_MOBILE, tuiAsFocusableItemAccessor, tuiAsControl, TuiActiveZoneModule } from '@taiga-ui/cdk';
import { TUI_ARROW_MODE, TuiArrowModule } from '@taiga-ui/kit/components/arrow';
import { TUI_SELECT_OPTION, TuiSelectOptionModule } from '@taiga-ui/kit/components/select-option';
import { FIXED_DROPDOWN_CONTROLLER_PROVIDER } from '@taiga-ui/kit/providers';
import { TUI_ITEMS_HANDLERS } from '@taiga-ui/kit/tokens';
import * as i4$1 from '@tinkoff/ng-polymorpheus';
import { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';

class TuiNativeSelectComponent extends AbstractTuiNativeSelect {
    constructor() {
        super(...arguments);
        this.items = [];
    }
    get stringify() {
        return this.host.stringify;
    }
    selected(option) {
        return this.control.value === option;
    }
    onValueChange(index) {
        var _a;
        this.host.onValueChange(((_a = this.items) === null || _a === void 0 ? void 0 : _a[index]) || null);
    }
}
TuiNativeSelectComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiNativeSelectComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
TuiNativeSelectComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiNativeSelectComponent, selector: "select[tuiSelect]:not([labels]):not([multiple])", inputs: { items: "items" }, host: { listeners: { "change": "onValueChange($event.target.options.selectedIndex)" }, properties: { "attr.aria-invalid": "host.invalid", "disabled": "host.disabled || control.readOnly", "tabIndex": "host.focusable ? 0 : -1", "value": "host.value" } }, providers: [
        tuiAsDataList(TuiNativeSelectComponent),
        {
            provide: TemplateRef,
            deps: [TuiNativeSelectComponent],
            useFactory: ({ datalist }) => datalist,
        },
        {
            provide: AbstractTuiNativeSelect,
            useExisting: TuiNativeSelectComponent,
        },
    ], usesInheritance: true, ngImport: i0, template: "<tui-data-list-wrapper\n    *tuiDataList\n    [disabledItemHandler]=\"disabledItemHandler || itemsHandlers.disabledItemHandler\"\n    [itemContent]=\"stringify | tuiStringifyContent\"\n    [items]=\"items\"\n></tui-data-list-wrapper>\n<option\n    *ngFor=\"let option of items; let index = index\"\n    [disabled]=\"disabledItemHandler ? disabledItemHandler(option) : itemsHandlers.disabledItemHandler(option)\"\n    [selected]=\"selected(option)\"\n    [value]=\"stringify(option)\"\n>\n    {{ stringify(option) }}\n</option>\n", styles: [":host{position:absolute;top:0;left:0;width:100%;height:100%;opacity:0}\n"], components: [{ type: i1.TuiDataListWrapperComponent, selector: "tui-data-list-wrapper:not([labels])", inputs: ["items"] }], directives: [{ type: i1$1.TuiDataListDirective, selector: "ng-template[tuiDataList]" }, { type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "tuiStringifyContent": i4.TuiStringifyContentPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiNativeSelectComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'select[tuiSelect]:not([labels]):not([multiple])',
                    templateUrl: './native-select.template.html',
                    styleUrls: ['./native-select.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        tuiAsDataList(TuiNativeSelectComponent),
                        {
                            provide: TemplateRef,
                            deps: [TuiNativeSelectComponent],
                            useFactory: ({ datalist }) => datalist,
                        },
                        {
                            provide: AbstractTuiNativeSelect,
                            useExisting: TuiNativeSelectComponent,
                        },
                    ],
                    host: {
                        '[attr.aria-invalid]': 'host.invalid',
                        '[disabled]': 'host.disabled || control.readOnly',
                        '[tabIndex]': 'host.focusable ? 0 : -1',
                        '[value]': 'host.value',
                        '(change)': 'onValueChange($event.target.options.selectedIndex)',
                    },
                }]
        }], propDecorators: { items: [{
                type: Input
            }] } });

class TuiNativeSelectGroupComponent extends AbstractTuiNativeSelect {
    constructor() {
        super(...arguments);
        this.items = [];
        this.labels = [];
    }
    get stringify() {
        return this.host.stringify;
    }
    selected(option) {
        return this.control.value === option;
    }
    onValueChange(index) {
        var _a;
        const flatItems = (_a = this.items) === null || _a === void 0 ? void 0 : _a.reduce((acc, val) => acc.concat(val), []);
        this.host.onValueChange((flatItems === null || flatItems === void 0 ? void 0 : flatItems[index]) || null);
    }
}
TuiNativeSelectGroupComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiNativeSelectGroupComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
TuiNativeSelectGroupComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiNativeSelectGroupComponent, selector: "select[tuiSelect][labels]:not([multiple])", inputs: { items: "items", labels: "labels" }, host: { listeners: { "change": "onValueChange($event.target.options.selectedIndex)" }, properties: { "attr.aria-invalid": "host.invalid", "disabled": "host.disabled || control.readOnly", "tabIndex": "host.focusable ? 0 : -1", "value": "host.value" } }, providers: [
        tuiAsDataList(TuiNativeSelectGroupComponent),
        {
            provide: TemplateRef,
            deps: [TuiNativeSelectGroupComponent],
            useFactory: ({ datalist }) => datalist,
        },
        {
            provide: AbstractTuiNativeSelect,
            useExisting: TuiNativeSelectGroupComponent,
        },
    ], usesInheritance: true, ngImport: i0, template: "<tui-data-list-wrapper\n    *tuiDataList\n    [disabledItemHandler]=\"disabledItemHandler || itemsHandlers.disabledItemHandler\"\n    [itemContent]=\"stringify | tuiStringifyContent\"\n    [items]=\"items\"\n    [labels]=\"labels\"\n></tui-data-list-wrapper>\n<optgroup\n    *ngFor=\"let group of items; let index = index\"\n    [label]=\"labels[index]\"\n>\n    <option\n        *ngFor=\"let option of group; let i = index\"\n        [disabled]=\"disabledItemHandler ? disabledItemHandler(option) : itemsHandlers.disabledItemHandler(option)\"\n        [selected]=\"selected(option)\"\n        [value]=\"stringify(option)\"\n    >\n        {{ stringify(option) }}\n    </option>\n</optgroup>\n", styles: [":host{position:absolute;top:0;left:0;width:100%;height:100%;opacity:0}\n"], components: [{ type: i1.TuiDataListGroupWrapperComponent, selector: "tui-data-list-wrapper[labels]", inputs: ["items", "labels"] }], directives: [{ type: i1$1.TuiDataListDirective, selector: "ng-template[tuiDataList]" }, { type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "tuiStringifyContent": i4.TuiStringifyContentPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiNativeSelectGroupComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'select[tuiSelect][labels]:not([multiple])',
                    templateUrl: './native-select-group.template.html',
                    styleUrls: ['./native-select.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        tuiAsDataList(TuiNativeSelectGroupComponent),
                        {
                            provide: TemplateRef,
                            deps: [TuiNativeSelectGroupComponent],
                            useFactory: ({ datalist }) => datalist,
                        },
                        {
                            provide: AbstractTuiNativeSelect,
                            useExisting: TuiNativeSelectGroupComponent,
                        },
                    ],
                    host: {
                        '[attr.aria-invalid]': 'host.invalid',
                        '[disabled]': 'host.disabled || control.readOnly',
                        '[tabIndex]': 'host.focusable ? 0 : -1',
                        '[value]': 'host.value',
                        '(change)': 'onValueChange($event.target.options.selectedIndex)',
                    },
                }]
        }], propDecorators: { items: [{
                type: Input
            }], labels: [{
                type: Input
            }] } });

const TUI_SELECT_DEFAULT_OPTIONS = {
    valueContent: '',
};
/**
 * Default parameters for Select component
 */
const TUI_SELECT_OPTIONS = tuiCreateToken(TUI_SELECT_DEFAULT_OPTIONS);
function tuiSelectOptionsProvider(options) {
    return tuiProvideOptions(TUI_SELECT_OPTIONS, options, TUI_SELECT_DEFAULT_OPTIONS);
}

class TuiSelectComponent extends AbstractTuiNullableControl {
    constructor(control, cdr, textfieldCleaner, textfieldSize, arrowMode, itemsHandlers, options, isMobile) {
        super(control, cdr);
        this.textfieldCleaner = textfieldCleaner;
        this.textfieldSize = textfieldSize;
        this.arrowMode = arrowMode;
        this.itemsHandlers = itemsHandlers;
        this.options = options;
        this.isMobile = isMobile;
        this.stringify = this.itemsHandlers.stringify;
        this.identityMatcher = this.itemsHandlers.identityMatcher;
        this.valueContent = this.options.valueContent;
    }
    get size() {
        return this.textfieldSize.size;
    }
    get arrow() {
        return !this.interactive ? this.arrowMode.disabled : this.arrowMode.interactive;
    }
    get nativeFocusableElement() {
        var _a, _b;
        return (_b = (_a = this.textfield) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement) !== null && _b !== void 0 ? _b : null;
    }
    get focused() {
        return (tuiIsNativeFocused(this.nativeFocusableElement) ||
            (!!this.hostedDropdown && this.hostedDropdown.focused));
    }
    get nativeDropdownMode() {
        return !!this.nativeSelect && this.isMobile;
    }
    get computedValue() {
        return this.value === null ? '' : this.stringify(this.value) || ' ';
    }
    get computedContent() {
        return this.valueContent || this.computedValue;
    }
    onValueChange(value) {
        this.value = value || null;
    }
    onActiveZone(active) {
        this.updateFocused(active);
    }
    onKeyDownDelete() {
        if (this.textfieldCleaner.cleaner) {
            this.value = null;
        }
    }
    handleOption(option) {
        var _a;
        this.focusInput();
        this.value = option;
        (_a = this.hostedDropdown) === null || _a === void 0 ? void 0 : _a.updateOpen(false);
    }
    focusInput(preventScroll = false) {
        if (this.nativeFocusableElement) {
            this.nativeFocusableElement.focus({ preventScroll });
        }
    }
}
TuiSelectComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSelectComponent, deps: [{ token: NgControl, optional: true, self: true }, { token: ChangeDetectorRef }, { token: TUI_TEXTFIELD_CLEANER }, { token: TUI_TEXTFIELD_SIZE }, { token: TUI_ARROW_MODE }, { token: TUI_ITEMS_HANDLERS }, { token: TUI_SELECT_OPTIONS }, { token: TUI_IS_MOBILE }], target: i0.ɵɵFactoryTarget.Component });
TuiSelectComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiSelectComponent, selector: "tui-select", inputs: { stringify: "stringify", identityMatcher: "identityMatcher", valueContent: "valueContent" }, host: { properties: { "attr.data-size": "this.size" } }, providers: [
        tuiAsFocusableItemAccessor(TuiSelectComponent),
        tuiAsControl(TuiSelectComponent),
        tuiAsDataListHost(TuiSelectComponent),
        tuiAsOptionContent(TUI_SELECT_OPTION),
    ], queries: [{ propertyName: "nativeSelect", first: true, predicate: AbstractTuiNativeSelect, descendants: true, static: true }, { propertyName: "datalist", first: true, predicate: TuiDataListDirective, descendants: true, read: TemplateRef }], viewQueries: [{ propertyName: "textfield", first: true, predicate: TuiPrimitiveTextfieldComponent, descendants: true }, { propertyName: "hostedDropdown", first: true, predicate: TuiHostedDropdownComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: "<tui-hosted-dropdown\n    class=\"t-hosted\"\n    [canOpen]=\"interactive && !nativeDropdownMode\"\n    [content]=\"datalist || ''\"\n    (tuiActiveZoneChange)=\"onActiveZone($event)\"\n>\n    <tui-primitive-textfield\n        automation-id=\"tui-select__textfield\"\n        class=\"t-textfield\"\n        [disabled]=\"computedDisabled\"\n        [editable]=\"false\"\n        [focusable]=\"computedFocusable\"\n        [invalid]=\"computedInvalid\"\n        [nativeId]=\"nativeId\"\n        [pseudoActive]=\"pseudoActive\"\n        [pseudoFocus]=\"computedFocused\"\n        [pseudoHover]=\"pseudoHover\"\n        [readOnly]=\"readOnly\"\n        [tuiTextfieldIcon]=\"arrow ? icon : ''\"\n        [value]=\"computedValue\"\n        (keydown.backspace.prevent)=\"onKeyDownDelete()\"\n        (keydown.delete.prevent)=\"onKeyDownDelete()\"\n        (valueChange)=\"onValueChange($any($event))\"\n    >\n        <ng-content></ng-content>\n        <ng-content\n            ngProjectAs=\"input\"\n            select=\"input\"\n        ></ng-content>\n\n        <ng-template #select>\n            <ng-content\n                *ngIf=\"isMobile\"\n                select=\"select\"\n            ></ng-content>\n        </ng-template>\n\n        <ng-container\n            *ngTemplateOutlet=\"select\"\n            ngProjectAs=\"select\"\n        ></ng-container>\n\n        <div\n            *ngIf=\"value !== null\"\n            automation-id=\"tui-select__value\"\n            ngProjectAs=\"tuiContent\"\n            class=\"t-value\"\n        >\n            <div\n                *polymorpheusOutlet=\"computedContent as text; context: {$implicit: value, active: computedFocused}\"\n                class=\"t-primitive-value\"\n                [textContent]=\"text\"\n            ></div>\n        </div>\n    </tui-primitive-textfield>\n\n    <ng-template #icon>\n        <div\n            appearance=\"icon\"\n            tuiWrapper\n            class=\"t-icon\"\n        >\n            <ng-container *polymorpheusOutlet=\"arrow\"></ng-container>\n        </div>\n    </ng-template>\n</tui-hosted-dropdown>\n", styles: [":host{display:block;border-radius:var(--tui-radius-m);text-align:left}:host:not(._readonly) ::ng-deep input:not(:disabled){cursor:pointer}:host._readonly ::ng-deep input{cursor:default}.t-hosted{display:block;border-radius:inherit}.t-textfield{border-radius:inherit;text-align:inherit}.t-value{display:flex;width:100%;align-items:center}.t-primitive-value{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}\n"], components: [{ type: i1$1.TuiHostedDropdownComponent, selector: "tui-hosted-dropdown", inputs: ["content", "sided", "canOpen", "open"], outputs: ["openChange", "focusedChange"] }, { type: i1$1.TuiPrimitiveTextfieldComponent, selector: "tui-primitive-textfield", inputs: ["editable", "filler", "iconCleaner", "readOnly", "invalid", "disabled", "prefix", "postfix", "value"], outputs: ["valueChange"] }], directives: [{ type: i2.TuiActiveZoneDirective, selector: "[tuiActiveZone]:not(ng-container), [tuiActiveZoneChange]:not(ng-container), [tuiActiveZoneParent]:not(ng-container)", inputs: ["tuiActiveZoneParent"], outputs: ["tuiActiveZoneChange"], exportAs: ["tuiActiveZone"] }, { type: i1$1.TuiPrimitiveTextfieldDirective, selector: "tui-primitive-textfield" }, { type: i1$1.TuiTextfieldIconDirective, selector: "[tuiTextfieldIcon]", inputs: ["tuiTextfieldIcon"] }, { type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i4$1.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { type: i1$1.TuiWrapperDirective, selector: "[tuiWrapper]", inputs: ["disabled", "readOnly", "hover", "active", "focus", "invalid", "appearance"] }], viewProviders: [FIXED_DROPDOWN_CONTROLLER_PROVIDER], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSelectComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-select',
                    templateUrl: './select.template.html',
                    styleUrls: ['./select.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        tuiAsFocusableItemAccessor(TuiSelectComponent),
                        tuiAsControl(TuiSelectComponent),
                        tuiAsDataListHost(TuiSelectComponent),
                        tuiAsOptionContent(TUI_SELECT_OPTION),
                    ],
                    viewProviders: [FIXED_DROPDOWN_CONTROLLER_PROVIDER],
                }]
        }], ctorParameters: function () { return [{ type: i5.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }, {
                    type: Inject,
                    args: [NgControl]
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: i1$1.TuiTextfieldCleanerDirective, decorators: [{
                    type: Inject,
                    args: [TUI_TEXTFIELD_CLEANER]
                }] }, { type: i1$1.TuiTextfieldSizeDirective, decorators: [{
                    type: Inject,
                    args: [TUI_TEXTFIELD_SIZE]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_ARROW_MODE]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_ITEMS_HANDLERS]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_SELECT_OPTIONS]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_IS_MOBILE]
                }] }]; }, propDecorators: { textfield: [{
                type: ViewChild,
                args: [TuiPrimitiveTextfieldComponent]
            }], hostedDropdown: [{
                type: ViewChild,
                args: [TuiHostedDropdownComponent]
            }], nativeSelect: [{
                type: ContentChild,
                args: [AbstractTuiNativeSelect, { static: true }]
            }], stringify: [{
                type: Input
            }], identityMatcher: [{
                type: Input
            }], valueContent: [{
                type: Input
            }], datalist: [{
                type: ContentChild,
                args: [TuiDataListDirective, { read: TemplateRef }]
            }], size: [{
                type: HostBinding,
                args: ['attr.data-size']
            }] } });

class TuiSelectDirective extends AbstractTuiTextfieldHost {
    get readOnly() {
        return true;
    }
    get value() {
        return this.host.computedValue;
    }
    get stringify() {
        return this.host.stringify;
    }
    onValueChange(value) {
        this.host.onValueChange(value);
    }
}
TuiSelectDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSelectDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TuiSelectDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiSelectDirective, selector: "tui-select", providers: [tuiAsTextfieldHost(TuiSelectDirective)], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSelectDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'tui-select',
                    providers: [tuiAsTextfieldHost(TuiSelectDirective)],
                }]
        }] });

class TuiSelectModule {
}
TuiSelectModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSelectModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiSelectModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSelectModule, declarations: [TuiSelectComponent,
        TuiSelectDirective,
        TuiNativeSelectComponent,
        TuiNativeSelectGroupComponent], imports: [CommonModule,
        PolymorpheusModule,
        TuiActiveZoneModule,
        TuiPrimitiveTextfieldModule,
        TuiHostedDropdownModule,
        TuiSelectOptionModule,
        TuiArrowModule,
        TuiWrapperModule,
        TuiTextfieldControllerModule,
        TuiDataListWrapperModule,
        TuiDataListModule,
        TuiStringifyContentPipeModule], exports: [TuiSelectComponent,
        TuiSelectDirective,
        TuiTextfieldComponent,
        TuiNativeSelectComponent,
        TuiNativeSelectGroupComponent] });
TuiSelectModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSelectModule, imports: [[
            CommonModule,
            PolymorpheusModule,
            TuiActiveZoneModule,
            TuiPrimitiveTextfieldModule,
            TuiHostedDropdownModule,
            TuiSelectOptionModule,
            TuiArrowModule,
            TuiWrapperModule,
            TuiTextfieldControllerModule,
            TuiDataListWrapperModule,
            TuiDataListModule,
            TuiStringifyContentPipeModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSelectModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        PolymorpheusModule,
                        TuiActiveZoneModule,
                        TuiPrimitiveTextfieldModule,
                        TuiHostedDropdownModule,
                        TuiSelectOptionModule,
                        TuiArrowModule,
                        TuiWrapperModule,
                        TuiTextfieldControllerModule,
                        TuiDataListWrapperModule,
                        TuiDataListModule,
                        TuiStringifyContentPipeModule,
                    ],
                    declarations: [
                        TuiSelectComponent,
                        TuiSelectDirective,
                        TuiNativeSelectComponent,
                        TuiNativeSelectGroupComponent,
                    ],
                    exports: [
                        TuiSelectComponent,
                        TuiSelectDirective,
                        TuiTextfieldComponent,
                        TuiNativeSelectComponent,
                        TuiNativeSelectGroupComponent,
                    ],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TUI_SELECT_DEFAULT_OPTIONS, TUI_SELECT_OPTIONS, TuiNativeSelectComponent, TuiNativeSelectGroupComponent, TuiSelectComponent, TuiSelectDirective, TuiSelectModule, tuiSelectOptionsProvider };
//# sourceMappingURL=taiga-ui-kit-components-select.js.map
