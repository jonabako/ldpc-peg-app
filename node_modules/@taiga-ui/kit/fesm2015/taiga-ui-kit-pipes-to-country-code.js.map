{"version":3,"file":"taiga-ui-kit-pipes-to-country-code.js","sources":["../../../projects/kit/pipes/to-country-code/to-country-code.pipe.ts","../../../projects/kit/pipes/to-country-code/to-country-code.module.ts","../../../projects/kit/pipes/to-country-code/taiga-ui-kit-pipes-to-country-code.ts"],"sourcesContent":["import {Inject, Pipe, PipeTransform} from '@angular/core';\nimport {CHAR_PLUS} from '@taiga-ui/cdk';\nimport {TuiCountryIsoCode} from '@taiga-ui/i18n';\nimport {TUI_COUNTRIES_MASKS} from '@taiga-ui/kit/tokens';\nimport {\n    tuiGetMaxAllowedPhoneLength,\n    tuiIsoToCountryCode,\n    tuiNotKzRegion,\n} from '@taiga-ui/kit/utils';\n\n@Pipe({\n    name: 'tuiToCountryCode',\n})\nexport class TuiToCountryCodePipe implements PipeTransform {\n    constructor(\n        @Inject(TUI_COUNTRIES_MASKS)\n        private readonly countriesMasks: Record<TuiCountryIsoCode, string>,\n    ) {}\n\n    transform(\n        value: string,\n        countries: readonly TuiCountryIsoCode[],\n    ): TuiCountryIsoCode | undefined {\n        return countries.find(countryIsoCode => {\n            const ruCodeTest =\n                countryIsoCode === TuiCountryIsoCode.RU &&\n                /^[78]/.test(value) &&\n                /^(?!880[1-9 ])/.test(value) &&\n                value.length + 1 ===\n                    tuiGetMaxAllowedPhoneLength(\n                        this.countriesMasks,\n                        TuiCountryIsoCode.RU,\n                    );\n\n            const matched =\n                ruCodeTest ||\n                (value.startsWith(\n                    tuiIsoToCountryCode(this.countriesMasks, countryIsoCode).replace(\n                        CHAR_PLUS,\n                        '',\n                    ),\n                ) &&\n                    value.length + 1 ===\n                        tuiGetMaxAllowedPhoneLength(this.countriesMasks, countryIsoCode));\n\n            if (matched) {\n                switch (countryIsoCode) {\n                    case TuiCountryIsoCode.RU:\n                        return tuiNotKzRegion(value);\n                    case TuiCountryIsoCode.KZ:\n                        return !tuiNotKzRegion(value);\n                    default:\n                        return true;\n                }\n            }\n\n            return false;\n        });\n    }\n}\n","import {NgModule} from '@angular/core';\n\nimport {TuiToCountryCodePipe} from './to-country-code.pipe';\n\n@NgModule({\n    declarations: [TuiToCountryCodePipe],\n    exports: [TuiToCountryCodePipe],\n})\nexport class TuiExtractCountryCodeModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":";;;;;;;MAaa,oBAAoB,CAAA;AAC7B,IAAA,WAAA,CAEqB,cAAiD,EAAA;QAAjD,IAAc,CAAA,cAAA,GAAd,cAAc,CAAmC;KAClE;IAEJ,SAAS,CACL,KAAa,EACb,SAAuC,EAAA;AAEvC,QAAA,OAAO,SAAS,CAAC,IAAI,CAAC,cAAc,IAAG;AACnC,YAAA,MAAM,UAAU,GACZ,cAAc,KAAK,iBAAiB,CAAC,EAAE;AACvC,gBAAA,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC;AACnB,gBAAA,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC;gBAC5B,KAAK,CAAC,MAAM,GAAG,CAAC;oBACZ,2BAA2B,CACvB,IAAI,CAAC,cAAc,EACnB,iBAAiB,CAAC,EAAE,CACvB,CAAC;YAEV,MAAM,OAAO,GACT,UAAU;AACV,iBAAC,KAAK,CAAC,UAAU,CACb,mBAAmB,CAAC,IAAI,CAAC,cAAc,EAAE,cAAc,CAAC,CAAC,OAAO,CAC5D,SAAS,EACT,EAAE,CACL,CACJ;oBACG,KAAK,CAAC,MAAM,GAAG,CAAC;wBACZ,2BAA2B,CAAC,IAAI,CAAC,cAAc,EAAE,cAAc,CAAC,CAAC,CAAC;AAE9E,YAAA,IAAI,OAAO,EAAE;AACT,gBAAA,QAAQ,cAAc;oBAClB,KAAK,iBAAiB,CAAC,EAAE;AACrB,wBAAA,OAAO,cAAc,CAAC,KAAK,CAAC,CAAC;oBACjC,KAAK,iBAAiB,CAAC,EAAE;AACrB,wBAAA,OAAO,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;AAClC,oBAAA;AACI,wBAAA,OAAO,IAAI,CAAC;AACnB,iBAAA;AACJ,aAAA;AAED,YAAA,OAAO,KAAK,CAAC;AACjB,SAAC,CAAC,CAAC;KACN;;AA7CQ,oBAAA,CAAA,IAAA,GAAA,EAAA,CAAA,kBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,SAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,oBAAoB,kBAEjB,mBAAmB,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,IAAA,EAAA,CAAA,CAAA;gHAFtB,oBAAoB,EAAA,IAAA,EAAA,kBAAA,EAAA,CAAA,CAAA;4FAApB,oBAAoB,EAAA,UAAA,EAAA,CAAA;kBAHhC,IAAI;AAAC,YAAA,IAAA,EAAA,CAAA;AACF,oBAAA,IAAI,EAAE,kBAAkB;AAC3B,iBAAA,CAAA;;0BAGQ,MAAM;2BAAC,mBAAmB,CAAA;;;MCPtB,2BAA2B,CAAA;;yHAA3B,2BAA2B,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,QAAA,EAAA,CAAA,CAAA;0HAA3B,2BAA2B,EAAA,YAAA,EAAA,CAHrB,oBAAoB,CAAA,EAAA,OAAA,EAAA,CACzB,oBAAoB,CAAA,EAAA,CAAA,CAAA;0HAErB,2BAA2B,EAAA,CAAA,CAAA;4FAA3B,2BAA2B,EAAA,UAAA,EAAA,CAAA;kBAJvC,QAAQ;AAAC,YAAA,IAAA,EAAA,CAAA;oBACN,YAAY,EAAE,CAAC,oBAAoB,CAAC;oBACpC,OAAO,EAAE,CAAC,oBAAoB,CAAC;AAClC,iBAAA,CAAA;;;ACPD;;AAEG;;;;"}