import { __decorate } from 'tslib';
import * as i0 from '@angular/core';
import { Directive, Inject, ChangeDetectorRef, Component, ChangeDetectionStrategy, Optional, Self, ViewChild, Input, HostBinding, HostListener, NgModule } from '@angular/core';
import * as i8 from '@angular/forms';
import { NgControl } from '@angular/forms';
import { maskitoDateTimeOptionsGenerator } from '@maskito/kit';
import * as i7 from '@taiga-ui/cdk';
import { TuiDay, TuiTime, AbstractTuiControl, ALWAYS_FALSE_HANDLER, TuiMonth, changeDateSeparator, DATE_FILLER_LENGTH, tuiDateClamp, tuiNullableSame, tuiClamp, TUI_DATE_FORMAT, TUI_DATE_SEPARATOR, TUI_IS_MOBILE, TUI_IS_IOS, tuiAsFocusableItemAccessor, tuiAsControl, tuiPure, TuiPreventDefaultModule } from '@taiga-ui/cdk';
import * as i1 from '@taiga-ui/core';
import { TUI_TEXTFIELD_HOST, TUI_TEXTFIELD_SIZE, TuiPrimitiveTextfieldComponent, AbstractTuiTextfieldHost, tuiAsTextfieldHost, TuiWrapperModule, TuiCalendarModule, TuiSvgModule, TuiLinkModule, TuiHostedDropdownModule, TuiPrimitiveTextfieldModule, TuiTextfieldControllerModule, TuiTextfieldComponent } from '@taiga-ui/core';
import { DATE_TIME_SEPARATOR, TUI_DATE_MODE_MASKITO_ADAPTER } from '@taiga-ui/kit/constants';
import { TUI_TIME_TEXTS, TUI_DATE_TEXTS, TUI_DATE_TIME_VALUE_TRANSFORMER, TUI_INPUT_DATE_OPTIONS, tuiDateStreamWithTransformer } from '@taiga-ui/kit/tokens';
import * as i9 from 'rxjs';
import { BehaviorSubject, combineLatest, timer } from 'rxjs';
import { map, takeUntil } from 'rxjs/operators';
import * as i2 from '@taiga-ui/kit/directives';
import { TuiValueAccessorModule } from '@taiga-ui/kit/directives';
import * as i3 from '@maskito/angular';
import { MaskitoModule } from '@maskito/angular';
import * as i4 from '@tinkoff/ng-polymorpheus';
import { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';
import * as i5 from '@angular/common';
import { CommonModule } from '@angular/common';

class TuiNativeDateTimeDirective {
    constructor(host) {
        this.host = host;
    }
    get value() {
        var _a, _b;
        if (!this.host.rawValue[0] || !this.host.rawValue[1]) {
            return '';
        }
        return `${(_a = this.host.rawValue[0]) === null || _a === void 0 ? void 0 : _a.toString('YMD', '-')}T${(_b = this.host.rawValue[1]) === null || _b === void 0 ? void 0 : _b.toString('HH:MM')}`;
    }
    onChange(value) {
        if (!value) {
            this.host.writeValue([null, null]);
            return;
        }
        const date = new Date(value);
        const day = TuiDay.fromLocalNativeDate(date);
        const time = TuiTime.fromLocalNativeDate(date);
        this.host.writeValue([day, time]);
    }
}
TuiNativeDateTimeDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiNativeDateTimeDirective, deps: [{ token: TUI_TEXTFIELD_HOST }], target: i0.ɵɵFactoryTarget.Directive });
TuiNativeDateTimeDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiNativeDateTimeDirective, selector: "input[tuiDateTime]", host: { attributes: { "type": "datetime-local" }, listeners: { "change.stop": "onChange($event.target.value)", "input.stop": "onChange($event.target.value)", "click.stop.silent": "0", "mousedown.stop.silent": "0" }, properties: { "tabIndex": "-1", "value": "value" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiNativeDateTimeDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'input[tuiDateTime]',
                    host: {
                        type: 'datetime-local',
                        '[tabIndex]': '-1',
                        '[value]': 'value',
                        '(change.stop)': 'onChange($event.target.value)',
                        '(input.stop)': 'onChange($event.target.value)',
                        '(click.stop.silent)': '0',
                        '(mousedown.stop.silent)': '0',
                    },
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_TEXTFIELD_HOST]
                }] }]; } });

class TuiInputDateTimeComponent extends AbstractTuiControl {
    constructor(control, cdr, dateFormat, dateSeparator, timeTexts$, dateTexts$, valueTransformer, options, isMobile, isIos, textfieldSize) {
        super(control, cdr, valueTransformer);
        this.dateFormat = dateFormat;
        this.dateSeparator = dateSeparator;
        this.timeTexts$ = timeTexts$;
        this.dateTexts$ = dateTexts$;
        this.valueTransformer = valueTransformer;
        this.options = options;
        this.isMobile = isMobile;
        this.isIos = isIos;
        this.textfieldSize = textfieldSize;
        this.month = null;
        this.timeMode$ = new BehaviorSubject('HH:MM');
        this.min = this.options.min;
        this.max = this.options.max;
        this.disabledItemHandler = ALWAYS_FALSE_HANDLER;
        this.defaultActiveYearMonth = TuiMonth.currentLocal();
        this.open = false;
        this.filler$ = combineLatest([
            this.dateTexts$.pipe(map(dateTexts => changeDateSeparator(dateTexts[this.dateFormat], this.dateSeparator))),
            this.timeTexts$,
            this.timeMode$,
        ]).pipe(map(([dateFiller, timeTexts, timeMode]) => this.getDateTimeString(dateFiller, timeTexts[timeMode])));
    }
    set timeMode(value) {
        this.timeMode$.next(value);
    }
    get timeMode() {
        return this.timeMode$.value;
    }
    get size() {
        return this.textfieldSize.size;
    }
    get computedMin() {
        return this.toTuiDay(this.min, this.options.min);
    }
    get computedMax() {
        return this.toTuiDay(this.max, this.options.max);
    }
    get fillerLength() {
        return DATE_FILLER_LENGTH + DATE_TIME_SEPARATOR.length + this.timeMode.length;
    }
    get maskOptions() {
        return this.calculateMask(this.computedMin, this.computedMax, this.timeMode, this.dateFormat, this.dateSeparator);
    }
    get nativeFocusableElement() {
        var _a, _b;
        return (_b = (_a = this.textfield) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement) !== null && _b !== void 0 ? _b : null;
    }
    get focused() {
        var _a;
        return !!((_a = this.textfield) === null || _a === void 0 ? void 0 : _a.focused);
    }
    get calendarIcon() {
        return this.options.icon;
    }
    get nativePicker() {
        return this.options.nativePicker && this.isMobile;
    }
    get showNativePicker() {
        return this.nativePicker && this.timeMode === 'HH:MM';
    }
    get computedValue() {
        const { value, nativeValue, timeMode } = this;
        const [date, time] = value;
        const hasTimeInputChars = nativeValue.length > DATE_FILLER_LENGTH;
        if (!date || (!time && hasTimeInputChars)) {
            return nativeValue;
        }
        return this.getDateTimeString(date, time, timeMode);
    }
    get calendarValue() {
        return this.value[0];
    }
    get calendarMinDay() {
        const min = this.computedMin;
        return Array.isArray(min) ? min[0] : min;
    }
    get calendarMaxDay() {
        const max = this.computedMax;
        return Array.isArray(max) ? max[0] : max;
    }
    get computedActiveYearMonth() {
        const { computedMin, computedMax } = this;
        return (this.month ||
            this.value[0] ||
            tuiDateClamp(this.defaultActiveYearMonth, Array.isArray(computedMin) ? computedMin[0] : computedMin, Array.isArray(computedMax) ? computedMax[0] : computedMax));
    }
    get nativeValue() {
        var _a;
        return ((_a = this.nativeFocusableElement) === null || _a === void 0 ? void 0 : _a.value) || '';
    }
    set nativeValue(value) {
        if (!this.nativeFocusableElement) {
            return;
        }
        this.nativeFocusableElement.value = value;
    }
    onClick() {
        this.open = !this.open;
    }
    onValueChange(value) {
        if (!value) {
            this.onOpenChange(true);
        }
        if (value.length < DATE_FILLER_LENGTH) {
            this.value = [null, null];
            return;
        }
        const [date, time] = value.split(DATE_TIME_SEPARATOR);
        const parsedDate = TuiDay.normalizeParse(date, this.dateFormat);
        const parsedTime = time && time.length === this.timeMode.length
            ? TuiTime.fromString(time)
            : null;
        this.open = false;
        this.value = [parsedDate, parsedTime];
    }
    onDayClick(day) {
        var _a;
        const modifiedTime = this.value[1] && this.clampTime(this.value[1], day);
        const newCaretIndex = DATE_FILLER_LENGTH + DATE_TIME_SEPARATOR.length;
        this.value = [day, modifiedTime];
        this.updateNativeValue(day);
        (_a = this.nativeFocusableElement) === null || _a === void 0 ? void 0 : _a.setSelectionRange(newCaretIndex, newCaretIndex);
        this.open = false;
    }
    onMonthChange(month) {
        this.month = month;
    }
    onOpenChange(open) {
        this.open = open;
    }
    onFocused(focused) {
        this.updateFocused(focused);
        if (focused) {
            return;
        }
        timer(0)
            .pipe(takeUntil(this.destroy$))
            .subscribe(() => {
            this.nativeValue = this.trimTrailingSeparator(this.nativeValue);
        });
        if (this.value[0] === null ||
            this.value[1] !== null ||
            this.nativeValue.length <= this.fillerLength + DATE_TIME_SEPARATOR.length ||
            this.timeMode === 'HH:MM') {
            return;
        }
        const [, time] = this.nativeValue.split(DATE_TIME_SEPARATOR);
        if (!time) {
            return;
        }
        const parsedTime = TuiTime.fromString(time);
        this.value = [this.value[0], parsedTime];
    }
    setDisabledState() {
        super.setDisabledState();
        this.open = false;
    }
    writeValue(value) {
        super.writeValue(value);
        this.nativeValue =
            this.value && (this.value[0] || this.value[1]) ? this.computedValue : '';
    }
    getFallbackValue() {
        return [null, null];
    }
    valueIdenticalComparator(oldValue, newValue) {
        return (tuiNullableSame(oldValue[0], newValue[0], (a, b) => a.daySame(b)) &&
            tuiNullableSame(oldValue[1], newValue[1], (a, b) => String(a) === String(b)));
    }
    calculateMask(min, max, timeMode, dateFormat, dateSeparator) {
        return maskitoDateTimeOptionsGenerator({
            timeMode,
            dateSeparator,
            dateMode: TUI_DATE_MODE_MASKITO_ADAPTER[dateFormat],
            min: this.toNativeDate(min),
            max: this.toNativeDate(max),
        });
    }
    getDateTimeString(date, time, timeMode = 'HH:MM') {
        const dateString = date instanceof TuiDay
            ? date.toString(this.dateFormat, this.dateSeparator)
            : date;
        const timeString = time instanceof TuiTime ? time.toString(timeMode) : time || '';
        return timeString
            ? `${dateString}${DATE_TIME_SEPARATOR}${timeString}`
            : dateString;
    }
    updateNativeValue(day) {
        const time = this.nativeValue.split(DATE_TIME_SEPARATOR)[1] || '';
        this.nativeValue = this.getDateTimeString(day, time);
    }
    clampTime(time, day) {
        const { computedMin, computedMax } = this;
        const ms = time.toAbsoluteMilliseconds();
        const min = Array.isArray(computedMin) && day.daySame(this.calendarMinDay)
            ? computedMin[1].toAbsoluteMilliseconds()
            : -Infinity;
        const max = Array.isArray(computedMax) && day.daySame(this.calendarMaxDay)
            ? computedMax[1].toAbsoluteMilliseconds()
            : Infinity;
        return TuiTime.fromAbsoluteMilliseconds(tuiClamp(ms, min, max));
    }
    trimTrailingSeparator(value) {
        return value.replace(new RegExp(`(\\${this.dateSeparator}|${DATE_TIME_SEPARATOR}|\\.)$`), '');
    }
    toNativeDate(value) {
        if (!Array.isArray(value)) {
            return value.toLocalNativeDate();
        }
        const [{ year, month, day }, { hours, minutes, seconds, ms }] = value;
        return new Date(year, month, day, hours, minutes, seconds, ms);
    }
    toTuiDay(value, fallback) {
        if (!value) {
            return fallback;
        }
        if (!Array.isArray(value)) {
            return value;
        }
        const [tuiDay, tuiTime] = value;
        if (!tuiDay) {
            return fallback;
        }
        if (!tuiTime) {
            return tuiDay;
        }
        return [tuiDay, tuiTime];
    }
}
TuiInputDateTimeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputDateTimeComponent, deps: [{ token: NgControl, optional: true, self: true }, { token: ChangeDetectorRef }, { token: TUI_DATE_FORMAT }, { token: TUI_DATE_SEPARATOR }, { token: TUI_TIME_TEXTS }, { token: TUI_DATE_TEXTS }, { token: TUI_DATE_TIME_VALUE_TRANSFORMER, optional: true }, { token: TUI_INPUT_DATE_OPTIONS }, { token: TUI_IS_MOBILE }, { token: TUI_IS_IOS }, { token: TUI_TEXTFIELD_SIZE }], target: i0.ɵɵFactoryTarget.Component });
TuiInputDateTimeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiInputDateTimeComponent, selector: "tui-input-date-time", inputs: { min: "min", max: "max", disabledItemHandler: "disabledItemHandler", defaultActiveYearMonth: "defaultActiveYearMonth", timeMode: "timeMode" }, host: { listeners: { "click": "onClick()" }, properties: { "attr.data-size": "this.size" } }, providers: [
        tuiAsFocusableItemAccessor(TuiInputDateTimeComponent),
        tuiAsControl(TuiInputDateTimeComponent),
        tuiDateStreamWithTransformer(TUI_DATE_TIME_VALUE_TRANSFORMER),
    ], viewQueries: [{ propertyName: "textfield", first: true, predicate: TuiPrimitiveTextfieldComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: "<tui-hosted-dropdown\n    class=\"t-hosted\"\n    [canOpen]=\"interactive && !showNativePicker\"\n    [content]=\"dropdown\"\n    [open]=\"open && interactive\"\n    (openChange)=\"onOpenChange($event)\"\n>\n    <tui-primitive-textfield\n        automation-id=\"tui-input-date-time__textfield\"\n        tuiValueAccessor\n        class=\"t-textfield\"\n        [disabled]=\"computedDisabled\"\n        [invalid]=\"computedInvalid\"\n        [maskito]=\"maskOptions\"\n        [nativeId]=\"nativeId\"\n        [pseudoFocus]=\"pseudoFocus\"\n        [pseudoHover]=\"pseudoHover\"\n        [readOnly]=\"readOnly\"\n        [tuiTextfieldFiller]=\"(filler$ | async) || ''\"\n        [tuiTextfieldIcon]=\"calendarIcon && iconContent\"\n        [value]=\"computedValue\"\n        (focusedChange)=\"onFocused($event)\"\n        (valueChange)=\"onValueChange($event)\"\n    >\n        <ng-content></ng-content>\n        <ng-content\n            ngProjectAs=\"input\"\n            select=\"input\"\n        ></ng-content>\n    </tui-primitive-textfield>\n\n    <ng-template #iconContent>\n        <tui-svg\n            *polymorpheusOutlet=\"calendarIcon as src; context: {$implicit: size}\"\n            appearance=\"icon\"\n            tuiWrapper\n            [class.t-icon]=\"!computedDisabled\"\n            [src]=\"src\"\n        ></tui-svg>\n        <input\n            *ngIf=\"showNativePicker\"\n            tuiDateTime\n            class=\"t-native-input\"\n        />\n    </ng-template>\n\n    <ng-template\n        #dropdown=\"polymorpheus\"\n        [polymorpheus]=\"type\"\n    >\n        <tui-calendar\n            automation-id=\"tui-input-date-time__calendar\"\n            tuiPreventDefault=\"mousedown\"\n            [disabledItemHandler]=\"disabledItemHandler\"\n            [max]=\"calendarMaxDay\"\n            [min]=\"calendarMinDay\"\n            [month]=\"computedActiveYearMonth\"\n            [value]=\"calendarValue\"\n            (dayClick)=\"onDayClick($event)\"\n            (monthChange)=\"onMonthChange($event)\"\n        ></tui-calendar>\n    </ng-template>\n</tui-hosted-dropdown>\n", styles: [":host{display:block;border-radius:var(--tui-radius-m);text-align:left}.t-hosted{display:block;border-radius:inherit}.t-textfield{border-radius:inherit;text-align:inherit}.t-icon{pointer-events:auto}.t-button{display:flex;height:2.75rem;justify-content:center;box-shadow:inset 0 1px var(--tui-base-03)}.t-native-input{position:absolute;top:0;left:0;width:100%;height:100%;opacity:0;pointer-events:auto;font-size:2rem}\n"], components: [{ type: i1.TuiHostedDropdownComponent, selector: "tui-hosted-dropdown", inputs: ["content", "sided", "canOpen", "open"], outputs: ["openChange", "focusedChange"] }, { type: i1.TuiPrimitiveTextfieldComponent, selector: "tui-primitive-textfield", inputs: ["editable", "filler", "iconCleaner", "readOnly", "invalid", "disabled", "prefix", "postfix", "value"], outputs: ["valueChange"] }, { type: i1.TuiSvgComponent, selector: "tui-svg", inputs: ["src"] }, { type: i1.TuiCalendarComponent, selector: "tui-calendar", inputs: ["initialView", "month", "disabledItemHandler", "min", "max", "minViewedMonth", "maxViewedMonth", "hoveredItem", "showAdjacent", "markerHandler", "value"], outputs: ["dayClick", "monthChange", "hoveredItemChange"] }], directives: [{ type: i1.TuiPrimitiveTextfieldDirective, selector: "tui-primitive-textfield" }, { type: i2.TuiValueAccessorDirective, selector: "[tuiValueAccessor]" }, { type: i3.MaskitoDirective, selector: "[maskito]", inputs: ["maskito", "maskitoElement"] }, { type: i1.TuiTextfieldFillerDirective, selector: "[tuiTextfieldFiller]", inputs: ["tuiTextfieldFiller"] }, { type: i1.TuiTextfieldIconDirective, selector: "[tuiTextfieldIcon]", inputs: ["tuiTextfieldIcon"] }, { type: i4.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { type: i1.TuiWrapperDirective, selector: "[tuiWrapper]", inputs: ["disabled", "readOnly", "hover", "active", "focus", "invalid", "appearance"] }, { type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: TuiNativeDateTimeDirective, selector: "input[tuiDateTime]" }, { type: i4.PolymorpheusTemplate, selector: "ng-template[polymorpheus]", inputs: ["polymorpheus"], exportAs: ["polymorpheus"] }, { type: i7.TuiPreventDefaultDirective, selector: "[tuiPreventDefault]", inputs: ["tuiPreventDefault"] }], pipes: { "async": i5.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiPure
], TuiInputDateTimeComponent.prototype, "calculateMask", null);
__decorate([
    tuiPure
], TuiInputDateTimeComponent.prototype, "getDateTimeString", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputDateTimeComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-input-date-time',
                    templateUrl: './input-date-time.template.html',
                    styleUrls: ['./input-date-time.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        tuiAsFocusableItemAccessor(TuiInputDateTimeComponent),
                        tuiAsControl(TuiInputDateTimeComponent),
                        tuiDateStreamWithTransformer(TUI_DATE_TIME_VALUE_TRANSFORMER),
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i8.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }, {
                    type: Inject,
                    args: [NgControl]
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_DATE_FORMAT]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_DATE_SEPARATOR]
                }] }, { type: i9.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_TIME_TEXTS]
                }] }, { type: i9.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_DATE_TEXTS]
                }] }, { type: i7.AbstractTuiValueTransformer, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TUI_DATE_TIME_VALUE_TRANSFORMER]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_INPUT_DATE_OPTIONS]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_IS_MOBILE]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_IS_IOS]
                }] }, { type: i1.TuiTextfieldSizeDirective, decorators: [{
                    type: Inject,
                    args: [TUI_TEXTFIELD_SIZE]
                }] }]; }, propDecorators: { textfield: [{
                type: ViewChild,
                args: [TuiPrimitiveTextfieldComponent]
            }], min: [{
                type: Input
            }], max: [{
                type: Input
            }], disabledItemHandler: [{
                type: Input
            }], defaultActiveYearMonth: [{
                type: Input
            }], timeMode: [{
                type: Input
            }], size: [{
                type: HostBinding,
                args: ['attr.data-size']
            }], onClick: [{
                type: HostListener,
                args: ['click']
            }], calculateMask: [], getDateTimeString: [] } });

class TuiInputDateTimeDirective extends AbstractTuiTextfieldHost {
    get value() {
        return this.host.computedValue;
    }
    get rawValue() {
        return this.host.value;
    }
    onValueChange(value) {
        this.host.onValueChange(value);
    }
    writeValue(value) {
        this.host.writeValue(value);
    }
    process(input) {
        input.inputMode = 'numeric';
    }
}
TuiInputDateTimeDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputDateTimeDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TuiInputDateTimeDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiInputDateTimeDirective, selector: "tui-input-date-time", providers: [tuiAsTextfieldHost(TuiInputDateTimeDirective)], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputDateTimeDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'tui-input-date-time',
                    providers: [tuiAsTextfieldHost(TuiInputDateTimeDirective)],
                }]
        }] });

class TuiInputDateTimeModule {
}
TuiInputDateTimeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputDateTimeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiInputDateTimeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputDateTimeModule, declarations: [TuiInputDateTimeComponent,
        TuiInputDateTimeDirective,
        TuiNativeDateTimeDirective], imports: [CommonModule,
        MaskitoModule,
        PolymorpheusModule,
        TuiWrapperModule,
        TuiPreventDefaultModule,
        TuiCalendarModule,
        TuiSvgModule,
        TuiLinkModule,
        TuiHostedDropdownModule,
        TuiPrimitiveTextfieldModule,
        TuiValueAccessorModule,
        TuiTextfieldControllerModule], exports: [TuiInputDateTimeComponent,
        TuiInputDateTimeDirective,
        TuiTextfieldComponent] });
TuiInputDateTimeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputDateTimeModule, imports: [[
            CommonModule,
            MaskitoModule,
            PolymorpheusModule,
            TuiWrapperModule,
            TuiPreventDefaultModule,
            TuiCalendarModule,
            TuiSvgModule,
            TuiLinkModule,
            TuiHostedDropdownModule,
            TuiPrimitiveTextfieldModule,
            TuiValueAccessorModule,
            TuiTextfieldControllerModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputDateTimeModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        MaskitoModule,
                        PolymorpheusModule,
                        TuiWrapperModule,
                        TuiPreventDefaultModule,
                        TuiCalendarModule,
                        TuiSvgModule,
                        TuiLinkModule,
                        TuiHostedDropdownModule,
                        TuiPrimitiveTextfieldModule,
                        TuiValueAccessorModule,
                        TuiTextfieldControllerModule,
                    ],
                    declarations: [
                        TuiInputDateTimeComponent,
                        TuiInputDateTimeDirective,
                        TuiNativeDateTimeDirective,
                    ],
                    exports: [
                        TuiInputDateTimeComponent,
                        TuiInputDateTimeDirective,
                        TuiTextfieldComponent,
                    ],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TuiInputDateTimeComponent, TuiInputDateTimeDirective, TuiInputDateTimeModule };
//# sourceMappingURL=taiga-ui-kit-components-input-date-time.js.map
