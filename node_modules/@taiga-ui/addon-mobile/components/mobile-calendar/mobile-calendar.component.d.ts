import { AfterViewInit, EventEmitter, NgZone } from '@angular/core';
import { TuiBooleanHandler, TuiDay, TuiDayRange, TuiDestroyService, TuiInjectionTokenType, TuiMonth, TuiTypedMapper } from '@taiga-ui/cdk';
import { TUI_SHORT_WEEK_DAYS, TuiCommonIcons } from '@taiga-ui/core';
import { Observable } from 'rxjs';
import * as i0 from "@angular/core";
export declare class TuiMobileCalendarComponent implements AfterViewInit {
    readonly isIOS: boolean;
    readonly isE2E: boolean;
    private readonly doc;
    private readonly destroy$;
    readonly icons: TuiCommonIcons;
    readonly closeWord$: Observable<string>;
    readonly cancelWord$: Observable<string>;
    readonly doneWord$: Observable<string>;
    readonly unorderedWeekDays$: TuiInjectionTokenType<typeof TUI_SHORT_WEEK_DAYS>;
    readonly chooseDayOrRangeTexts$: Observable<[string, string, string]>;
    private readonly duration;
    private readonly ngZone;
    private readonly yearsScrollRef?;
    private readonly monthsScrollRef?;
    private readonly today;
    private activeYear;
    private activeMonth;
    single: boolean;
    multi: boolean;
    min: TuiDay;
    max: TuiDay;
    disabledItemHandler: TuiBooleanHandler<TuiDay>;
    readonly cancel: EventEmitter<void>;
    readonly confirm: EventEmitter<TuiDayRange | TuiDay | readonly TuiDay[]>;
    value: TuiDay | TuiDayRange | readonly TuiDay[] | null;
    readonly years: number[];
    readonly months: TuiMonth[];
    initialized: boolean;
    constructor(isIOS: boolean, isE2E: boolean, doc: Document, destroy$: TuiDestroyService, valueChanges: Observable<TuiDayRange | null>, icons: TuiCommonIcons, closeWord$: Observable<string>, cancelWord$: Observable<string>, doneWord$: Observable<string>, unorderedWeekDays$: TuiInjectionTokenType<typeof TUI_SHORT_WEEK_DAYS>, chooseDayOrRangeTexts$: Observable<[string, string, string]>, duration: number, ngZone: NgZone);
    get yearWidth(): number;
    ngAfterViewInit(): void;
    onClose(): void;
    onConfirm(): void;
    onDayClick(day: TuiDay): void;
    getState(index: number): 'active' | 'adjacent' | null;
    onMonthChange(month: number): void;
    setYear(year: number): void;
    readonly disabledItemHandlerMapper: TuiTypedMapper<[
        TuiBooleanHandler<TuiDay>,
        TuiDay,
        TuiDay
    ], TuiBooleanHandler<TuiDay>>;
    private isMultiValue;
    private isSingleValue;
    private get initialYear();
    private get initialMonth();
    private getYearsViewportSize;
    private updateViewportDimension;
    private lateInit;
    private waitScrolledChange;
    private initYearScroll;
    private initMonthScroll;
    private scrollToActiveYear;
    private scrollToActiveMonth;
    private isYearActive;
    private monthToYear;
    private getMonthOffset;
    static ɵfac: i0.ɵɵFactoryDeclaration<TuiMobileCalendarComponent, [null, null, null, { self: true; }, null, null, null, null, null, null, null, null, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TuiMobileCalendarComponent, "tui-mobile-calendar", never, { "single": "single"; "multi": "multi"; "min": "min"; "max": "max"; "disabledItemHandler": "disabledItemHandler"; }, { "cancel": "cancel"; "confirm": "confirm"; }, never, never>;
}
