import { ChangeDetectorRef, Directive, Inject, Input, Output, TemplateRef, } from '@angular/core';
import { tuiIfMap } from '@taiga-ui/cdk';
import { PolymorpheusTemplate } from '@tinkoff/ng-polymorpheus';
import { Subject } from 'rxjs';
import { endWith, ignoreElements, share } from 'rxjs/operators';
import { TuiSheetService } from './sheet.service';
import * as i0 from "@angular/core";
import * as i1 from "./sheet.service";
/**
 * @deprecated: use {@link TuiSheetDialogDirective}
 * drop in v4.0
 */
export class TuiSheetDirective extends PolymorpheusTemplate {
    constructor(cdr, templateRef, service) {
        super(templateRef, cdr);
        this.service = service;
        this.open$ = new Subject();
        this.options = {};
        this.tuiSheetChange = this.open$.pipe(tuiIfMap(() => this.service.open(this, this.options).pipe(ignoreElements(), endWith(false))), share());
    }
    set tuiSheet(open) {
        this.open$.next(open);
    }
}
TuiSheetDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSheetDirective, deps: [{ token: ChangeDetectorRef }, { token: TemplateRef }, { token: TuiSheetService }], target: i0.ɵɵFactoryTarget.Directive });
TuiSheetDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiSheetDirective, selector: "ng-template[tuiSheet]", inputs: { options: ["tuiSheetOptions", "options"], tuiSheet: "tuiSheet" }, outputs: { tuiSheetChange: "tuiSheetChange" }, usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSheetDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ng-template[tuiSheet]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: i0.TemplateRef, decorators: [{
                    type: Inject,
                    args: [TemplateRef]
                }] }, { type: i1.TuiSheetService, decorators: [{
                    type: Inject,
                    args: [TuiSheetService]
                }] }]; }, propDecorators: { options: [{
                type: Input,
                args: ['tuiSheetOptions']
            }], tuiSheet: [{
                type: Input
            }], tuiSheetChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hlZXQuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYWRkb24tbW9iaWxlL2NvbXBvbmVudHMvc2hlZXQvc2hlZXQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDSCxpQkFBaUIsRUFDakIsU0FBUyxFQUNULE1BQU0sRUFDTixLQUFLLEVBQ0wsTUFBTSxFQUNOLFdBQVcsR0FDZCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3ZDLE9BQU8sRUFBQyxvQkFBb0IsRUFBQyxNQUFNLDBCQUEwQixDQUFDO0FBQzlELE9BQU8sRUFBQyxPQUFPLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDN0IsT0FBTyxFQUFDLE9BQU8sRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFHOUQsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLGlCQUFpQixDQUFDOzs7QUFHaEQ7OztHQUdHO0FBSUgsTUFBTSxPQUFPLGlCQUFrQixTQUFRLG9CQUFxQztJQW1CeEUsWUFDK0IsR0FBc0IsRUFDNUIsV0FBeUMsRUFDcEIsT0FBd0I7UUFFbEUsS0FBSyxDQUFDLFdBQVcsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUZrQixZQUFPLEdBQVAsT0FBTyxDQUFpQjtRQXJCckQsVUFBSyxHQUFHLElBQUksT0FBTyxFQUFXLENBQUM7UUFHaEQsWUFBTyxHQUE2QixFQUFFLENBQUM7UUFROUIsbUJBQWMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FDckMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUNWLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUMvRSxFQUNELEtBQUssRUFBRSxDQUNWLENBQUM7SUFRRixDQUFDO0lBbkJELElBQ0ksUUFBUSxDQUFDLElBQWE7UUFDdEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDMUIsQ0FBQzs7K0dBVFEsaUJBQWlCLGtCQW9CZCxpQkFBaUIsYUFDakIsV0FBVyxhQUNYLGVBQWU7bUdBdEJsQixpQkFBaUI7NEZBQWpCLGlCQUFpQjtrQkFIN0IsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsdUJBQXVCO2lCQUNwQzs7MEJBcUJRLE1BQU07MkJBQUMsaUJBQWlCOzswQkFDeEIsTUFBTTsyQkFBQyxXQUFXOzswQkFDbEIsTUFBTTsyQkFBQyxlQUFlOzRDQWxCM0IsT0FBTztzQkFETixLQUFLO3VCQUFDLGlCQUFpQjtnQkFJcEIsUUFBUTtzQkFEWCxLQUFLO2dCQU1HLGNBQWM7c0JBRHRCLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIENoYW5nZURldGVjdG9yUmVmLFxuICAgIERpcmVjdGl2ZSxcbiAgICBJbmplY3QsXG4gICAgSW5wdXQsXG4gICAgT3V0cHV0LFxuICAgIFRlbXBsYXRlUmVmLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7dHVpSWZNYXB9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtQb2x5bW9ycGhldXNUZW1wbGF0ZX0gZnJvbSAnQHRpbmtvZmYvbmctcG9seW1vcnBoZXVzJztcbmltcG9ydCB7U3ViamVjdH0gZnJvbSAncnhqcyc7XG5pbXBvcnQge2VuZFdpdGgsIGlnbm9yZUVsZW1lbnRzLCBzaGFyZX0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQge1R1aVNoZWV0fSBmcm9tICcuL3NoZWV0JztcbmltcG9ydCB7VHVpU2hlZXRTZXJ2aWNlfSBmcm9tICcuL3NoZWV0LnNlcnZpY2UnO1xuaW1wb3J0IHtUdWlTaGVldE9wdGlvbnN9IGZyb20gJy4vc2hlZXQtb3B0aW9ucyc7XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQ6IHVzZSB7QGxpbmsgVHVpU2hlZXREaWFsb2dEaXJlY3RpdmV9XG4gKiBkcm9wIGluIHY0LjBcbiAqL1xuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICduZy10ZW1wbGF0ZVt0dWlTaGVldF0nLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlTaGVldERpcmVjdGl2ZSBleHRlbmRzIFBvbHltb3JwaGV1c1RlbXBsYXRlPFR1aVNoZWV0PG5ldmVyPj4ge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgb3BlbiQgPSBuZXcgU3ViamVjdDxib29sZWFuPigpO1xuXG4gICAgQElucHV0KCd0dWlTaGVldE9wdGlvbnMnKVxuICAgIG9wdGlvbnM6IFBhcnRpYWw8VHVpU2hlZXRPcHRpb25zPiA9IHt9O1xuXG4gICAgQElucHV0KClcbiAgICBzZXQgdHVpU2hlZXQob3BlbjogYm9vbGVhbikge1xuICAgICAgICB0aGlzLm9wZW4kLm5leHQob3Blbik7XG4gICAgfVxuXG4gICAgQE91dHB1dCgpXG4gICAgcmVhZG9ubHkgdHVpU2hlZXRDaGFuZ2UgPSB0aGlzLm9wZW4kLnBpcGUoXG4gICAgICAgIHR1aUlmTWFwKCgpID0+XG4gICAgICAgICAgICB0aGlzLnNlcnZpY2Uub3Blbih0aGlzLCB0aGlzLm9wdGlvbnMpLnBpcGUoaWdub3JlRWxlbWVudHMoKSwgZW5kV2l0aChmYWxzZSkpLFxuICAgICAgICApLFxuICAgICAgICBzaGFyZSgpLFxuICAgICk7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChDaGFuZ2VEZXRlY3RvclJlZikgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICAgICAgQEluamVjdChUZW1wbGF0ZVJlZikgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPFR1aVNoZWV0PG5ldmVyPj4sXG4gICAgICAgIEBJbmplY3QoVHVpU2hlZXRTZXJ2aWNlKSBwcml2YXRlIHJlYWRvbmx5IHNlcnZpY2U6IFR1aVNoZWV0U2VydmljZSxcbiAgICApIHtcbiAgICAgICAgc3VwZXIodGVtcGxhdGVSZWYsIGNkcik7XG4gICAgfVxufVxuIl19