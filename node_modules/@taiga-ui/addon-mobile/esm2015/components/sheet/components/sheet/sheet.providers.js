import { DOCUMENT } from '@angular/common';
import { ElementRef, forwardRef, NgZone } from '@angular/core';
import { ALWAYS_FALSE_HANDLER, ALWAYS_TRUE_HANDLER, TUI_IS_IOS, TUI_SCROLL_REF, tuiTypedFromEvent, tuiZonefree, } from '@taiga-ui/cdk';
import { merge } from 'rxjs';
import { map, share } from 'rxjs/operators';
import { iosScrollFactory } from '../../ios.hacks';
import { TUI_SHEET, TUI_SHEET_DRAGGED, TUI_SHEET_SCROLL } from '../../sheet-tokens';
import { TuiSheetComponent } from './sheet.component';
export const TUI_SHEET_PROVIDERS = [
    {
        provide: TUI_SHEET_DRAGGED,
        deps: [ElementRef],
        useFactory: ({ nativeElement }) => merge(tuiTypedFromEvent(nativeElement, 'touchstart', { passive: true }).pipe(map(ALWAYS_TRUE_HANDLER)), tuiTypedFromEvent(nativeElement, 'touchend').pipe(map(ALWAYS_FALSE_HANDLER))),
    },
    {
        provide: TUI_SHEET_SCROLL,
        deps: [ElementRef, NgZone, DOCUMENT, TUI_IS_IOS],
        useFactory: ({ nativeElement }, zone, doc, isIos) => isIos
            ? iosScrollFactory(nativeElement, doc, zone)
            : merge(tuiTypedFromEvent(nativeElement, 'scroll'), tuiTypedFromEvent(nativeElement, 'load', { capture: true })).pipe(map(() => nativeElement.scrollTop), tuiZonefree(zone), share()),
    },
    {
        provide: TUI_SCROLL_REF,
        useExisting: ElementRef,
    },
    {
        provide: TUI_SHEET,
        useExisting: forwardRef(() => TuiSheetComponent),
    },
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hlZXQucHJvdmlkZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYWRkb24tbW9iaWxlL2NvbXBvbmVudHMvc2hlZXQvY29tcG9uZW50cy9zaGVldC9zaGVldC5wcm92aWRlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQ3pDLE9BQU8sRUFBQyxVQUFVLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBVyxNQUFNLGVBQWUsQ0FBQztBQUN2RSxPQUFPLEVBQ0gsb0JBQW9CLEVBQ3BCLG1CQUFtQixFQUNuQixVQUFVLEVBQ1YsY0FBYyxFQUNkLGlCQUFpQixFQUNqQixXQUFXLEdBQ2QsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFDLEtBQUssRUFBYSxNQUFNLE1BQU0sQ0FBQztBQUN2QyxPQUFPLEVBQUMsR0FBRyxFQUFFLEtBQUssRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBRTFDLE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQ2pELE9BQU8sRUFBQyxTQUFTLEVBQUUsaUJBQWlCLEVBQUUsZ0JBQWdCLEVBQUMsTUFBTSxvQkFBb0IsQ0FBQztBQUNsRixPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUVwRCxNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FBZTtJQUMzQztRQUNJLE9BQU8sRUFBRSxpQkFBaUI7UUFDMUIsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDO1FBQ2xCLFVBQVUsRUFBRSxDQUFDLEVBQUMsYUFBYSxFQUEwQixFQUF1QixFQUFFLENBQzFFLEtBQUssQ0FDRCxpQkFBaUIsQ0FBQyxhQUFhLEVBQUUsWUFBWSxFQUFFLEVBQUMsT0FBTyxFQUFFLElBQUksRUFBQyxDQUFDLENBQUMsSUFBSSxDQUNoRSxHQUFHLENBQUMsbUJBQW1CLENBQUMsQ0FDM0IsRUFDRCxpQkFBaUIsQ0FBQyxhQUFhLEVBQUUsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUM3QyxHQUFHLENBQUMsb0JBQW9CLENBQUMsQ0FDNUIsQ0FDSjtLQUNSO0lBQ0Q7UUFDSSxPQUFPLEVBQUUsZ0JBQWdCO1FBQ3pCLElBQUksRUFBRSxDQUFDLFVBQVUsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQztRQUNoRCxVQUFVLEVBQUUsQ0FDUixFQUFDLGFBQWEsRUFBMEIsRUFDeEMsSUFBWSxFQUNaLEdBQWEsRUFDYixLQUFjLEVBQ0ksRUFBRSxDQUNwQixLQUFLO1lBQ0QsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLGFBQWEsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDO1lBQzVDLENBQUMsQ0FBQyxLQUFLLENBQ0QsaUJBQWlCLENBQUMsYUFBYSxFQUFFLFFBQVEsQ0FBQyxFQUMxQyxpQkFBaUIsQ0FBQyxhQUFhLEVBQUUsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLElBQUksRUFBQyxDQUFDLENBQzVELENBQUMsSUFBSSxDQUNGLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLEVBQ2xDLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFDakIsS0FBSyxFQUFFLENBQ1Y7S0FDZDtJQUNEO1FBQ0ksT0FBTyxFQUFFLGNBQWM7UUFDdkIsV0FBVyxFQUFFLFVBQVU7S0FDMUI7SUFDRDtRQUNJLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsaUJBQWlCLENBQUM7S0FDbkQ7Q0FDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtET0NVTUVOVH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7RWxlbWVudFJlZiwgZm9yd2FyZFJlZiwgTmdab25lLCBQcm92aWRlcn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICAgIEFMV0FZU19GQUxTRV9IQU5ETEVSLFxuICAgIEFMV0FZU19UUlVFX0hBTkRMRVIsXG4gICAgVFVJX0lTX0lPUyxcbiAgICBUVUlfU0NST0xMX1JFRixcbiAgICB0dWlUeXBlZEZyb21FdmVudCxcbiAgICB0dWlab25lZnJlZSxcbn0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge21lcmdlLCBPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcbmltcG9ydCB7bWFwLCBzaGFyZX0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQge2lvc1Njcm9sbEZhY3Rvcnl9IGZyb20gJy4uLy4uL2lvcy5oYWNrcyc7XG5pbXBvcnQge1RVSV9TSEVFVCwgVFVJX1NIRUVUX0RSQUdHRUQsIFRVSV9TSEVFVF9TQ1JPTEx9IGZyb20gJy4uLy4uL3NoZWV0LXRva2Vucyc7XG5pbXBvcnQge1R1aVNoZWV0Q29tcG9uZW50fSBmcm9tICcuL3NoZWV0LmNvbXBvbmVudCc7XG5cbmV4cG9ydCBjb25zdCBUVUlfU0hFRVRfUFJPVklERVJTOiBQcm92aWRlcltdID0gW1xuICAgIHtcbiAgICAgICAgcHJvdmlkZTogVFVJX1NIRUVUX0RSQUdHRUQsXG4gICAgICAgIGRlcHM6IFtFbGVtZW50UmVmXSxcbiAgICAgICAgdXNlRmFjdG9yeTogKHtuYXRpdmVFbGVtZW50fTogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4pOiBPYnNlcnZhYmxlPGJvb2xlYW4+ID0+XG4gICAgICAgICAgICBtZXJnZShcbiAgICAgICAgICAgICAgICB0dWlUeXBlZEZyb21FdmVudChuYXRpdmVFbGVtZW50LCAndG91Y2hzdGFydCcsIHtwYXNzaXZlOiB0cnVlfSkucGlwZShcbiAgICAgICAgICAgICAgICAgICAgbWFwKEFMV0FZU19UUlVFX0hBTkRMRVIpLFxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgdHVpVHlwZWRGcm9tRXZlbnQobmF0aXZlRWxlbWVudCwgJ3RvdWNoZW5kJykucGlwZShcbiAgICAgICAgICAgICAgICAgICAgbWFwKEFMV0FZU19GQUxTRV9IQU5ETEVSKSxcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgKSxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgcHJvdmlkZTogVFVJX1NIRUVUX1NDUk9MTCxcbiAgICAgICAgZGVwczogW0VsZW1lbnRSZWYsIE5nWm9uZSwgRE9DVU1FTlQsIFRVSV9JU19JT1NdLFxuICAgICAgICB1c2VGYWN0b3J5OiAoXG4gICAgICAgICAgICB7bmF0aXZlRWxlbWVudH06IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+LFxuICAgICAgICAgICAgem9uZTogTmdab25lLFxuICAgICAgICAgICAgZG9jOiBEb2N1bWVudCxcbiAgICAgICAgICAgIGlzSW9zOiBib29sZWFuLFxuICAgICAgICApOiBPYnNlcnZhYmxlPG51bWJlcj4gPT5cbiAgICAgICAgICAgIGlzSW9zXG4gICAgICAgICAgICAgICAgPyBpb3NTY3JvbGxGYWN0b3J5KG5hdGl2ZUVsZW1lbnQsIGRvYywgem9uZSlcbiAgICAgICAgICAgICAgICA6IG1lcmdlKFxuICAgICAgICAgICAgICAgICAgICAgIHR1aVR5cGVkRnJvbUV2ZW50KG5hdGl2ZUVsZW1lbnQsICdzY3JvbGwnKSxcbiAgICAgICAgICAgICAgICAgICAgICB0dWlUeXBlZEZyb21FdmVudChuYXRpdmVFbGVtZW50LCAnbG9hZCcsIHtjYXB0dXJlOiB0cnVlfSksXG4gICAgICAgICAgICAgICAgICApLnBpcGUoXG4gICAgICAgICAgICAgICAgICAgICAgbWFwKCgpID0+IG5hdGl2ZUVsZW1lbnQuc2Nyb2xsVG9wKSxcbiAgICAgICAgICAgICAgICAgICAgICB0dWlab25lZnJlZSh6b25lKSxcbiAgICAgICAgICAgICAgICAgICAgICBzaGFyZSgpLFxuICAgICAgICAgICAgICAgICAgKSxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgcHJvdmlkZTogVFVJX1NDUk9MTF9SRUYsXG4gICAgICAgIHVzZUV4aXN0aW5nOiBFbGVtZW50UmVmLFxuICAgIH0sXG4gICAge1xuICAgICAgICBwcm92aWRlOiBUVUlfU0hFRVQsXG4gICAgICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IFR1aVNoZWV0Q29tcG9uZW50KSxcbiAgICB9LFxuXTtcbiJdfQ==