import { tuiTypedFromEvent, tuiZonefree } from '@taiga-ui/cdk';
import { concat, merge, zip } from 'rxjs';
import { delay, map, share, switchMap, take, takeUntil } from 'rxjs/operators';
// eslint-disable-next-line @typescript-eslint/naming-convention
export function iosScrollFactory(element, doc, zone) {
    const load$ = tuiTypedFromEvent(element, 'load', { capture: true });
    const touchstart$ = tuiTypedFromEvent(element, 'touchstart', { passive: true });
    const touchmove$ = tuiTypedFromEvent(doc, 'touchmove', { passive: true });
    const touchend$ = tuiTypedFromEvent(doc, 'touchend');
    const scroll$ = tuiTypedFromEvent(element, 'scroll').pipe(map(() => element.scrollTop));
    const result$ = merge(load$.pipe(delay(0), map(() => element.scrollTop)), touchstart$.pipe(switchMap(({ touches }) => {
        const { screenY } = touches[0];
        const { scrollTop } = element;
        return concat(
        // Sometimes touch is triggered without scroll in iOS, filter that
        zip(touchmove$, scroll$).pipe(map(([{ touches }]) => scrollTop + screenY - touches[0].screenY), takeUntil(touchend$)), scroll$);
    })));
    return concat(scroll$.pipe(take(1)), result$).pipe(tuiZonefree(zone), share());
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW9zLmhhY2tzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYWRkb24tbW9iaWxlL2NvbXBvbmVudHMvc2hlZXQvaW9zLmhhY2tzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBQyxpQkFBaUIsRUFBRSxXQUFXLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUFDLE1BQU0sRUFBRSxLQUFLLEVBQWMsR0FBRyxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBQ3BELE9BQU8sRUFBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBRTdFLGdFQUFnRTtBQUNoRSxNQUFNLFVBQVUsZ0JBQWdCLENBQzVCLE9BQW9CLEVBQ3BCLEdBQWEsRUFDYixJQUFZO0lBRVosTUFBTSxLQUFLLEdBQUcsaUJBQWlCLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDO0lBQ2xFLE1BQU0sV0FBVyxHQUFHLGlCQUFpQixDQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsRUFBQyxPQUFPLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQztJQUM5RSxNQUFNLFVBQVUsR0FBRyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsV0FBVyxFQUFFLEVBQUMsT0FBTyxFQUFFLElBQUksRUFBQyxDQUFDLENBQUM7SUFDeEUsTUFBTSxTQUFTLEdBQUcsaUJBQWlCLENBQUMsR0FBRyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQ3JELE1BQU0sT0FBTyxHQUFHLGlCQUFpQixDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQ3JELEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQy9CLENBQUM7SUFDRixNQUFNLE9BQU8sR0FBRyxLQUFLLENBQ2pCLEtBQUssQ0FBQyxJQUFJLENBQ04sS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUNSLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQy9CLEVBQ0QsV0FBVyxDQUFDLElBQUksQ0FDWixTQUFTLENBQUMsQ0FBQyxFQUFDLE9BQU8sRUFBQyxFQUFFLEVBQUU7UUFDcEIsTUFBTSxFQUFDLE9BQU8sRUFBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM3QixNQUFNLEVBQUMsU0FBUyxFQUFDLEdBQUcsT0FBTyxDQUFDO1FBRTVCLE9BQU8sTUFBTTtRQUNULGtFQUFrRTtRQUNsRSxHQUFHLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FDekIsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFDLE9BQU8sRUFBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLFNBQVMsR0FBRyxPQUFPLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUM5RCxTQUFTLENBQUMsU0FBUyxDQUFDLENBQ3ZCLEVBQ0QsT0FBTyxDQUNWLENBQUM7SUFDTixDQUFDLENBQUMsQ0FDTCxDQUNKLENBQUM7SUFFRixPQUFPLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztBQUNuRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtOZ1pvbmV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHt0dWlUeXBlZEZyb21FdmVudCwgdHVpWm9uZWZyZWV9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtjb25jYXQsIG1lcmdlLCBPYnNlcnZhYmxlLCB6aXB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtkZWxheSwgbWFwLCBzaGFyZSwgc3dpdGNoTWFwLCB0YWtlLCB0YWtlVW50aWx9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvblxuZXhwb3J0IGZ1bmN0aW9uIGlvc1Njcm9sbEZhY3RvcnkoXG4gICAgZWxlbWVudDogSFRNTEVsZW1lbnQsXG4gICAgZG9jOiBEb2N1bWVudCxcbiAgICB6b25lOiBOZ1pvbmUsXG4pOiBPYnNlcnZhYmxlPG51bWJlcj4ge1xuICAgIGNvbnN0IGxvYWQkID0gdHVpVHlwZWRGcm9tRXZlbnQoZWxlbWVudCwgJ2xvYWQnLCB7Y2FwdHVyZTogdHJ1ZX0pO1xuICAgIGNvbnN0IHRvdWNoc3RhcnQkID0gdHVpVHlwZWRGcm9tRXZlbnQoZWxlbWVudCwgJ3RvdWNoc3RhcnQnLCB7cGFzc2l2ZTogdHJ1ZX0pO1xuICAgIGNvbnN0IHRvdWNobW92ZSQgPSB0dWlUeXBlZEZyb21FdmVudChkb2MsICd0b3VjaG1vdmUnLCB7cGFzc2l2ZTogdHJ1ZX0pO1xuICAgIGNvbnN0IHRvdWNoZW5kJCA9IHR1aVR5cGVkRnJvbUV2ZW50KGRvYywgJ3RvdWNoZW5kJyk7XG4gICAgY29uc3Qgc2Nyb2xsJCA9IHR1aVR5cGVkRnJvbUV2ZW50KGVsZW1lbnQsICdzY3JvbGwnKS5waXBlKFxuICAgICAgICBtYXAoKCkgPT4gZWxlbWVudC5zY3JvbGxUb3ApLFxuICAgICk7XG4gICAgY29uc3QgcmVzdWx0JCA9IG1lcmdlKFxuICAgICAgICBsb2FkJC5waXBlKFxuICAgICAgICAgICAgZGVsYXkoMCksXG4gICAgICAgICAgICBtYXAoKCkgPT4gZWxlbWVudC5zY3JvbGxUb3ApLFxuICAgICAgICApLFxuICAgICAgICB0b3VjaHN0YXJ0JC5waXBlKFxuICAgICAgICAgICAgc3dpdGNoTWFwKCh7dG91Y2hlc30pID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB7c2NyZWVuWX0gPSB0b3VjaGVzWzBdO1xuICAgICAgICAgICAgICAgIGNvbnN0IHtzY3JvbGxUb3B9ID0gZWxlbWVudDtcblxuICAgICAgICAgICAgICAgIHJldHVybiBjb25jYXQoXG4gICAgICAgICAgICAgICAgICAgIC8vIFNvbWV0aW1lcyB0b3VjaCBpcyB0cmlnZ2VyZWQgd2l0aG91dCBzY3JvbGwgaW4gaU9TLCBmaWx0ZXIgdGhhdFxuICAgICAgICAgICAgICAgICAgICB6aXAodG91Y2htb3ZlJCwgc2Nyb2xsJCkucGlwZShcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcCgoW3t0b3VjaGVzfV0pID0+IHNjcm9sbFRvcCArIHNjcmVlblkgLSB0b3VjaGVzWzBdLnNjcmVlblkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGFrZVVudGlsKHRvdWNoZW5kJCksXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbCQsXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICApLFxuICAgICk7XG5cbiAgICByZXR1cm4gY29uY2F0KHNjcm9sbCQucGlwZSh0YWtlKDEpKSwgcmVzdWx0JCkucGlwZSh0dWlab25lZnJlZSh6b25lKSwgc2hhcmUoKSk7XG59XG4iXX0=