import { Directive, Inject, Input } from '@angular/core';
import { WINDOW } from '@ng-web-apis/common';
import { tuiClamp } from '@taiga-ui/cdk';
import { map } from 'rxjs/operators';
import { TUI_SHEET, TUI_SHEET_SCROLL } from '../../sheet-tokens';
import * as i0 from "@angular/core";
import * as i1 from "rxjs";
// So that borders get rounded when image is visible for at least 10px
const OFFSET = 10;
export class TuiSheetTopDirective {
    constructor(scroll$, component, win) {
        this.scroll$ = scroll$;
        this.component = component;
        this.win = win;
        this.stop = 0;
        this.transform$ = this.scroll$.pipe(map(y => `translateY(${this.getY(y)}%) scaleX(-1)`));
        this.rounded$ = this.scroll$.pipe(map(y => y < this.stop + OFFSET));
        this.clickthrough$ = this.scroll$.pipe(map(y => !!Math.round(this.getY(y))));
    }
    getY(scrollTop) {
        const value = scrollTop - this.stop;
        const total = this.win.innerHeight - this.component.item.offset - this.stop;
        return this.stop && tuiClamp(100 - (value / total) * 100, 0, 100);
    }
}
TuiSheetTopDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSheetTopDirective, deps: [{ token: TUI_SHEET_SCROLL }, { token: TUI_SHEET }, { token: WINDOW }], target: i0.ɵɵFactoryTarget.Directive });
TuiSheetTopDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiSheetTopDirective, selector: "[tuiSheetTop]", inputs: { stop: ["tuiSheetTop", "stop"] }, host: { listeners: { "$.style.transform": "transform$", "$.class._rounded": "rounded$", "$.class._clickthrough": "clickthrough$" }, properties: { "$.style.transform": "transform$", "$.class._rounded": "rounded$", "$.class._clickthrough": "clickthrough$" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSheetTopDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiSheetTop]',
                    host: {
                        '[$.style.transform]': 'transform$',
                        '($.style.transform)': 'transform$',
                        '[$.class._rounded]': 'rounded$',
                        '($.class._rounded)': 'rounded$',
                        '[$.class._clickthrough]': 'clickthrough$',
                        '($.class._clickthrough)': 'clickthrough$',
                    },
                }]
        }], ctorParameters: function () { return [{ type: i1.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_SHEET_SCROLL]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_SHEET]
                }] }, { type: Window, decorators: [{
                    type: Inject,
                    args: [WINDOW]
                }] }]; }, propDecorators: { stop: [{
                type: Input,
                args: ['tuiSheetTop']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hlZXQtdG9wLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FkZG9uLW1vYmlsZS9jb21wb25lbnRzL3NoZWV0L2RpcmVjdGl2ZXMvc2hlZXQtdG9wL3NoZWV0LXRvcC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3ZELE9BQU8sRUFBQyxNQUFNLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQUMzQyxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRXZDLE9BQU8sRUFBQyxHQUFHLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUduQyxPQUFPLEVBQUMsU0FBUyxFQUFFLGdCQUFnQixFQUFDLE1BQU0sb0JBQW9CLENBQUM7OztBQUUvRCxzRUFBc0U7QUFDdEUsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDO0FBYWxCLE1BQU0sT0FBTyxvQkFBb0I7SUFZN0IsWUFDK0MsT0FBMkIsRUFFckQsU0FBZ0MsRUFDaEIsR0FBVztRQUhELFlBQU8sR0FBUCxPQUFPLENBQW9CO1FBRXJELGNBQVMsR0FBVCxTQUFTLENBQXVCO1FBQ2hCLFFBQUcsR0FBSCxHQUFHLENBQVE7UUFkaEQsU0FBSSxHQUFHLENBQUMsQ0FBQztRQUVBLGVBQVUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FDbkMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsY0FBYyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsQ0FDdEQsQ0FBQztRQUVPLGFBQVEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBRS9ELGtCQUFhLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQU85RSxDQUFDO0lBRUksSUFBSSxDQUFDLFNBQWlCO1FBQzFCLE1BQU0sS0FBSyxHQUFHLFNBQVMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQ3BDLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBRTVFLE9BQU8sSUFBSSxDQUFDLElBQUksSUFBSSxRQUFRLENBQUMsR0FBRyxHQUFHLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDdEUsQ0FBQzs7a0hBeEJRLG9CQUFvQixrQkFhakIsZ0JBQWdCLGFBQ2hCLFNBQVMsYUFFVCxNQUFNO3NHQWhCVCxvQkFBb0I7NEZBQXBCLG9CQUFvQjtrQkFYaEMsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsZUFBZTtvQkFDekIsSUFBSSxFQUFFO3dCQUNGLHFCQUFxQixFQUFFLFlBQVk7d0JBQ25DLHFCQUFxQixFQUFFLFlBQVk7d0JBQ25DLG9CQUFvQixFQUFFLFVBQVU7d0JBQ2hDLG9CQUFvQixFQUFFLFVBQVU7d0JBQ2hDLHlCQUF5QixFQUFFLGVBQWU7d0JBQzFDLHlCQUF5QixFQUFFLGVBQWU7cUJBQzdDO2lCQUNKOzswQkFjUSxNQUFNOzJCQUFDLGdCQUFnQjs7MEJBQ3ZCLE1BQU07MkJBQUMsU0FBUzs4QkFFcUIsTUFBTTswQkFBM0MsTUFBTTsyQkFBQyxNQUFNOzRDQWRsQixJQUFJO3NCQURILEtBQUs7dUJBQUMsYUFBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGlyZWN0aXZlLCBJbmplY3QsIElucHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7V0lORE9XfSBmcm9tICdAbmctd2ViLWFwaXMvY29tbW9uJztcbmltcG9ydCB7dHVpQ2xhbXB9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcbmltcG9ydCB7bWFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7VHVpU2hlZXRSZXF1aXJlZFByb3BzfSBmcm9tICcuLi8uLi9zaGVldCc7XG5pbXBvcnQge1RVSV9TSEVFVCwgVFVJX1NIRUVUX1NDUk9MTH0gZnJvbSAnLi4vLi4vc2hlZXQtdG9rZW5zJztcblxuLy8gU28gdGhhdCBib3JkZXJzIGdldCByb3VuZGVkIHdoZW4gaW1hZ2UgaXMgdmlzaWJsZSBmb3IgYXQgbGVhc3QgMTBweFxuY29uc3QgT0ZGU0VUID0gMTA7XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW3R1aVNoZWV0VG9wXScsXG4gICAgaG9zdDoge1xuICAgICAgICAnWyQuc3R5bGUudHJhbnNmb3JtXSc6ICd0cmFuc2Zvcm0kJyxcbiAgICAgICAgJygkLnN0eWxlLnRyYW5zZm9ybSknOiAndHJhbnNmb3JtJCcsXG4gICAgICAgICdbJC5jbGFzcy5fcm91bmRlZF0nOiAncm91bmRlZCQnLFxuICAgICAgICAnKCQuY2xhc3MuX3JvdW5kZWQpJzogJ3JvdW5kZWQkJyxcbiAgICAgICAgJ1skLmNsYXNzLl9jbGlja3Rocm91Z2hdJzogJ2NsaWNrdGhyb3VnaCQnLFxuICAgICAgICAnKCQuY2xhc3MuX2NsaWNrdGhyb3VnaCknOiAnY2xpY2t0aHJvdWdoJCcsXG4gICAgfSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpU2hlZXRUb3BEaXJlY3RpdmUge1xuICAgIEBJbnB1dCgndHVpU2hlZXRUb3AnKVxuICAgIHN0b3AgPSAwO1xuXG4gICAgcmVhZG9ubHkgdHJhbnNmb3JtJCA9IHRoaXMuc2Nyb2xsJC5waXBlKFxuICAgICAgICBtYXAoeSA9PiBgdHJhbnNsYXRlWSgke3RoaXMuZ2V0WSh5KX0lKSBzY2FsZVgoLTEpYCksXG4gICAgKTtcblxuICAgIHJlYWRvbmx5IHJvdW5kZWQkID0gdGhpcy5zY3JvbGwkLnBpcGUobWFwKHkgPT4geSA8IHRoaXMuc3RvcCArIE9GRlNFVCkpO1xuXG4gICAgcmVhZG9ubHkgY2xpY2t0aHJvdWdoJCA9IHRoaXMuc2Nyb2xsJC5waXBlKG1hcCh5ID0+ICEhTWF0aC5yb3VuZCh0aGlzLmdldFkoeSkpKSk7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChUVUlfU0hFRVRfU0NST0xMKSBwcml2YXRlIHJlYWRvbmx5IHNjcm9sbCQ6IE9ic2VydmFibGU8bnVtYmVyPixcbiAgICAgICAgQEluamVjdChUVUlfU0hFRVQpXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgY29tcG9uZW50OiBUdWlTaGVldFJlcXVpcmVkUHJvcHMsXG4gICAgICAgIEBJbmplY3QoV0lORE9XKSBwcml2YXRlIHJlYWRvbmx5IHdpbjogV2luZG93LFxuICAgICkge31cblxuICAgIHByaXZhdGUgZ2V0WShzY3JvbGxUb3A6IG51bWJlcik6IG51bWJlciB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gc2Nyb2xsVG9wIC0gdGhpcy5zdG9wO1xuICAgICAgICBjb25zdCB0b3RhbCA9IHRoaXMud2luLmlubmVySGVpZ2h0IC0gdGhpcy5jb21wb25lbnQuaXRlbS5vZmZzZXQgLSB0aGlzLnN0b3A7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuc3RvcCAmJiB0dWlDbGFtcCgxMDAgLSAodmFsdWUgLyB0b3RhbCkgKiAxMDAsIDAsIDEwMCk7XG4gICAgfVxufVxuIl19