import { __decorate } from "tslib";
import { ContentChild, Directive, Inject, Input, NgZone } from '@angular/core';
import { WINDOW } from '@ng-web-apis/common';
import { ALWAYS_FALSE_HANDLER, tuiClamp, tuiIsFalsy, tuiPure, tuiZonefull, } from '@taiga-ui/cdk';
import { race, timer } from 'rxjs';
import { debounceTime, distinctUntilChanged, filter, map, startWith, switchMap, take, } from 'rxjs/operators';
import { TuiSheetComponent } from '../../components/sheet/sheet.component';
import { TUI_SHEET_DRAGGED, TUI_SHEET_SCROLL } from '../../sheet-tokens';
import * as i0 from "@angular/core";
// Safety offset for shadow
const OFFSET = 16;
function processDragged(dragged$, scroll$) {
    const touchstart$ = dragged$.pipe(filter(Boolean));
    const touchend$ = dragged$.pipe(filter(tuiIsFalsy));
    const race$ = race(scroll$, timer(100)).pipe(debounceTime(200), take(1), map(ALWAYS_FALSE_HANDLER));
    return touchstart$.pipe(switchMap(() => touchend$.pipe(switchMap(() => race$), startWith(true))), startWith(false));
}
export class TuiSheetWrapperDirective {
    constructor(zone, win) {
        this.zone = zone;
        this.win = win;
        this.tuiSheetWrapper = 16;
    }
    get overlay$() {
        return this.scroll$.pipe(map(y => y + 16 > this.win.innerHeight - this.tuiSheetWrapper), distinctUntilChanged(), tuiZonefull(this.zone));
    }
    get visible$() {
        return processDragged(this.dragged$, this.scroll$).pipe(distinctUntilChanged(), tuiZonefull(this.zone));
    }
    get height$() {
        return this.scroll$.pipe(map(this.getHeight.bind(this)));
    }
    getHeight(value) {
        var _a;
        return ((_a = this.sheet) === null || _a === void 0 ? void 0 : _a.context.overlay)
            ? null
            : tuiClamp(this.withImage(value) + OFFSET, OFFSET, this.win.innerHeight);
    }
    withImage(value) {
        var _a;
        return !((_a = this.sheet) === null || _a === void 0 ? void 0 : _a.imageStop) || Math.floor(value) > this.sheet.imageStop
            ? value
            : value - this.sheet.imageHeight;
    }
}
TuiSheetWrapperDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSheetWrapperDirective, deps: [{ token: NgZone }, { token: WINDOW }], target: i0.ɵɵFactoryTarget.Directive });
TuiSheetWrapperDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiSheetWrapperDirective, selector: "[tuiSheetWrapper]", inputs: { tuiSheetWrapper: "tuiSheetWrapper" }, queries: [{ propertyName: "sheet", first: true, predicate: TuiSheetComponent, descendants: true }, { propertyName: "dragged$", first: true, predicate: TuiSheetComponent, descendants: true, read: TUI_SHEET_DRAGGED, static: true }, { propertyName: "scroll$", first: true, predicate: TuiSheetComponent, descendants: true, read: TUI_SHEET_SCROLL, static: true }], exportAs: ["tuiSheetWrapper"], ngImport: i0 });
__decorate([
    tuiPure
], TuiSheetWrapperDirective.prototype, "overlay$", null);
__decorate([
    tuiPure
], TuiSheetWrapperDirective.prototype, "visible$", null);
__decorate([
    tuiPure
], TuiSheetWrapperDirective.prototype, "height$", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSheetWrapperDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiSheetWrapper]',
                    exportAs: 'tuiSheetWrapper',
                }]
        }], ctorParameters: function () { return [{ type: i0.NgZone, decorators: [{
                    type: Inject,
                    args: [NgZone]
                }] }, { type: Window, decorators: [{
                    type: Inject,
                    args: [WINDOW]
                }] }]; }, propDecorators: { sheet: [{
                type: ContentChild,
                args: [TuiSheetComponent]
            }], dragged$: [{
                type: ContentChild,
                args: [TuiSheetComponent, { read: TUI_SHEET_DRAGGED, static: true }]
            }], scroll$: [{
                type: ContentChild,
                args: [TuiSheetComponent, { read: TUI_SHEET_SCROLL, static: true }]
            }], tuiSheetWrapper: [{
                type: Input
            }], overlay$: [], visible$: [], height$: [] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hlZXQtd3JhcHBlci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hZGRvbi1tb2JpbGUvY29tcG9uZW50cy9zaGVldC9kaXJlY3RpdmVzL3NoZWV0LXdyYXBwZXIvc2hlZXQtd3JhcHBlci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxZQUFZLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzdFLE9BQU8sRUFBQyxNQUFNLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQUMzQyxPQUFPLEVBQ0gsb0JBQW9CLEVBQ3BCLFFBQVEsRUFDUixVQUFVLEVBQ1YsT0FBTyxFQUNQLFdBQVcsR0FDZCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQWEsSUFBSSxFQUFFLEtBQUssRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUM3QyxPQUFPLEVBQ0gsWUFBWSxFQUNaLG9CQUFvQixFQUNwQixNQUFNLEVBQ04sR0FBRyxFQUNILFNBQVMsRUFDVCxTQUFTLEVBQ1QsSUFBSSxHQUNQLE1BQU0sZ0JBQWdCLENBQUM7QUFFeEIsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sd0NBQXdDLENBQUM7QUFDekUsT0FBTyxFQUFDLGlCQUFpQixFQUFFLGdCQUFnQixFQUFDLE1BQU0sb0JBQW9CLENBQUM7O0FBRXZFLDJCQUEyQjtBQUMzQixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUM7QUFFbEIsU0FBUyxjQUFjLENBQ25CLFFBQTZCLEVBQzdCLE9BQTRCO0lBRTVCLE1BQU0sV0FBVyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDbkQsTUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENB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QUMsTUFBTTs0Q0FiRCxLQUFLO3NCQURyQixZQUFZO3VCQUFDLGlCQUFpQjtnQkFJZCxRQUFRO3NCQUR4QixZQUFZO3VCQUFDLGlCQUFpQixFQUFFLEVBQUMsSUFBSSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUM7Z0JBSXZELE9BQU87c0JBRHZCLFlBQVk7dUJBQUMsaUJBQWlCLEVBQUUsRUFBQyxJQUFJLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBQztnQkFJdkUsZUFBZTtzQkFEZCxLQUFLO2dCQVNGLFFBQVEsTUFTUixRQUFRLE1BUVIsT0FBTyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29udGVudENoaWxkLCBEaXJlY3RpdmUsIEluamVjdCwgSW5wdXQsIE5nWm9uZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1dJTkRPV30gZnJvbSAnQG5nLXdlYi1hcGlzL2NvbW1vbic7XG5pbXBvcnQge1xuICAgIEFMV0FZU19GQUxTRV9IQU5ETEVSLFxuICAgIHR1aUNsYW1wLFxuICAgIHR1aUlzRmFsc3ksXG4gICAgdHVpUHVyZSxcbiAgICB0dWlab25lZnVsbCxcbn0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge09ic2VydmFibGUsIHJhY2UsIHRpbWVyfSBmcm9tICdyeGpzJztcbmltcG9ydCB7XG4gICAgZGVib3VuY2VUaW1lLFxuICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkLFxuICAgIGZpbHRlcixcbiAgICBtYXAsXG4gICAgc3RhcnRXaXRoLFxuICAgIHN3aXRjaE1hcCxcbiAgICB0YWtlLFxufSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7VHVpU2hlZXRDb21wb25lbnR9IGZyb20gJy4uLy4uL2NvbXBvbmVudHMvc2hlZXQvc2hlZXQuY29tcG9uZW50JztcbmltcG9ydCB7VFVJX1NIRUVUX0RSQUdHRUQsIFRVSV9TSEVFVF9TQ1JPTEx9IGZyb20gJy4uLy4uL3NoZWV0LXRva2Vucyc7XG5cbi8vIFNhZmV0eSBvZmZzZXQgZm9yIHNoYWRvd1xuY29uc3QgT0ZGU0VUID0gMTY7XG5cbmZ1bmN0aW9uIHByb2Nlc3NEcmFnZ2VkKFxuICAgIGRyYWdnZWQkOiBPYnNlcnZhYmxlPGJvb2xlYW4+LFxuICAgIHNjcm9sbCQ6IE9ic2VydmFibGU8dW5rbm93bj4sXG4pOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcbiAgICBjb25zdCB0b3VjaHN0YXJ0JCA9IGRyYWdnZWQkLnBpcGUoZmlsdGVyKEJvb2xlYW4pKTtcbiAgICBjb25zdCB0b3VjaGVuZCQgPSBkcmFnZ2VkJC5waXBlKGZpbHRlcih0dWlJc0ZhbHN5KSk7XG4gICAgY29uc3QgcmFjZSQgPSByYWNlKHNjcm9sbCQsIHRpbWVyKDEwMCkpLnBpcGUoXG4gICAgICAgIGRlYm91bmNlVGltZSgyMDApLFxuICAgICAgICB0YWtlKDEpLFxuICAgICAgICBtYXAoQUxXQVlTX0ZBTFNFX0hBTkRMRVIpLFxuICAgICk7XG5cbiAgICByZXR1cm4gdG91Y2hzdGFydCQucGlwZShcbiAgICAgICAgc3dpdGNoTWFwKCgpID0+XG4gICAgICAgICAgICB0b3VjaGVuZCQucGlwZShcbiAgICAgICAgICAgICAgICBzd2l0Y2hNYXAoKCkgPT4gcmFjZSQpLFxuICAgICAgICAgICAgICAgIHN0YXJ0V2l0aCh0cnVlKSxcbiAgICAgICAgICAgICksXG4gICAgICAgICksXG4gICAgICAgIHN0YXJ0V2l0aChmYWxzZSksXG4gICAgKTtcbn1cblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbdHVpU2hlZXRXcmFwcGVyXScsXG4gICAgZXhwb3J0QXM6ICd0dWlTaGVldFdyYXBwZXInLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlTaGVldFdyYXBwZXJEaXJlY3RpdmUge1xuICAgIEBDb250ZW50Q2hpbGQoVHVpU2hlZXRDb21wb25lbnQpXG4gICAgcHJpdmF0ZSByZWFkb25seSBzaGVldD86IFR1aVNoZWV0Q29tcG9uZW50PHVua25vd24+O1xuXG4gICAgQENvbnRlbnRDaGlsZChUdWlTaGVldENvbXBvbmVudCwge3JlYWQ6IFRVSV9TSEVFVF9EUkFHR0VELCBzdGF0aWM6IHRydWV9KVxuICAgIHByaXZhdGUgcmVhZG9ubHkgZHJhZ2dlZCQhOiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xuXG4gICAgQENvbnRlbnRDaGlsZChUdWlTaGVldENvbXBvbmVudCwge3JlYWQ6IFRVSV9TSEVFVF9TQ1JPTEwsIHN0YXRpYzogdHJ1ZX0pXG4gICAgcHJpdmF0ZSByZWFkb25seSBzY3JvbGwkITogT2JzZXJ2YWJsZTxudW1iZXI+O1xuXG4gICAgQElucHV0KClcbiAgICB0dWlTaGVldFdyYXBwZXIgPSAxNjtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KE5nWm9uZSkgcHJpdmF0ZSByZWFkb25seSB6b25lOiBOZ1pvbmUsXG4gICAgICAgIEBJbmplY3QoV0lORE9XKSBwcml2YXRlIHJlYWRvbmx5IHdpbjogV2luZG93LFxuICAgICkge31cblxuICAgIEB0dWlQdXJlXG4gICAgZ2V0IG92ZXJsYXkkKCk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuICAgICAgICByZXR1cm4gdGhpcy5zY3JvbGwkLnBpcGUoXG4gICAgICAgICAgICBtYXAoeSA9PiB5ICsgMTYgPiB0aGlzLndpbi5pbm5lckhlaWdodCAtIHRoaXMudHVpU2hlZXRXcmFwcGVyKSxcbiAgICAgICAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKCksXG4gICAgICAgICAgICB0dWlab25lZnVsbCh0aGlzLnpvbmUpLFxuICAgICAgICApO1xuICAgIH1cblxuICAgIEB0dWlQdXJlXG4gICAgZ2V0IHZpc2libGUkKCk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuICAgICAgICByZXR1cm4gcHJvY2Vzc0RyYWdnZWQodGhpcy5kcmFnZ2VkJCwgdGhpcy5zY3JvbGwkKS5waXBlKFxuICAgICAgICAgICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKSxcbiAgICAgICAgICAgIHR1aVpvbmVmdWxsKHRoaXMuem9uZSksXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgQHR1aVB1cmVcbiAgICBnZXQgaGVpZ2h0JCgpOiBPYnNlcnZhYmxlPG51bWJlciB8IG51bGw+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2Nyb2xsJC5waXBlKG1hcCh0aGlzLmdldEhlaWdodC5iaW5kKHRoaXMpKSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRIZWlnaHQodmFsdWU6IG51bWJlcik6IG51bWJlciB8IG51bGwge1xuICAgICAgICByZXR1cm4gdGhpcy5zaGVldD8uY29udGV4dC5vdmVybGF5XG4gICAgICAgICAgICA/IG51bGxcbiAgICAgICAgICAgIDogdHVpQ2xhbXAodGhpcy53aXRoSW1hZ2UodmFsdWUpICsgT0ZGU0VULCBPRkZTRVQsIHRoaXMud2luLmlubmVySGVpZ2h0KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHdpdGhJbWFnZSh2YWx1ZTogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuICF0aGlzLnNoZWV0Py5pbWFnZVN0b3AgfHwgTWF0aC5mbG9vcih2YWx1ZSkgPiB0aGlzLnNoZWV0LmltYWdlU3RvcFxuICAgICAgICAgICAgPyB2YWx1ZVxuICAgICAgICAgICAgOiB2YWx1ZSAtIHRoaXMuc2hlZXQuaW1hZ2VIZWlnaHQ7XG4gICAgfVxufVxuIl19