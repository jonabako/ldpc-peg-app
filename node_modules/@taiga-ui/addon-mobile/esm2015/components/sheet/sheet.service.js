import { DOCUMENT } from '@angular/common';
import { Inject, Injectable } from '@angular/core';
import { tuiGetNativeFocused, tuiIsHTMLElement } from '@taiga-ui/cdk';
import { BehaviorSubject, EMPTY, Observable } from 'rxjs';
import { TUI_SHEET_OPTIONS } from './sheet-options';
import * as i0 from "@angular/core";
/**
 * @deprecated: use {@link TuiSheetDialogService}
 * drop in v4.0
 */
export class TuiSheetService {
    constructor(doc, options) {
        this.doc = doc;
        this.options = options;
        this.sheets$ = new BehaviorSubject([]);
    }
    open(content, options = {}) {
        return new Observable($implicit => {
            const completeWith = (result) => {
                $implicit.next(result);
                $implicit.complete();
            };
            const sheet = Object.assign(Object.assign(Object.assign({}, this.options), options), { content,
                completeWith,
                $implicit, scroll$: EMPTY });
            const focused = tuiGetNativeFocused(this.doc);
            if (tuiIsHTMLElement(focused) && sheet.overlay) {
                focused.blur();
            }
            this.sheets$.next([...this.sheets$.value, sheet]);
            return () => {
                this.sheets$.next(this.sheets$.value.filter(item => item !== sheet));
            };
        });
    }
}
TuiSheetService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSheetService, deps: [{ token: DOCUMENT }, { token: TUI_SHEET_OPTIONS }], target: i0.ɵɵFactoryTarget.Injectable });
TuiSheetService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSheetService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSheetService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_SHEET_OPTIONS]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hlZXQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FkZG9uLW1vYmlsZS9jb21wb25lbnRzL3NoZWV0L3NoZWV0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQ3pDLE9BQU8sRUFBQyxNQUFNLEVBQUUsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ2pELE9BQU8sRUFBQyxtQkFBbUIsRUFBRSxnQkFBZ0IsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUVwRSxPQUFPLEVBQUMsZUFBZSxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFHeEQsT0FBTyxFQUFDLGlCQUFpQixFQUFrQixNQUFNLGlCQUFpQixDQUFDOztBQUVuRTs7O0dBR0c7QUFJSCxNQUFNLE9BQU8sZUFBZTtJQUd4QixZQUN1QyxHQUFhLEVBQ0osT0FBd0I7UUFEakMsUUFBRyxHQUFILEdBQUcsQ0FBVTtRQUNKLFlBQU8sR0FBUCxPQUFPLENBQWlCO1FBSi9ELFlBQU8sR0FBRyxJQUFJLGVBQWUsQ0FBNEIsRUFBRSxDQUFDLENBQUM7SUFLbkUsQ0FBQztJQUVKLElBQUksQ0FDQSxPQUF5QyxFQUN6QyxVQUFvQyxFQUFFO1FBRXRDLE9BQU8sSUFBSSxVQUFVLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDOUIsTUFBTSxZQUFZLEdBQUcsQ0FBQyxNQUFTLEVBQVEsRUFBRTtnQkFDckMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDdkIsU0FBUyxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ3pCLENBQUMsQ0FBQztZQUNGLE1BQU0sS0FBSyxpREFDSixJQUFJLENBQUMsT0FBTyxHQUNaLE9BQU8sS0FDVixPQUFPO2dCQUNQLFlBQVk7Z0JBQ1osU0FBUyxFQUNULE9BQU8sRUFBRSxLQUFLLEdBQ2pCLENBQUM7WUFDRixNQUFNLE9BQU8sR0FBRyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFFOUMsSUFBSSxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsSUFBSSxLQUFLLENBQUMsT0FBTyxFQUFFO2dCQUM1QyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7YUFDbEI7WUFFRCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUVsRCxPQUFPLEdBQUcsRUFBRTtnQkFDUixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQztZQUN6RSxDQUFDLENBQUM7UUFDTixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7OzZHQXJDUSxlQUFlLGtCQUlaLFFBQVEsYUFDUixpQkFBaUI7aUhBTHBCLGVBQWUsY0FGWixNQUFNOzRGQUVULGVBQWU7a0JBSDNCLFVBQVU7bUJBQUM7b0JBQ1IsVUFBVSxFQUFFLE1BQU07aUJBQ3JCOzBEQUsrQyxRQUFROzBCQUEvQyxNQUFNOzJCQUFDLFFBQVE7OzBCQUNmLE1BQU07MkJBQUMsaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtET0NVTUVOVH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7SW5qZWN0LCBJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7dHVpR2V0TmF0aXZlRm9jdXNlZCwgdHVpSXNIVE1MRWxlbWVudH0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge1BvbHltb3JwaGV1c0NvbnRlbnR9IGZyb20gJ0B0aW5rb2ZmL25nLXBvbHltb3JwaGV1cyc7XG5pbXBvcnQge0JlaGF2aW9yU3ViamVjdCwgRU1QVFksIE9ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQge1R1aVNoZWV0fSBmcm9tICcuL3NoZWV0JztcbmltcG9ydCB7VFVJX1NIRUVUX09QVElPTlMsIFR1aVNoZWV0T3B0aW9uc30gZnJvbSAnLi9zaGVldC1vcHRpb25zJztcblxuLyoqXG4gKiBAZGVwcmVjYXRlZDogdXNlIHtAbGluayBUdWlTaGVldERpYWxvZ1NlcnZpY2V9XG4gKiBkcm9wIGluIHY0LjBcbiAqL1xuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgVHVpU2hlZXRTZXJ2aWNlIHtcbiAgICByZWFkb25seSBzaGVldHMkID0gbmV3IEJlaGF2aW9yU3ViamVjdDxBcnJheTxUdWlTaGVldDxhbnksIGFueT4+PihbXSk7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChET0NVTUVOVCkgcHJpdmF0ZSByZWFkb25seSBkb2M6IERvY3VtZW50LFxuICAgICAgICBASW5qZWN0KFRVSV9TSEVFVF9PUFRJT05TKSBwcml2YXRlIHJlYWRvbmx5IG9wdGlvbnM6IFR1aVNoZWV0T3B0aW9ucyxcbiAgICApIHt9XG5cbiAgICBvcGVuPEc+KFxuICAgICAgICBjb250ZW50OiBQb2x5bW9ycGhldXNDb250ZW50PFR1aVNoZWV0PEc+PixcbiAgICAgICAgb3B0aW9uczogUGFydGlhbDxUdWlTaGVldE9wdGlvbnM+ID0ge30sXG4gICAgKTogT2JzZXJ2YWJsZTxHPiB7XG4gICAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZSgkaW1wbGljaXQgPT4ge1xuICAgICAgICAgICAgY29uc3QgY29tcGxldGVXaXRoID0gKHJlc3VsdDogRyk6IHZvaWQgPT4ge1xuICAgICAgICAgICAgICAgICRpbXBsaWNpdC5uZXh0KHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgJGltcGxpY2l0LmNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3Qgc2hlZXQ6IFR1aVNoZWV0PGFueT4gPSB7XG4gICAgICAgICAgICAgICAgLi4udGhpcy5vcHRpb25zLFxuICAgICAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgY29udGVudCxcbiAgICAgICAgICAgICAgICBjb21wbGV0ZVdpdGgsXG4gICAgICAgICAgICAgICAgJGltcGxpY2l0LFxuICAgICAgICAgICAgICAgIHNjcm9sbCQ6IEVNUFRZLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IGZvY3VzZWQgPSB0dWlHZXROYXRpdmVGb2N1c2VkKHRoaXMuZG9jKTtcblxuICAgICAgICAgICAgaWYgKHR1aUlzSFRNTEVsZW1lbnQoZm9jdXNlZCkgJiYgc2hlZXQub3ZlcmxheSkge1xuICAgICAgICAgICAgICAgIGZvY3VzZWQuYmx1cigpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnNoZWV0cyQubmV4dChbLi4udGhpcy5zaGVldHMkLnZhbHVlLCBzaGVldF0pO1xuXG4gICAgICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc2hlZXRzJC5uZXh0KHRoaXMuc2hlZXRzJC52YWx1ZS5maWx0ZXIoaXRlbSA9PiBpdGVtICE9PSBzaGVldCkpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIl19