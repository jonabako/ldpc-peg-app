import { ChangeDetectorRef, Directive, ElementRef, Inject, Self } from '@angular/core';
import { TuiDestroyService, tuiWatch } from '@taiga-ui/cdk';
import { TuiRouterLinkActiveService } from '@taiga-ui/core';
import { filter, takeUntil } from 'rxjs/operators';
import { TuiTabBarComponent } from './tab-bar.component';
import * as i0 from "@angular/core";
import * as i1 from "rxjs";
import * as i2 from "./tab-bar.component";
export class TuiTabBarItemDirective {
    constructor(destroy$, active$, tabs, { nativeElement }, cdr) {
        active$
            .pipe(filter(Boolean), tuiWatch(cdr), takeUntil(destroy$))
            .subscribe(() => {
            tabs.setActive(nativeElement);
        });
    }
}
TuiTabBarItemDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTabBarItemDirective, deps: [{ token: TuiDestroyService, self: true }, { token: TuiRouterLinkActiveService }, { token: TuiTabBarComponent }, { token: ElementRef }, { token: ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive });
TuiTabBarItemDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiTabBarItemDirective, selector: "[tuiTabBarItem][routerLinkActive]", providers: [TuiRouterLinkActiveService, TuiDestroyService], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTabBarItemDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiTabBarItem][routerLinkActive]',
                    providers: [TuiRouterLinkActiveService, TuiDestroyService],
                }]
        }], ctorParameters: function () { return [{ type: i1.Observable, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiDestroyService]
                }] }, { type: i1.Observable, decorators: [{
                    type: Inject,
                    args: [TuiRouterLinkActiveService]
                }] }, { type: i2.TuiTabBarComponent, decorators: [{
                    type: Inject,
                    args: [TuiTabBarComponent]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLWJhci1pdGVtLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FkZG9uLW1vYmlsZS9jb21wb25lbnRzL3RhYi1iYXIvdGFiLWJhci1pdGVtLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3JGLE9BQU8sRUFBQyxpQkFBaUIsRUFBRSxRQUFRLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDMUQsT0FBTyxFQUFDLDBCQUEwQixFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFFMUQsT0FBTyxFQUFDLE1BQU0sRUFBRSxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUVqRCxPQUFPLEVBQUMsa0JBQWtCLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQzs7OztBQU12RCxNQUFNLE9BQU8sc0JBQXNCO0lBQy9CLFlBQ3VDLFFBQTZCLEVBQzVCLE9BQTRCLEVBQ3BDLElBQXdCLEVBQ2hDLEVBQUMsYUFBYSxFQUEwQixFQUNqQyxHQUFzQjtRQUVqRCxPQUFPO2FBQ0YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRSxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUUsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO2FBQ3pELFNBQVMsQ0FBQyxHQUFHLEVBQUU7WUFDWixJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ2xDLENBQUMsQ0FBQyxDQUFDO0lBQ1gsQ0FBQzs7b0hBYlEsc0JBQXNCLGtCQUVYLGlCQUFpQix5QkFDekIsMEJBQTBCLGFBQzFCLGtCQUFrQixhQUNsQixVQUFVLGFBQ1YsaUJBQWlCO3dHQU5wQixzQkFBc0IsNERBRnBCLENBQUMsMEJBQTBCLEVBQUUsaUJBQWlCLENBQUM7NEZBRWpELHNCQUFzQjtrQkFKbEMsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsbUNBQW1DO29CQUM3QyxTQUFTLEVBQUUsQ0FBQywwQkFBMEIsRUFBRSxpQkFBaUIsQ0FBQztpQkFDN0Q7OzBCQUdRLElBQUk7OzBCQUFJLE1BQU07MkJBQUMsaUJBQWlCOzswQkFDaEMsTUFBTTsyQkFBQywwQkFBMEI7OzBCQUNqQyxNQUFNOzJCQUFDLGtCQUFrQjs7MEJBQ3pCLE1BQU07MkJBQUMsVUFBVTs7MEJBQ2pCLE1BQU07MkJBQUMsaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDaGFuZ2VEZXRlY3RvclJlZiwgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbmplY3QsIFNlbGZ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtUdWlEZXN0cm95U2VydmljZSwgdHVpV2F0Y2h9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtUdWlSb3V0ZXJMaW5rQWN0aXZlU2VydmljZX0gZnJvbSAnQHRhaWdhLXVpL2NvcmUnO1xuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcbmltcG9ydCB7ZmlsdGVyLCB0YWtlVW50aWx9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHtUdWlUYWJCYXJDb21wb25lbnR9IGZyb20gJy4vdGFiLWJhci5jb21wb25lbnQnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1t0dWlUYWJCYXJJdGVtXVtyb3V0ZXJMaW5rQWN0aXZlXScsXG4gICAgcHJvdmlkZXJzOiBbVHVpUm91dGVyTGlua0FjdGl2ZVNlcnZpY2UsIFR1aURlc3Ryb3lTZXJ2aWNlXSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpVGFiQmFySXRlbURpcmVjdGl2ZSB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBTZWxmKCkgQEluamVjdChUdWlEZXN0cm95U2VydmljZSkgZGVzdHJveSQ6IE9ic2VydmFibGU8dW5rbm93bj4sXG4gICAgICAgIEBJbmplY3QoVHVpUm91dGVyTGlua0FjdGl2ZVNlcnZpY2UpIGFjdGl2ZSQ6IE9ic2VydmFibGU8Ym9vbGVhbj4sXG4gICAgICAgIEBJbmplY3QoVHVpVGFiQmFyQ29tcG9uZW50KSB0YWJzOiBUdWlUYWJCYXJDb21wb25lbnQsXG4gICAgICAgIEBJbmplY3QoRWxlbWVudFJlZikge25hdGl2ZUVsZW1lbnR9OiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PixcbiAgICAgICAgQEluamVjdChDaGFuZ2VEZXRlY3RvclJlZikgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICApIHtcbiAgICAgICAgYWN0aXZlJFxuICAgICAgICAgICAgLnBpcGUoZmlsdGVyKEJvb2xlYW4pLCB0dWlXYXRjaChjZHIpLCB0YWtlVW50aWwoZGVzdHJveSQpKVxuICAgICAgICAgICAgLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGFicy5zZXRBY3RpdmUobmF0aXZlRWxlbWVudCk7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG59XG4iXX0=