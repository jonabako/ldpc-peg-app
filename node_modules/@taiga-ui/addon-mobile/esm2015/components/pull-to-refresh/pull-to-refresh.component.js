import { ChangeDetectionStrategy, Component, Inject, Input, NgZone, Output, Self, } from '@angular/core';
import { TUI_IS_IOS, TUI_SCROLL_REF, TuiDestroyService, tuiPx, tuiScrollFrom, tuiZonefree, } from '@taiga-ui/cdk';
import { distinctUntilChanged, filter, map, startWith, takeUntil } from 'rxjs/operators';
import { TUI_PULL_TO_REFRESH_COMPONENT, TUI_PULL_TO_REFRESH_THRESHOLD, } from './pull-to-refresh.providers';
import { MICRO_OFFSET, TuiPullToRefreshService } from './pull-to-refresh.service';
import * as i0 from "@angular/core";
import * as i1 from "@tinkoff/ng-polymorpheus";
import * as i2 from "@angular/common";
import * as i3 from "rxjs";
export class TuiPullToRefreshComponent {
    constructor(zone, destroy$, { nativeElement }, isIOS, threshold, component, pulling$) {
        this.isIOS = isIOS;
        this.threshold = threshold;
        this.component = component;
        this.pulling$ = pulling$;
        this.styleHandler = this.isIOS
            ? distance => ({ top: tuiPx(distance / 2) })
            : () => null;
        this.pulled = this.pulling$.pipe(filter(distance => distance === this.threshold));
        this.dropped$ = this.pulling$.pipe(map(distance => distance <= MICRO_OFFSET || distance === this.threshold), distinctUntilChanged());
        // Ensure scrolling down is impossible while pulling
        if (this.component) {
            tuiScrollFrom(nativeElement)
                .pipe(startWith(null), tuiZonefree(zone), takeUntil(destroy$))
                .subscribe(() => {
                if (nativeElement.scrollTop) {
                    nativeElement.style.touchAction = '';
                }
                else {
                    nativeElement.style.touchAction = 'pan-down';
                }
            });
        }
    }
}
TuiPullToRefreshComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPullToRefreshComponent, deps: [{ token: NgZone }, { token: TuiDestroyService, self: true }, { token: TUI_SCROLL_REF }, { token: TUI_IS_IOS }, { token: TUI_PULL_TO_REFRESH_THRESHOLD }, { token: TUI_PULL_TO_REFRESH_COMPONENT }, { token: TuiPullToRefreshService }], target: i0.ɵɵFactoryTarget.Component });
TuiPullToRefreshComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiPullToRefreshComponent, selector: "tui-pull-to-refresh", inputs: { styleHandler: "styleHandler" }, outputs: { pulled: "pulled" }, providers: [TuiPullToRefreshService, TuiDestroyService], ngImport: i0, template: "<ng-container *polymorpheusOutlet=\"component; context: {$implicit: (pulling$ | async) || 0}\"></ng-container>\n\n<div\n    [class.t-drop]=\"dropped$ | async\"\n    [ngStyle]=\"styleHandler((pulling$ | async) || 0)\"\n    [style.position]=\"'relative'\"\n>\n    <ng-content></ng-content>\n</div>\n", styles: [".t-drop{transition:all var(--tui-duration) cubic-bezier(.4,0,.2,1)}\n"], directives: [{ type: i1.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { type: i2.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }], pipes: { "async": i2.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPullToRefreshComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-pull-to-refresh',
                    templateUrl: './pull-to-refresh.template.html',
                    styleUrls: ['./pull-to-refresh.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [TuiPullToRefreshService, TuiDestroyService],
                }]
        }], ctorParameters: function () { return [{ type: i0.NgZone, decorators: [{
                    type: Inject,
                    args: [NgZone]
                }] }, { type: i3.Observable, decorators: [{
                    type: Inject,
                    args: [TuiDestroyService]
                }, {
                    type: Self
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [TUI_SCROLL_REF]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_IS_IOS]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_PULL_TO_REFRESH_THRESHOLD]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_PULL_TO_REFRESH_COMPONENT]
                }] }, { type: i3.Observable, decorators: [{
                    type: Inject,
                    args: [TuiPullToRefreshService]
                }] }]; }, propDecorators: { styleHandler: [{
                type: Input
            }], pulled: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVsbC10by1yZWZyZXNoLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FkZG9uLW1vYmlsZS9jb21wb25lbnRzL3B1bGwtdG8tcmVmcmVzaC9wdWxsLXRvLXJlZnJlc2guY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYWRkb24tbW9iaWxlL2NvbXBvbmVudHMvcHVsbC10by1yZWZyZXNoL3B1bGwtdG8tcmVmcmVzaC50ZW1wbGF0ZS5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDSCx1QkFBdUIsRUFDdkIsU0FBUyxFQUVULE1BQU0sRUFDTixLQUFLLEVBQ0wsTUFBTSxFQUNOLE1BQU0sRUFDTixJQUFJLEdBQ1AsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUNILFVBQVUsRUFDVixjQUFjLEVBRWQsaUJBQWlCLEVBRWpCLEtBQUssRUFDTCxhQUFhLEVBQ2IsV0FBVyxHQUNkLE1BQU0sZUFBZSxDQUFDO0FBR3ZCLE9BQU8sRUFBQyxvQkFBb0IsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUV2RixPQUFPLEVBQ0gsNkJBQTZCLEVBQzdCLDZCQUE2QixHQUNoQyxNQUFNLDZCQUE2QixDQUFDO0FBQ3JDLE9BQU8sRUFBQyxZQUFZLEVBQUUsdUJBQXVCLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQzs7Ozs7QUFTaEYsTUFBTSxPQUFPLHlCQUF5QjtJQWdCbEMsWUFDb0IsSUFBWSxFQUNPLFFBQTZCLEVBQ3hDLEVBQUMsYUFBYSxFQUEwQixFQUMzQixLQUFjLEVBQ0ssU0FBaUIsRUFFaEUsU0FBOEQsRUFDN0IsUUFBNEI7UUFKakMsVUFBSyxHQUFMLEtBQUssQ0FBUztRQUNLLGNBQVMsR0FBVCxTQUFTLENBQVE7UUFFaEUsY0FBUyxHQUFULFNBQVMsQ0FBcUQ7UUFDN0IsYUFBUSxHQUFSLFFBQVEsQ0FBb0I7UUF0QjFFLGlCQUFZLEdBQW1ELElBQUksQ0FBQyxLQUFLO1lBQ3JFLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsRUFBQyxDQUFDO1lBQzFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUM7UUFHUixXQUFNLEdBQXdCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUNyRCxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxRQUFRLEtBQUssSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUNsRCxDQUFDO1FBRU8sYUFBUSxHQUF3QixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FDdkQsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsUUFBUSxJQUFJLFlBQVksSUFBSSxRQUFRLEtBQUssSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUN4RSxvQkFBb0IsRUFBRSxDQUN6QixDQUFDO1FBWUUsb0RBQW9EO1FBQ3BELElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNoQixhQUFhLENBQUMsYUFBYSxDQUFDO2lCQUN2QixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBRSxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7aUJBQzdELFNBQVMsQ0FBQyxHQUFHLEVBQUU7Z0JBQ1osSUFBSSxhQUFhLENBQUMsU0FBUyxFQUFFO29CQUN6QixhQUFhLENBQUMsS0FBSyxDQUFDLFdBQVcsR0FBRyxFQUFFLENBQUM7aUJBQ3hDO3FCQUFNO29CQUNILGFBQWEsQ0FBQyxLQUFLLENBQUMsV0FBVyxHQUFHLFVBQVUsQ0FBQztpQkFDaEQ7WUFDTCxDQUFDLENBQUMsQ0FBQztTQUNWO0lBQ0wsQ0FBQzs7dUhBdENRLHlCQUF5QixrQkFpQnRCLE1BQU0sYUFDTixpQkFBaUIseUJBQ2pCLGNBQWMsYUFDZCxVQUFVLGFBQ1YsNkJBQTZCLGFBQzdCLDZCQUE2QixhQUU3Qix1QkFBdUI7MkdBeEIxQix5QkFBeUIsdUhBRnZCLENBQUMsdUJBQXVCLEVBQUUsaUJBQWlCLENBQUMsMEJDbkMzRCwyU0FTQTs0RkQ0QmEseUJBQXlCO2tCQVByQyxTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSxxQkFBcUI7b0JBQy9CLFdBQVcsRUFBRSxpQ0FBaUM7b0JBQzlDLFNBQVMsRUFBRSxDQUFDLDhCQUE4QixDQUFDO29CQUMzQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFDL0MsU0FBUyxFQUFFLENBQUMsdUJBQXVCLEVBQUUsaUJBQWlCLENBQUM7aUJBQzFEOzswQkFrQlEsTUFBTTsyQkFBQyxNQUFNOzswQkFDYixNQUFNOzJCQUFDLGlCQUFpQjs7MEJBQUcsSUFBSTs7MEJBQy9CLE1BQU07MkJBQUMsY0FBYzs7MEJBQ3JCLE1BQU07MkJBQUMsVUFBVTs7MEJBQ2pCLE1BQU07MkJBQUMsNkJBQTZCOzswQkFDcEMsTUFBTTsyQkFBQyw2QkFBNkI7OzBCQUVwQyxNQUFNOzJCQUFDLHVCQUF1Qjs0Q0F0Qm5DLFlBQVk7c0JBRFgsS0FBSztnQkFNRyxNQUFNO3NCQURkLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICAgIENvbXBvbmVudCxcbiAgICBFbGVtZW50UmVmLFxuICAgIEluamVjdCxcbiAgICBJbnB1dCxcbiAgICBOZ1pvbmUsXG4gICAgT3V0cHV0LFxuICAgIFNlbGYsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgICBUVUlfSVNfSU9TLFxuICAgIFRVSV9TQ1JPTExfUkVGLFxuICAgIFR1aUNvbnRleHRXaXRoSW1wbGljaXQsXG4gICAgVHVpRGVzdHJveVNlcnZpY2UsXG4gICAgVHVpSGFuZGxlcixcbiAgICB0dWlQeCxcbiAgICB0dWlTY3JvbGxGcm9tLFxuICAgIHR1aVpvbmVmcmVlLFxufSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7UG9seW1vcnBoZXVzQ29udGVudH0gZnJvbSAnQHRpbmtvZmYvbmctcG9seW1vcnBoZXVzJztcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5pbXBvcnQge2Rpc3RpbmN0VW50aWxDaGFuZ2VkLCBmaWx0ZXIsIG1hcCwgc3RhcnRXaXRoLCB0YWtlVW50aWx9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHtcbiAgICBUVUlfUFVMTF9UT19SRUZSRVNIX0NPTVBPTkVOVCxcbiAgICBUVUlfUFVMTF9UT19SRUZSRVNIX1RIUkVTSE9MRCxcbn0gZnJvbSAnLi9wdWxsLXRvLXJlZnJlc2gucHJvdmlkZXJzJztcbmltcG9ydCB7TUlDUk9fT0ZGU0VULCBUdWlQdWxsVG9SZWZyZXNoU2VydmljZX0gZnJvbSAnLi9wdWxsLXRvLXJlZnJlc2guc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAndHVpLXB1bGwtdG8tcmVmcmVzaCcsXG4gICAgdGVtcGxhdGVVcmw6ICcuL3B1bGwtdG8tcmVmcmVzaC50ZW1wbGF0ZS5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9wdWxsLXRvLXJlZnJlc2guc3R5bGUubGVzcyddLFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICAgIHByb3ZpZGVyczogW1R1aVB1bGxUb1JlZnJlc2hTZXJ2aWNlLCBUdWlEZXN0cm95U2VydmljZV0sXG59KVxuZXhwb3J0IGNsYXNzIFR1aVB1bGxUb1JlZnJlc2hDb21wb25lbnQge1xuICAgIEBJbnB1dCgpXG4gICAgc3R5bGVIYW5kbGVyOiBUdWlIYW5kbGVyPG51bWJlciwgUmVjb3JkPHN0cmluZywgYW55PiB8IG51bGw+ID0gdGhpcy5pc0lPU1xuICAgICAgICA/IGRpc3RhbmNlID0+ICh7dG9wOiB0dWlQeChkaXN0YW5jZSAvIDIpfSlcbiAgICAgICAgOiAoKSA9PiBudWxsO1xuXG4gICAgQE91dHB1dCgpXG4gICAgcmVhZG9ubHkgcHVsbGVkOiBPYnNlcnZhYmxlPHVua25vd24+ID0gdGhpcy5wdWxsaW5nJC5waXBlKFxuICAgICAgICBmaWx0ZXIoZGlzdGFuY2UgPT4gZGlzdGFuY2UgPT09IHRoaXMudGhyZXNob2xkKSxcbiAgICApO1xuXG4gICAgcmVhZG9ubHkgZHJvcHBlZCQ6IE9ic2VydmFibGU8Ym9vbGVhbj4gPSB0aGlzLnB1bGxpbmckLnBpcGUoXG4gICAgICAgIG1hcChkaXN0YW5jZSA9PiBkaXN0YW5jZSA8PSBNSUNST19PRkZTRVQgfHwgZGlzdGFuY2UgPT09IHRoaXMudGhyZXNob2xkKSxcbiAgICAgICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKSxcbiAgICApO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoTmdab25lKSB6b25lOiBOZ1pvbmUsXG4gICAgICAgIEBJbmplY3QoVHVpRGVzdHJveVNlcnZpY2UpIEBTZWxmKCkgZGVzdHJveSQ6IE9ic2VydmFibGU8dW5rbm93bj4sXG4gICAgICAgIEBJbmplY3QoVFVJX1NDUk9MTF9SRUYpIHtuYXRpdmVFbGVtZW50fTogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4sXG4gICAgICAgIEBJbmplY3QoVFVJX0lTX0lPUykgcHJpdmF0ZSByZWFkb25seSBpc0lPUzogYm9vbGVhbixcbiAgICAgICAgQEluamVjdChUVUlfUFVMTF9UT19SRUZSRVNIX1RIUkVTSE9MRCkgcHJpdmF0ZSByZWFkb25seSB0aHJlc2hvbGQ6IG51bWJlcixcbiAgICAgICAgQEluamVjdChUVUlfUFVMTF9UT19SRUZSRVNIX0NPTVBPTkVOVClcbiAgICAgICAgcmVhZG9ubHkgY29tcG9uZW50OiBQb2x5bW9ycGhldXNDb250ZW50PFR1aUNvbnRleHRXaXRoSW1wbGljaXQ8bnVtYmVyPj4sXG4gICAgICAgIEBJbmplY3QoVHVpUHVsbFRvUmVmcmVzaFNlcnZpY2UpIHJlYWRvbmx5IHB1bGxpbmckOiBPYnNlcnZhYmxlPG51bWJlcj4sXG4gICAgKSB7XG4gICAgICAgIC8vIEVuc3VyZSBzY3JvbGxpbmcgZG93biBpcyBpbXBvc3NpYmxlIHdoaWxlIHB1bGxpbmdcbiAgICAgICAgaWYgKHRoaXMuY29tcG9uZW50KSB7XG4gICAgICAgICAgICB0dWlTY3JvbGxGcm9tKG5hdGl2ZUVsZW1lbnQpXG4gICAgICAgICAgICAgICAgLnBpcGUoc3RhcnRXaXRoKG51bGwpLCB0dWlab25lZnJlZSh6b25lKSwgdGFrZVVudGlsKGRlc3Ryb3kkKSlcbiAgICAgICAgICAgICAgICAuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5hdGl2ZUVsZW1lbnQuc2Nyb2xsVG9wKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYXRpdmVFbGVtZW50LnN0eWxlLnRvdWNoQWN0aW9uID0gJyc7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYXRpdmVFbGVtZW50LnN0eWxlLnRvdWNoQWN0aW9uID0gJ3Bhbi1kb3duJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiPG5nLWNvbnRhaW5lciAqcG9seW1vcnBoZXVzT3V0bGV0PVwiY29tcG9uZW50OyBjb250ZXh0OiB7JGltcGxpY2l0OiAocHVsbGluZyQgfCBhc3luYykgfHwgMH1cIj48L25nLWNvbnRhaW5lcj5cblxuPGRpdlxuICAgIFtjbGFzcy50LWRyb3BdPVwiZHJvcHBlZCQgfCBhc3luY1wiXG4gICAgW25nU3R5bGVdPVwic3R5bGVIYW5kbGVyKChwdWxsaW5nJCB8IGFzeW5jKSB8fCAwKVwiXG4gICAgW3N0eWxlLnBvc2l0aW9uXT1cIidyZWxhdGl2ZSdcIlxuPlxuICAgIDxuZy1jb250ZW50PjwvbmctY29udGVudD5cbjwvZGl2PlxuIl19