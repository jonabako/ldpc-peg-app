import { ChangeDetectionStrategy, Component, Inject } from '@angular/core';
import { POLYMORPHEUS_CONTEXT, PolymorpheusComponent } from '@tinkoff/ng-polymorpheus';
import { TUI_PULL_TO_REFRESH_THRESHOLD } from '../pull-to-refresh.providers';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/cdk";
import * as i2 from "@angular/common";
const LOADED_STEP = 8;
const ROTATE_X_STEP = 30;
export class TuiMobileLoaderIOSComponent {
    constructor(context, threshold) {
        this.context = context;
        this.threshold = threshold;
        this.steps = 12;
    }
    get finished() {
        return this.percent >= 100;
    }
    get percent() {
        return (this.context.$implicit * 100) / this.threshold;
    }
    isShown(index) {
        return this.percent > (index + 1) * LOADED_STEP;
    }
    calculateTransform(index) {
        return `rotate(${index * ROTATE_X_STEP} 50 50)`;
    }
    calculateAnimationBegin(index) {
        return `${(index * LOADED_STEP) / 100}s`;
    }
}
TuiMobileLoaderIOSComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiMobileLoaderIOSComponent, deps: [{ token: POLYMORPHEUS_CONTEXT }, { token: TUI_PULL_TO_REFRESH_THRESHOLD }], target: i0.ɵɵFactoryTarget.Component });
TuiMobileLoaderIOSComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiMobileLoaderIOSComponent, selector: "tui-mobile-ios-loader", ngImport: i0, template: "<svg\n    height=\"36\"\n    preserveAspectRatio=\"xMidYMid\"\n    viewBox=\"0 0 100 100\"\n    width=\"36\"\n    xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n>\n    <ng-container *tuiRepeatTimes=\"let index of steps\">\n        <g\n            *ngIf=\"isShown(index)\"\n            [attr.transform]=\"calculateTransform(index)\"\n        >\n            <rect\n                fill=\"#c7c9cc\"\n                height=\"16\"\n                rx=\"7.05\"\n                ry=\"3.3\"\n                width=\"6\"\n                x=\"47\"\n                y=\"22\"\n            >\n                <animate\n                    *ngIf=\"finished\"\n                    attributeName=\"opacity\"\n                    dur=\"1s\"\n                    keyTimes=\"0;1\"\n                    repeatCount=\"indefinite\"\n                    values=\"1;0\"\n                    [attr.begin]=\"calculateAnimationBegin(index)\"\n                ></animate>\n            </rect>\n        </g>\n    </ng-container>\n</svg>\n", styles: [":host{position:absolute;top:-.5rem;left:50%;margin-left:-1.125rem}\n"], directives: [{ type: i1.TuiRepeatTimesDirective, selector: "[tuiRepeatTimes][tuiRepeatTimesOf]", inputs: ["tuiRepeatTimesOf"] }, { type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiMobileLoaderIOSComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-mobile-ios-loader',
                    templateUrl: './loader-ios.template.html',
                    styleUrls: ['./loader-ios.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [POLYMORPHEUS_CONTEXT]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_PULL_TO_REFRESH_THRESHOLD]
                }] }]; } });
export const TUI_IOS_LOADER = new PolymorpheusComponent(TuiMobileLoaderIOSComponent);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZGVyLWlvcy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hZGRvbi1tb2JpbGUvY29tcG9uZW50cy9wdWxsLXRvLXJlZnJlc2gvbG9hZGVyLWlvcy9sb2FkZXItaW9zLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FkZG9uLW1vYmlsZS9jb21wb25lbnRzL3B1bGwtdG8tcmVmcmVzaC9sb2FkZXItaW9zL2xvYWRlci1pb3MudGVtcGxhdGUuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUV6RSxPQUFPLEVBQUMsb0JBQW9CLEVBQUUscUJBQXFCLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUVyRixPQUFPLEVBQUMsNkJBQTZCLEVBQUMsTUFBTSw4QkFBOEIsQ0FBQzs7OztBQUUzRSxNQUFNLFdBQVcsR0FBRyxDQUFDLENBQUM7QUFDdEIsTUFBTSxhQUFhLEdBQUcsRUFBRSxDQUFDO0FBUXpCLE1BQU0sT0FBTywyQkFBMkI7SUFHcEMsWUFFcUIsT0FBdUMsRUFDQSxTQUFpQjtRQUR4RCxZQUFPLEdBQVAsT0FBTyxDQUFnQztRQUNBLGNBQVMsR0FBVCxTQUFTLENBQVE7UUFMcEUsVUFBSyxHQUFHLEVBQUUsQ0FBQztJQU1qQixDQUFDO0lBRUosSUFBSSxRQUFRO1FBQ1IsT0FBTyxJQUFJLENBQUMsT0FBTyxJQUFJLEdBQUcsQ0FBQztJQUMvQixDQUFDO0lBRUQsSUFBSSxPQUFPO1FBQ1AsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxHQUFHLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDM0QsQ0FBQztJQUVELE9BQU8sQ0FBQyxLQUFhO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUM7SUFDcEQsQ0FBQztJQUVELGtCQUFrQixDQUFDLEtBQWE7UUFDNUIsT0FBTyxVQUFVLEtBQUssR0FBRyxhQUFhLFNBQVMsQ0FBQztJQUNwRCxDQUFDO0lBRUQsdUJBQXVCLENBQUMsS0FBYTtRQUNqQyxPQUFPLEdBQUcsQ0FBQyxLQUFLLEdBQUcsV0FBVyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7SUFDN0MsQ0FBQzs7eUhBM0JRLDJCQUEyQixrQkFJeEIsb0JBQW9CLGFBRXBCLDZCQUE2Qjs2R0FOaEMsMkJBQTJCLDZEQ2Z4Qyw2aENBbUNBOzRGRHBCYSwyQkFBMkI7a0JBTnZDLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLHVCQUF1QjtvQkFDakMsV0FBVyxFQUFFLDRCQUE0QjtvQkFDekMsU0FBUyxFQUFFLENBQUMseUJBQXlCLENBQUM7b0JBQ3RDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2lCQUNsRDs7MEJBS1EsTUFBTTsyQkFBQyxvQkFBb0I7OzBCQUUzQixNQUFNOzJCQUFDLDZCQUE2Qjs7QUF3QjdDLE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyxJQUFJLHFCQUFxQixDQUFDLDJCQUEyQixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIEluamVjdH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1R1aUNvbnRleHRXaXRoSW1wbGljaXR9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtQT0xZTU9SUEhFVVNfQ09OVEVYVCwgUG9seW1vcnBoZXVzQ29tcG9uZW50fSBmcm9tICdAdGlua29mZi9uZy1wb2x5bW9ycGhldXMnO1xuXG5pbXBvcnQge1RVSV9QVUxMX1RPX1JFRlJFU0hfVEhSRVNIT0xEfSBmcm9tICcuLi9wdWxsLXRvLXJlZnJlc2gucHJvdmlkZXJzJztcblxuY29uc3QgTE9BREVEX1NURVAgPSA4O1xuY29uc3QgUk9UQVRFX1hfU1RFUCA9IDMwO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ3R1aS1tb2JpbGUtaW9zLWxvYWRlcicsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2xvYWRlci1pb3MudGVtcGxhdGUuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vbG9hZGVyLWlvcy5zdHlsZS5sZXNzJ10sXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuZXhwb3J0IGNsYXNzIFR1aU1vYmlsZUxvYWRlcklPU0NvbXBvbmVudCB7XG4gICAgcmVhZG9ubHkgc3RlcHMgPSAxMjtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KFBPTFlNT1JQSEVVU19DT05URVhUKVxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGNvbnRleHQ6IFR1aUNvbnRleHRXaXRoSW1wbGljaXQ8bnVtYmVyPixcbiAgICAgICAgQEluamVjdChUVUlfUFVMTF9UT19SRUZSRVNIX1RIUkVTSE9MRCkgcHJpdmF0ZSByZWFkb25seSB0aHJlc2hvbGQ6IG51bWJlcixcbiAgICApIHt9XG5cbiAgICBnZXQgZmluaXNoZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLnBlcmNlbnQgPj0gMTAwO1xuICAgIH1cblxuICAgIGdldCBwZXJjZW50KCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiAodGhpcy5jb250ZXh0LiRpbXBsaWNpdCAqIDEwMCkgLyB0aGlzLnRocmVzaG9sZDtcbiAgICB9XG5cbiAgICBpc1Nob3duKGluZGV4OiBudW1iZXIpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGVyY2VudCA+IChpbmRleCArIDEpICogTE9BREVEX1NURVA7XG4gICAgfVxuXG4gICAgY2FsY3VsYXRlVHJhbnNmb3JtKGluZGV4OiBudW1iZXIpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gYHJvdGF0ZSgke2luZGV4ICogUk9UQVRFX1hfU1RFUH0gNTAgNTApYDtcbiAgICB9XG5cbiAgICBjYWxjdWxhdGVBbmltYXRpb25CZWdpbihpbmRleDogbnVtYmVyKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGAkeyhpbmRleCAqIExPQURFRF9TVEVQKSAvIDEwMH1zYDtcbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBUVUlfSU9TX0xPQURFUiA9IG5ldyBQb2x5bW9ycGhldXNDb21wb25lbnQoVHVpTW9iaWxlTG9hZGVySU9TQ29tcG9uZW50KTtcbiIsIjxzdmdcbiAgICBoZWlnaHQ9XCIzNlwiXG4gICAgcHJlc2VydmVBc3BlY3RSYXRpbz1cInhNaWRZTWlkXCJcbiAgICB2aWV3Qm94PVwiMCAwIDEwMCAxMDBcIlxuICAgIHdpZHRoPVwiMzZcIlxuICAgIHhtbG5zOnhsaW5rPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiXG4gICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4+XG4gICAgPG5nLWNvbnRhaW5lciAqdHVpUmVwZWF0VGltZXM9XCJsZXQgaW5kZXggb2Ygc3RlcHNcIj5cbiAgICAgICAgPGdcbiAgICAgICAgICAgICpuZ0lmPVwiaXNTaG93bihpbmRleClcIlxuICAgICAgICAgICAgW2F0dHIudHJhbnNmb3JtXT1cImNhbGN1bGF0ZVRyYW5zZm9ybShpbmRleClcIlxuICAgICAgICA+XG4gICAgICAgICAgICA8cmVjdFxuICAgICAgICAgICAgICAgIGZpbGw9XCIjYzdjOWNjXCJcbiAgICAgICAgICAgICAgICBoZWlnaHQ9XCIxNlwiXG4gICAgICAgICAgICAgICAgcng9XCI3LjA1XCJcbiAgICAgICAgICAgICAgICByeT1cIjMuM1wiXG4gICAgICAgICAgICAgICAgd2lkdGg9XCI2XCJcbiAgICAgICAgICAgICAgICB4PVwiNDdcIlxuICAgICAgICAgICAgICAgIHk9XCIyMlwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPGFuaW1hdGVcbiAgICAgICAgICAgICAgICAgICAgKm5nSWY9XCJmaW5pc2hlZFwiXG4gICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU9XCJvcGFjaXR5XCJcbiAgICAgICAgICAgICAgICAgICAgZHVyPVwiMXNcIlxuICAgICAgICAgICAgICAgICAgICBrZXlUaW1lcz1cIjA7MVwiXG4gICAgICAgICAgICAgICAgICAgIHJlcGVhdENvdW50PVwiaW5kZWZpbml0ZVwiXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlcz1cIjE7MFwiXG4gICAgICAgICAgICAgICAgICAgIFthdHRyLmJlZ2luXT1cImNhbGN1bGF0ZUFuaW1hdGlvbkJlZ2luKGluZGV4KVwiXG4gICAgICAgICAgICAgICAgPjwvYW5pbWF0ZT5cbiAgICAgICAgICAgIDwvcmVjdD5cbiAgICAgICAgPC9nPlxuICAgIDwvbmctY29udGFpbmVyPlxuPC9zdmc+XG4iXX0=