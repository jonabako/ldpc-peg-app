import { ChangeDetectionStrategy, Component, HostBinding, Inject, } from '@angular/core';
import { TUI_ANIMATION_OPTIONS, tuiSlideIn, } from '@taiga-ui/core';
import { TuiSidebarDirective } from './sidebar.directive';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/cdk";
import * as i2 from "@tinkoff/ng-polymorpheus";
import * as i3 from "./sidebar.directive";
export class TuiSidebarComponent {
    constructor(options, directive) {
        this.options = options;
        this.directive = directive;
        this.left = Object.assign(Object.assign({}, this.options), { value: 'left' });
        this.right = Object.assign(Object.assign({}, this.options), { value: 'right' });
    }
    get animation() {
        return this.direction === 'left' ? this.left : this.right;
    }
    get directionHostClass() {
        return `t-${this.directive.direction}`;
    }
    get direction() {
        return this.directive.direction;
    }
    get content() {
        return this.directive.content;
    }
    get autoWidth() {
        return this.directive.autoWidth;
    }
    ngDoCheck() {
        this.directive.check();
    }
}
TuiSidebarComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSidebarComponent, deps: [{ token: TUI_ANIMATION_OPTIONS }, { token: TuiSidebarDirective }], target: i0.ɵɵFactoryTarget.Component });
TuiSidebarComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiSidebarComponent, selector: "aside[tuiSidebar]", host: { properties: { "@tuiSlideIn": "this.animation", "class": "this.directionHostClass" } }, ngImport: i0, template: "<div\n    tuiActiveZone\n    class=\"t-wrapper\"\n    [class.t-wrapper_auto-width]=\"autoWidth\"\n>\n    <ng-container *polymorpheusOutlet=\"content as text\">\n        {{ text }}\n    </ng-container>\n</div>\n", styles: [":host{position:fixed;top:0;left:0;width:100%;height:100%;display:flex}:host:before,:host:after{position:absolute;top:0;left:0;width:100%;content:\"\";height:100%;background:rgba(0,0,0,.38);animation:tuiFadeIn var(--tui-duration)}:host:before{left:-100%;width:200%}:host:after{left:100%}:host.ng-animating:before,:host.ng-animating:after{opacity:0;transition:opacity var(--tui-duration)}:host.t-right{justify-content:flex-end}:host.t-left{justify-content:flex-start}.t-wrapper{position:relative;display:flex;flex-direction:column;background:var(--tui-base-01);box-shadow:0 10rem var(--tui-base-01);width:17.25rem}.t-wrapper_auto-width{width:auto}\n"], directives: [{ type: i1.TuiActiveZoneDirective, selector: "[tuiActiveZone]:not(ng-container), [tuiActiveZoneChange]:not(ng-container), [tuiActiveZoneParent]:not(ng-container)", inputs: ["tuiActiveZoneParent"], outputs: ["tuiActiveZoneChange"], exportAs: ["tuiActiveZone"] }, { type: i2.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }], animations: [tuiSlideIn], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSidebarComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'aside[tuiSidebar]',
                    templateUrl: './sidebar.template.html',
                    styleUrls: ['./sidebar.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    animations: [tuiSlideIn],
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_ANIMATION_OPTIONS]
                }] }, { type: i3.TuiSidebarDirective, decorators: [{
                    type: Inject,
                    args: [TuiSidebarDirective]
                }] }]; }, propDecorators: { animation: [{
                type: HostBinding,
                args: ['@tuiSlideIn']
            }], directionHostClass: [{
                type: HostBinding,
                args: ['class']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lkZWJhci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hZGRvbi1tb2JpbGUvZGlyZWN0aXZlcy9zaWRlYmFyL3NpZGViYXIuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYWRkb24tbW9iaWxlL2RpcmVjdGl2ZXMvc2lkZWJhci9zaWRlYmFyLnRlbXBsYXRlLmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUNILHVCQUF1QixFQUN2QixTQUFTLEVBRVQsV0FBVyxFQUNYLE1BQU0sR0FDVCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQ0gscUJBQXFCLEVBR3JCLFVBQVUsR0FDYixNQUFNLGdCQUFnQixDQUFDO0FBR3hCLE9BQU8sRUFBQyxtQkFBbUIsRUFBQyxNQUFNLHFCQUFxQixDQUFDOzs7OztBQVN4RCxNQUFNLE9BQU8sbUJBQW1CO0lBVzVCLFlBQ29ELE9BQXlCLEVBQzNCLFNBQThCO1FBRDVCLFlBQU8sR0FBUCxPQUFPLENBQWtCO1FBQzNCLGNBQVMsR0FBVCxTQUFTLENBQXFCO1FBWi9ELFNBQUksR0FBRyxnQ0FDakIsSUFBSSxDQUFDLE9BQU8sS0FDZixLQUFLLEVBQUUsTUFBTSxHQUNQLENBQUM7UUFFTSxVQUFLLEdBQUcsZ0NBQ2xCLElBQUksQ0FBQyxPQUFPLEtBQ2YsS0FBSyxFQUFFLE9BQU8sR0FDUixDQUFDO0lBS1IsQ0FBQztJQUVKLElBQ0ksU0FBUztRQUNULE9BQU8sSUFBSSxDQUFDLFNBQVMsS0FBSyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDOUQsQ0FBQztJQUVELElBQ0ksa0JBQWtCO1FBQ2xCLE9BQU8sS0FBSyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQzNDLENBQUM7SUFFRCxJQUFJLFNBQVM7UUFDVCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDO0lBQ3BDLENBQUM7SUFFRCxJQUFJLE9BQU87UUFDUCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO0lBQ2xDLENBQUM7SUFFRCxJQUFJLFNBQVM7UUFDVCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDO0lBQ3BDLENBQUM7SUFFRCxTQUFTO1FBQ0wsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUMzQixDQUFDOztpSEF4Q1EsbUJBQW1CLGtCQVloQixxQkFBcUIsYUFDckIsbUJBQW1CO3FHQWJ0QixtQkFBbUIsd0pDekJoQyxvTkFTQSxna0NEY2dCLENBQUMsVUFBVSxDQUFDOzRGQUVmLG1CQUFtQjtrQkFQL0IsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsbUJBQW1CO29CQUM3QixXQUFXLEVBQUUseUJBQXlCO29CQUN0QyxTQUFTLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQztvQkFDbkMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07b0JBQy9DLFVBQVUsRUFBRSxDQUFDLFVBQVUsQ0FBQztpQkFDM0I7OzBCQWFRLE1BQU07MkJBQUMscUJBQXFCOzswQkFDNUIsTUFBTTsyQkFBQyxtQkFBbUI7NENBSTNCLFNBQVM7c0JBRFosV0FBVzt1QkFBQyxhQUFhO2dCQU10QixrQkFBa0I7c0JBRHJCLFdBQVc7dUJBQUMsT0FBTyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QW5pbWF0aW9uT3B0aW9uc30gZnJvbSAnQGFuZ3VsYXIvYW5pbWF0aW9ucyc7XG5pbXBvcnQge1xuICAgIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICAgIENvbXBvbmVudCxcbiAgICBEb0NoZWNrLFxuICAgIEhvc3RCaW5kaW5nLFxuICAgIEluamVjdCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICAgIFRVSV9BTklNQVRJT05fT1BUSU9OUyxcbiAgICBUdWlBbmltYXRpb25PcHRpb25zLFxuICAgIFR1aUhvcml6b250YWxEaXJlY3Rpb24sXG4gICAgdHVpU2xpZGVJbixcbn0gZnJvbSAnQHRhaWdhLXVpL2NvcmUnO1xuaW1wb3J0IHtQb2x5bW9ycGhldXNDb250ZW50fSBmcm9tICdAdGlua29mZi9uZy1wb2x5bW9ycGhldXMnO1xuXG5pbXBvcnQge1R1aVNpZGViYXJEaXJlY3RpdmV9IGZyb20gJy4vc2lkZWJhci5kaXJlY3RpdmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2FzaWRlW3R1aVNpZGViYXJdJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vc2lkZWJhci50ZW1wbGF0ZS5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9zaWRlYmFyLnN0eWxlLmxlc3MnXSxcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgICBhbmltYXRpb25zOiBbdHVpU2xpZGVJbl0sXG59KVxuZXhwb3J0IGNsYXNzIFR1aVNpZGViYXJDb21wb25lbnQgaW1wbGVtZW50cyBEb0NoZWNrIHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGxlZnQgPSB7XG4gICAgICAgIC4uLnRoaXMub3B0aW9ucyxcbiAgICAgICAgdmFsdWU6ICdsZWZ0JyxcbiAgICB9IGFzIGNvbnN0O1xuXG4gICAgcHJpdmF0ZSByZWFkb25seSByaWdodCA9IHtcbiAgICAgICAgLi4udGhpcy5vcHRpb25zLFxuICAgICAgICB2YWx1ZTogJ3JpZ2h0JyxcbiAgICB9IGFzIGNvbnN0O1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoVFVJX0FOSU1BVElPTl9PUFRJT05TKSBwcml2YXRlIHJlYWRvbmx5IG9wdGlvbnM6IEFuaW1hdGlvbk9wdGlvbnMsXG4gICAgICAgIEBJbmplY3QoVHVpU2lkZWJhckRpcmVjdGl2ZSkgcHJpdmF0ZSByZWFkb25seSBkaXJlY3RpdmU6IFR1aVNpZGViYXJEaXJlY3RpdmUsXG4gICAgKSB7fVxuXG4gICAgQEhvc3RCaW5kaW5nKCdAdHVpU2xpZGVJbicpXG4gICAgZ2V0IGFuaW1hdGlvbigpOiBUdWlBbmltYXRpb25PcHRpb25zIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlyZWN0aW9uID09PSAnbGVmdCcgPyB0aGlzLmxlZnQgOiB0aGlzLnJpZ2h0O1xuICAgIH1cblxuICAgIEBIb3N0QmluZGluZygnY2xhc3MnKVxuICAgIGdldCBkaXJlY3Rpb25Ib3N0Q2xhc3MoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGB0LSR7dGhpcy5kaXJlY3RpdmUuZGlyZWN0aW9ufWA7XG4gICAgfVxuXG4gICAgZ2V0IGRpcmVjdGlvbigpOiBUdWlIb3Jpem9udGFsRGlyZWN0aW9uIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlyZWN0aXZlLmRpcmVjdGlvbjtcbiAgICB9XG5cbiAgICBnZXQgY29udGVudCgpOiBQb2x5bW9ycGhldXNDb250ZW50IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlyZWN0aXZlLmNvbnRlbnQ7XG4gICAgfVxuXG4gICAgZ2V0IGF1dG9XaWR0aCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlyZWN0aXZlLmF1dG9XaWR0aDtcbiAgICB9XG5cbiAgICBuZ0RvQ2hlY2soKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZGlyZWN0aXZlLmNoZWNrKCk7XG4gICAgfVxufVxuIiwiPGRpdlxuICAgIHR1aUFjdGl2ZVpvbmVcbiAgICBjbGFzcz1cInQtd3JhcHBlclwiXG4gICAgW2NsYXNzLnQtd3JhcHBlcl9hdXRvLXdpZHRoXT1cImF1dG9XaWR0aFwiXG4+XG4gICAgPG5nLWNvbnRhaW5lciAqcG9seW1vcnBoZXVzT3V0bGV0PVwiY29udGVudCBhcyB0ZXh0XCI+XG4gICAgICAgIHt7IHRleHQgfX1cbiAgICA8L25nLWNvbnRhaW5lcj5cbjwvZGl2PlxuIl19