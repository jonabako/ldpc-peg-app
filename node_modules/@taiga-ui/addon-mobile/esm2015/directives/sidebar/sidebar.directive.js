import { ChangeDetectorRef, Directive, Inject, Injector, Input, TemplateRef, } from '@angular/core';
import { TuiDropdownPortalService } from '@taiga-ui/cdk';
import { PolymorpheusComponent, PolymorpheusTemplate } from '@tinkoff/ng-polymorpheus';
import { TuiSidebarComponent } from './sidebar.component';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/cdk";
export class TuiSidebarDirective extends PolymorpheusTemplate {
    constructor(content, injector, portalService, cdr) {
        super(content, cdr);
        this.content = content;
        this.injector = injector;
        this.portalService = portalService;
        this.component = new PolymorpheusComponent(TuiSidebarComponent, this.injector);
        this.sidebarRef = null;
        this.direction = 'left';
        this.autoWidth = false;
    }
    set tuiSidebar(open) {
        if (open) {
            this.show();
        }
        else {
            this.hide();
        }
    }
    ngOnDestroy() {
        this.hide();
    }
    show() {
        if (this.sidebarRef !== null) {
            return;
        }
        this.sidebarRef = this.portalService.add(this.component);
        this.sidebarRef.changeDetectorRef.detectChanges();
    }
    hide() {
        if (this.sidebarRef === null) {
            return;
        }
        this.portalService.remove(this.sidebarRef);
        this.sidebarRef = null;
    }
}
TuiSidebarDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSidebarDirective, deps: [{ token: TemplateRef }, { token: Injector }, { token: TuiDropdownPortalService }, { token: ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive });
TuiSidebarDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiSidebarDirective, selector: "[tuiSidebar]", inputs: { direction: ["tuiSidebarDirection", "direction"], autoWidth: ["tuiSidebarAutoWidth", "autoWidth"], tuiSidebar: "tuiSidebar" }, usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSidebarDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiSidebar]',
                }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef, decorators: [{
                    type: Inject,
                    args: [TemplateRef]
                }] }, { type: i0.Injector, decorators: [{
                    type: Inject,
                    args: [Injector]
                }] }, { type: i1.TuiDropdownPortalService, decorators: [{
                    type: Inject,
                    args: [TuiDropdownPortalService]
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }]; }, propDecorators: { direction: [{
                type: Input,
                args: ['tuiSidebarDirection']
            }], autoWidth: [{
                type: Input,
                args: ['tuiSidebarAutoWidth']
            }], tuiSidebar: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lkZWJhci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hZGRvbi1tb2JpbGUvZGlyZWN0aXZlcy9zaWRlYmFyL3NpZGViYXIuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDSCxpQkFBaUIsRUFFakIsU0FBUyxFQUNULE1BQU0sRUFDTixRQUFRLEVBQ1IsS0FBSyxFQUVMLFdBQVcsR0FDZCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUMsd0JBQXdCLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFdkQsT0FBTyxFQUFDLHFCQUFxQixFQUFFLG9CQUFvQixFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFFckYsT0FBTyxFQUFDLG1CQUFtQixFQUFDLE1BQU0scUJBQXFCLENBQUM7OztBQUt4RCxNQUFNLE9BQU8sbUJBQ1QsU0FBUSxvQkFBdUI7SUF5Qi9CLFlBQ2tDLE9BQXVCLEVBQ2xCLFFBQWtCLEVBRXBDLGFBQXVDLEVBQzdCLEdBQXNCO1FBRWpELEtBQUssQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFOVSxZQUFPLEdBQVAsT0FBTyxDQUFnQjtRQUNsQixhQUFRLEdBQVIsUUFBUSxDQUFVO1FBRXBDLGtCQUFhLEdBQWIsYUFBYSxDQUEwQjtRQTFCM0MsY0FBUyxHQUFHLElBQUkscUJBQXFCLENBQ2xELG1CQUFtQixFQUNuQixJQUFJLENBQUMsUUFBUSxDQUNoQixDQUFDO1FBRU0sZUFBVSxHQUE2QyxJQUFJLENBQUM7UUFHcEUsY0FBUyxHQUEyQixNQUFNLENBQUM7UUFHM0MsY0FBUyxHQUFHLEtBQUssQ0FBQztJQW1CbEIsQ0FBQztJQWpCRCxJQUNJLFVBQVUsQ0FBQyxJQUFhO1FBQ3hCLElBQUksSUFBSSxFQUFFO1lBQ04sSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1NBQ2Y7YUFBTTtZQUNILElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUNmO0lBQ0wsQ0FBQztJQVlELFdBQVc7UUFDUCxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDaEIsQ0FBQztJQUVPLElBQUk7UUFDUixJQUFJLElBQUksQ0FBQyxVQUFVLEtBQUssSUFBSSxFQUFFO1lBQzFCLE9BQU87U0FDVjtRQUVELElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3pELElBQUksQ0FBQyxVQUFVLENBQUMsaUJBQWlCLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDdEQsQ0FBQztJQUVPLElBQUk7UUFDUixJQUFJLElBQUksQ0FBQyxVQUFVLEtBQUssSUFBSSxFQUFFO1lBQzFCLE9BQU87U0FDVjtRQUVELElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUMzQyxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztJQUMzQixDQUFDOztpSEF4RFEsbUJBQW1CLGtCQTJCaEIsV0FBVyxhQUNYLFFBQVEsYUFDUix3QkFBd0IsYUFFeEIsaUJBQWlCO3FHQS9CcEIsbUJBQW1COzRGQUFuQixtQkFBbUI7a0JBSC9CLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLGNBQWM7aUJBQzNCOzswQkE0QlEsTUFBTTsyQkFBQyxXQUFXOzswQkFDbEIsTUFBTTsyQkFBQyxRQUFROzswQkFDZixNQUFNOzJCQUFDLHdCQUF3Qjs7MEJBRS9CLE1BQU07MkJBQUMsaUJBQWlCOzRDQW5CN0IsU0FBUztzQkFEUixLQUFLO3VCQUFDLHFCQUFxQjtnQkFJNUIsU0FBUztzQkFEUixLQUFLO3VCQUFDLHFCQUFxQjtnQkFJeEIsVUFBVTtzQkFEYixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICBDb21wb25lbnRSZWYsXG4gICAgRGlyZWN0aXZlLFxuICAgIEluamVjdCxcbiAgICBJbmplY3RvcixcbiAgICBJbnB1dCxcbiAgICBPbkRlc3Ryb3ksXG4gICAgVGVtcGxhdGVSZWYsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtUdWlEcm9wZG93blBvcnRhbFNlcnZpY2V9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtUdWlIb3Jpem9udGFsRGlyZWN0aW9ufSBmcm9tICdAdGFpZ2EtdWkvY29yZSc7XG5pbXBvcnQge1BvbHltb3JwaGV1c0NvbXBvbmVudCwgUG9seW1vcnBoZXVzVGVtcGxhdGV9IGZyb20gJ0B0aW5rb2ZmL25nLXBvbHltb3JwaGV1cyc7XG5cbmltcG9ydCB7VHVpU2lkZWJhckNvbXBvbmVudH0gZnJvbSAnLi9zaWRlYmFyLmNvbXBvbmVudCc7XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW3R1aVNpZGViYXJdJyxcbn0pXG5leHBvcnQgY2xhc3MgVHVpU2lkZWJhckRpcmVjdGl2ZTxUID0gUmVjb3JkPHN0cmluZywgdW5rbm93bj4+XG4gICAgZXh0ZW5kcyBQb2x5bW9ycGhldXNUZW1wbGF0ZTxUPlxuICAgIGltcGxlbWVudHMgT25EZXN0cm95XG57XG4gICAgcHJpdmF0ZSByZWFkb25seSBjb21wb25lbnQgPSBuZXcgUG9seW1vcnBoZXVzQ29tcG9uZW50KFxuICAgICAgICBUdWlTaWRlYmFyQ29tcG9uZW50LFxuICAgICAgICB0aGlzLmluamVjdG9yLFxuICAgICk7XG5cbiAgICBwcml2YXRlIHNpZGViYXJSZWY6IENvbXBvbmVudFJlZjxUdWlTaWRlYmFyQ29tcG9uZW50PiB8IG51bGwgPSBudWxsO1xuXG4gICAgQElucHV0KCd0dWlTaWRlYmFyRGlyZWN0aW9uJylcbiAgICBkaXJlY3Rpb246IFR1aUhvcml6b250YWxEaXJlY3Rpb24gPSAnbGVmdCc7XG5cbiAgICBASW5wdXQoJ3R1aVNpZGViYXJBdXRvV2lkdGgnKVxuICAgIGF1dG9XaWR0aCA9IGZhbHNlO1xuXG4gICAgQElucHV0KClcbiAgICBzZXQgdHVpU2lkZWJhcihvcGVuOiBib29sZWFuKSB7XG4gICAgICAgIGlmIChvcGVuKSB7XG4gICAgICAgICAgICB0aGlzLnNob3coKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoVGVtcGxhdGVSZWYpIHJlYWRvbmx5IGNvbnRlbnQ6IFRlbXBsYXRlUmVmPFQ+LFxuICAgICAgICBASW5qZWN0KEluamVjdG9yKSBwcml2YXRlIHJlYWRvbmx5IGluamVjdG9yOiBJbmplY3RvcixcbiAgICAgICAgQEluamVjdChUdWlEcm9wZG93blBvcnRhbFNlcnZpY2UpXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgcG9ydGFsU2VydmljZTogVHVpRHJvcGRvd25Qb3J0YWxTZXJ2aWNlLFxuICAgICAgICBASW5qZWN0KENoYW5nZURldGVjdG9yUmVmKSBjZHI6IENoYW5nZURldGVjdG9yUmVmLFxuICAgICkge1xuICAgICAgICBzdXBlcihjb250ZW50LCBjZHIpO1xuICAgIH1cblxuICAgIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNob3coKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLnNpZGViYXJSZWYgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2lkZWJhclJlZiA9IHRoaXMucG9ydGFsU2VydmljZS5hZGQodGhpcy5jb21wb25lbnQpO1xuICAgICAgICB0aGlzLnNpZGViYXJSZWYuY2hhbmdlRGV0ZWN0b3JSZWYuZGV0ZWN0Q2hhbmdlcygpO1xuICAgIH1cblxuICAgIHByaXZhdGUgaGlkZSgpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuc2lkZWJhclJlZiA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5wb3J0YWxTZXJ2aWNlLnJlbW92ZSh0aGlzLnNpZGViYXJSZWYpO1xuICAgICAgICB0aGlzLnNpZGViYXJSZWYgPSBudWxsO1xuICAgIH1cbn1cbiJdfQ==