(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@taiga-ui/addon-mobile/utils'), require('@taiga-ui/cdk'), require('@taiga-ui/core'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('@taiga-ui/addon-mobile/directives/touchable', ['exports', '@angular/core', '@taiga-ui/addon-mobile/utils', '@taiga-ui/cdk', '@taiga-ui/core', 'rxjs', 'rxjs/operators'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global["taiga-ui"] = global["taiga-ui"] || {}, global["taiga-ui"]["addon-mobile"] = global["taiga-ui"]["addon-mobile"] || {}, global["taiga-ui"]["addon-mobile"].directives = global["taiga-ui"]["addon-mobile"].directives || {}, global["taiga-ui"]["addon-mobile"].directives.touchable = {}), global.ng.core, global["taiga-ui"]["addon-mobile"].utils, global.i1, global.core, global.rxjs, global.rxjs.operators));
})(this, (function (exports, i0, utils, i1, core, rxjs, operators) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);

    var STYLE = {
        transform: 'scale(0.95)',
        opacity: '0.6',
        background: 'rgba(146, 153, 162, 0.12)',
    };
    var TuiTouchableDirective = /** @class */ (function () {
        function TuiTouchableDirective(el, isIos, _a, renderer, destroy$) {
            var _this = this;
            var nativeElement = _a.nativeElement;
            this.tuiTouchable = '';
            if (!isIos) {
                return;
            }
            var element = (el === null || el === void 0 ? void 0 : el.nativeElement) || nativeElement;
            i1.tuiTypedFromEvent(element, 'touchstart', { passive: true })
                .pipe(operators.tap(function () {
                _this.onTouchStart(renderer, element);
            }), operators.map(function (_a) {
                var touches = _a.touches;
                return touches[touches.length - 1].identifier;
            }), operators.switchMap(function (identifier) { return rxjs.race(i1.tuiTypedFromEvent(element, 'touchmove', { passive: true }).pipe(operators.filter(function (_a) {
                var touches = _a.touches;
                return _this.hasTouchLeft(element, touches, identifier);
            })), i1.tuiTypedFromEvent(element, 'touchend')).pipe(operators.take(1)); }), operators.takeUntil(destroy$))
                .subscribe(function () {
                renderer.removeStyle(element, 'transform');
                renderer.removeStyle(element, 'opacity');
                renderer.removeStyle(element, 'background');
            });
        }
        Object.defineProperty(TuiTouchableDirective.prototype, "style", {
            get: function () {
                return this.tuiTouchable || 'transform';
            },
            enumerable: false,
            configurable: true
        });
        TuiTouchableDirective.prototype.hasTouchLeft = function (element, touches, identifier) {
            var ownerDocument = element.ownerDocument;
            var id = utils.tuiFindTouchIndex(touches, identifier);
            if (!ownerDocument || id === -1) {
                return true;
            }
            var _a = touches[id], clientX = _a.clientX, clientY = _a.clientY;
            return !element.contains(ownerDocument.elementFromPoint(clientX, clientY));
        };
        TuiTouchableDirective.prototype.onTouchStart = function (renderer, element) {
            if (this.style !== 'transform') {
                renderer.removeStyle(element, 'transition');
            }
            else {
                renderer.setStyle(element, 'transition', 'transform 0.2s');
            }
            renderer.setStyle(element, this.style, STYLE[this.style]);
        };
        return TuiTouchableDirective;
    }());
    TuiTouchableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiTouchableDirective, deps: [{ token: core.TUI_ELEMENT_REF, optional: true }, { token: i1.TUI_IS_IOS }, { token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i1.TuiDestroyService, self: true }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    TuiTouchableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiTouchableDirective, selector: "[tuiTouchable]", inputs: { tuiTouchable: "tuiTouchable" }, providers: [i1.TuiDestroyService], ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiTouchableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[tuiTouchable]',
                        providers: [i1.TuiDestroyService],
                    }]
            }], ctorParameters: function () {
            return [{ type: i0__namespace.ElementRef, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [core.TUI_ELEMENT_REF]
                        }] }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i1.TUI_IS_IOS]
                        }] }, { type: i0__namespace.ElementRef, decorators: [{
                            type: i0.Inject,
                            args: [i0.ElementRef]
                        }] }, { type: i0__namespace.Renderer2, decorators: [{
                            type: i0.Inject,
                            args: [i0.Renderer2]
                        }] }, { type: i1__namespace.TuiDestroyService, decorators: [{
                            type: i0.Self
                        }, {
                            type: i0.Inject,
                            args: [i1.TuiDestroyService]
                        }] }];
        }, propDecorators: { tuiTouchable: [{
                    type: i0.Input
                }] } });

    var TuiTouchableModule = /** @class */ (function () {
        function TuiTouchableModule() {
        }
        return TuiTouchableModule;
    }());
    TuiTouchableModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiTouchableModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    TuiTouchableModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiTouchableModule, declarations: [TuiTouchableDirective], exports: [TuiTouchableDirective] });
    TuiTouchableModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiTouchableModule });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiTouchableModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [TuiTouchableDirective],
                        exports: [TuiTouchableDirective],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.TuiTouchableDirective = TuiTouchableDirective;
    exports.TuiTouchableModule = TuiTouchableModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=taiga-ui-addon-mobile-directives-touchable.umd.js.map
