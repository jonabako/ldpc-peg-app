(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@taiga-ui/cdk'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('@taiga-ui/addon-mobile/directives/ripple', ['exports', '@angular/core', '@taiga-ui/cdk', 'rxjs', 'rxjs/operators'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global["taiga-ui"] = global["taiga-ui"] || {}, global["taiga-ui"]["addon-mobile"] = global["taiga-ui"]["addon-mobile"] || {}, global["taiga-ui"]["addon-mobile"].directives = global["taiga-ui"]["addon-mobile"].directives || {}, global["taiga-ui"]["addon-mobile"].directives.ripple = {}), global.ng.core, global.i1, global.rxjs, global.rxjs.operators));
})(this, (function (exports, i0, i1, i2, operators) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);

    var RIPPLE_ON = 'tuiRippleOn';
    var RIPPLE_OFF = 'tuiRippleOff';
    /**
     * Stream of ripple elements to add
     */
    var TUI_RIPPLE_START = new i0.InjectionToken('[TUI_RIPPLE_START]');
    /**
     * Stream of ripple elements to remove
     */
    var TUI_RIPPLE_END = new i0.InjectionToken('[TUI_RIPPLE_END]');
    var TUI_RIPPLE_PROVIDERS = [
        i1.TuiDestroyService,
        {
            provide: TUI_RIPPLE_START,
            deps: [i1.TUI_TOUCH_SUPPORTED, i1.TUI_IS_IOS, i0.ElementRef, i0.Renderer2],
            useFactory: function (touchSupported, isIOS, _a, renderer) {
                var nativeElement = _a.nativeElement;
                return isIOS || !touchSupported
                    ? i2.EMPTY
                    : i1.tuiTypedFromEvent(nativeElement, 'touchstart').pipe(operators.map(function (_a) {
                        var touches = _a.touches;
                        var _b = touches[touches.length - 1], clientX = _b.clientX, clientY = _b.clientY;
                        var _c = nativeElement.getBoundingClientRect(), width = _c.width, height = _c.height, top = _c.top, left = _c.left;
                        var radius = Math.sqrt(width * width + height * height);
                        var dimension = radius * 2;
                        var x = clientX - left - radius;
                        var y = clientY - top - radius;
                        var ripple = renderer.createElement('div');
                        renderer.addClass(ripple, 'tui-ripple');
                        renderer.setAttribute(ripple, 'style', "width: " + i1.tuiPx(dimension) + "; height: " + i1.tuiPx(dimension) + "; left: " + i1.tuiPx(x) + "; top: " + i1.tuiPx(y) + "; animation-name: " + RIPPLE_ON + ";");
                        return ripple;
                    }));
            },
        },
        {
            provide: TUI_RIPPLE_END,
            deps: [i1.TUI_TOUCH_SUPPORTED, i1.TUI_IS_IOS, i0.ElementRef, i1.TuiDestroyService],
            useFactory: function (touchSupported, isIOS, _a, destroy$) {
                var nativeElement = _a.nativeElement;
                return isIOS || !touchSupported
                    ? i2.EMPTY
                    : i1.tuiTypedFromEvent(nativeElement, 'animationend').pipe(operators.filter(function (_a) {
                        var animationName = _a.animationName;
                        return animationName === RIPPLE_OFF;
                    }), operators.map(function (_a) {
                        var target = _a.target;
                        return target;
                    }), operators.filter(i1.tuiIsPresent), operators.takeUntil(destroy$));
            },
        },
    ];

    var TuiRippleStylesComponent = /** @class */ (function () {
        function TuiRippleStylesComponent() {
        }
        return TuiRippleStylesComponent;
    }());
    TuiRippleStylesComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiRippleStylesComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    TuiRippleStylesComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiRippleStylesComponent, selector: "ng-component", host: { classAttribute: "tui-ripple-styles" }, ngImport: i0__namespace, template: '', isInline: true, styles: ["@keyframes tuiRippleOn{0%{transform:scale(0);opacity:.12}to{transform:none;opacity:.12}}@keyframes tuiRippleOff{0%{transform:none;opacity:.12}to{transform:none;opacity:0}}*[tuiRipple]{position:relative;overflow:hidden}.tui-ripple{position:absolute;z-index:100;border-radius:100%;background:currentColor;transform:scale(0);animation-duration:.45s;animation-fill-mode:forwards;pointer-events:none}\n"], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush, encapsulation: i0__namespace.ViewEncapsulation.None });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiRippleStylesComponent, decorators: [{
                type: i0.Component,
                args: [{
                        host: {
                            class: 'tui-ripple-styles',
                        },
                        template: '',
                        styleUrls: ['./ripple.style.less'],
                        encapsulation: i0.ViewEncapsulation.None,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }] });

    var TOUCH_MOVE_DELAY = 100;
    var TuiRippleDirective = /** @class */ (function () {
        function TuiRippleDirective(_a, directiveStyles, renderer, destroy$, start$, end$) {
            var _this = this;
            var nativeElement = _a.nativeElement;
            directiveStyles.addComponent(TuiRippleStylesComponent);
            var touchEnd$ = i1.tuiTypedFromEvent(nativeElement, 'touchend');
            var touchMove$ = i1.tuiTypedFromEvent(nativeElement, 'touchmove');
            end$.subscribe(function (element) {
                renderer.removeChild(nativeElement, element);
            });
            start$
                .pipe(operators.mergeMap(function (ripple) {
                var animationEndOn$ = i1.tuiTypedFromEvent(ripple, 'animationend');
                return i2.race(i2.timer(TOUCH_MOVE_DELAY).pipe(operators.map(i1.ALWAYS_FALSE_HANDLER)), touchEnd$.pipe(operators.map(i1.ALWAYS_TRUE_HANDLER))).pipe(operators.take(1), 
                // eslint-disable-next-line rxjs/no-unsafe-takeuntil
                operators.takeUntil(touchMove$), operators.tap(function () {
                    renderer.setStyle(ripple, 'background', _this.tuiRipple || null);
                    renderer.appendChild(nativeElement, ripple);
                }), operators.switchMap(function (isTap) { return isTap
                    ? animationEndOn$
                    : i2.race(touchEnd$.pipe(operators.switchMap(function () { return animationEndOn$; })), animationEndOn$.pipe(operators.switchMap(function () { return touchEnd$; }))); }), operators.map(function () { return ripple; }));
            }), operators.takeUntil(destroy$))
                .subscribe(function (element) {
                renderer.setStyle(element, 'animationName', RIPPLE_OFF);
            });
        }
        return TuiRippleDirective;
    }());
    TuiRippleDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiRippleDirective, deps: [{ token: i0.ElementRef }, { token: i1.TuiDirectiveStylesService }, { token: i0.Renderer2 }, { token: i1.TuiDestroyService, self: true }, { token: TUI_RIPPLE_START }, { token: TUI_RIPPLE_END }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    TuiRippleDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiRippleDirective, selector: "[tuiRipple]", inputs: { tuiRipple: "tuiRipple" }, providers: TUI_RIPPLE_PROVIDERS, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiRippleDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[tuiRipple]',
                        providers: TUI_RIPPLE_PROVIDERS,
                    }]
            }], ctorParameters: function () {
            return [{ type: i0__namespace.ElementRef, decorators: [{
                            type: i0.Inject,
                            args: [i0.ElementRef]
                        }] }, { type: i1__namespace.TuiDirectiveStylesService, decorators: [{
                            type: i0.Inject,
                            args: [i1.TuiDirectiveStylesService]
                        }] }, { type: i0__namespace.Renderer2, decorators: [{
                            type: i0.Inject,
                            args: [i0.Renderer2]
                        }] }, { type: i1__namespace.TuiDestroyService, decorators: [{
                            type: i0.Self
                        }, {
                            type: i0.Inject,
                            args: [i1.TuiDestroyService]
                        }] }, { type: i2__namespace.Observable, decorators: [{
                            type: i0.Inject,
                            args: [TUI_RIPPLE_START]
                        }] }, { type: i2__namespace.Observable, decorators: [{
                            type: i0.Inject,
                            args: [TUI_RIPPLE_END]
                        }] }];
        }, propDecorators: { tuiRipple: [{
                    type: i0.Input
                }] } });

    var TuiRippleModule = /** @class */ (function () {
        function TuiRippleModule() {
        }
        return TuiRippleModule;
    }());
    TuiRippleModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiRippleModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    TuiRippleModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiRippleModule, declarations: [TuiRippleDirective, TuiRippleStylesComponent], exports: [TuiRippleDirective] });
    TuiRippleModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiRippleModule });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiRippleModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [TuiRippleDirective, TuiRippleStylesComponent],
                        exports: [TuiRippleDirective],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.RIPPLE_OFF = RIPPLE_OFF;
    exports.RIPPLE_ON = RIPPLE_ON;
    exports.TUI_RIPPLE_END = TUI_RIPPLE_END;
    exports.TUI_RIPPLE_PROVIDERS = TUI_RIPPLE_PROVIDERS;
    exports.TUI_RIPPLE_START = TUI_RIPPLE_START;
    exports.TuiRippleDirective = TuiRippleDirective;
    exports.TuiRippleModule = TuiRippleModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=taiga-ui-addon-mobile-directives-ripple.umd.js.map
