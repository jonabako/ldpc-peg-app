import * as i0 from '@angular/core';
import { Component, ChangeDetectionStrategy, Inject, inject, ElementRef, Injectable, HostBinding, NgZone, Self, Input, Output, NgModule } from '@angular/core';
import * as i1$2 from '@tinkoff/ng-polymorpheus';
import { POLYMORPHEUS_CONTEXT, PolymorpheusComponent, PolymorpheusModule } from '@tinkoff/ng-polymorpheus';
import * as i1 from '@taiga-ui/cdk';
import { tuiCreateToken, tuiCreateTokenFromFactory, TUI_IS_IOS, tuiTypedFromEvent, tuiScrollFrom, TUI_SCROLL_REF, tuiPx, tuiZonefree, TuiDestroyService, TuiRepeatTimesModule } from '@taiga-ui/cdk';
import * as i3 from 'rxjs';
import { EMPTY, Observable } from 'rxjs';
import * as i2 from '@angular/common';
import { CommonModule } from '@angular/common';
import { startWith, switchMap, filter, map, tap, takeUntil, endWith, scan, takeWhile, distinctUntilChanged, share } from 'rxjs/operators';
import * as i1$1 from '@taiga-ui/core';
import { TuiLoaderModule, TuiSvgModule } from '@taiga-ui/core';

const LOADED_STEP = 8;
const ROTATE_X_STEP = 30;
class TuiMobileLoaderIOSComponent {
    constructor(context, threshold) {
        this.context = context;
        this.threshold = threshold;
        this.steps = 12;
    }
    get finished() {
        return this.percent >= 100;
    }
    get percent() {
        return (this.context.$implicit * 100) / this.threshold;
    }
    isShown(index) {
        return this.percent > (index + 1) * LOADED_STEP;
    }
    calculateTransform(index) {
        return `rotate(${index * ROTATE_X_STEP} 50 50)`;
    }
    calculateAnimationBegin(index) {
        return `${(index * LOADED_STEP) / 100}s`;
    }
}
TuiMobileLoaderIOSComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiMobileLoaderIOSComponent, deps: [{ token: POLYMORPHEUS_CONTEXT }, { token: TUI_PULL_TO_REFRESH_THRESHOLD }], target: i0.ɵɵFactoryTarget.Component });
TuiMobileLoaderIOSComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiMobileLoaderIOSComponent, selector: "tui-mobile-ios-loader", ngImport: i0, template: "<svg\n    height=\"36\"\n    preserveAspectRatio=\"xMidYMid\"\n    viewBox=\"0 0 100 100\"\n    width=\"36\"\n    xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n>\n    <ng-container *tuiRepeatTimes=\"let index of steps\">\n        <g\n            *ngIf=\"isShown(index)\"\n            [attr.transform]=\"calculateTransform(index)\"\n        >\n            <rect\n                fill=\"#c7c9cc\"\n                height=\"16\"\n                rx=\"7.05\"\n                ry=\"3.3\"\n                width=\"6\"\n                x=\"47\"\n                y=\"22\"\n            >\n                <animate\n                    *ngIf=\"finished\"\n                    attributeName=\"opacity\"\n                    dur=\"1s\"\n                    keyTimes=\"0;1\"\n                    repeatCount=\"indefinite\"\n                    values=\"1;0\"\n                    [attr.begin]=\"calculateAnimationBegin(index)\"\n                ></animate>\n            </rect>\n        </g>\n    </ng-container>\n</svg>\n", styles: [":host{position:absolute;top:-.5rem;left:50%;margin-left:-1.125rem}\n"], directives: [{ type: i1.TuiRepeatTimesDirective, selector: "[tuiRepeatTimes][tuiRepeatTimesOf]", inputs: ["tuiRepeatTimesOf"] }, { type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiMobileLoaderIOSComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-mobile-ios-loader',
                    templateUrl: './loader-ios.template.html',
                    styleUrls: ['./loader-ios.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [POLYMORPHEUS_CONTEXT]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_PULL_TO_REFRESH_THRESHOLD]
                }] }]; } });
const TUI_IOS_LOADER = new PolymorpheusComponent(TuiMobileLoaderIOSComponent);

/**
 * Stream that emits when loading is over
 */
const TUI_PULL_TO_REFRESH_LOADED = tuiCreateToken(EMPTY);
/**
 * Pull threshold in pixels until loading starts
 */
const TUI_PULL_TO_REFRESH_THRESHOLD = tuiCreateToken(50);
/**
 * Loading indicator component that gets current pull distance in pixels as context
 */
const TUI_PULL_TO_REFRESH_COMPONENT = tuiCreateTokenFromFactory(() => (inject(TUI_IS_IOS) ? TUI_IOS_LOADER : TUI_ANDROID_LOADER));
/**
 * @deprecated renamed to {@link TUI_PULL_TO_REFRESH_LOADED}
 */
const TUI_LOADED = TUI_PULL_TO_REFRESH_LOADED;

const MICRO_OFFSET = Math.pow(10, -6);
class TuiPullToRefreshService extends Observable {
    constructor(el, scrollRef, loaded$, threshold, component) {
        super(subscriber => (component ? this.pulling$ : EMPTY).subscribe(subscriber));
        this.el = el;
        this.scrollRef = scrollRef;
        this.loaded$ = loaded$;
        this.threshold = threshold;
        // Hack for iOS to determine if pulling stopped due to scroll
        // because Safari does not support `touch-action: pan-down`
        this.touched = false;
        this.pulling$ = this.loaded$.pipe(startWith(null), switchMap(() => tuiTypedFromEvent(this.element, 'touchstart', { passive: true }).pipe(filter(() => !this.scrollTop), map(({ touches }) => touches[0].clientY), switchMap(start => tuiTypedFromEvent(this.element, 'touchmove').pipe(tap(() => {
            this.touched = true;
        }), map(({ touches }) => touches[0].clientY - start), filter(distance => distance > 0), takeUntil(tuiTypedFromEvent(this.element, 'touchend').pipe(tap(() => {
            this.touched = false;
        }))), takeUntil(tuiScrollFrom(this.scrollRef.nativeElement)), endWith(0))), scan((prev, current) => !current && !this.touched && prev > this.threshold
            ? this.threshold
            : current + current * MICRO_OFFSET, 0), takeWhile(distance => distance !== this.threshold, true), startWith(0))), distinctUntilChanged(), share());
    }
    get element() {
        return this.el.nativeElement;
    }
    get scrollTop() {
        return this.scrollRef.nativeElement.scrollTop;
    }
}
TuiPullToRefreshService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPullToRefreshService, deps: [{ token: ElementRef }, { token: TUI_SCROLL_REF }, { token: TUI_PULL_TO_REFRESH_LOADED }, { token: TUI_PULL_TO_REFRESH_THRESHOLD }, { token: TUI_PULL_TO_REFRESH_COMPONENT }], target: i0.ɵɵFactoryTarget.Injectable });
TuiPullToRefreshService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPullToRefreshService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPullToRefreshService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [TUI_SCROLL_REF]
                }] }, { type: i3.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_PULL_TO_REFRESH_LOADED]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_PULL_TO_REFRESH_THRESHOLD]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_PULL_TO_REFRESH_COMPONENT]
                }] }]; } });

const ROTATE_X_DEFAULT = 180;
const ROTATE_X_MAX = 500;
const ROTATE_X_MULTIPLIER = 2.3;
class TuiMobileLoaderAndroidComponent {
    constructor(context, threshold) {
        this.context = context;
        this.threshold = threshold;
    }
    get transform() {
        const rotateX = Math.min(ROTATE_X_DEFAULT + this.percent * ROTATE_X_MULTIPLIER, ROTATE_X_MAX);
        return `rotate(${rotateX} 0 0)`;
    }
    get percent() {
        return (this.context.$implicit * 100) / this.threshold;
    }
    get opacity() {
        return this.context.$implicit / (this.threshold * 1.5);
    }
    get dropped() {
        return (this.context.$implicit <= MICRO_OFFSET ||
            this.context.$implicit === this.threshold);
    }
    get hostTransform() {
        return `translateY(${Math.min(this.context.$implicit, this.threshold * 1.5)}px)`;
    }
}
TuiMobileLoaderAndroidComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiMobileLoaderAndroidComponent, deps: [{ token: POLYMORPHEUS_CONTEXT }, { token: TUI_PULL_TO_REFRESH_THRESHOLD }], target: i0.ɵɵFactoryTarget.Component });
TuiMobileLoaderAndroidComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiMobileLoaderAndroidComponent, selector: "tui-mobile-android-loader", host: { properties: { "class._visible": "this.percent", "class._dropped": "this.dropped", "style.transform": "this.hostTransform" } }, ngImport: i0, template: "<div class=\"t-wrapper\">\n    <svg\n        *ngIf=\"percent !== 100; else loading\"\n        fill=\"none\"\n        height=\"24\"\n        viewBox=\"0 0 24 24\"\n        width=\"24\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        [attr.transform]=\"transform\"\n        [style.opacity]=\"opacity\"\n    >\n        <defs>\n            <mask id=\"mask-1\">\n                <path\n                    clip-rule=\"evenodd\"\n                    d=\"M21 12C21 7.03 16.97 3 12 3C7.03 3 3 7.03 3 12C3 16.97 7.03 21 12 21C14.06 21 15.96 20.3 17.48 19.14L16.06 17.7C14.91 18.51 13.51 19 12 19C8.13 19 5 15.87 5 12C5 8.13 8.13 5 12 5C15.87 5 19 8.13 19 12H16L20 16L24 12H21Z\"\n                    fill=\"white\"\n                    fill-rule=\"evenodd\"\n                />\n            </mask>\n        </defs>\n        <g mask=\"url(#mask-1)\">\n            <path\n                clip-rule=\"evenodd\"\n                d=\"M21 12C21 7.03 16.97 3 12 3C7.03 3 3 7.03 3 12C3 16.97 7.03 21 12 21C14.06 21 15.96 20.3 17.48 19.14L16.06 17.7C14.91 18.51 13.51 19 12 19C8.13 19 5 15.87 5 12C5 8.13 8.13 5 12 5C15.87 5 19 8.13 19 12H16L20 16L24 12H21Z\"\n                fill=\"black\"\n                fill-rule=\"evenodd\"\n            />\n        </g>\n    </svg>\n</div>\n<ng-template #loading>\n    <tui-loader\n        size=\"s\"\n        class=\"t-loader\"\n        [inheritColor]=\"true\"\n    ></tui-loader>\n</ng-template>\n", styles: [":host{transition-property:opacity;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;position:-webkit-sticky;position:sticky;top:0;z-index:1;display:block;height:0;opacity:0}:host._visible{opacity:1}:host._dropped{transition:transform var(--tui-duration) cubic-bezier(.4,0,.2,1),opacity var(--tui-duration) var(--tui-duration)}.t-wrapper{position:absolute;top:-2.5rem;left:50%;display:flex;box-shadow:var(--tui-shadow-dropdown);height:2.25rem;width:2.25rem;background-color:var(--tui-secondary);border-radius:6.25rem;align-items:center;justify-content:center;margin-left:-1.125rem}.t-loader{color:var(--tui-text-01)}\n"], components: [{ type: i1$1.TuiLoaderComponent, selector: "tui-loader", inputs: ["size", "inheritColor", "overlay", "textContent", "showLoader"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiMobileLoaderAndroidComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-mobile-android-loader',
                    templateUrl: './loader-android.template.html',
                    styleUrls: ['./loader-android.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [POLYMORPHEUS_CONTEXT]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_PULL_TO_REFRESH_THRESHOLD]
                }] }]; }, propDecorators: { percent: [{
                type: HostBinding,
                args: ['class._visible']
            }], dropped: [{
                type: HostBinding,
                args: ['class._dropped']
            }], hostTransform: [{
                type: HostBinding,
                args: ['style.transform']
            }] } });
const TUI_ANDROID_LOADER = new PolymorpheusComponent(TuiMobileLoaderAndroidComponent);

class TuiPullToRefreshComponent {
    constructor(zone, destroy$, { nativeElement }, isIOS, threshold, component, pulling$) {
        this.isIOS = isIOS;
        this.threshold = threshold;
        this.component = component;
        this.pulling$ = pulling$;
        this.styleHandler = this.isIOS
            ? distance => ({ top: tuiPx(distance / 2) })
            : () => null;
        this.pulled = this.pulling$.pipe(filter(distance => distance === this.threshold));
        this.dropped$ = this.pulling$.pipe(map(distance => distance <= MICRO_OFFSET || distance === this.threshold), distinctUntilChanged());
        // Ensure scrolling down is impossible while pulling
        if (this.component) {
            tuiScrollFrom(nativeElement)
                .pipe(startWith(null), tuiZonefree(zone), takeUntil(destroy$))
                .subscribe(() => {
                if (nativeElement.scrollTop) {
                    nativeElement.style.touchAction = '';
                }
                else {
                    nativeElement.style.touchAction = 'pan-down';
                }
            });
        }
    }
}
TuiPullToRefreshComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPullToRefreshComponent, deps: [{ token: NgZone }, { token: TuiDestroyService, self: true }, { token: TUI_SCROLL_REF }, { token: TUI_IS_IOS }, { token: TUI_PULL_TO_REFRESH_THRESHOLD }, { token: TUI_PULL_TO_REFRESH_COMPONENT }, { token: TuiPullToRefreshService }], target: i0.ɵɵFactoryTarget.Component });
TuiPullToRefreshComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiPullToRefreshComponent, selector: "tui-pull-to-refresh", inputs: { styleHandler: "styleHandler" }, outputs: { pulled: "pulled" }, providers: [TuiPullToRefreshService, TuiDestroyService], ngImport: i0, template: "<ng-container *polymorpheusOutlet=\"component; context: {$implicit: (pulling$ | async) || 0}\"></ng-container>\n\n<div\n    [class.t-drop]=\"dropped$ | async\"\n    [ngStyle]=\"styleHandler((pulling$ | async) || 0)\"\n    [style.position]=\"'relative'\"\n>\n    <ng-content></ng-content>\n</div>\n", styles: [".t-drop{transition:all var(--tui-duration) cubic-bezier(.4,0,.2,1)}\n"], directives: [{ type: i1$2.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { type: i2.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }], pipes: { "async": i2.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPullToRefreshComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-pull-to-refresh',
                    templateUrl: './pull-to-refresh.template.html',
                    styleUrls: ['./pull-to-refresh.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [TuiPullToRefreshService, TuiDestroyService],
                }]
        }], ctorParameters: function () { return [{ type: i0.NgZone, decorators: [{
                    type: Inject,
                    args: [NgZone]
                }] }, { type: i3.Observable, decorators: [{
                    type: Inject,
                    args: [TuiDestroyService]
                }, {
                    type: Self
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [TUI_SCROLL_REF]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_IS_IOS]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_PULL_TO_REFRESH_THRESHOLD]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_PULL_TO_REFRESH_COMPONENT]
                }] }, { type: i3.Observable, decorators: [{
                    type: Inject,
                    args: [TuiPullToRefreshService]
                }] }]; }, propDecorators: { styleHandler: [{
                type: Input
            }], pulled: [{
                type: Output
            }] } });

class TuiPullToRefreshModule {
}
TuiPullToRefreshModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPullToRefreshModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiPullToRefreshModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPullToRefreshModule, declarations: [TuiPullToRefreshComponent,
        TuiMobileLoaderAndroidComponent,
        TuiMobileLoaderIOSComponent], imports: [CommonModule,
        TuiLoaderModule,
        TuiSvgModule,
        TuiRepeatTimesModule,
        PolymorpheusModule], exports: [TuiPullToRefreshComponent] });
TuiPullToRefreshModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPullToRefreshModule, imports: [[
            CommonModule,
            TuiLoaderModule,
            TuiSvgModule,
            TuiRepeatTimesModule,
            PolymorpheusModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPullToRefreshModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        TuiLoaderModule,
                        TuiSvgModule,
                        TuiRepeatTimesModule,
                        PolymorpheusModule,
                    ],
                    declarations: [
                        TuiPullToRefreshComponent,
                        TuiMobileLoaderAndroidComponent,
                        TuiMobileLoaderIOSComponent,
                    ],
                    exports: [TuiPullToRefreshComponent],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { MICRO_OFFSET, TUI_ANDROID_LOADER, TUI_IOS_LOADER, TUI_LOADED, TUI_PULL_TO_REFRESH_COMPONENT, TUI_PULL_TO_REFRESH_LOADED, TUI_PULL_TO_REFRESH_THRESHOLD, TuiMobileLoaderAndroidComponent, TuiMobileLoaderIOSComponent, TuiPullToRefreshComponent, TuiPullToRefreshModule, TuiPullToRefreshService };
//# sourceMappingURL=taiga-ui-addon-mobile-components-pull-to-refresh.js.map
