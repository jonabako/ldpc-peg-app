import * as i0 from '@angular/core';
import { Component, ChangeDetectionStrategy, Inject, Input, EventEmitter, ElementRef, ContentChildren, forwardRef, Output, HostListener, HostBinding, ChangeDetectorRef, Directive, Self, NgModule } from '@angular/core';
import * as i1$1 from '@taiga-ui/cdk';
import { EMPTY_QUERY, tuiIsElement, tuiWatch, TuiDestroyService, TuiRepeatTimesModule } from '@taiga-ui/cdk';
import * as i1 from '@taiga-ui/core';
import { TUI_ANIMATION_OPTIONS, tuiScaleIn, TuiRouterLinkActiveService, TuiSvgModule } from '@taiga-ui/core';
import * as i2 from '@angular/common';
import { CommonModule } from '@angular/common';
import { filter, takeUntil } from 'rxjs/operators';
import * as i1$2 from 'rxjs';

class TuiTabBarItemComponent {
    constructor(animation) {
        this.animation = animation;
        this.icon = '';
        this.badge = null;
    }
    format(value) {
        return value > 999 ? '999+' : String(value);
    }
}
TuiTabBarItemComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTabBarItemComponent, deps: [{ token: TUI_ANIMATION_OPTIONS }], target: i0.ɵɵFactoryTarget.Component });
TuiTabBarItemComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiTabBarItemComponent, selector: "button[tuiTabBarItem], a[tuiTabBarItem]", inputs: { icon: "icon", badge: "badge" }, ngImport: i0, template: "<tui-svg\n    class=\"t-icon\"\n    [src]=\"icon\"\n></tui-svg>\n<span class=\"t-wrapper\">\n    <span\n        *ngIf=\"badge as value\"\n        class=\"t-badge\"\n        [@tuiScaleIn]=\"animation\"\n    >\n        {{ format(value) }}\n    </span>\n</span>\n<span class=\"t-text\">\n    <ng-content></ng-content>\n</span>\n", styles: [":host{-webkit-appearance:none;-moz-appearance:none;appearance:none;padding:0;border:0;background:none;font-size:inherit;line-height:inherit;text-decoration:none;transition-property:color;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;position:relative;display:flex;flex:1 0;font:inherit;flex-direction:column;align-items:center;overflow:hidden}:host:nth-child(1){color:var(--tui-tab-1, inherit)}:host:nth-child(2){color:var(--tui-tab-2, inherit)}:host:nth-child(3){color:var(--tui-tab-3, inherit)}:host:nth-child(4){color:var(--tui-tab-4, inherit)}:host:nth-child(5){color:var(--tui-tab-5, inherit)}:host:nth-child(6){color:var(--tui-tab-6, inherit)}:host:nth-child(7){color:var(--tui-tab-7, inherit)}:host:nth-child(8){color:var(--tui-tab-8, inherit)}:host:nth-child(9){color:var(--tui-tab-9, inherit)}:host:nth-child(10){color:var(--tui-tab-10, inherit)}.t-icon{width:1.75rem;height:1.75rem;margin:.375rem 0 .125rem;pointer-events:none}.t-wrapper{position:absolute;top:.125rem;left:1rem;display:flex;width:100%;justify-content:center;pointer-events:none}.t-badge{display:flex;height:1.125rem;min-width:1.125rem;align-items:center;justify-content:center;padding:0 .25rem;border-radius:1rem;font-size:.8125rem;box-sizing:border-box;color:var(--tui-base-01);background:var(--tui-error-fill)}.t-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;max-width:100%;pointer-events:none}\n"], components: [{ type: i1.TuiSvgComponent, selector: "tui-svg", inputs: ["src"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], animations: [tuiScaleIn], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTabBarItemComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'button[tuiTabBarItem], a[tuiTabBarItem]',
                    templateUrl: './tab-bar-item.template.html',
                    styleUrls: ['./tab-bar-item.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    animations: [tuiScaleIn],
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_ANIMATION_OPTIONS]
                }] }]; }, propDecorators: { icon: [{
                type: Input
            }], badge: [{
                type: Input
            }] } });

class TuiTabBarComponent {
    constructor() {
        this.tabs = EMPTY_QUERY;
        this.quantity = 4;
        this.activeItemIndex = NaN;
        this.activeItemIndexChange = new EventEmitter();
    }
    setActive(tab) {
        if (tuiIsElement(tab)) {
            this.updateIndex(this.tabs.toArray().findIndex(({ nativeElement }) => nativeElement === tab));
        }
    }
    get style() {
        return `--tui-tab-${this.activeItemIndex + 1}: var(--tui-active-color)`;
    }
    updateIndex(index) {
        this.activeItemIndex = index;
        this.activeItemIndexChange.emit(index);
    }
}
TuiTabBarComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTabBarComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
TuiTabBarComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiTabBarComponent, selector: "nav[tuiTabBar]", inputs: { quantity: "quantity", activeItemIndex: "activeItemIndex" }, outputs: { activeItemIndexChange: "activeItemIndexChange" }, host: { listeners: { "click": "setActive($event.target)" }, properties: { "style": "this.style" } }, queries: [{ propertyName: "tabs", predicate: i0.forwardRef(function () { return TuiTabBarItemComponent; }), read: ElementRef }], ngImport: i0, template: "<ng-content></ng-content>\n<div class=\"t-skeletons\">\n    <div\n        *tuiRepeatTimes=\"let index of quantity\"\n        class=\"t-skeleton\"\n    ></div>\n</div>\n", styles: [":host{--tui-active-color: var(--tui-primary);position:relative;display:flex;align-items:flex-start;font:normal .625rem/.75rem -apple-system,BlinkMacSystemFont,system-ui,Roboto,\"Segoe UI\",sans-serif;height:var(--tui-height-l);color:var(--tui-text-03);-webkit-backdrop-filter:blur(.25rem);backdrop-filter:blur(.25rem)}:host:before{position:absolute;top:0;left:0;width:100%;height:100%;content:\"\";background:var(--tui-elevation-01);box-shadow:inset 0 1px var(--tui-base-04);opacity:.9}.t-skeletons{display:none;height:100%;width:100%;justify-content:space-around}.t-skeletons:first-child{display:flex}.t-skeleton{display:flex;flex-direction:column;align-items:center;justify-content:center;animation:tuiSkeletonVibe ease-in-out 1s infinite alternate}.t-skeleton:before{content:\"\";width:1.375rem;height:1.375rem;margin-bottom:.5rem;border-radius:100%;background:var(--tui-clear-hover)}.t-skeleton:after{content:\"\";width:2.5rem;height:.375rem;border-radius:1rem;background:var(--tui-clear-hover)}\n"], directives: [{ type: i1$1.TuiRepeatTimesDirective, selector: "[tuiRepeatTimes][tuiRepeatTimesOf]", inputs: ["tuiRepeatTimesOf"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTabBarComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'nav[tuiTabBar]',
                    templateUrl: './tab-bar.template.html',
                    styleUrls: ['./tab-bar.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { tabs: [{
                type: ContentChildren,
                args: [forwardRef(() => TuiTabBarItemComponent), { read: ElementRef }]
            }], quantity: [{
                type: Input
            }], activeItemIndex: [{
                type: Input
            }], activeItemIndexChange: [{
                type: Output
            }], setActive: [{
                type: HostListener,
                args: ['click', ['$event.target']]
            }], style: [{
                type: HostBinding,
                args: ['style']
            }] } });

class TuiTabBarItemDirective {
    constructor(destroy$, active$, tabs, { nativeElement }, cdr) {
        active$
            .pipe(filter(Boolean), tuiWatch(cdr), takeUntil(destroy$))
            .subscribe(() => {
            tabs.setActive(nativeElement);
        });
    }
}
TuiTabBarItemDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTabBarItemDirective, deps: [{ token: TuiDestroyService, self: true }, { token: TuiRouterLinkActiveService }, { token: TuiTabBarComponent }, { token: ElementRef }, { token: ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive });
TuiTabBarItemDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiTabBarItemDirective, selector: "[tuiTabBarItem][routerLinkActive]", providers: [TuiRouterLinkActiveService, TuiDestroyService], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTabBarItemDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiTabBarItem][routerLinkActive]',
                    providers: [TuiRouterLinkActiveService, TuiDestroyService],
                }]
        }], ctorParameters: function () { return [{ type: i1$2.Observable, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiDestroyService]
                }] }, { type: i1$2.Observable, decorators: [{
                    type: Inject,
                    args: [TuiRouterLinkActiveService]
                }] }, { type: TuiTabBarComponent, decorators: [{
                    type: Inject,
                    args: [TuiTabBarComponent]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }]; } });

class TuiTabBarModule {
}
TuiTabBarModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTabBarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiTabBarModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTabBarModule, declarations: [TuiTabBarComponent, TuiTabBarItemComponent, TuiTabBarItemDirective], imports: [CommonModule, TuiSvgModule, TuiRepeatTimesModule], exports: [TuiTabBarComponent, TuiTabBarItemComponent, TuiTabBarItemDirective] });
TuiTabBarModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTabBarModule, imports: [[CommonModule, TuiSvgModule, TuiRepeatTimesModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTabBarModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, TuiSvgModule, TuiRepeatTimesModule],
                    declarations: [TuiTabBarComponent, TuiTabBarItemComponent, TuiTabBarItemDirective],
                    exports: [TuiTabBarComponent, TuiTabBarItemComponent, TuiTabBarItemDirective],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TuiTabBarComponent, TuiTabBarItemComponent, TuiTabBarItemDirective, TuiTabBarModule };
//# sourceMappingURL=taiga-ui-addon-mobile-components-tab-bar.js.map
