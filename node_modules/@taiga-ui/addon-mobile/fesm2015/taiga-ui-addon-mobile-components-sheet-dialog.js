import { __decorate } from 'tslib';
import * as i0 from '@angular/core';
import { ElementRef, Component, ChangeDetectionStrategy, Inject, ViewChild, ViewChildren, HostBinding, HostListener, inject, Injectable, Directive, NgModule } from '@angular/core';
import * as i3 from '@taiga-ui/cdk';
import { EMPTY_QUERY, tuiPure, tuiCreateToken, tuiProvideOptions, AbstractTuiDialogService, AbstractTuiDialogDirective, TuiClickOutsideModule, tuiAsDialog } from '@taiga-ui/cdk';
import * as i1 from '@taiga-ui/core';
import { TUI_ANIMATIONS_DURATION, TUI_COMMON_ICONS, TUI_CLOSE_WORD, tuiSlideInTop, TuiButtonModule } from '@taiga-ui/core';
import { shouldCall } from '@tinkoff/ng-event-plugins';
import * as i4 from '@tinkoff/ng-polymorpheus';
import { POLYMORPHEUS_CONTEXT, PolymorpheusComponent, PolymorpheusModule } from '@tinkoff/ng-polymorpheus';
import * as i5 from 'rxjs';
import { BehaviorSubject } from 'rxjs';
import * as i2 from '@angular/common';
import { CommonModule } from '@angular/common';

// So we re-enter ngZone and trigger change detection
function isCloseable() {
    return this.context.closeable;
}
class TuiSheetDialogComponent {
    constructor(el, duration, icons, closeWord$, context) {
        this.el = el;
        this.duration = duration;
        this.icons = icons;
        this.closeWord$ = closeWord$;
        this.context = context;
        this.stopsRefs = EMPTY_QUERY;
        this.pointers = 0;
        this.slideInTop = {
            value: '',
            params: {
                start: '100vh',
                duration: this.duration,
            },
        };
        this.stuck$ = new BehaviorSubject(false);
    }
    get offset() {
        return this.context.offset;
    }
    get closeable() {
        return this.context.closeable;
    }
    get isSmall() {
        var _a;
        return this.sheetTop > (((_a = this.sheet) === null || _a === void 0 ? void 0 : _a.nativeElement.clientHeight) || Infinity);
    }
    onPointerChange(delta) {
        this.pointers += delta;
        if (!delta) {
            const stuck = this.el.nativeElement.scrollTop > this.sheetTop;
            this.stuck$.value !== stuck && this.stuck$.next(stuck);
        }
        if (this.context.closeable &&
            !this.pointers &&
            !this.el.nativeElement.scrollTop) {
            this.close();
        }
    }
    close() {
        // TODO: Refactor focus visible on mobile
        this.el.nativeElement.dispatchEvent(new Event('mousedown', { bubbles: true }));
        this.context.$implicit.complete();
    }
    ngAfterViewInit() {
        this.el.nativeElement.scrollTop = [
            ...this.getStops(this.stopsRefs),
            this.sheetTop,
        ][this.context.initial];
    }
    get sheetTop() {
        var _a, _b;
        return (_b = (_a = this.sheet) === null || _a === void 0 ? void 0 : _a.nativeElement.offsetTop) !== null && _b !== void 0 ? _b : Infinity;
    }
    getStops(stops) {
        return stops.map(({ nativeElement }) => nativeElement.offsetTop + nativeElement.clientHeight);
    }
}
TuiSheetDialogComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSheetDialogComponent, deps: [{ token: ElementRef }, { token: TUI_ANIMATIONS_DURATION }, { token: TUI_COMMON_ICONS }, { token: TUI_CLOSE_WORD }, { token: POLYMORPHEUS_CONTEXT }], target: i0.ɵɵFactoryTarget.Component });
TuiSheetDialogComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiSheetDialogComponent, selector: "tui-sheet-dialog", host: { listeners: { "$.class._stuck": "stuck$", "document:touchstart.passive.silent": "onPointerChange(1)", "document:touchend.silent": "onPointerChange(-1)", "document:touchcancel.silent": "onPointerChange(-1)", "scroll.silent": "onPointerChange(0)" }, properties: { "$.class._stuck": "stuck$", "@tuiSlideInTop": "this.slideInTop", "style.top.px": "this.offset", "class._closeable": "this.closeable" } }, viewQueries: [{ propertyName: "sheet", first: true, predicate: ["sheet"], descendants: true }, { propertyName: "stopsRefs", predicate: ["stops"], descendants: true }], ngImport: i0, template: "<div class=\"t-stops\">\n    <div\n        *ngFor=\"let stop of context.stops\"\n        #stops\n        class=\"t-stop\"\n        [style.margin-top]=\"stop\"\n    ></div>\n</div>\n<div\n    #sheet\n    class=\"t-sheet\"\n    [class.t-sheet_small]=\"isSmall\"\n    (tuiClickOutside)=\"close()\"\n>\n    <div class=\"t-top\"></div>\n    <h2\n        *ngIf=\"context.label\"\n        class=\"t-heading\"\n        [id]=\"context.id\"\n    >\n        <ng-container *polymorpheusOutlet=\"context.label as label\">\n            {{ label }}\n        </ng-container>\n        <button\n            *ngIf=\"context.closeable\"\n            appearance=\"icon\"\n            size=\"xs\"\n            tuiIconButton\n            class=\"t-close\"\n            [icon]=\"icons.close\"\n            (click)=\"close()\"\n        >\n            {{ closeWord$ | async }}\n        </button>\n    </h2>\n    <div\n        *ngIf=\"context.content\"\n        class=\"t-content\"\n    >\n        <ng-container *polymorpheusOutlet=\"context.content as text; context: context\">\n            {{ text }}\n        </ng-container>\n    </div>\n</div>\n<div class=\"t-footer\"></div>\n", styles: [":host{position:fixed;top:0;left:0;bottom:0;right:0;right:-1rem;display:flex;flex-direction:column;-webkit-clip-path:inset(0 1rem 0 0 round .75rem .75rem 0 0);clip-path:inset(0 1rem 0 0 round .75rem .75rem 0 0);font:var(--tui-font-text-m);overflow-y:scroll;scroll-snap-type:y mandatory;overscroll-behavior:none;box-shadow:0 20rem var(--tui-elevation-01)}:host._closeable{display:block}:host._closeable .t-stops{display:flex}.t-stops{display:none;height:100%;scroll-snap-stop:always;scroll-snap-align:start}.t-stop{scroll-snap-stop:normal;scroll-snap-align:start;height:1rem;width:1rem}.t-sheet{box-shadow:var(--tui-shadow);width:calc(100% - 1rem);border-radius:.75rem .75rem 0 0;padding:0 1rem;margin-top:auto;background:var(--tui-elevation-01);box-sizing:border-box;scroll-snap-stop:always;scroll-snap-align:start}@supports (-moz-appearance: none){.t-sheet_small{scroll-snap-align:end}}.t-top{position:-webkit-sticky;position:sticky;top:0;z-index:1;height:1.5rem;background:var(--tui-elevation-01)}.t-top:after{content:\"\";position:absolute;top:.5rem;left:50%;width:2rem;height:.25rem;transform:translate(-50%);background:var(--tui-base-09);opacity:.3;border-radius:1rem}.t-heading{position:-webkit-sticky;position:sticky;top:1.5rem;z-index:1;display:flex;margin:0;padding-bottom:1rem;font:var(--tui-font-heading-6);background:var(--tui-elevation-01)}.t-heading:last-child{margin-bottom:-.75rem}.t-heading:after{content:\"\";position:absolute;top:100%;left:0;right:0;height:1px;background:var(--tui-base-03);opacity:0}:host._stuck .t-heading:after{opacity:1}.t-close{right:-.25rem;flex-shrink:0;margin-left:auto}.t-content{position:relative;isolation:isolate}.t-content:nth-child(3){margin-top:1rem}.t-footer{height:1rem;scroll-snap-stop:always;scroll-snap-align:end;background:var(--tui-elevation-01)}\n"], components: [{ type: i1.TuiButtonComponent, selector: "button[tuiButton], button[tuiIconButton], a[tuiButton], a[tuiIconButton]", inputs: ["appearance", "disabled", "icon", "iconRight", "shape", "showLoader", "size"] }], directives: [{ type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3.TuiClickOutsideDirective, selector: "[tuiClickOutside]", outputs: ["tuiClickOutside"] }, { type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }], pipes: { "async": i2.AsyncPipe }, animations: [tuiSlideInTop], changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    shouldCall(isCloseable)
], TuiSheetDialogComponent.prototype, "close", null);
__decorate([
    tuiPure
], TuiSheetDialogComponent.prototype, "getStops", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSheetDialogComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-sheet-dialog',
                    templateUrl: './sheet-dialog.template.html',
                    styleUrls: ['./sheet-dialog.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    animations: [tuiSlideInTop],
                    host: {
                        '[$.class._stuck]': 'stuck$',
                        '($.class._stuck)': 'stuck$',
                    },
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_ANIMATIONS_DURATION]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_COMMON_ICONS]
                }] }, { type: i5.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_CLOSE_WORD]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [POLYMORPHEUS_CONTEXT]
                }] }]; }, propDecorators: { sheet: [{
                type: ViewChild,
                args: ['sheet']
            }], stopsRefs: [{
                type: ViewChildren,
                args: ['stops']
            }], slideInTop: [{
                type: HostBinding,
                args: ['@tuiSlideInTop']
            }], offset: [{
                type: HostBinding,
                args: ['style.top.px']
            }], closeable: [{
                type: HostBinding,
                args: ['class._closeable']
            }], onPointerChange: [{
                type: HostListener,
                args: ['document:touchstart.passive.silent', ['1']]
            }, {
                type: HostListener,
                args: ['document:touchend.silent', ['-1']]
            }, {
                type: HostListener,
                args: ['document:touchcancel.silent', ['-1']]
            }, {
                type: HostListener,
                args: ['scroll.silent', ['0']]
            }], close: [], getStops: [] } });

const TUI_SHEET_DIALOG_DEFAULT_OPTIONS = {
    label: '',
    stops: [],
    initial: 0,
    offset: 16,
    closeable: true,
};
/**
 * Default parameters for mobile dialog component
 */
const TUI_SHEET_DIALOG_OPTIONS = tuiCreateToken(TUI_SHEET_DIALOG_DEFAULT_OPTIONS);
function tuiSheetDialogOptionsProvider(options) {
    return tuiProvideOptions(TUI_SHEET_DIALOG_OPTIONS, options, TUI_SHEET_DIALOG_DEFAULT_OPTIONS);
}

const DIALOG = new PolymorpheusComponent(TuiSheetDialogComponent);
class TuiSheetDialogService extends AbstractTuiDialogService {
    constructor() {
        super(...arguments);
        this.component = DIALOG;
        this.defaultOptions = Object.assign(Object.assign({}, inject(TUI_SHEET_DIALOG_OPTIONS)), { data: undefined });
    }
}
TuiSheetDialogService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSheetDialogService, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
TuiSheetDialogService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSheetDialogService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSheetDialogService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });

class TuiSheetDialogDirective extends AbstractTuiDialogDirective {
}
TuiSheetDialogDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSheetDialogDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TuiSheetDialogDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiSheetDialogDirective, selector: "ng-template[tuiSheetDialog]", inputs: { options: ["tuiSheetDialogOptions", "options"], open: ["tuiSheetDialog", "open"] }, outputs: { openChange: "tuiSheetDialogChange" }, providers: [
        {
            provide: AbstractTuiDialogService,
            useExisting: TuiSheetDialogService,
        },
    ], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSheetDialogDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ng-template[tuiSheetDialog]',
                    inputs: ['options: tuiSheetDialogOptions', 'open: tuiSheetDialog'],
                    outputs: ['openChange: tuiSheetDialogChange'],
                    providers: [
                        {
                            provide: AbstractTuiDialogService,
                            useExisting: TuiSheetDialogService,
                        },
                    ],
                }]
        }] });

class TuiSheetDialogModule {
}
TuiSheetDialogModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSheetDialogModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiSheetDialogModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSheetDialogModule, declarations: [TuiSheetDialogComponent, TuiSheetDialogDirective], imports: [CommonModule, PolymorpheusModule, TuiClickOutsideModule, TuiButtonModule], exports: [TuiSheetDialogComponent, TuiSheetDialogDirective] });
TuiSheetDialogModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSheetDialogModule, providers: [tuiAsDialog(TuiSheetDialogService)], imports: [[CommonModule, PolymorpheusModule, TuiClickOutsideModule, TuiButtonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSheetDialogModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, PolymorpheusModule, TuiClickOutsideModule, TuiButtonModule],
                    declarations: [TuiSheetDialogComponent, TuiSheetDialogDirective],
                    providers: [tuiAsDialog(TuiSheetDialogService)],
                    exports: [TuiSheetDialogComponent, TuiSheetDialogDirective],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TUI_SHEET_DIALOG_DEFAULT_OPTIONS, TUI_SHEET_DIALOG_OPTIONS, TuiSheetDialogComponent, TuiSheetDialogDirective, TuiSheetDialogModule, TuiSheetDialogService, tuiSheetDialogOptionsProvider };
//# sourceMappingURL=taiga-ui-addon-mobile-components-sheet-dialog.js.map
