import * as i0 from '@angular/core';
import { ElementRef, Renderer2, Directive, Optional, Inject, Self, Input, NgModule } from '@angular/core';
import { tuiFindTouchIndex } from '@taiga-ui/addon-mobile/utils';
import * as i1 from '@taiga-ui/cdk';
import { tuiTypedFromEvent, TUI_IS_IOS, TuiDestroyService } from '@taiga-ui/cdk';
import { TUI_ELEMENT_REF } from '@taiga-ui/core';
import { race } from 'rxjs';
import { tap, map, switchMap, filter, take, takeUntil } from 'rxjs/operators';

const STYLE = {
    transform: 'scale(0.95)',
    opacity: '0.6',
    background: 'rgba(146, 153, 162, 0.12)',
};
class TuiTouchableDirective {
    constructor(el, isIos, { nativeElement }, renderer, destroy$) {
        this.tuiTouchable = '';
        if (!isIos) {
            return;
        }
        const element = (el === null || el === void 0 ? void 0 : el.nativeElement) || nativeElement;
        tuiTypedFromEvent(element, 'touchstart', { passive: true })
            .pipe(tap(() => {
            this.onTouchStart(renderer, element);
        }), map(({ touches }) => touches[touches.length - 1].identifier), switchMap(identifier => race(tuiTypedFromEvent(element, 'touchmove', { passive: true }).pipe(filter(({ touches }) => this.hasTouchLeft(element, touches, identifier))), tuiTypedFromEvent(element, 'touchend')).pipe(take(1))), takeUntil(destroy$))
            .subscribe(() => {
            renderer.removeStyle(element, 'transform');
            renderer.removeStyle(element, 'opacity');
            renderer.removeStyle(element, 'background');
        });
    }
    get style() {
        return this.tuiTouchable || 'transform';
    }
    hasTouchLeft(element, touches, identifier) {
        const { ownerDocument } = element;
        const id = tuiFindTouchIndex(touches, identifier);
        if (!ownerDocument || id === -1) {
            return true;
        }
        const { clientX, clientY } = touches[id];
        return !element.contains(ownerDocument.elementFromPoint(clientX, clientY));
    }
    onTouchStart(renderer, element) {
        if (this.style !== 'transform') {
            renderer.removeStyle(element, 'transition');
        }
        else {
            renderer.setStyle(element, 'transition', 'transform 0.2s');
        }
        renderer.setStyle(element, this.style, STYLE[this.style]);
    }
}
TuiTouchableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTouchableDirective, deps: [{ token: TUI_ELEMENT_REF, optional: true }, { token: TUI_IS_IOS }, { token: ElementRef }, { token: Renderer2 }, { token: TuiDestroyService, self: true }], target: i0.ɵɵFactoryTarget.Directive });
TuiTouchableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiTouchableDirective, selector: "[tuiTouchable]", inputs: { tuiTouchable: "tuiTouchable" }, providers: [TuiDestroyService], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTouchableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiTouchable]',
                    providers: [TuiDestroyService],
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TUI_ELEMENT_REF]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_IS_IOS]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: i0.Renderer2, decorators: [{
                    type: Inject,
                    args: [Renderer2]
                }] }, { type: i1.TuiDestroyService, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiDestroyService]
                }] }]; }, propDecorators: { tuiTouchable: [{
                type: Input
            }] } });

class TuiTouchableModule {
}
TuiTouchableModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTouchableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiTouchableModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTouchableModule, declarations: [TuiTouchableDirective], exports: [TuiTouchableDirective] });
TuiTouchableModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTouchableModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTouchableModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [TuiTouchableDirective],
                    exports: [TuiTouchableDirective],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TuiTouchableDirective, TuiTouchableModule };
//# sourceMappingURL=taiga-ui-addon-mobile-directives-touchable.js.map
