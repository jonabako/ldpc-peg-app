import * as i0 from '@angular/core';
import { InjectionToken, ElementRef, Renderer2, Component, ViewEncapsulation, ChangeDetectionStrategy, Directive, Inject, Self, Input, NgModule } from '@angular/core';
import * as i1 from '@taiga-ui/cdk';
import { TuiDestroyService, TUI_TOUCH_SUPPORTED, TUI_IS_IOS, tuiTypedFromEvent, tuiPx, tuiIsPresent, ALWAYS_FALSE_HANDLER, ALWAYS_TRUE_HANDLER, TuiDirectiveStylesService } from '@taiga-ui/cdk';
import * as i2 from 'rxjs';
import { EMPTY, race, timer } from 'rxjs';
import { map, filter, takeUntil, mergeMap, take, tap, switchMap } from 'rxjs/operators';

const RIPPLE_ON = 'tuiRippleOn';
const RIPPLE_OFF = 'tuiRippleOff';
/**
 * Stream of ripple elements to add
 */
const TUI_RIPPLE_START = new InjectionToken('[TUI_RIPPLE_START]');
/**
 * Stream of ripple elements to remove
 */
const TUI_RIPPLE_END = new InjectionToken('[TUI_RIPPLE_END]');
const TUI_RIPPLE_PROVIDERS = [
    TuiDestroyService,
    {
        provide: TUI_RIPPLE_START,
        deps: [TUI_TOUCH_SUPPORTED, TUI_IS_IOS, ElementRef, Renderer2],
        useFactory: (touchSupported, isIOS, { nativeElement }, renderer) => isIOS || !touchSupported
            ? EMPTY
            : tuiTypedFromEvent(nativeElement, 'touchstart').pipe(map(({ touches }) => {
                const { clientX, clientY } = touches[touches.length - 1];
                const { width, height, top, left } = nativeElement.getBoundingClientRect();
                const radius = Math.sqrt(width * width + height * height);
                const dimension = radius * 2;
                const x = clientX - left - radius;
                const y = clientY - top - radius;
                const ripple = renderer.createElement('div');
                renderer.addClass(ripple, 'tui-ripple');
                renderer.setAttribute(ripple, 'style', `width: ${tuiPx(dimension)}; height: ${tuiPx(dimension)}; left: ${tuiPx(x)}; top: ${tuiPx(y)}; animation-name: ${RIPPLE_ON};`);
                return ripple;
            })),
    },
    {
        provide: TUI_RIPPLE_END,
        deps: [TUI_TOUCH_SUPPORTED, TUI_IS_IOS, ElementRef, TuiDestroyService],
        useFactory: (touchSupported, isIOS, { nativeElement }, destroy$) => isIOS || !touchSupported
            ? EMPTY
            : tuiTypedFromEvent(nativeElement, 'animationend').pipe(filter(({ animationName }) => animationName === RIPPLE_OFF), map(({ target }) => target), filter(tuiIsPresent), takeUntil(destroy$)),
    },
];

class TuiRippleStylesComponent {
}
TuiRippleStylesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiRippleStylesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
TuiRippleStylesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiRippleStylesComponent, selector: "ng-component", host: { classAttribute: "tui-ripple-styles" }, ngImport: i0, template: '', isInline: true, styles: ["@keyframes tuiRippleOn{0%{transform:scale(0);opacity:.12}to{transform:none;opacity:.12}}@keyframes tuiRippleOff{0%{transform:none;opacity:.12}to{transform:none;opacity:0}}*[tuiRipple]{position:relative;overflow:hidden}.tui-ripple{position:absolute;z-index:100;border-radius:100%;background:currentColor;transform:scale(0);animation-duration:.45s;animation-fill-mode:forwards;pointer-events:none}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiRippleStylesComponent, decorators: [{
            type: Component,
            args: [{
                    host: {
                        class: 'tui-ripple-styles',
                    },
                    template: '',
                    styleUrls: ['./ripple.style.less'],
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }] });

const TOUCH_MOVE_DELAY = 100;
class TuiRippleDirective {
    constructor({ nativeElement }, directiveStyles, renderer, destroy$, start$, end$) {
        directiveStyles.addComponent(TuiRippleStylesComponent);
        const touchEnd$ = tuiTypedFromEvent(nativeElement, 'touchend');
        const touchMove$ = tuiTypedFromEvent(nativeElement, 'touchmove');
        end$.subscribe(element => {
            renderer.removeChild(nativeElement, element);
        });
        start$
            .pipe(mergeMap(ripple => {
            const animationEndOn$ = tuiTypedFromEvent(ripple, 'animationend');
            return race(timer(TOUCH_MOVE_DELAY).pipe(map(ALWAYS_FALSE_HANDLER)), touchEnd$.pipe(map(ALWAYS_TRUE_HANDLER))).pipe(take(1), 
            // eslint-disable-next-line rxjs/no-unsafe-takeuntil
            takeUntil(touchMove$), tap(() => {
                renderer.setStyle(ripple, 'background', this.tuiRipple || null);
                renderer.appendChild(nativeElement, ripple);
            }), switchMap(isTap => isTap
                ? animationEndOn$
                : race(touchEnd$.pipe(switchMap(() => animationEndOn$)), animationEndOn$.pipe(switchMap(() => touchEnd$)))), map(() => ripple));
        }), takeUntil(destroy$))
            .subscribe(element => {
            renderer.setStyle(element, 'animationName', RIPPLE_OFF);
        });
    }
}
TuiRippleDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiRippleDirective, deps: [{ token: ElementRef }, { token: TuiDirectiveStylesService }, { token: Renderer2 }, { token: TuiDestroyService, self: true }, { token: TUI_RIPPLE_START }, { token: TUI_RIPPLE_END }], target: i0.ɵɵFactoryTarget.Directive });
TuiRippleDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiRippleDirective, selector: "[tuiRipple]", inputs: { tuiRipple: "tuiRipple" }, providers: TUI_RIPPLE_PROVIDERS, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiRippleDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiRipple]',
                    providers: TUI_RIPPLE_PROVIDERS,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: i1.TuiDirectiveStylesService, decorators: [{
                    type: Inject,
                    args: [TuiDirectiveStylesService]
                }] }, { type: i0.Renderer2, decorators: [{
                    type: Inject,
                    args: [Renderer2]
                }] }, { type: i1.TuiDestroyService, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiDestroyService]
                }] }, { type: i2.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_RIPPLE_START]
                }] }, { type: i2.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_RIPPLE_END]
                }] }]; }, propDecorators: { tuiRipple: [{
                type: Input
            }] } });

class TuiRippleModule {
}
TuiRippleModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiRippleModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiRippleModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiRippleModule, declarations: [TuiRippleDirective, TuiRippleStylesComponent], exports: [TuiRippleDirective] });
TuiRippleModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiRippleModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiRippleModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [TuiRippleDirective, TuiRippleStylesComponent],
                    exports: [TuiRippleDirective],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { RIPPLE_OFF, RIPPLE_ON, TUI_RIPPLE_END, TUI_RIPPLE_PROVIDERS, TUI_RIPPLE_START, TuiRippleDirective, TuiRippleModule };
//# sourceMappingURL=taiga-ui-addon-mobile-directives-ripple.js.map
