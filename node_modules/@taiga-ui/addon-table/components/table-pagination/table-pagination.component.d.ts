import { EventEmitter } from '@angular/core';
import { TuiCommonIcons, TuiSpinIcons } from '@taiga-ui/core';
import { Observable } from 'rxjs';
import { TuiTablePaginationOptions } from './table-pagination.options';
import * as i0 from "@angular/core";
export interface TuiTablePagination {
    readonly page: number;
    readonly size: number;
}
export declare class TuiTablePaginationComponent {
    readonly icons: TuiSpinIcons;
    readonly spinTexts$: Observable<[string, string]>;
    readonly texts$: Observable<Record<'linesPerPage' | 'of' | 'pages', string>>;
    readonly options: TuiTablePaginationOptions;
    readonly commonIcons: TuiCommonIcons;
    items: readonly number[];
    total: number;
    page: number;
    size: number;
    /**
     * TODO: Remove in 4.0
     * @deprecated use paginationChange
     */
    readonly pageChange: EventEmitter<number>;
    /**
     * TODO: Remove in 4.0
     * @deprecated use paginationChange
     */
    readonly sizeChange: EventEmitter<number>;
    readonly paginationChange: EventEmitter<TuiTablePagination>;
    open: boolean;
    constructor(icons: TuiSpinIcons, spinTexts$: Observable<[string, string]>, texts$: Observable<Record<'linesPerPage' | 'of' | 'pages', string>>, options: TuiTablePaginationOptions, commonIcons: TuiCommonIcons);
    get pages(): number;
    get start(): number;
    get end(): number;
    get leftDisabled(): boolean;
    get rightDisabled(): boolean;
    get pagination(): TuiTablePagination;
    onItem(size: number): void;
    back(): void;
    forth(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<TuiTablePaginationComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TuiTablePaginationComponent, "tui-table-pagination", never, { "items": "items"; "total": "total"; "page": "page"; "size": "size"; }, { "pageChange": "pageChange"; "sizeChange": "sizeChange"; "paginationChange": "paginationChange"; }, never, never>;
}
