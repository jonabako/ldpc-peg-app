import { EventEmitter, QueryList } from '@angular/core';
import { TuiArrowOptions } from '@taiga-ui/kit';
import { PolymorpheusContent } from '@tinkoff/ng-polymorpheus';
import { TuiRowDirective } from '../directives/row.directive';
import { TuiTableDirective } from '../directives/table.directive';
import { TuiTableSortPipe } from '../pipes/table-sort.pipe';
import { TuiTableOptions } from '../table.options';
import { TuiTrComponent } from '../tr/tr.component';
import * as i0 from "@angular/core";
export declare class TuiTbodyComponent<T extends Partial<Record<keyof T, any>>> {
    private readonly pipe;
    private readonly options;
    readonly arrowOptions: TuiArrowOptions;
    readonly table: TuiTableDirective<T>;
    data: readonly T[];
    heading: PolymorpheusContent;
    open: boolean;
    readonly openChange: EventEmitter<boolean>;
    readonly row?: TuiRowDirective<T>;
    readonly rows: QueryList<TuiTrComponent<T>>;
    constructor(pipe: TuiTableSortPipe<T>, options: TuiTableOptions, arrowOptions: TuiArrowOptions, table: TuiTableDirective<T>);
    get sorted(): readonly T[];
    readonly toContext: ($implicit: T, index: number) => {
        $implicit: T;
        index: number;
    };
    onClick(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<TuiTbodyComponent<any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TuiTbodyComponent<any>, "tbody[tuiTbody]", never, { "data": "data"; "heading": "heading"; "open": "open"; }, { "openChange": "openChange"; }, ["row", "rows"], ["*"]>;
}
