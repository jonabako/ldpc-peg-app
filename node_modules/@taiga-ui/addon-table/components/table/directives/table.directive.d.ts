import { AfterViewInit, ChangeDetectorRef, EventEmitter } from '@angular/core';
import { TuiComparator } from '@taiga-ui/addon-table/types';
import { AbstractTuiController } from '@taiga-ui/cdk';
import { TuiBrightness } from '@taiga-ui/core';
import { Observable } from 'rxjs';
import { TuiTableOptions } from '../table.options';
import * as i0 from "@angular/core";
export declare class TuiTableDirective<T extends Partial<Record<keyof T, any>>> extends AbstractTuiController implements AfterViewInit {
    readonly entries$: Observable<IntersectionObserverEntry[]>;
    readonly mode$: Observable<TuiBrightness | null>;
    readonly stuck$: Observable<boolean>;
    private readonly options;
    private readonly cdr;
    columns: ReadonlyArray<string | keyof T>;
    size: "m" | "l" | "s";
    direction: 1 | -1;
    readonly directionChange: EventEmitter<1 | -1>;
    readonly sorterChange: EventEmitter<TuiComparator<T> | null>;
    constructor(entries$: Observable<IntersectionObserverEntry[]>, mode$: Observable<TuiBrightness | null>, stuck$: Observable<boolean>, options: TuiTableOptions, cdr: ChangeDetectorRef);
    sorter: TuiComparator<T>;
    updateSorterAndDirection(sorter: TuiComparator<T> | null): void;
    ngAfterViewInit(): void;
    updateSorter(sorter: TuiComparator<T> | null): void;
    private updateDirection;
    static ɵfac: i0.ɵɵFactoryDeclaration<TuiTableDirective<any>, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<TuiTableDirective<any>, "table[tuiTable]", never, { "columns": "columns"; "size": "size"; "direction": "direction"; "sorter": "sorter"; }, { "directionChange": "directionChange"; "sorterChange": "sorterChange"; }, never>;
}
