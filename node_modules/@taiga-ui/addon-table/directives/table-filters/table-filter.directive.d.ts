import { OnDestroy, OnInit } from '@angular/core';
import { NgControl } from '@angular/forms';
import { TuiHeadDirective } from '@taiga-ui/addon-table/components';
import { TuiValuesOf } from '@taiga-ui/cdk';
import { AbstractTuiTableFilter } from './abstract-table-filter';
import { TuiTableFilter } from './table-filter';
import { TuiTableFiltersDirective } from './table-filters.directive';
import * as i0 from "@angular/core";
export declare class TuiTableFilterDirective<T> implements OnInit, OnDestroy, TuiTableFilter<T> {
    private readonly head;
    private readonly delegate;
    private readonly control;
    readonly filters: TuiTableFiltersDirective<T>;
    tuiTableFilter?: keyof T;
    readonly refresh$: import("rxjs").Observable<any>;
    constructor(head: TuiHeadDirective<T> | null, delegate: AbstractTuiTableFilter<TuiValuesOf<T>, any>, control: NgControl, filters: TuiTableFiltersDirective<T>);
    ngOnInit(): void;
    ngOnDestroy(): void;
    filter(item: T): boolean;
    private get key();
    static ɵfac: i0.ɵɵFactoryDeclaration<TuiTableFilterDirective<any>, [{ optional: true; }, null, null, null]>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<TuiTableFilterDirective<any>, "[tuiTableFilter]", never, { "tuiTableFilter": "tuiTableFilter"; }, {}, never>;
}
