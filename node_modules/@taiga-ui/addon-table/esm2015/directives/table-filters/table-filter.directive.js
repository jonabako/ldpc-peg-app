import { Directive, Inject, Input, Optional } from '@angular/core';
import { NgControl } from '@angular/forms';
import { TuiHeadDirective } from '@taiga-ui/addon-table/components';
import { defer, EMPTY, merge } from 'rxjs';
import { distinctUntilChanged } from 'rxjs/operators';
import { AbstractTuiTableFilter } from './abstract-table-filter';
import { TuiTableFiltersDirective } from './table-filters.directive';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/addon-table/components";
import * as i2 from "./abstract-table-filter";
import * as i3 from "@angular/forms";
import * as i4 from "./table-filters.directive";
export class TuiTableFilterDirective {
    constructor(head, delegate, control, filters) {
        this.head = head;
        this.delegate = delegate;
        this.control = control;
        this.filters = filters;
        this.refresh$ = defer(() => {
            var _a;
            return merge(this.control.valueChanges || EMPTY, ((_a = this.control.statusChanges) === null || _a === void 0 ? void 0 : _a.pipe(distinctUntilChanged())) || EMPTY);
        });
    }
    ngOnInit() {
        this.filters.register(this);
    }
    ngOnDestroy() {
        this.filters.unregister(this);
    }
    filter(item) {
        const { disabled, value } = this.control;
        return (!!disabled ||
            !this.key ||
            this.delegate.filter(item[this.key], value));
    }
    get key() {
        var _a;
        return this.tuiTableFilter || ((_a = this.head) === null || _a === void 0 ? void 0 : _a.tuiHead);
    }
}
TuiTableFilterDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTableFilterDirective, deps: [{ token: TuiHeadDirective, optional: true }, { token: AbstractTuiTableFilter }, { token: NgControl }, { token: TuiTableFiltersDirective }], target: i0.ɵɵFactoryTarget.Directive });
TuiTableFilterDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiTableFilterDirective, selector: "[tuiTableFilter]", inputs: { tuiTableFilter: "tuiTableFilter" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTableFilterDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiTableFilter]',
                }]
        }], ctorParameters: function () { return [{ type: i1.TuiHeadDirective, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TuiHeadDirective]
                }] }, { type: i2.AbstractTuiTableFilter, decorators: [{
                    type: Inject,
                    args: [AbstractTuiTableFilter]
                }] }, { type: i3.NgControl, decorators: [{
                    type: Inject,
                    args: [NgControl]
                }] }, { type: i4.TuiTableFiltersDirective, decorators: [{
                    type: Inject,
                    args: [TuiTableFiltersDirective]
                }] }]; }, propDecorators: { tuiTableFilter: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUtZmlsdGVyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FkZG9uLXRhYmxlL2RpcmVjdGl2ZXMvdGFibGUtZmlsdGVycy90YWJsZS1maWx0ZXIuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBcUIsUUFBUSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3BGLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUN6QyxPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSxrQ0FBa0MsQ0FBQztBQUVsRSxPQUFPLEVBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDekMsT0FBTyxFQUFDLG9CQUFvQixFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFFcEQsT0FBTyxFQUFDLHNCQUFzQixFQUFDLE1BQU0seUJBQXlCLENBQUM7QUFFL0QsT0FBTyxFQUFDLHdCQUF3QixFQUFDLE1BQU0sMkJBQTJCLENBQUM7Ozs7OztBQUtuRSxNQUFNLE9BQU8sdUJBQXVCO0lBV2hDLFlBR3FCLElBQWdDLEVBRWhDLFFBQXFELEVBQ2xDLE9BQWtCLEVBQ1gsT0FBb0M7UUFKOUQsU0FBSSxHQUFKLElBQUksQ0FBNEI7UUFFaEMsYUFBUSxHQUFSLFFBQVEsQ0FBNkM7UUFDbEMsWUFBTyxHQUFQLE9BQU8sQ0FBVztRQUNYLFlBQU8sR0FBUCxPQUFPLENBQTZCO1FBZDFFLGFBQVEsR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFOztZQUMzQixPQUFBLEtBQUssQ0FDRCxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksSUFBSSxLQUFLLEVBQ2xDLENBQUEsTUFBQSxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsMENBQUUsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUMsS0FBSSxLQUFLLENBQ3BFLENBQUE7U0FBQSxDQUNKLENBQUM7SUFVQyxDQUFDO0lBRUosUUFBUTtRQUNKLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFRCxXQUFXO1FBQ1AsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVELE1BQU0sQ0FBQyxJQUFPO1FBQ1YsTUFBTSxFQUFDLFFBQVEsRUFBRSxLQUFLLEVBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBRXZDLE9BQU8sQ0FDSCxDQUFDLENBQUMsUUFBUTtZQUNWLENBQUMsSUFBSSxDQUFDLEdBQUc7WUFDVCxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQWMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUN6RCxDQUFDO0lBQ04sQ0FBQztJQUVELElBQVksR0FBRzs7UUFDWCxPQUFPLElBQUksQ0FBQyxjQUFjLEtBQUksTUFBQSxJQUFJLENBQUMsSUFBSSwwQ0FBRSxPQUFPLENBQUEsQ0FBQztJQUNyRCxDQUFDOztxSEF6Q1EsdUJBQXVCLGtCQWFwQixnQkFBZ0IsNkJBRWhCLHNCQUFzQixhQUV0QixTQUFTLGFBQ1Qsd0JBQXdCO3lHQWxCM0IsdUJBQXVCOzRGQUF2Qix1QkFBdUI7a0JBSG5DLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLGtCQUFrQjtpQkFDL0I7OzBCQWFRLFFBQVE7OzBCQUNSLE1BQU07MkJBQUMsZ0JBQWdCOzswQkFFdkIsTUFBTTsyQkFBQyxzQkFBc0I7OzBCQUU3QixNQUFNOzJCQUFDLFNBQVM7OzBCQUNoQixNQUFNOzJCQUFDLHdCQUF3Qjs0Q0FoQnBDLGNBQWM7c0JBRGIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGlyZWN0aXZlLCBJbmplY3QsIElucHV0LCBPbkRlc3Ryb3ksIE9uSW5pdCwgT3B0aW9uYWx9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtOZ0NvbnRyb2x9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7VHVpSGVhZERpcmVjdGl2ZX0gZnJvbSAnQHRhaWdhLXVpL2FkZG9uLXRhYmxlL2NvbXBvbmVudHMnO1xuaW1wb3J0IHtUdWlWYWx1ZXNPZn0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge2RlZmVyLCBFTVBUWSwgbWVyZ2V9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtkaXN0aW5jdFVudGlsQ2hhbmdlZH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQge0Fic3RyYWN0VHVpVGFibGVGaWx0ZXJ9IGZyb20gJy4vYWJzdHJhY3QtdGFibGUtZmlsdGVyJztcbmltcG9ydCB7VHVpVGFibGVGaWx0ZXJ9IGZyb20gJy4vdGFibGUtZmlsdGVyJztcbmltcG9ydCB7VHVpVGFibGVGaWx0ZXJzRGlyZWN0aXZlfSBmcm9tICcuL3RhYmxlLWZpbHRlcnMuZGlyZWN0aXZlJztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbdHVpVGFibGVGaWx0ZXJdJyxcbn0pXG5leHBvcnQgY2xhc3MgVHVpVGFibGVGaWx0ZXJEaXJlY3RpdmU8VD4gaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSwgVHVpVGFibGVGaWx0ZXI8VD4ge1xuICAgIEBJbnB1dCgpXG4gICAgdHVpVGFibGVGaWx0ZXI/OiBrZXlvZiBUO1xuXG4gICAgcmVhZG9ubHkgcmVmcmVzaCQgPSBkZWZlcigoKSA9PlxuICAgICAgICBtZXJnZShcbiAgICAgICAgICAgIHRoaXMuY29udHJvbC52YWx1ZUNoYW5nZXMgfHwgRU1QVFksXG4gICAgICAgICAgICB0aGlzLmNvbnRyb2wuc3RhdHVzQ2hhbmdlcz8ucGlwZShkaXN0aW5jdFVudGlsQ2hhbmdlZCgpKSB8fCBFTVBUWSxcbiAgICAgICAgKSxcbiAgICApO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBPcHRpb25hbCgpXG4gICAgICAgIEBJbmplY3QoVHVpSGVhZERpcmVjdGl2ZSlcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBoZWFkOiBUdWlIZWFkRGlyZWN0aXZlPFQ+IHwgbnVsbCxcbiAgICAgICAgQEluamVjdChBYnN0cmFjdFR1aVRhYmxlRmlsdGVyKVxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGRlbGVnYXRlOiBBYnN0cmFjdFR1aVRhYmxlRmlsdGVyPFR1aVZhbHVlc09mPFQ+LCBhbnk+LFxuICAgICAgICBASW5qZWN0KE5nQ29udHJvbCkgcHJpdmF0ZSByZWFkb25seSBjb250cm9sOiBOZ0NvbnRyb2wsXG4gICAgICAgIEBJbmplY3QoVHVpVGFibGVGaWx0ZXJzRGlyZWN0aXZlKSByZWFkb25seSBmaWx0ZXJzOiBUdWlUYWJsZUZpbHRlcnNEaXJlY3RpdmU8VD4sXG4gICAgKSB7fVxuXG4gICAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZmlsdGVycy5yZWdpc3Rlcih0aGlzKTtcbiAgICB9XG5cbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5maWx0ZXJzLnVucmVnaXN0ZXIodGhpcyk7XG4gICAgfVxuXG4gICAgZmlsdGVyKGl0ZW06IFQpOiBib29sZWFuIHtcbiAgICAgICAgY29uc3Qge2Rpc2FibGVkLCB2YWx1ZX0gPSB0aGlzLmNvbnRyb2w7XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICEhZGlzYWJsZWQgfHxcbiAgICAgICAgICAgICF0aGlzLmtleSB8fFxuICAgICAgICAgICAgdGhpcy5kZWxlZ2F0ZS5maWx0ZXIoaXRlbVt0aGlzLmtleSBhcyBrZXlvZiBUXSwgdmFsdWUpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXQga2V5KCk6IHN0cmluZyB8IGtleW9mIFQgfCB1bmRlZmluZWQge1xuICAgICAgICByZXR1cm4gdGhpcy50dWlUYWJsZUZpbHRlciB8fCB0aGlzLmhlYWQ/LnR1aUhlYWQ7XG4gICAgfVxufVxuIl19