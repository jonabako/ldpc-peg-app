import { Directive } from '@angular/core';
import { identity, merge, ReplaySubject } from 'rxjs';
import { map, startWith, switchMap } from 'rxjs/operators';
import * as i0 from "@angular/core";
export class TuiTableFiltersDirective {
    constructor() {
        this.refresh$ = new ReplaySubject(1);
        this.filters = [];
    }
    register(filter) {
        this.filters = this.filters.concat(filter);
        this.update();
    }
    unregister(filter) {
        this.filters = this.filters.filter(item => item !== filter);
        this.update();
    }
    filter(items) {
        return this.refresh$.pipe(switchMap(identity), startWith(null), map(() => items.filter(item => this.check(item))));
    }
    check(item) {
        return this.filters.every(filter => filter.filter(item));
    }
    update() {
        this.refresh$.next(merge(...this.filters.map(({ refresh$ }) => refresh$)));
    }
}
TuiTableFiltersDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTableFiltersDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
TuiTableFiltersDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiTableFiltersDirective, selector: "[tuiTableFilters]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTableFiltersDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiTableFilters]',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUtZmlsdGVycy5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hZGRvbi10YWJsZS9kaXJlY3RpdmVzL3RhYmxlLWZpbHRlcnMvdGFibGUtZmlsdGVycy5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN4QyxPQUFPLEVBQUMsUUFBUSxFQUFFLEtBQUssRUFBYyxhQUFhLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDaEUsT0FBTyxFQUFDLEdBQUcsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7O0FBT3pELE1BQU0sT0FBTyx3QkFBd0I7SUFIckM7UUFJcUIsYUFBUSxHQUFHLElBQUksYUFBYSxDQUFzQixDQUFDLENBQUMsQ0FBQztRQUU5RCxZQUFPLEdBQXFDLEVBQUUsQ0FBQztLQTJCMUQ7SUF6QkcsUUFBUSxDQUFDLE1BQXlCO1FBQzlCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDM0MsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ2xCLENBQUM7SUFFRCxVQUFVLENBQUMsTUFBeUI7UUFDaEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksS0FBSyxNQUFNLENBQUMsQ0FBQztRQUM1RCxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDbEIsQ0FBQztJQUVELE1BQU0sQ0FBQyxLQUFtQjtRQUN0QixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUNyQixTQUFTLENBQUMsUUFBUSxDQUFDLEVBQ25CLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFDZixHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUNwRCxDQUFDO0lBQ04sQ0FBQztJQUVPLEtBQUssQ0FBQyxJQUFPO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDN0QsQ0FBQztJQUVPLE1BQU07UUFDVixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUMsUUFBUSxFQUFDLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM3RSxDQUFDOztzSEE3QlEsd0JBQXdCOzBHQUF4Qix3QkFBd0I7NEZBQXhCLHdCQUF3QjtrQkFIcEMsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsbUJBQW1CO2lCQUNoQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGlyZWN0aXZlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7aWRlbnRpdHksIG1lcmdlLCBPYnNlcnZhYmxlLCBSZXBsYXlTdWJqZWN0fSBmcm9tICdyeGpzJztcbmltcG9ydCB7bWFwLCBzdGFydFdpdGgsIHN3aXRjaE1hcH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQge1R1aVRhYmxlRmlsdGVyfSBmcm9tICcuL3RhYmxlLWZpbHRlcic7XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW3R1aVRhYmxlRmlsdGVyc10nLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlUYWJsZUZpbHRlcnNEaXJlY3RpdmU8VD4ge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgcmVmcmVzaCQgPSBuZXcgUmVwbGF5U3ViamVjdDxPYnNlcnZhYmxlPHVua25vd24+PigxKTtcblxuICAgIHByaXZhdGUgZmlsdGVyczogUmVhZG9ubHlBcnJheTxUdWlUYWJsZUZpbHRlcjxUPj4gPSBbXTtcblxuICAgIHJlZ2lzdGVyKGZpbHRlcjogVHVpVGFibGVGaWx0ZXI8VD4pOiB2b2lkIHtcbiAgICAgICAgdGhpcy5maWx0ZXJzID0gdGhpcy5maWx0ZXJzLmNvbmNhdChmaWx0ZXIpO1xuICAgICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgIH1cblxuICAgIHVucmVnaXN0ZXIoZmlsdGVyOiBUdWlUYWJsZUZpbHRlcjxUPik6IHZvaWQge1xuICAgICAgICB0aGlzLmZpbHRlcnMgPSB0aGlzLmZpbHRlcnMuZmlsdGVyKGl0ZW0gPT4gaXRlbSAhPT0gZmlsdGVyKTtcbiAgICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICB9XG5cbiAgICBmaWx0ZXIoaXRlbXM6IHJlYWRvbmx5IFRbXSk6IE9ic2VydmFibGU8cmVhZG9ubHkgVFtdPiB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlZnJlc2gkLnBpcGUoXG4gICAgICAgICAgICBzd2l0Y2hNYXAoaWRlbnRpdHkpLFxuICAgICAgICAgICAgc3RhcnRXaXRoKG51bGwpLFxuICAgICAgICAgICAgbWFwKCgpID0+IGl0ZW1zLmZpbHRlcihpdGVtID0+IHRoaXMuY2hlY2soaXRlbSkpKSxcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNoZWNrKGl0ZW06IFQpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmlsdGVycy5ldmVyeShmaWx0ZXIgPT4gZmlsdGVyLmZpbHRlcihpdGVtKSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB1cGRhdGUoKTogdm9pZCB7XG4gICAgICAgIHRoaXMucmVmcmVzaCQubmV4dChtZXJnZSguLi50aGlzLmZpbHRlcnMubWFwKCh7cmVmcmVzaCR9KSA9PiByZWZyZXNoJCkpKTtcbiAgICB9XG59XG4iXX0=