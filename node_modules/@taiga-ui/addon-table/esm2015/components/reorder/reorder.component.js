import { ChangeDetectionStrategy, Component, EventEmitter, HostListener, Inject, Input, Output, } from '@angular/core';
import { TUI_TABLE_SHOW_HIDE_MESSAGE } from '@taiga-ui/addon-table/tokens';
import { TUI_REORDER_OPTIONS } from './reorder.options';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/kit";
import * as i2 from "@taiga-ui/core";
import * as i3 from "@angular/common";
import * as i4 from "rxjs";
export class TuiReorderComponent {
    constructor(options, showHideText$) {
        this.options = options;
        this.showHideText$ = showHideText$;
        this.dragging = false;
        this.enabled = [];
        this.itemsChange = new EventEmitter();
        this.enabledChange = new EventEmitter();
        this.order = new Map();
        this.unsortedItems = [];
    }
    set items(items) {
        if (items.length !== this.unsortedItems.length ||
            !items.every(item => this.unsortedItems.includes(item))) {
            this.unsortedItems = items;
        }
    }
    noop() { }
    onDrag() {
        this.dragging = true;
    }
    onDrop() {
        if (!this.dragging) {
            return;
        }
        this.dragging = false;
        this.updateItems();
    }
    isEnabled(item) {
        return this.enabled.includes(item);
    }
    getIcon(item) {
        return this.isEnabled(item) ? this.options.icons.hide : this.options.icons.show;
    }
    toggle(toggled) {
        this.enabled = this.isEnabled(toggled)
            ? this.enabled.filter(item => item !== toggled)
            : this.enabled.concat(toggled);
        this.updateEnabled();
    }
    move(index, direction) {
        var _a;
        const oldIndex = (_a = this.order.get(index)) !== null && _a !== void 0 ? _a : index;
        if ((!oldIndex && direction < 0) ||
            (oldIndex === this.unsortedItems.length - 1 && direction > 0)) {
            return;
        }
        const newIndex = oldIndex + direction;
        const oldItem = Array.from(this.order.values()).findIndex(item => item === newIndex);
        this.order.set(index, newIndex);
        this.order.set(oldItem, oldIndex);
        this.order = new Map(this.order);
        this.updateItems();
    }
    getSortedItems() {
        const items = new Array(this.unsortedItems.length);
        this.unsortedItems.forEach((item, index) => {
            var _a;
            items[(_a = this.order.get(index)) !== null && _a !== void 0 ? _a : index] = item;
        });
        return items;
    }
    updateItems() {
        this.itemsChange.emit(this.getSortedItems());
        this.updateEnabled();
    }
    updateEnabled() {
        const enabled = this.getSortedItems().filter(item => this.isEnabled(item));
        this.enabled = enabled;
        this.enabledChange.emit(enabled);
    }
}
TuiReorderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiReorderComponent, deps: [{ token: TUI_REORDER_OPTIONS }, { token: TUI_TABLE_SHOW_HIDE_MESSAGE }], target: i0.ɵɵFactoryTarget.Component });
TuiReorderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiReorderComponent, selector: "tui-reorder", inputs: { items: "items", enabled: "enabled" }, outputs: { itemsChange: "itemsChange", enabledChange: "enabledChange" }, host: { listeners: { "focusout.stop": "noop()", "pointerdown.silent": "onDrag()", "document:pointerup.silent": "onDrop()" } }, ngImport: i0, template: "<tui-tiles\n    class=\"t-wrapper\"\n    [(order)]=\"order\"\n>\n    <tui-tile\n        *ngFor=\"let item of unsortedItems; let index = index\"\n        [style.order]=\"order.get(index)\"\n    >\n        <div class=\"t-item\">\n            <div\n                tuiTileHandle\n                class=\"t-draggable\"\n            >\n                <tui-svg\n                    class=\"t-icon\"\n                    [src]=\"options.icons.drag\"\n                ></tui-svg>\n                {{ item }}\n            </div>\n            <button\n                appearance=\"icon\"\n                size=\"xs\"\n                tuiIconButton\n                type=\"button\"\n                class=\"t-button\"\n                [class.t-button_hidden]=\"!isEnabled(item)\"\n                [icon]=\"getIcon(item)\"\n                [title]=\"showHideText$ | async\"\n                (click)=\"toggle(item)\"\n                (keydown.arrowDown.prevent)=\"move(index, 1)\"\n                (keydown.arrowUp.prevent)=\"move(index, -1)\"\n            ></button>\n        </div>\n    </tui-tile>\n</tui-tiles>\n", styles: [":host{display:block;font:var(--tui-font-text-s);padding:.5rem 0;-webkit-user-select:none;-moz-user-select:none;user-select:none}.t-wrapper{grid-auto-rows:2rem}.t-draggable{cursor:ns-resize;flex:1 1 auto}.t-item{transition-property:background;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;display:flex;height:2rem;align-items:center;padding:0 .75rem;background:var(--tui-base-01)}.t-item:hover{background:var(--tui-base-02)}.t-item:hover .t-button{opacity:1}.t-icon{margin-right:.5rem;color:var(--tui-base-05)}.t-button{transition-property:opacity;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;margin-left:auto;opacity:0}.t-button_hidden,.t-button:focus{opacity:1}\n"], components: [{ type: i1.TuiTilesComponent, selector: "tui-tiles", inputs: ["debounce", "order"], outputs: ["orderChange"] }, { type: i1.TuiTileComponent, selector: "tui-tile", inputs: ["width", "height"] }, { type: i2.TuiSvgComponent, selector: "tui-svg", inputs: ["src"] }, { type: i2.TuiButtonComponent, selector: "button[tuiButton], button[tuiIconButton], a[tuiButton], a[tuiIconButton]", inputs: ["appearance", "disabled", "icon", "iconRight", "shape", "showLoader", "size"] }], directives: [{ type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1.TuiTileHandleDirective, selector: "[tuiTileHandle]" }], pipes: { "async": i3.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiReorderComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-reorder',
                    templateUrl: './reorder.template.html',
                    styleUrls: ['./reorder.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_REORDER_OPTIONS]
                }] }, { type: i4.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_TABLE_SHOW_HIDE_MESSAGE]
                }] }]; }, propDecorators: { items: [{
                type: Input
            }], enabled: [{
                type: Input
            }], itemsChange: [{
                type: Output
            }], enabledChange: [{
                type: Output
            }], noop: [{
                type: HostListener,
                args: ['focusout.stop']
            }], onDrag: [{
                type: HostListener,
                args: ['pointerdown.silent']
            }], onDrop: [{
                type: HostListener,
                args: ['document:pointerup.silent']
            }] } });
//# sourceMappingURL=data:application/json;base64,