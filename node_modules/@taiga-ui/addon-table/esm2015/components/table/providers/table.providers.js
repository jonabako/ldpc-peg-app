import { forwardRef, SkipSelf } from '@angular/core';
import { INTERSECTION_ROOT_MARGIN, INTERSECTION_THRESHOLD, IntersectionObserverService, } from '@ng-web-apis/intersection-observer';
import { MODE_PROVIDER, TUI_TEXTFIELD_APPEARANCE_DIRECTIVE, TUI_TEXTFIELD_LABEL_OUTSIDE, TUI_TEXTFIELD_SIZE, TuiAppearance, TuiTextfieldAppearanceDirective, } from '@taiga-ui/core';
import { TUI_INPUT_COUNT_OPTIONS } from '@taiga-ui/kit';
import { TuiTableDirective } from '../directives/table.directive';
import { TUI_STUCK_PROVIDER } from './stuck.provider';
export const TUI_TABLE_PROVIDERS = [
    {
        provide: INTERSECTION_ROOT_MARGIN,
        useValue: '10000px 10000px 10000px 0px',
    },
    {
        provide: INTERSECTION_THRESHOLD,
        useValue: [0, 1],
    },
    {
        provide: TUI_TEXTFIELD_APPEARANCE_DIRECTIVE,
        useFactory: () => {
            const directive = new TuiTextfieldAppearanceDirective();
            directive.appearance = TuiAppearance.Table;
            return directive;
        },
    },
    {
        provide: TUI_TEXTFIELD_LABEL_OUTSIDE,
        useValue: {
            labelOutside: true,
        },
    },
    {
        provide: TUI_INPUT_COUNT_OPTIONS,
        deps: [[new SkipSelf(), TUI_INPUT_COUNT_OPTIONS]],
        useFactory: (options) => (Object.assign(Object.assign({}, options), { hideButtons: true })),
    },
    {
        provide: TUI_TEXTFIELD_SIZE,
        useExisting: forwardRef(() => TuiTableDirective),
    },
    IntersectionObserverService,
    MODE_PROVIDER,
    TUI_STUCK_PROVIDER,
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUucHJvdmlkZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYWRkb24tdGFibGUvY29tcG9uZW50cy90YWJsZS9wcm92aWRlcnMvdGFibGUucHJvdmlkZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUUsUUFBUSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFDSCx3QkFBd0IsRUFDeEIsc0JBQXNCLEVBQ3RCLDJCQUEyQixHQUM5QixNQUFNLG9DQUFvQyxDQUFDO0FBQzVDLE9BQU8sRUFDSCxhQUFhLEVBQ2Isa0NBQWtDLEVBQ2xDLDJCQUEyQixFQUMzQixrQkFBa0IsRUFDbEIsYUFBYSxFQUNiLCtCQUErQixHQUNsQyxNQUFNLGdCQUFnQixDQUFDO0FBQ3hCLE9BQU8sRUFBQyx1QkFBdUIsRUFBdUIsTUFBTSxlQUFlLENBQUM7QUFFNUUsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sK0JBQStCLENBQUM7QUFDaEUsT0FBTyxFQUFDLGtCQUFrQixFQUFDLE1BQU0sa0JBQWtCLENBQUM7QUFFcEQsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQUc7SUFDL0I7UUFDSSxPQUFPLEVBQUUsd0JBQXdCO1FBQ2pDLFFBQVEsRUFBRSw2QkFBNkI7S0FDMUM7SUFDRDtRQUNJLE9BQU8sRUFBRSxzQkFBc0I7UUFDL0IsUUFBUSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNuQjtJQUNEO1FBQ0ksT0FBTyxFQUFFLGtDQUFrQztRQUMzQyxVQUFVLEVBQUUsR0FBb0MsRUFBRTtZQUM5QyxNQUFNLFNBQVMsR0FBRyxJQUFJLCtCQUErQixFQUFFLENBQUM7WUFFeEQsU0FBUyxDQUFDLFVBQVUsR0FBRyxhQUFhLENBQUMsS0FBSyxDQUFDO1lBRTNDLE9BQU8sU0FBUyxDQUFDO1FBQ3JCLENBQUM7S0FDSjtJQUNEO1FBQ0ksT0FBTyxFQUFFLDJCQUEyQjtRQUNwQyxRQUFRLEVBQUU7WUFDTixZQUFZLEVBQUUsSUFBSTtTQUNyQjtLQUNKO0lBQ0Q7UUFDSSxPQUFPLEVBQUUsdUJBQXVCO1FBQ2hDLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxRQUFRLEVBQUUsRUFBRSx1QkFBdUIsQ0FBQyxDQUFDO1FBQ2pELFVBQVUsRUFBRSxDQUFDLE9BQTZCLEVBQXdCLEVBQUUsQ0FBQyxpQ0FDOUQsT0FBTyxLQUNWLFdBQVcsRUFBRSxJQUFJLElBQ25CO0tBQ0w7SUFDRDtRQUNJLE9BQU8sRUFBRSxrQkFBa0I7UUFDM0IsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQztLQUNuRDtJQUNELDJCQUEyQjtJQUMzQixhQUFhO0lBQ2Isa0JBQWtCO0NBQ3JCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2ZvcndhcmRSZWYsIFNraXBTZWxmfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gICAgSU5URVJTRUNUSU9OX1JPT1RfTUFSR0lOLFxuICAgIElOVEVSU0VDVElPTl9USFJFU0hPTEQsXG4gICAgSW50ZXJzZWN0aW9uT2JzZXJ2ZXJTZXJ2aWNlLFxufSBmcm9tICdAbmctd2ViLWFwaXMvaW50ZXJzZWN0aW9uLW9ic2VydmVyJztcbmltcG9ydCB7XG4gICAgTU9ERV9QUk9WSURFUixcbiAgICBUVUlfVEVYVEZJRUxEX0FQUEVBUkFOQ0VfRElSRUNUSVZFLFxuICAgIFRVSV9URVhURklFTERfTEFCRUxfT1VUU0lERSxcbiAgICBUVUlfVEVYVEZJRUxEX1NJWkUsXG4gICAgVHVpQXBwZWFyYW5jZSxcbiAgICBUdWlUZXh0ZmllbGRBcHBlYXJhbmNlRGlyZWN0aXZlLFxufSBmcm9tICdAdGFpZ2EtdWkvY29yZSc7XG5pbXBvcnQge1RVSV9JTlBVVF9DT1VOVF9PUFRJT05TLCBUdWlJbnB1dENvdW50T3B0aW9uc30gZnJvbSAnQHRhaWdhLXVpL2tpdCc7XG5cbmltcG9ydCB7VHVpVGFibGVEaXJlY3RpdmV9IGZyb20gJy4uL2RpcmVjdGl2ZXMvdGFibGUuZGlyZWN0aXZlJztcbmltcG9ydCB7VFVJX1NUVUNLX1BST1ZJREVSfSBmcm9tICcuL3N0dWNrLnByb3ZpZGVyJztcblxuZXhwb3J0IGNvbnN0IFRVSV9UQUJMRV9QUk9WSURFUlMgPSBbXG4gICAge1xuICAgICAgICBwcm92aWRlOiBJTlRFUlNFQ1RJT05fUk9PVF9NQVJHSU4sXG4gICAgICAgIHVzZVZhbHVlOiAnMTAwMDBweCAxMDAwMHB4IDEwMDAwcHggMHB4JyxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgcHJvdmlkZTogSU5URVJTRUNUSU9OX1RIUkVTSE9MRCxcbiAgICAgICAgdXNlVmFsdWU6IFswLCAxXSxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgcHJvdmlkZTogVFVJX1RFWFRGSUVMRF9BUFBFQVJBTkNFX0RJUkVDVElWRSxcbiAgICAgICAgdXNlRmFjdG9yeTogKCk6IFR1aVRleHRmaWVsZEFwcGVhcmFuY2VEaXJlY3RpdmUgPT4ge1xuICAgICAgICAgICAgY29uc3QgZGlyZWN0aXZlID0gbmV3IFR1aVRleHRmaWVsZEFwcGVhcmFuY2VEaXJlY3RpdmUoKTtcblxuICAgICAgICAgICAgZGlyZWN0aXZlLmFwcGVhcmFuY2UgPSBUdWlBcHBlYXJhbmNlLlRhYmxlO1xuXG4gICAgICAgICAgICByZXR1cm4gZGlyZWN0aXZlO1xuICAgICAgICB9LFxuICAgIH0sXG4gICAge1xuICAgICAgICBwcm92aWRlOiBUVUlfVEVYVEZJRUxEX0xBQkVMX09VVFNJREUsXG4gICAgICAgIHVzZVZhbHVlOiB7XG4gICAgICAgICAgICBsYWJlbE91dHNpZGU6IHRydWUsXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICB7XG4gICAgICAgIHByb3ZpZGU6IFRVSV9JTlBVVF9DT1VOVF9PUFRJT05TLFxuICAgICAgICBkZXBzOiBbW25ldyBTa2lwU2VsZigpLCBUVUlfSU5QVVRfQ09VTlRfT1BUSU9OU11dLFxuICAgICAgICB1c2VGYWN0b3J5OiAob3B0aW9uczogVHVpSW5wdXRDb3VudE9wdGlvbnMpOiBUdWlJbnB1dENvdW50T3B0aW9ucyA9PiAoe1xuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIGhpZGVCdXR0b25zOiB0cnVlLFxuICAgICAgICB9KSxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgcHJvdmlkZTogVFVJX1RFWFRGSUVMRF9TSVpFLFxuICAgICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBUdWlUYWJsZURpcmVjdGl2ZSksXG4gICAgfSxcbiAgICBJbnRlcnNlY3Rpb25PYnNlcnZlclNlcnZpY2UsXG4gICAgTU9ERV9QUk9WSURFUixcbiAgICBUVUlfU1RVQ0tfUFJPVklERVIsXG5dO1xuIl19