import { __awaiter } from "tslib";
import { ChangeDetectionStrategy, Component, ContentChildren, forwardRef, Inject, } from '@angular/core';
import { EMPTY_QUERY, tuiQueryListChanges } from '@taiga-ui/cdk';
import { ReplaySubject } from 'rxjs';
import { map, switchMap } from 'rxjs/operators';
import { TuiCellDirective } from '../directives/cell.directive';
import { TuiTableDirective } from '../directives/table.directive';
import { TUI_TABLE_PROVIDER } from '../providers/table.provider';
import { TuiTbodyComponent } from '../tbody/tbody.component';
import * as i0 from "@angular/core";
import * as i1 from "../td/td.component";
import * as i2 from "@angular/common";
import * as i3 from "../directives/table.directive";
import * as i4 from "../tbody/tbody.component";
export class TuiTrComponent {
    constructor(table, body) {
        this.table = table;
        this.body = body;
        this.cells = EMPTY_QUERY;
        this.contentReady$ = new ReplaySubject(1);
        this.cells$ = this.contentReady$.pipe(switchMap(() => tuiQueryListChanges(this.cells)), map(cells => cells.reduce((record, item) => (Object.assign(Object.assign({}, record), { [item.tuiCell]: item })), {})));
        this.item$ = this.contentReady$.pipe(switchMap(() => tuiQueryListChanges(this.body.rows)), map(rows => 
        /**
         * TODO v4.0 replace `this.body.sorted` with `this.body.data` (don't forget to drop `sorted`-getter).
         */
        this.body.sorted[rows.findIndex(row => row === this)]));
    }
    ngAfterContentInit() {
        return __awaiter(this, void 0, void 0, function* () {
            yield Promise.resolve();
            this.contentReady$.next(true);
        });
    }
}
TuiTrComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTrComponent, deps: [{ token: forwardRef(() => TuiTableDirective) }, { token: forwardRef(() => TuiTbodyComponent) }], target: i0.ɵɵFactoryTarget.Component });
TuiTrComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiTrComponent, selector: "tr[tuiTr]", providers: [TUI_TABLE_PROVIDER], queries: [{ propertyName: "cells", predicate: i0.forwardRef(function () { return TuiCellDirective; }) }], ngImport: i0, template: "<ng-container *ngIf=\"cells$ | async as items\">\n    <ng-container\n        *ngFor=\"let key of table.columns\"\n        [ngTemplateOutlet]=\"items[key]?.template || plain\"\n    >\n        <ng-template #plain>\n            <td\n                *ngIf=\"item$ | async as item\"\n                tuiTd\n            >\n                {{ item[key] }}\n            </td>\n        </ng-template>\n    </ng-container>\n</ng-container>\n", components: [{ type: i1.TuiTdComponent, selector: "th[tuiTd], td[tuiTd]" }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], pipes: { "async": i2.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTrComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tr[tuiTr]',
                    templateUrl: './tr.template.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [TUI_TABLE_PROVIDER],
                }]
        }], ctorParameters: function () { return [{ type: i3.TuiTableDirective, decorators: [{
                    type: Inject,
                    args: [forwardRef(() => TuiTableDirective)]
                }] }, { type: i4.TuiTbodyComponent, decorators: [{
                    type: Inject,
                    args: [forwardRef(() => TuiTbodyComponent)]
                }] }]; }, propDecorators: { cells: [{
                type: ContentChildren,
                args: [forwardRef(() => TuiCellDirective)]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYWRkb24tdGFibGUvY29tcG9uZW50cy90YWJsZS90ci90ci5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hZGRvbi10YWJsZS9jb21wb25lbnRzL3RhYmxlL3RyL3RyLnRlbXBsYXRlLmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFFSCx1QkFBdUIsRUFDdkIsU0FBUyxFQUNULGVBQWUsRUFDZixVQUFVLEVBQ1YsTUFBTSxHQUVULE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBQyxXQUFXLEVBQUUsbUJBQW1CLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDL0QsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUNuQyxPQUFPLEVBQUMsR0FBRyxFQUFFLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBRTlDLE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLDhCQUE4QixDQUFDO0FBQzlELE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLCtCQUErQixDQUFDO0FBQ2hFLE9BQU8sRUFBQyxrQkFBa0IsRUFBQyxNQUFNLDZCQUE2QixDQUFDO0FBQy9ELE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLDBCQUEwQixDQUFDOzs7Ozs7QUFRM0QsTUFBTSxPQUFPLGNBQWM7SUFnQ3ZCLFlBRWEsS0FBMkIsRUFFbkIsSUFBMEI7UUFGbEMsVUFBSyxHQUFMLEtBQUssQ0FBc0I7UUFFbkIsU0FBSSxHQUFKLElBQUksQ0FBc0I7UUFoQzlCLFVBQUssR0FBZ0MsV0FBVyxDQUFDO1FBRWpELGtCQUFhLEdBQUcsSUFBSSxhQUFhLENBQVUsQ0FBQyxDQUFDLENBQUM7UUFFdEQsV0FBTSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUNyQyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQ2hELEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUNSLEtBQUssQ0FBQyxNQUFNLENBQ1IsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxpQ0FBSyxNQUFNLEtBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsSUFBSSxJQUFFLEVBQ3JELEVBQWdELENBQ25ELENBQ0osQ0FDSixDQUFDO1FBRU8sVUFBSyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUNwQyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUNwRCxHQUFHLENBQ0MsSUFBSSxDQUFDLEVBQUU7UUFDSDs7V0FFRztRQUNILElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssSUFBSSxDQUFDLENBR25ELENBQ1IsQ0FDSixDQUFDO0lBT0MsQ0FBQztJQUVFLGtCQUFrQjs7WUFDcEIsTUFBTSxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDeEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEMsQ0FBQztLQUFBOzs0R0ExQ1EsY0FBYyxrQkFpQ1gsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLGFBRW5DLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQztnR0FuQ3RDLGNBQWMsb0NBRlosQ0FBQyxrQkFBa0IsQ0FBQyxtRkFLRyxnQkFBZ0IsaUNDM0J0RCxpYkFlQTs0RkRTYSxjQUFjO2tCQU4xQixTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSxXQUFXO29CQUNyQixXQUFXLEVBQUUsb0JBQW9CO29CQUNqQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFDL0MsU0FBUyxFQUFFLENBQUMsa0JBQWtCLENBQUM7aUJBQ2xDOzswQkFrQ1EsTUFBTTsyQkFBQyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsaUJBQWlCLENBQUM7OzBCQUUxQyxNQUFNOzJCQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQzs0Q0EvQjlCLEtBQUs7c0JBRHJCLGVBQWU7dUJBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBBZnRlckNvbnRlbnRJbml0LFxuICAgIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICAgIENvbXBvbmVudCxcbiAgICBDb250ZW50Q2hpbGRyZW4sXG4gICAgZm9yd2FyZFJlZixcbiAgICBJbmplY3QsXG4gICAgUXVlcnlMaXN0LFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7RU1QVFlfUVVFUlksIHR1aVF1ZXJ5TGlzdENoYW5nZXN9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtSZXBsYXlTdWJqZWN0fSBmcm9tICdyeGpzJztcbmltcG9ydCB7bWFwLCBzd2l0Y2hNYXB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHtUdWlDZWxsRGlyZWN0aXZlfSBmcm9tICcuLi9kaXJlY3RpdmVzL2NlbGwuZGlyZWN0aXZlJztcbmltcG9ydCB7VHVpVGFibGVEaXJlY3RpdmV9IGZyb20gJy4uL2RpcmVjdGl2ZXMvdGFibGUuZGlyZWN0aXZlJztcbmltcG9ydCB7VFVJX1RBQkxFX1BST1ZJREVSfSBmcm9tICcuLi9wcm92aWRlcnMvdGFibGUucHJvdmlkZXInO1xuaW1wb3J0IHtUdWlUYm9keUNvbXBvbmVudH0gZnJvbSAnLi4vdGJvZHkvdGJvZHkuY29tcG9uZW50JztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICd0clt0dWlUcl0nLFxuICAgIHRlbXBsYXRlVXJsOiAnLi90ci50ZW1wbGF0ZS5odG1sJyxcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgICBwcm92aWRlcnM6IFtUVUlfVEFCTEVfUFJPVklERVJdLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlUckNvbXBvbmVudDxUIGV4dGVuZHMgUGFydGlhbDxSZWNvcmQ8a2V5b2YgVCwgYW55Pj4+XG4gICAgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0XG57XG4gICAgQENvbnRlbnRDaGlsZHJlbihmb3J3YXJkUmVmKCgpID0+IFR1aUNlbGxEaXJlY3RpdmUpKVxuICAgIHByaXZhdGUgcmVhZG9ubHkgY2VsbHM6IFF1ZXJ5TGlzdDxUdWlDZWxsRGlyZWN0aXZlPiA9IEVNUFRZX1FVRVJZO1xuXG4gICAgcHJpdmF0ZSByZWFkb25seSBjb250ZW50UmVhZHkkID0gbmV3IFJlcGxheVN1YmplY3Q8Ym9vbGVhbj4oMSk7XG5cbiAgICByZWFkb25seSBjZWxscyQgPSB0aGlzLmNvbnRlbnRSZWFkeSQucGlwZShcbiAgICAgICAgc3dpdGNoTWFwKCgpID0+IHR1aVF1ZXJ5TGlzdENoYW5nZXModGhpcy5jZWxscykpLFxuICAgICAgICBtYXAoY2VsbHMgPT5cbiAgICAgICAgICAgIGNlbGxzLnJlZHVjZShcbiAgICAgICAgICAgICAgICAocmVjb3JkLCBpdGVtKSA9PiAoey4uLnJlY29yZCwgW2l0ZW0udHVpQ2VsbF06IGl0ZW19KSxcbiAgICAgICAgICAgICAgICB7fSBhcyBSZWNvcmQ8c3RyaW5nIHwga2V5b2YgVCwgVHVpQ2VsbERpcmVjdGl2ZT4sXG4gICAgICAgICAgICApLFxuICAgICAgICApLFxuICAgICk7XG5cbiAgICByZWFkb25seSBpdGVtJCA9IHRoaXMuY29udGVudFJlYWR5JC5waXBlKFxuICAgICAgICBzd2l0Y2hNYXAoKCkgPT4gdHVpUXVlcnlMaXN0Q2hhbmdlcyh0aGlzLmJvZHkucm93cykpLFxuICAgICAgICBtYXAoXG4gICAgICAgICAgICByb3dzID0+XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogVE9ETyB2NC4wIHJlcGxhY2UgYHRoaXMuYm9keS5zb3J0ZWRgIHdpdGggYHRoaXMuYm9keS5kYXRhYCAoZG9uJ3QgZm9yZ2V0IHRvIGRyb3AgYHNvcnRlZGAtZ2V0dGVyKS5cbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICB0aGlzLmJvZHkuc29ydGVkW3Jvd3MuZmluZEluZGV4KHJvdyA9PiByb3cgPT09IHRoaXMpXSBhcyBSZWNvcmQ8XG4gICAgICAgICAgICAgICAgICAgIHN0cmluZyB8IGtleW9mIFQsXG4gICAgICAgICAgICAgICAgICAgIGFueVxuICAgICAgICAgICAgICAgID4sXG4gICAgICAgICksXG4gICAgKTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KGZvcndhcmRSZWYoKCkgPT4gVHVpVGFibGVEaXJlY3RpdmUpKVxuICAgICAgICByZWFkb25seSB0YWJsZTogVHVpVGFibGVEaXJlY3RpdmU8VD4sXG4gICAgICAgIEBJbmplY3QoZm9yd2FyZFJlZigoKSA9PiBUdWlUYm9keUNvbXBvbmVudCkpXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgYm9keTogVHVpVGJvZHlDb21wb25lbnQ8VD4sXG4gICAgKSB7fVxuXG4gICAgYXN5bmMgbmdBZnRlckNvbnRlbnRJbml0KCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBhd2FpdCBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgdGhpcy5jb250ZW50UmVhZHkkLm5leHQodHJ1ZSk7XG4gICAgfVxufVxuIiwiPG5nLWNvbnRhaW5lciAqbmdJZj1cImNlbGxzJCB8IGFzeW5jIGFzIGl0ZW1zXCI+XG4gICAgPG5nLWNvbnRhaW5lclxuICAgICAgICAqbmdGb3I9XCJsZXQga2V5IG9mIHRhYmxlLmNvbHVtbnNcIlxuICAgICAgICBbbmdUZW1wbGF0ZU91dGxldF09XCJpdGVtc1trZXldPy50ZW1wbGF0ZSB8fCBwbGFpblwiXG4gICAgPlxuICAgICAgICA8bmctdGVtcGxhdGUgI3BsYWluPlxuICAgICAgICAgICAgPHRkXG4gICAgICAgICAgICAgICAgKm5nSWY9XCJpdGVtJCB8IGFzeW5jIGFzIGl0ZW1cIlxuICAgICAgICAgICAgICAgIHR1aVRkXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAge3sgaXRlbVtrZXldIH19XG4gICAgICAgICAgICA8L3RkPlxuICAgICAgICA8L25nLXRlbXBsYXRlPlxuICAgIDwvbmctY29udGFpbmVyPlxuPC9uZy1jb250YWluZXI+XG4iXX0=