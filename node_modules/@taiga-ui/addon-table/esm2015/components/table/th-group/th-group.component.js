import { ChangeDetectionStrategy, Component, ContentChild, ContentChildren, forwardRef, Inject, } from '@angular/core';
import { EMPTY_QUERY } from '@taiga-ui/cdk';
import { map, startWith } from 'rxjs/operators';
import { TuiHeadDirective } from '../directives/head.directive';
import { TuiTableDirective } from '../directives/table.directive';
import { TUI_TABLE_PROVIDER } from '../providers/table.provider';
import { TuiThComponent } from '../th/th.component';
import * as i0 from "@angular/core";
import * as i1 from "../th/th.component";
import * as i2 from "@angular/common";
import * as i3 from "../directives/table.directive";
export class TuiThGroupComponent {
    constructor(table) {
        this.table = table;
        this.heads = EMPTY_QUERY;
        this.heads$ = null;
    }
    ngAfterContentInit() {
        this.heads$ = this.heads.changes.pipe(startWith(null), map(() => this.heads.reduce((record, item) => (Object.assign(Object.assign({}, record), { [item.tuiHead]: item })), {})));
    }
}
TuiThGroupComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiThGroupComponent, deps: [{ token: forwardRef(() => TuiTableDirective) }], target: i0.ɵɵFactoryTarget.Component });
TuiThGroupComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiThGroupComponent, selector: "tr[tuiThGroup]", providers: [TUI_TABLE_PROVIDER], queries: [{ propertyName: "th", first: true, predicate: i0.forwardRef(function () { return TuiThComponent; }), descendants: true }, { propertyName: "heads", predicate: i0.forwardRef(function () { return TuiHeadDirective; }) }], ngImport: i0, template: "<ng-content></ng-content>\n<ng-container *ngIf=\"heads$ | async as headings\">\n    <ng-container\n        *ngFor=\"let key of table.columns\"\n        [ngTemplateOutlet]=\"headings[key.toString()]?.template || plain\"\n    >\n        <ng-template #plain>\n            <th\n                *ngIf=\"!th && !heads.length\"\n                tuiTh\n            >\n                {{ key.toString() }}\n            </th>\n        </ng-template>\n    </ng-container>\n</ng-container>\n", components: [{ type: i1.TuiThComponent, selector: "th[tuiTh]", inputs: ["sorter", "resizable", "sticky"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], pipes: { "async": i2.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiThGroupComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tr[tuiThGroup]',
                    templateUrl: './th-group.template.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [TUI_TABLE_PROVIDER],
                }]
        }], ctorParameters: function () { return [{ type: i3.TuiTableDirective, decorators: [{
                    type: Inject,
                    args: [forwardRef(() => TuiTableDirective)]
                }] }]; }, propDecorators: { th: [{
                type: ContentChild,
                args: [forwardRef(() => TuiThComponent)]
            }], heads: [{
                type: ContentChildren,
                args: [forwardRef(() => TuiHeadDirective)]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGgtZ3JvdXAuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYWRkb24tdGFibGUvY29tcG9uZW50cy90YWJsZS90aC1ncm91cC90aC1ncm91cC5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hZGRvbi10YWJsZS9jb21wb25lbnRzL3RhYmxlL3RoLWdyb3VwL3RoLWdyb3VwLnRlbXBsYXRlLmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUVILHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsWUFBWSxFQUNaLGVBQWUsRUFDZixVQUFVLEVBQ1YsTUFBTSxHQUVULE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFMUMsT0FBTyxFQUFDLEdBQUcsRUFBRSxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUU5QyxPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSw4QkFBOEIsQ0FBQztBQUM5RCxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSwrQkFBK0IsQ0FBQztBQUNoRSxPQUFPLEVBQUMsa0JBQWtCLEVBQUMsTUFBTSw2QkFBNkIsQ0FBQztBQUMvRCxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sb0JBQW9CLENBQUM7Ozs7O0FBUWxELE1BQU0sT0FBTyxtQkFBbUI7SUFXNUIsWUFFYSxLQUEyQjtRQUEzQixVQUFLLEdBQUwsS0FBSyxDQUFzQjtRQU4vQixVQUFLLEdBQW1DLFdBQVcsQ0FBQztRQUU3RCxXQUFNLEdBQXdELElBQUksQ0FBQztJQUtoRSxDQUFDO0lBRUosa0JBQWtCO1FBQ2QsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQ2pDLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFDZixHQUFHLENBQUMsR0FBRyxFQUFFLENBQ0wsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQ2IsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxpQ0FBSyxNQUFNLEtBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsSUFBSSxJQUFFLEVBQ3JELEVBQTBDLENBQzdDLENBQ0osQ0FDSixDQUFDO0lBQ04sQ0FBQzs7aUhBMUJRLG1CQUFtQixrQkFZaEIsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDO3FHQVp0QyxtQkFBbUIseUNBRmpCLENBQUMsa0JBQWtCLENBQUMsNkZBS0EsY0FBYyxrR0FHWCxnQkFBZ0IsaUNDL0J0RCxpZUFnQkE7NEZEU2EsbUJBQW1CO2tCQU4vQixTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSxnQkFBZ0I7b0JBQzFCLFdBQVcsRUFBRSwwQkFBMEI7b0JBQ3ZDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO29CQUMvQyxTQUFTLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQztpQkFDbEM7OzBCQWFRLE1BQU07MkJBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDOzRDQVJ0QyxFQUFFO3NCQURWLFlBQVk7dUJBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLGNBQWMsQ0FBQztnQkFJckMsS0FBSztzQkFEYixlQUFlO3VCQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgQWZ0ZXJDb250ZW50SW5pdCxcbiAgICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgICBDb21wb25lbnQsXG4gICAgQ29udGVudENoaWxkLFxuICAgIENvbnRlbnRDaGlsZHJlbixcbiAgICBmb3J3YXJkUmVmLFxuICAgIEluamVjdCxcbiAgICBRdWVyeUxpc3QsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtFTVBUWV9RVUVSWX0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHttYXAsIHN0YXJ0V2l0aH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQge1R1aUhlYWREaXJlY3RpdmV9IGZyb20gJy4uL2RpcmVjdGl2ZXMvaGVhZC5kaXJlY3RpdmUnO1xuaW1wb3J0IHtUdWlUYWJsZURpcmVjdGl2ZX0gZnJvbSAnLi4vZGlyZWN0aXZlcy90YWJsZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHtUVUlfVEFCTEVfUFJPVklERVJ9IGZyb20gJy4uL3Byb3ZpZGVycy90YWJsZS5wcm92aWRlcic7XG5pbXBvcnQge1R1aVRoQ29tcG9uZW50fSBmcm9tICcuLi90aC90aC5jb21wb25lbnQnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ3RyW3R1aVRoR3JvdXBdJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vdGgtZ3JvdXAudGVtcGxhdGUuaHRtbCcsXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gICAgcHJvdmlkZXJzOiBbVFVJX1RBQkxFX1BST1ZJREVSXSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpVGhHcm91cENvbXBvbmVudDxUIGV4dGVuZHMgUGFydGlhbDxSZWNvcmQ8a2V5b2YgVCwgYW55Pj4+XG4gICAgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0XG57XG4gICAgQENvbnRlbnRDaGlsZChmb3J3YXJkUmVmKCgpID0+IFR1aVRoQ29tcG9uZW50KSlcbiAgICByZWFkb25seSB0aCE6IFR1aVRoQ29tcG9uZW50PFQ+O1xuXG4gICAgQENvbnRlbnRDaGlsZHJlbihmb3J3YXJkUmVmKCgpID0+IFR1aUhlYWREaXJlY3RpdmUpKVxuICAgIHJlYWRvbmx5IGhlYWRzOiBRdWVyeUxpc3Q8VHVpSGVhZERpcmVjdGl2ZTxUPj4gPSBFTVBUWV9RVUVSWTtcblxuICAgIGhlYWRzJDogT2JzZXJ2YWJsZTxSZWNvcmQ8YW55LCBUdWlIZWFkRGlyZWN0aXZlPFQ+Pj4gfCBudWxsID0gbnVsbDtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KGZvcndhcmRSZWYoKCkgPT4gVHVpVGFibGVEaXJlY3RpdmUpKVxuICAgICAgICByZWFkb25seSB0YWJsZTogVHVpVGFibGVEaXJlY3RpdmU8VD4sXG4gICAgKSB7fVxuXG4gICAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQge1xuICAgICAgICB0aGlzLmhlYWRzJCA9IHRoaXMuaGVhZHMuY2hhbmdlcy5waXBlKFxuICAgICAgICAgICAgc3RhcnRXaXRoKG51bGwpLFxuICAgICAgICAgICAgbWFwKCgpID0+XG4gICAgICAgICAgICAgICAgdGhpcy5oZWFkcy5yZWR1Y2UoXG4gICAgICAgICAgICAgICAgICAgIChyZWNvcmQsIGl0ZW0pID0+ICh7Li4ucmVjb3JkLCBbaXRlbS50dWlIZWFkXTogaXRlbX0pLFxuICAgICAgICAgICAgICAgICAgICB7fSBhcyBSZWNvcmQ8a2V5b2YgVCwgVHVpSGVhZERpcmVjdGl2ZTxUPj4sXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICksXG4gICAgICAgICk7XG4gICAgfVxufVxuIiwiPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuPG5nLWNvbnRhaW5lciAqbmdJZj1cImhlYWRzJCB8IGFzeW5jIGFzIGhlYWRpbmdzXCI+XG4gICAgPG5nLWNvbnRhaW5lclxuICAgICAgICAqbmdGb3I9XCJsZXQga2V5IG9mIHRhYmxlLmNvbHVtbnNcIlxuICAgICAgICBbbmdUZW1wbGF0ZU91dGxldF09XCJoZWFkaW5nc1trZXkudG9TdHJpbmcoKV0/LnRlbXBsYXRlIHx8IHBsYWluXCJcbiAgICA+XG4gICAgICAgIDxuZy10ZW1wbGF0ZSAjcGxhaW4+XG4gICAgICAgICAgICA8dGhcbiAgICAgICAgICAgICAgICAqbmdJZj1cIiF0aCAmJiAhaGVhZHMubGVuZ3RoXCJcbiAgICAgICAgICAgICAgICB0dWlUaFxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHt7IGtleS50b1N0cmluZygpIH19XG4gICAgICAgICAgICA8L3RoPlxuICAgICAgICA8L25nLXRlbXBsYXRlPlxuICAgIDwvbmctY29udGFpbmVyPlxuPC9uZy1jb250YWluZXI+XG4iXX0=