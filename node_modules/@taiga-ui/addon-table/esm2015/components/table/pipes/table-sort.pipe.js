import { __decorate } from "tslib";
import { Inject, Pipe } from '@angular/core';
import { tuiPure } from '@taiga-ui/cdk';
import { TuiTableDirective } from '../directives/table.directive';
import * as i0 from "@angular/core";
import * as i1 from "../directives/table.directive";
export class TuiTableSortPipe {
    constructor(table) {
        this.table = table;
    }
    transform(data) {
        return this.sort(data, this.table.sorter, this.table.direction);
    }
    sort(data, sorter, direction) {
        return [...data].sort((a, b) => direction * sorter(a, b));
    }
}
TuiTableSortPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTableSortPipe, deps: [{ token: TuiTableDirective }], target: i0.ɵɵFactoryTarget.Pipe });
TuiTableSortPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTableSortPipe, name: "tuiTableSort", pure: false });
__decorate([
    tuiPure
], TuiTableSortPipe.prototype, "sort", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTableSortPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'tuiTableSort',
                    pure: false,
                }]
        }], ctorParameters: function () { return [{ type: i1.TuiTableDirective, decorators: [{
                    type: Inject,
                    args: [TuiTableDirective]
                }] }]; }, propDecorators: { sort: [] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUtc29ydC5waXBlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYWRkb24tdGFibGUvY29tcG9uZW50cy90YWJsZS9waXBlcy90YWJsZS1zb3J0LnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxNQUFNLEVBQUUsSUFBSSxFQUFnQixNQUFNLGVBQWUsQ0FBQztBQUUxRCxPQUFPLEVBQUMsT0FBTyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRXRDLE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLCtCQUErQixDQUFDOzs7QUFNaEUsTUFBTSxPQUFPLGdCQUFnQjtJQUN6QixZQUVxQixLQUEyQjtRQUEzQixVQUFLLEdBQUwsS0FBSyxDQUFzQjtJQUM3QyxDQUFDO0lBRUosU0FBUyxDQUFjLElBQWtCO1FBQ3JDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBSSxJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUN2RSxDQUFDO0lBR08sSUFBSSxDQUNSLElBQWtCLEVBQ2xCLE1BQXdCLEVBQ3hCLFNBQWlCO1FBRWpCLE9BQU8sQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDOUQsQ0FBQzs7OEdBakJRLGdCQUFnQixrQkFFYixpQkFBaUI7NEdBRnBCLGdCQUFnQjtBQVd6QjtJQURDLE9BQU87NENBT1A7NEZBakJRLGdCQUFnQjtrQkFKNUIsSUFBSTttQkFBQztvQkFDRixJQUFJLEVBQUUsY0FBYztvQkFDcEIsSUFBSSxFQUFFLEtBQUs7aUJBQ2Q7OzBCQUdRLE1BQU07MkJBQUMsaUJBQWlCOzRDQVNyQixJQUFJIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3QsIFBpcGUsIFBpcGVUcmFuc2Zvcm19IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtUdWlDb21wYXJhdG9yfSBmcm9tICdAdGFpZ2EtdWkvYWRkb24tdGFibGUvdHlwZXMnO1xuaW1wb3J0IHt0dWlQdXJlfSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcblxuaW1wb3J0IHtUdWlUYWJsZURpcmVjdGl2ZX0gZnJvbSAnLi4vZGlyZWN0aXZlcy90YWJsZS5kaXJlY3RpdmUnO1xuXG5AUGlwZSh7XG4gICAgbmFtZTogJ3R1aVRhYmxlU29ydCcsXG4gICAgcHVyZTogZmFsc2UsXG59KVxuZXhwb3J0IGNsYXNzIFR1aVRhYmxlU29ydFBpcGU8SyA9IFBhcnRpYWw8UmVjb3JkPGFueSwgYW55Pj4+IGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoVHVpVGFibGVEaXJlY3RpdmUpXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgdGFibGU6IFR1aVRhYmxlRGlyZWN0aXZlPEs+LFxuICAgICkge31cblxuICAgIHRyYW5zZm9ybTxUIGV4dGVuZHMgSz4oZGF0YTogcmVhZG9ubHkgVFtdKTogcmVhZG9ubHkgVFtdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc29ydDxUPihkYXRhLCB0aGlzLnRhYmxlLnNvcnRlciwgdGhpcy50YWJsZS5kaXJlY3Rpb24pO1xuICAgIH1cblxuICAgIEB0dWlQdXJlXG4gICAgcHJpdmF0ZSBzb3J0PFQgZXh0ZW5kcyBLPihcbiAgICAgICAgZGF0YTogcmVhZG9ubHkgVFtdLFxuICAgICAgICBzb3J0ZXI6IFR1aUNvbXBhcmF0b3I8VD4sXG4gICAgICAgIGRpcmVjdGlvbjogLTEgfCAxLFxuICAgICk6IHJlYWRvbmx5IFRbXSB7XG4gICAgICAgIHJldHVybiBbLi4uZGF0YV0uc29ydCgoYSwgYikgPT4gZGlyZWN0aW9uICogc29ydGVyKGEsIGIpKTtcbiAgICB9XG59XG4iXX0=