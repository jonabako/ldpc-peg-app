import { ChangeDetectionStrategy, Component, ContentChild, ContentChildren, EventEmitter, forwardRef, Inject, Input, Output, } from '@angular/core';
import { EMPTY_QUERY } from '@taiga-ui/cdk';
import { TUI_ARROW_OPTIONS } from '@taiga-ui/kit';
import { TuiRowDirective } from '../directives/row.directive';
import { TuiTableDirective } from '../directives/table.directive';
import { TuiTableSortPipe } from '../pipes/table-sort.pipe';
import { TUI_TABLE_PROVIDER } from '../providers/table.provider';
import { TUI_TABLE_OPTIONS } from '../table.options';
import { TuiTrComponent } from '../tr/tr.component';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core";
import * as i2 from "@angular/common";
import * as i3 from "@tinkoff/ng-polymorpheus";
import * as i4 from "@taiga-ui/cdk";
import * as i5 from "../pipes/table-sort.pipe";
import * as i6 from "../directives/table.directive";
export class TuiTbodyComponent {
    constructor(pipe, options, arrowOptions, table) {
        this.pipe = pipe;
        this.options = options;
        this.arrowOptions = arrowOptions;
        this.table = table;
        this.data = [];
        this.open = this.options.open;
        this.openChange = new EventEmitter();
        this.rows = EMPTY_QUERY;
        this.toContext = ($implicit, index) => ({ $implicit, index });
    }
    get sorted() {
        return this.pipe.transform(this.data);
    }
    onClick() {
        this.open = !this.open;
        this.openChange.emit(this.open);
    }
}
TuiTbodyComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTbodyComponent, deps: [{ token: TuiTableSortPipe }, { token: TUI_TABLE_OPTIONS }, { token: TUI_ARROW_OPTIONS }, { token: forwardRef(() => TuiTableDirective) }], target: i0.ɵɵFactoryTarget.Component });
TuiTbodyComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiTbodyComponent, selector: "tbody[tuiTbody]", inputs: { data: "data", heading: "heading", open: "open" }, outputs: { openChange: "openChange" }, providers: TUI_TABLE_PROVIDER, queries: [{ propertyName: "row", first: true, predicate: i0.forwardRef(function () { return TuiRowDirective; }), descendants: true }, { propertyName: "rows", predicate: i0.forwardRef(function () { return TuiTrComponent; }) }], ngImport: i0, template: "<tr *ngIf=\"heading\">\n    <th\n        class=\"t-heading\"\n        [colSpan]=\"table.columns.length\"\n    >\n        <button\n            type=\"button\"\n            class=\"t-expand\"\n            (click)=\"onClick()\"\n        >\n            <span class=\"t-name\">\n                <ng-container *polymorpheusOutlet=\"heading as text\">\n                    {{ text }}\n                </ng-container>\n            </span>\n            <tui-svg\n                class=\"t-chevron\"\n                [class.t-chevron_rotated]=\"open\"\n                [src]=\"arrowOptions.iconLarge\"\n            ></tui-svg>\n        </button>\n    </th>\n</tr>\n<ng-container *ngIf=\"open\">\n    <ng-content></ng-content>\n</ng-container>\n<ng-container *ngIf=\"open && row\">\n    <ng-container\n        *ngFor=\"let item of sorted; let index = index\"\n        [ngTemplateOutlet]=\"row.template\"\n        [ngTemplateOutletContext]=\"item | tuiMapper: toContext : index\"\n    ></ng-container>\n</ng-container>\n", styles: [":host{border-color:var(--tui-base-04)}:host tr{border-color:inherit}.t-expand{-webkit-appearance:none;-moz-appearance:none;appearance:none;padding:0;border:0;background:none;font-size:inherit;line-height:inherit;text-decoration:none;display:flex;width:100%;height:100%;align-items:center;box-sizing:border-box;outline:none;font-weight:bold;cursor:pointer;border-color:inherit}.t-expand:focus-visible .t-name{background:var(--tui-selection)}.t-expand:before,.t-expand:after{content:\"\";position:-webkit-sticky;position:sticky;height:100%;border-left:1px solid;border-color:inherit}.t-expand:before{left:0}.t-expand:after{right:0}.t-heading{transition-property:background;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;height:var(--tui-height-m);font:var(--tui-font-text-s);padding:0;background:var(--tui-base-02);border-bottom:1px solid var(--tui-base-04);border-color:inherit}.t-heading:hover{background:var(--tui-base-03)}:host-context(table[data-size=\"l\"]) .t-heading{font:var(--tui-font-text-m);height:var(--tui-height-l)}.t-name{position:-webkit-sticky;position:sticky;left:.75rem;display:inline-block}:host-context(table[data-size=\"l\"]) .t-name{left:1rem}.t-chevron{transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;position:-webkit-sticky;position:sticky;right:.75rem;margin:0 .6875rem 0 auto}.t-chevron_rotated{transform:rotate(180deg)}\n"], components: [{ type: i1.TuiSvgComponent, selector: "tui-svg", inputs: ["src"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], pipes: { "tuiMapper": i4.TuiMapperPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTbodyComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tbody[tuiTbody]',
                    templateUrl: './tbody.template.html',
                    styleUrls: ['./tbody.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: TUI_TABLE_PROVIDER,
                }]
        }], ctorParameters: function () { return [{ type: i5.TuiTableSortPipe, decorators: [{
                    type: Inject,
                    args: [TuiTableSortPipe]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_TABLE_OPTIONS]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_ARROW_OPTIONS]
                }] }, { type: i6.TuiTableDirective, decorators: [{
                    type: Inject,
                    args: [forwardRef(() => TuiTableDirective)]
                }] }]; }, propDecorators: { data: [{
                type: Input
            }], heading: [{
                type: Input
            }], open: [{
                type: Input
            }], openChange: [{
                type: Output
            }], row: [{
                type: ContentChild,
                args: [forwardRef(() => TuiRowDirective)]
            }], rows: [{
                type: ContentChildren,
                args: [forwardRef(() => TuiTrComponent)]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGJvZHkuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYWRkb24tdGFibGUvY29tcG9uZW50cy90YWJsZS90Ym9keS90Ym9keS5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hZGRvbi10YWJsZS9jb21wb25lbnRzL3RhYmxlL3Rib2R5L3Rib2R5LnRlbXBsYXRlLmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNILHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsWUFBWSxFQUNaLGVBQWUsRUFDZixZQUFZLEVBQ1osVUFBVSxFQUNWLE1BQU0sRUFDTixLQUFLLEVBQ0wsTUFBTSxHQUVULE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDMUMsT0FBTyxFQUFDLGlCQUFpQixFQUFrQixNQUFNLGVBQWUsQ0FBQztBQUdqRSxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sNkJBQTZCLENBQUM7QUFDNUQsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sK0JBQStCLENBQUM7QUFDaEUsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFDMUQsT0FBTyxFQUFDLGtCQUFrQixFQUFDLE1BQU0sNkJBQTZCLENBQUM7QUFDL0QsT0FBTyxFQUFDLGlCQUFpQixFQUFrQixNQUFNLGtCQUFrQixDQUFDO0FBQ3BFLE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSxvQkFBb0IsQ0FBQzs7Ozs7Ozs7QUFTbEQsTUFBTSxPQUFPLGlCQUFpQjtJQW1CMUIsWUFDK0MsSUFBeUIsRUFDeEIsT0FBd0IsRUFDaEMsWUFBNkIsRUFFeEQsS0FBMkI7UUFKTyxTQUFJLEdBQUosSUFBSSxDQUFxQjtRQUN4QixZQUFPLEdBQVAsT0FBTyxDQUFpQjtRQUNoQyxpQkFBWSxHQUFaLFlBQVksQ0FBaUI7UUFFeEQsVUFBSyxHQUFMLEtBQUssQ0FBc0I7UUF0QnhDLFNBQUksR0FBaUIsRUFBRSxDQUFDO1FBTXhCLFNBQUksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQztRQUdoQixlQUFVLEdBQUcsSUFBSSxZQUFZLEVBQVcsQ0FBQztRQU16QyxTQUFJLEdBQWlDLFdBQVcsQ0FBQztRQWNqRCxjQUFTLEdBQUcsQ0FDakIsU0FBWSxFQUNaLEtBQWEsRUFDZ0IsRUFBRSxDQUFDLENBQUMsRUFBQyxTQUFTLEVBQUUsS0FBSyxFQUFDLENBQUMsQ0FBQztJQVR0RCxDQUFDO0lBRUosSUFBSSxNQUFNO1FBQ04sT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQU9ELE9BQU87UUFDSCxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztRQUN2QixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDcEMsQ0FBQzs7K0dBdkNRLGlCQUFpQixrQkFvQmQsZ0JBQWdCLGFBQ2hCLGlCQUFpQixhQUNqQixpQkFBaUIsYUFDakIsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDO21HQXZCdEMsaUJBQWlCLDZJQUZmLGtCQUFrQiw4RkFlRSxlQUFlLGlHQUdaLGNBQWMsaUNDOUNwRCxrL0JBaUNBOzRGREhhLGlCQUFpQjtrQkFQN0IsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsaUJBQWlCO29CQUMzQixXQUFXLEVBQUUsdUJBQXVCO29CQUNwQyxTQUFTLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQztvQkFDakMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07b0JBQy9DLFNBQVMsRUFBRSxrQkFBa0I7aUJBQ2hDOzswQkFxQlEsTUFBTTsyQkFBQyxnQkFBZ0I7OzBCQUN2QixNQUFNOzJCQUFDLGlCQUFpQjs7MEJBQ3hCLE1BQU07MkJBQUMsaUJBQWlCOzswQkFDeEIsTUFBTTsyQkFBQyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsaUJBQWlCLENBQUM7NENBckIvQyxJQUFJO3NCQURILEtBQUs7Z0JBSU4sT0FBTztzQkFETixLQUFLO2dCQUlOLElBQUk7c0JBREgsS0FBSztnQkFJRyxVQUFVO3NCQURsQixNQUFNO2dCQUlFLEdBQUc7c0JBRFgsWUFBWTt1QkFBQyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsZUFBZSxDQUFDO2dCQUl0QyxJQUFJO3NCQURaLGVBQWU7dUJBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLGNBQWMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gICAgQ29tcG9uZW50LFxuICAgIENvbnRlbnRDaGlsZCxcbiAgICBDb250ZW50Q2hpbGRyZW4sXG4gICAgRXZlbnRFbWl0dGVyLFxuICAgIGZvcndhcmRSZWYsXG4gICAgSW5qZWN0LFxuICAgIElucHV0LFxuICAgIE91dHB1dCxcbiAgICBRdWVyeUxpc3QsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtFTVBUWV9RVUVSWX0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge1RVSV9BUlJPV19PUFRJT05TLCBUdWlBcnJvd09wdGlvbnN9IGZyb20gJ0B0YWlnYS11aS9raXQnO1xuaW1wb3J0IHtQb2x5bW9ycGhldXNDb250ZW50fSBmcm9tICdAdGlua29mZi9uZy1wb2x5bW9ycGhldXMnO1xuXG5pbXBvcnQge1R1aVJvd0RpcmVjdGl2ZX0gZnJvbSAnLi4vZGlyZWN0aXZlcy9yb3cuZGlyZWN0aXZlJztcbmltcG9ydCB7VHVpVGFibGVEaXJlY3RpdmV9IGZyb20gJy4uL2RpcmVjdGl2ZXMvdGFibGUuZGlyZWN0aXZlJztcbmltcG9ydCB7VHVpVGFibGVTb3J0UGlwZX0gZnJvbSAnLi4vcGlwZXMvdGFibGUtc29ydC5waXBlJztcbmltcG9ydCB7VFVJX1RBQkxFX1BST1ZJREVSfSBmcm9tICcuLi9wcm92aWRlcnMvdGFibGUucHJvdmlkZXInO1xuaW1wb3J0IHtUVUlfVEFCTEVfT1BUSU9OUywgVHVpVGFibGVPcHRpb25zfSBmcm9tICcuLi90YWJsZS5vcHRpb25zJztcbmltcG9ydCB7VHVpVHJDb21wb25lbnR9IGZyb20gJy4uL3RyL3RyLmNvbXBvbmVudCc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAndGJvZHlbdHVpVGJvZHldJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vdGJvZHkudGVtcGxhdGUuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vdGJvZHkuc3R5bGUubGVzcyddLFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICAgIHByb3ZpZGVyczogVFVJX1RBQkxFX1BST1ZJREVSLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlUYm9keUNvbXBvbmVudDxUIGV4dGVuZHMgUGFydGlhbDxSZWNvcmQ8a2V5b2YgVCwgYW55Pj4+IHtcbiAgICBASW5wdXQoKVxuICAgIGRhdGE6IHJlYWRvbmx5IFRbXSA9IFtdO1xuXG4gICAgQElucHV0KClcbiAgICBoZWFkaW5nOiBQb2x5bW9ycGhldXNDb250ZW50O1xuXG4gICAgQElucHV0KClcbiAgICBvcGVuID0gdGhpcy5vcHRpb25zLm9wZW47XG5cbiAgICBAT3V0cHV0KClcbiAgICByZWFkb25seSBvcGVuQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxib29sZWFuPigpO1xuXG4gICAgQENvbnRlbnRDaGlsZChmb3J3YXJkUmVmKCgpID0+IFR1aVJvd0RpcmVjdGl2ZSkpXG4gICAgcmVhZG9ubHkgcm93PzogVHVpUm93RGlyZWN0aXZlPFQ+O1xuXG4gICAgQENvbnRlbnRDaGlsZHJlbihmb3J3YXJkUmVmKCgpID0+IFR1aVRyQ29tcG9uZW50KSlcbiAgICByZWFkb25seSByb3dzOiBRdWVyeUxpc3Q8VHVpVHJDb21wb25lbnQ8VD4+ID0gRU1QVFlfUVVFUlk7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChUdWlUYWJsZVNvcnRQaXBlKSBwcml2YXRlIHJlYWRvbmx5IHBpcGU6IFR1aVRhYmxlU29ydFBpcGU8VD4sXG4gICAgICAgIEBJbmplY3QoVFVJX1RBQkxFX09QVElPTlMpIHByaXZhdGUgcmVhZG9ubHkgb3B0aW9uczogVHVpVGFibGVPcHRpb25zLFxuICAgICAgICBASW5qZWN0KFRVSV9BUlJPV19PUFRJT05TKSByZWFkb25seSBhcnJvd09wdGlvbnM6IFR1aUFycm93T3B0aW9ucyxcbiAgICAgICAgQEluamVjdChmb3J3YXJkUmVmKCgpID0+IFR1aVRhYmxlRGlyZWN0aXZlKSlcbiAgICAgICAgcmVhZG9ubHkgdGFibGU6IFR1aVRhYmxlRGlyZWN0aXZlPFQ+LFxuICAgICkge31cblxuICAgIGdldCBzb3J0ZWQoKTogcmVhZG9ubHkgVFtdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGlwZS50cmFuc2Zvcm0odGhpcy5kYXRhKTtcbiAgICB9XG5cbiAgICByZWFkb25seSB0b0NvbnRleHQgPSAoXG4gICAgICAgICRpbXBsaWNpdDogVCxcbiAgICAgICAgaW5kZXg6IG51bWJlcixcbiAgICApOiB7JGltcGxpY2l0OiBUOyBpbmRleDogbnVtYmVyfSA9PiAoeyRpbXBsaWNpdCwgaW5kZXh9KTtcblxuICAgIG9uQ2xpY2soKTogdm9pZCB7XG4gICAgICAgIHRoaXMub3BlbiA9ICF0aGlzLm9wZW47XG4gICAgICAgIHRoaXMub3BlbkNoYW5nZS5lbWl0KHRoaXMub3Blbik7XG4gICAgfVxufVxuIiwiPHRyICpuZ0lmPVwiaGVhZGluZ1wiPlxuICAgIDx0aFxuICAgICAgICBjbGFzcz1cInQtaGVhZGluZ1wiXG4gICAgICAgIFtjb2xTcGFuXT1cInRhYmxlLmNvbHVtbnMubGVuZ3RoXCJcbiAgICA+XG4gICAgICAgIDxidXR0b25cbiAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgICAgY2xhc3M9XCJ0LWV4cGFuZFwiXG4gICAgICAgICAgICAoY2xpY2spPVwib25DbGljaygpXCJcbiAgICAgICAgPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0LW5hbWVcIj5cbiAgICAgICAgICAgICAgICA8bmctY29udGFpbmVyICpwb2x5bW9ycGhldXNPdXRsZXQ9XCJoZWFkaW5nIGFzIHRleHRcIj5cbiAgICAgICAgICAgICAgICAgICAge3sgdGV4dCB9fVxuICAgICAgICAgICAgICAgIDwvbmctY29udGFpbmVyPlxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgPHR1aS1zdmdcbiAgICAgICAgICAgICAgICBjbGFzcz1cInQtY2hldnJvblwiXG4gICAgICAgICAgICAgICAgW2NsYXNzLnQtY2hldnJvbl9yb3RhdGVkXT1cIm9wZW5cIlxuICAgICAgICAgICAgICAgIFtzcmNdPVwiYXJyb3dPcHRpb25zLmljb25MYXJnZVwiXG4gICAgICAgICAgICA+PC90dWktc3ZnPlxuICAgICAgICA8L2J1dHRvbj5cbiAgICA8L3RoPlxuPC90cj5cbjxuZy1jb250YWluZXIgKm5nSWY9XCJvcGVuXCI+XG4gICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuPC9uZy1jb250YWluZXI+XG48bmctY29udGFpbmVyICpuZ0lmPVwib3BlbiAmJiByb3dcIj5cbiAgICA8bmctY29udGFpbmVyXG4gICAgICAgICpuZ0Zvcj1cImxldCBpdGVtIG9mIHNvcnRlZDsgbGV0IGluZGV4ID0gaW5kZXhcIlxuICAgICAgICBbbmdUZW1wbGF0ZU91dGxldF09XCJyb3cudGVtcGxhdGVcIlxuICAgICAgICBbbmdUZW1wbGF0ZU91dGxldENvbnRleHRdPVwiaXRlbSB8IHR1aU1hcHBlcjogdG9Db250ZXh0IDogaW5kZXhcIlxuICAgID48L25nLWNvbnRhaW5lcj5cbjwvbmctY29udGFpbmVyPlxuIl19