import { ContentChildren, Directive, Inject, Input, Output, } from '@angular/core';
import { EMPTY_QUERY } from '@taiga-ui/cdk';
import { delay, filter, map } from 'rxjs/operators';
import { TuiSortableDirective } from './sortable.directive';
import { TuiTableDirective } from './table.directive';
import * as i0 from "@angular/core";
import * as i1 from "./table.directive";
export class TuiSortByDirective {
    constructor(table) {
        this.table = table;
        this.sortables = EMPTY_QUERY;
        this.tuiSortByChange = this.table.sorterChange.pipe(
        // delay is for getting actual ContentChildren (sortables) https://github.com/angular/angular/issues/38976
        delay(0), filter(() => !!this.sortables.length), map(sorter => this.getKey(sorter)));
        this.tuiSortBy = null;
    }
    set sortBy(sortBy) {
        this.tuiSortBy = sortBy;
        this.checkSortables();
    }
    checkSortables() {
        this.sortables.forEach(s => s.check());
    }
    getKey(sorter) {
        var _a;
        return ((_a = this.sortables.find(s => s.sorter === sorter)) === null || _a === void 0 ? void 0 : _a.key) || null;
    }
}
TuiSortByDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSortByDirective, deps: [{ token: TuiTableDirective }], target: i0.ɵɵFactoryTarget.Directive });
TuiSortByDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiSortByDirective, selector: "table[tuiTable][tuiSortBy]", inputs: { sortBy: ["tuiSortBy", "sortBy"] }, outputs: { tuiSortByChange: "tuiSortByChange" }, queries: [{ propertyName: "sortables", predicate: TuiSortableDirective, descendants: true }], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSortByDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'table[tuiTable][tuiSortBy]',
                }]
        }], ctorParameters: function () { return [{ type: i1.TuiTableDirective, decorators: [{
                    type: Inject,
                    args: [TuiTableDirective]
                }] }]; }, propDecorators: { sortables: [{
                type: ContentChildren,
                args: [TuiSortableDirective, { descendants: true }]
            }], sortBy: [{
                type: Input,
                args: ['tuiSortBy']
            }], tuiSortByChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29ydC1ieS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hZGRvbi10YWJsZS9jb21wb25lbnRzL3RhYmxlL2RpcmVjdGl2ZXMvc29ydC1ieS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNILGVBQWUsRUFDZixTQUFTLEVBQ1QsTUFBTSxFQUNOLEtBQUssRUFDTCxNQUFNLEdBRVQsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUMxQyxPQUFPLEVBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUVsRCxPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUMxRCxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQzs7O0FBS3BELE1BQU0sT0FBTyxrQkFBa0I7SUFvQjNCLFlBQ2dELEtBQTJCO1FBQTNCLFVBQUssR0FBTCxLQUFLLENBQXNCO1FBbkIxRCxjQUFTLEdBQXVDLFdBQVcsQ0FBQztRQVNwRSxvQkFBZSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLElBQUk7UUFDbkQsMEdBQTBHO1FBQzFHLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFDUixNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEVBQ3JDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FDckMsQ0FBQztRQUVGLGNBQVMsR0FBNEIsSUFBSSxDQUFDO0lBSXZDLENBQUM7SUFsQkosSUFDSSxNQUFNLENBQUMsTUFBK0I7UUFDdEMsSUFBSSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUM7UUFDeEIsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQzFCLENBQUM7SUFnQkQsY0FBYztRQUNWLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVPLE1BQU0sQ0FBQyxNQUErQjs7UUFDMUMsT0FBTyxDQUFBLE1BQUEsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxLQUFLLE1BQU0sQ0FBQywwQ0FBRSxHQUFHLEtBQUksSUFBSSxDQUFDO0lBQ3RFLENBQUM7O2dIQTlCUSxrQkFBa0Isa0JBcUJmLGlCQUFpQjtvR0FyQnBCLGtCQUFrQiwwTEFDVixvQkFBb0I7NEZBRDVCLGtCQUFrQjtrQkFIOUIsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsNEJBQTRCO2lCQUN6Qzs7MEJBc0JRLE1BQU07MkJBQUMsaUJBQWlCOzRDQW5CWixTQUFTO3NCQUR6QixlQUFlO3VCQUFDLG9CQUFvQixFQUFFLEVBQUMsV0FBVyxFQUFFLElBQUksRUFBQztnQkFJdEQsTUFBTTtzQkFEVCxLQUFLO3VCQUFDLFdBQVc7Z0JBT1QsZUFBZTtzQkFEdkIsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgQ29udGVudENoaWxkcmVuLFxuICAgIERpcmVjdGl2ZSxcbiAgICBJbmplY3QsXG4gICAgSW5wdXQsXG4gICAgT3V0cHV0LFxuICAgIFF1ZXJ5TGlzdCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1R1aUNvbXBhcmF0b3J9IGZyb20gJ0B0YWlnYS11aS9hZGRvbi10YWJsZS90eXBlcyc7XG5pbXBvcnQge0VNUFRZX1FVRVJZfSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7ZGVsYXksIGZpbHRlciwgbWFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7VHVpU29ydGFibGVEaXJlY3RpdmV9IGZyb20gJy4vc29ydGFibGUuZGlyZWN0aXZlJztcbmltcG9ydCB7VHVpVGFibGVEaXJlY3RpdmV9IGZyb20gJy4vdGFibGUuZGlyZWN0aXZlJztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICd0YWJsZVt0dWlUYWJsZV1bdHVpU29ydEJ5XScsXG59KVxuZXhwb3J0IGNsYXNzIFR1aVNvcnRCeURpcmVjdGl2ZTxUIGV4dGVuZHMgUGFydGlhbDxSZWNvcmQ8a2V5b2YgVCwgYW55Pj4+IHtcbiAgICBAQ29udGVudENoaWxkcmVuKFR1aVNvcnRhYmxlRGlyZWN0aXZlLCB7ZGVzY2VuZGFudHM6IHRydWV9KVxuICAgIHByaXZhdGUgcmVhZG9ubHkgc29ydGFibGVzOiBRdWVyeUxpc3Q8VHVpU29ydGFibGVEaXJlY3RpdmU8VD4+ID0gRU1QVFlfUVVFUlk7XG5cbiAgICBASW5wdXQoJ3R1aVNvcnRCeScpXG4gICAgc2V0IHNvcnRCeShzb3J0Qnk6IHN0cmluZyB8IGtleW9mIFQgfCBudWxsKSB7XG4gICAgICAgIHRoaXMudHVpU29ydEJ5ID0gc29ydEJ5O1xuICAgICAgICB0aGlzLmNoZWNrU29ydGFibGVzKCk7XG4gICAgfVxuXG4gICAgQE91dHB1dCgpXG4gICAgcmVhZG9ubHkgdHVpU29ydEJ5Q2hhbmdlID0gdGhpcy50YWJsZS5zb3J0ZXJDaGFuZ2UucGlwZShcbiAgICAgICAgLy8gZGVsYXkgaXMgZm9yIGdldHRpbmcgYWN0dWFsIENvbnRlbnRDaGlsZHJlbiAoc29ydGFibGVzKSBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2lzc3Vlcy8zODk3NlxuICAgICAgICBkZWxheSgwKSxcbiAgICAgICAgZmlsdGVyKCgpID0+ICEhdGhpcy5zb3J0YWJsZXMubGVuZ3RoKSxcbiAgICAgICAgbWFwKHNvcnRlciA9PiB0aGlzLmdldEtleShzb3J0ZXIpKSxcbiAgICApO1xuXG4gICAgdHVpU29ydEJ5OiBzdHJpbmcgfCBrZXlvZiBUIHwgbnVsbCA9IG51bGw7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChUdWlUYWJsZURpcmVjdGl2ZSkgcHJpdmF0ZSByZWFkb25seSB0YWJsZTogVHVpVGFibGVEaXJlY3RpdmU8VD4sXG4gICAgKSB7fVxuXG4gICAgY2hlY2tTb3J0YWJsZXMoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuc29ydGFibGVzLmZvckVhY2gocyA9PiBzLmNoZWNrKCkpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0S2V5KHNvcnRlcjogVHVpQ29tcGFyYXRvcjxUPiB8IG51bGwpOiBrZXlvZiBUIHwgbnVsbCB7XG4gICAgICAgIHJldHVybiB0aGlzLnNvcnRhYmxlcy5maW5kKHMgPT4gcy5zb3J0ZXIgPT09IHNvcnRlcik/LmtleSB8fCBudWxsO1xuICAgIH1cbn1cbiJdfQ==