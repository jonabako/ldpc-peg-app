import { Directive, Inject, Input, Output } from '@angular/core';
import { map } from 'rxjs/operators';
import { TuiTableDirective } from './table.directive';
import * as i0 from "@angular/core";
import * as i1 from "./table.directive";
export class TuiDirectionOrderDirective {
    constructor(table) {
        this.table = table;
        this.directionOrderChange = this.table.directionChange.pipe(map(dir => (dir === 1 ? 'asc' : 'desc')));
    }
    set directionOrder(order) {
        this.table.direction = order === 'asc' ? 1 : -1;
    }
}
TuiDirectionOrderDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDirectionOrderDirective, deps: [{ token: TuiTableDirective }], target: i0.ɵɵFactoryTarget.Directive });
TuiDirectionOrderDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiDirectionOrderDirective, selector: "table[tuiTable][tuiDirectionOrder]", inputs: { directionOrder: "directionOrder" }, outputs: { directionOrderChange: "directionOrderChange" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDirectionOrderDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'table[tuiTable][tuiDirectionOrder]',
                }]
        }], ctorParameters: function () { return [{ type: i1.TuiTableDirective, decorators: [{
                    type: Inject,
                    args: [TuiTableDirective]
                }] }]; }, propDecorators: { directionOrder: [{
                type: Input
            }], directionOrderChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlyZWN0aW9uLW9yZGVyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FkZG9uLXRhYmxlL2NvbXBvbmVudHMvdGFibGUvZGlyZWN0aXZlcy9kaXJlY3Rpb24tb3JkZXIuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDL0QsT0FBTyxFQUFDLEdBQUcsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBRW5DLE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLG1CQUFtQixDQUFDOzs7QUFLcEQsTUFBTSxPQUFPLDBCQUEwQjtJQVduQyxZQUNnRCxLQUEyQjtRQUEzQixVQUFLLEdBQUwsS0FBSyxDQUFzQjtRQUxsRSx5QkFBb0IsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQzNELEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUMzQyxDQUFDO0lBSUMsQ0FBQztJQVpKLElBQ0ksY0FBYyxDQUFDLEtBQXFCO1FBQ3BDLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHLEtBQUssS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDcEQsQ0FBQzs7d0hBSlEsMEJBQTBCLGtCQVl2QixpQkFBaUI7NEdBWnBCLDBCQUEwQjs0RkFBMUIsMEJBQTBCO2tCQUh0QyxTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSxvQ0FBb0M7aUJBQ2pEOzswQkFhUSxNQUFNOzJCQUFDLGlCQUFpQjs0Q0FWekIsY0FBYztzQkFEakIsS0FBSztnQkFNRyxvQkFBb0I7c0JBRDVCLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgSW5qZWN0LCBJbnB1dCwgT3V0cHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7bWFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7VHVpVGFibGVEaXJlY3RpdmV9IGZyb20gJy4vdGFibGUuZGlyZWN0aXZlJztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICd0YWJsZVt0dWlUYWJsZV1bdHVpRGlyZWN0aW9uT3JkZXJdJyxcbn0pXG5leHBvcnQgY2xhc3MgVHVpRGlyZWN0aW9uT3JkZXJEaXJlY3RpdmU8VD4ge1xuICAgIEBJbnB1dCgpXG4gICAgc2V0IGRpcmVjdGlvbk9yZGVyKG9yZGVyOiAnYXNjJyB8ICdkZXNjJykge1xuICAgICAgICB0aGlzLnRhYmxlLmRpcmVjdGlvbiA9IG9yZGVyID09PSAnYXNjJyA/IDEgOiAtMTtcbiAgICB9XG5cbiAgICBAT3V0cHV0KClcbiAgICByZWFkb25seSBkaXJlY3Rpb25PcmRlckNoYW5nZSA9IHRoaXMudGFibGUuZGlyZWN0aW9uQ2hhbmdlLnBpcGUoXG4gICAgICAgIG1hcChkaXIgPT4gKGRpciA9PT0gMSA/ICdhc2MnIDogJ2Rlc2MnKSksXG4gICAgKTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KFR1aVRhYmxlRGlyZWN0aXZlKSBwcml2YXRlIHJlYWRvbmx5IHRhYmxlOiBUdWlUYWJsZURpcmVjdGl2ZTxUPixcbiAgICApIHt9XG59XG4iXX0=