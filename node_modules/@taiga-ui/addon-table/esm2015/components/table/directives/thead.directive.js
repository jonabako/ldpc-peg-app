import { Directive, Inject } from '@angular/core';
import { INTERSECTION_ROOT_MARGIN, IntersectionObserverService, } from '@ng-web-apis/intersection-observer';
import { TUI_STUCK, TUI_STUCK_PROVIDER } from '../providers/stuck.provider';
import * as i0 from "@angular/core";
import * as i1 from "rxjs";
export class TuiTheadDirective {
    constructor(stuck$) {
        this.stuck$ = stuck$;
    }
}
TuiTheadDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTheadDirective, deps: [{ token: TUI_STUCK }], target: i0.ɵɵFactoryTarget.Directive });
TuiTheadDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiTheadDirective, selector: "thead[tuiThead]", host: { listeners: { "$.class._stuck": "stuck$" } }, providers: [
        TUI_STUCK_PROVIDER,
        IntersectionObserverService,
        {
            provide: INTERSECTION_ROOT_MARGIN,
            useValue: '0px 10000px 10000px 10000px',
        },
    ], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTheadDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'thead[tuiThead]',
                    providers: [
                        TUI_STUCK_PROVIDER,
                        IntersectionObserverService,
                        {
                            provide: INTERSECTION_ROOT_MARGIN,
                            useValue: '0px 10000px 10000px 10000px',
                        },
                    ],
                    host: {
                        '($.class._stuck)': 'stuck$',
                    },
                }]
        }], ctorParameters: function () { return [{ type: i1.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_STUCK]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhlYWQuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYWRkb24tdGFibGUvY29tcG9uZW50cy90YWJsZS9kaXJlY3RpdmVzL3RoZWFkLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLE1BQU0sRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNoRCxPQUFPLEVBQ0gsd0JBQXdCLEVBQ3hCLDJCQUEyQixHQUM5QixNQUFNLG9DQUFvQyxDQUFDO0FBRzVDLE9BQU8sRUFBQyxTQUFTLEVBQUUsa0JBQWtCLEVBQUMsTUFBTSw2QkFBNkIsQ0FBQzs7O0FBZ0IxRSxNQUFNLE9BQU8saUJBQWlCO0lBQzFCLFlBQXdDLE1BQTJCO1FBQTNCLFdBQU0sR0FBTixNQUFNLENBQXFCO0lBQUcsQ0FBQzs7K0dBRDlELGlCQUFpQixrQkFDTixTQUFTO21HQURwQixpQkFBaUIsK0ZBWmY7UUFDUCxrQkFBa0I7UUFDbEIsMkJBQTJCO1FBQzNCO1lBQ0ksT0FBTyxFQUFFLHdCQUF3QjtZQUNqQyxRQUFRLEVBQUUsNkJBQTZCO1NBQzFDO0tBQ0o7NEZBS1EsaUJBQWlCO2tCQWQ3QixTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSxpQkFBaUI7b0JBQzNCLFNBQVMsRUFBRTt3QkFDUCxrQkFBa0I7d0JBQ2xCLDJCQUEyQjt3QkFDM0I7NEJBQ0ksT0FBTyxFQUFFLHdCQUF3Qjs0QkFDakMsUUFBUSxFQUFFLDZCQUE2Qjt5QkFDMUM7cUJBQ0o7b0JBQ0QsSUFBSSxFQUFFO3dCQUNGLGtCQUFrQixFQUFFLFFBQVE7cUJBQy9CO2lCQUNKOzswQkFFZ0IsTUFBTTsyQkFBQyxTQUFTIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaXJlY3RpdmUsIEluamVjdH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICAgIElOVEVSU0VDVElPTl9ST09UX01BUkdJTixcbiAgICBJbnRlcnNlY3Rpb25PYnNlcnZlclNlcnZpY2UsXG59IGZyb20gJ0BuZy13ZWItYXBpcy9pbnRlcnNlY3Rpb24tb2JzZXJ2ZXInO1xuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHtUVUlfU1RVQ0ssIFRVSV9TVFVDS19QUk9WSURFUn0gZnJvbSAnLi4vcHJvdmlkZXJzL3N0dWNrLnByb3ZpZGVyJztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICd0aGVhZFt0dWlUaGVhZF0nLFxuICAgIHByb3ZpZGVyczogW1xuICAgICAgICBUVUlfU1RVQ0tfUFJPVklERVIsXG4gICAgICAgIEludGVyc2VjdGlvbk9ic2VydmVyU2VydmljZSxcbiAgICAgICAge1xuICAgICAgICAgICAgcHJvdmlkZTogSU5URVJTRUNUSU9OX1JPT1RfTUFSR0lOLFxuICAgICAgICAgICAgdXNlVmFsdWU6ICcwcHggMTAwMDBweCAxMDAwMHB4IDEwMDAwcHgnLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgaG9zdDoge1xuICAgICAgICAnKCQuY2xhc3MuX3N0dWNrKSc6ICdzdHVjayQnLFxuICAgIH0sXG59KVxuZXhwb3J0IGNsYXNzIFR1aVRoZWFkRGlyZWN0aXZlIHtcbiAgICBjb25zdHJ1Y3RvcihASW5qZWN0KFRVSV9TVFVDSykgcmVhZG9ubHkgc3R1Y2skOiBPYnNlcnZhYmxlPGJvb2xlYW4+KSB7fVxufVxuIl19