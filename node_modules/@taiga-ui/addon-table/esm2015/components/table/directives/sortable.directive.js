import { Directive, forwardRef, Inject } from '@angular/core';
import { TuiThComponent } from '../th/th.component';
import { TuiSortByDirective } from './sort-by.directive';
import { TuiTableDirective } from './table.directive';
import * as i0 from "@angular/core";
import * as i1 from "./sort-by.directive";
import * as i2 from "./table.directive";
import * as i3 from "../th/th.component";
export class TuiSortableDirective {
    constructor(sortBy, table, th) {
        this.sortBy = sortBy;
        this.table = table;
        this.th = th;
        this.sorter = () => 0;
    }
    get key() {
        return this.th.key;
    }
    ngOnInit() {
        this.sorter = this.match ? this.table.sorter : this.sorter;
        this.th.sorter = this.sorter;
    }
    check() {
        if (this.match && this.table.sorter !== this.sorter) {
            this.table.updateSorter(this.sorter);
        }
    }
    get match() {
        return this.sortBy.tuiSortBy === this.key;
    }
}
TuiSortableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSortableDirective, deps: [{ token: forwardRef(() => TuiSortByDirective) }, { token: TuiTableDirective }, { token: TuiThComponent }], target: i0.ɵɵFactoryTarget.Directive });
TuiSortableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiSortableDirective, selector: "th[tuiTh][tuiSortable]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSortableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'th[tuiTh][tuiSortable]',
                }]
        }], ctorParameters: function () { return [{ type: i1.TuiSortByDirective, decorators: [{
                    type: Inject,
                    args: [forwardRef(() => TuiSortByDirective)]
                }] }, { type: i2.TuiTableDirective, decorators: [{
                    type: Inject,
                    args: [TuiTableDirective]
                }] }, { type: i3.TuiThComponent, decorators: [{
                    type: Inject,
                    args: [TuiThComponent]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29ydGFibGUuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYWRkb24tdGFibGUvY29tcG9uZW50cy90YWJsZS9kaXJlY3RpdmVzL3NvcnRhYmxlLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQVMsTUFBTSxlQUFlLENBQUM7QUFHcEUsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLG9CQUFvQixDQUFDO0FBQ2xELE9BQU8sRUFBQyxrQkFBa0IsRUFBQyxNQUFNLHFCQUFxQixDQUFDO0FBQ3ZELE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLG1CQUFtQixDQUFDOzs7OztBQUtwRCxNQUFNLE9BQU8sb0JBQW9CO0lBRzdCLFlBRXFCLE1BQTZCLEVBQ0YsS0FBMkIsRUFDOUIsRUFBcUI7UUFGN0MsV0FBTSxHQUFOLE1BQU0sQ0FBdUI7UUFDRixVQUFLLEdBQUwsS0FBSyxDQUFzQjtRQUM5QixPQUFFLEdBQUYsRUFBRSxDQUFtQjtRQUdsRSxXQUFNLEdBQXFCLEdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUZ4QyxDQUFDO0lBSUosSUFBSSxHQUFHO1FBQ0gsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQztJQUN2QixDQUFDO0lBRUQsUUFBUTtRQUNKLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDM0QsSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNqQyxDQUFDO0lBRUQsS0FBSztRQUNELElBQUksSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sS0FBSyxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2pELElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN4QztJQUNMLENBQUM7SUFFRCxJQUFZLEtBQUs7UUFDYixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUM7SUFDOUMsQ0FBQzs7a0hBN0JRLG9CQUFvQixrQkFJakIsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLGtCQUFrQixDQUFDLGFBRXBDLGlCQUFpQixhQUNqQixjQUFjO3NHQVBqQixvQkFBb0I7NEZBQXBCLG9CQUFvQjtrQkFIaEMsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsd0JBQXdCO2lCQUNyQzs7MEJBS1EsTUFBTTsyQkFBQyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsa0JBQWtCLENBQUM7OzBCQUUzQyxNQUFNOzJCQUFDLGlCQUFpQjs7MEJBQ3hCLE1BQU07MkJBQUMsY0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGlyZWN0aXZlLCBmb3J3YXJkUmVmLCBJbmplY3QsIE9uSW5pdH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1R1aUNvbXBhcmF0b3J9IGZyb20gJ0B0YWlnYS11aS9hZGRvbi10YWJsZS90eXBlcyc7XG5cbmltcG9ydCB7VHVpVGhDb21wb25lbnR9IGZyb20gJy4uL3RoL3RoLmNvbXBvbmVudCc7XG5pbXBvcnQge1R1aVNvcnRCeURpcmVjdGl2ZX0gZnJvbSAnLi9zb3J0LWJ5LmRpcmVjdGl2ZSc7XG5pbXBvcnQge1R1aVRhYmxlRGlyZWN0aXZlfSBmcm9tICcuL3RhYmxlLmRpcmVjdGl2ZSc7XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAndGhbdHVpVGhdW3R1aVNvcnRhYmxlXScsXG59KVxuZXhwb3J0IGNsYXNzIFR1aVNvcnRhYmxlRGlyZWN0aXZlPFQgZXh0ZW5kcyBQYXJ0aWFsPFJlY29yZDxrZXlvZiBULCBhbnk+Pj5cbiAgICBpbXBsZW1lbnRzIE9uSW5pdFxue1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KGZvcndhcmRSZWYoKCkgPT4gVHVpU29ydEJ5RGlyZWN0aXZlKSlcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBzb3J0Qnk6IFR1aVNvcnRCeURpcmVjdGl2ZTxUPixcbiAgICAgICAgQEluamVjdChUdWlUYWJsZURpcmVjdGl2ZSkgcHJpdmF0ZSByZWFkb25seSB0YWJsZTogVHVpVGFibGVEaXJlY3RpdmU8VD4sXG4gICAgICAgIEBJbmplY3QoVHVpVGhDb21wb25lbnQpIHByaXZhdGUgcmVhZG9ubHkgdGg6IFR1aVRoQ29tcG9uZW50PFQ+LFxuICAgICkge31cblxuICAgIHNvcnRlcjogVHVpQ29tcGFyYXRvcjxUPiA9ICgpOiBudW1iZXIgPT4gMDtcblxuICAgIGdldCBrZXkoKToga2V5b2YgVCB7XG4gICAgICAgIHJldHVybiB0aGlzLnRoLmtleTtcbiAgICB9XG5cbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5zb3J0ZXIgPSB0aGlzLm1hdGNoID8gdGhpcy50YWJsZS5zb3J0ZXIgOiB0aGlzLnNvcnRlcjtcbiAgICAgICAgdGhpcy50aC5zb3J0ZXIgPSB0aGlzLnNvcnRlcjtcbiAgICB9XG5cbiAgICBjaGVjaygpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMubWF0Y2ggJiYgdGhpcy50YWJsZS5zb3J0ZXIgIT09IHRoaXMuc29ydGVyKSB7XG4gICAgICAgICAgICB0aGlzLnRhYmxlLnVwZGF0ZVNvcnRlcih0aGlzLnNvcnRlcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGdldCBtYXRjaCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc29ydEJ5LnR1aVNvcnRCeSA9PT0gdGhpcy5rZXk7XG4gICAgfVxufVxuIl19