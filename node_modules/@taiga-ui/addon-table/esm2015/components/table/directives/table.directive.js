import { ChangeDetectorRef, Directive, EventEmitter, HostBinding, Inject, Input, Output, } from '@angular/core';
import { IntersectionObserverService } from '@ng-web-apis/intersection-observer';
import { AbstractTuiController } from '@taiga-ui/cdk';
import { TUI_MODE } from '@taiga-ui/core';
import { TUI_STUCK } from '../providers/stuck.provider';
import { TUI_TABLE_PROVIDERS } from '../providers/table.providers';
import { TUI_TABLE_OPTIONS } from '../table.options';
import * as i0 from "@angular/core";
import * as i1 from "rxjs";
export class TuiTableDirective extends AbstractTuiController {
    constructor(entries$, mode$, stuck$, options, cdr) {
        super();
        this.entries$ = entries$;
        this.mode$ = mode$;
        this.stuck$ = stuck$;
        this.options = options;
        this.cdr = cdr;
        this.columns = [];
        this.size = this.options.size;
        this.direction = this.options.direction;
        this.directionChange = new EventEmitter();
        this.sorterChange = new EventEmitter();
        this.sorter = () => 0;
    }
    updateSorterAndDirection(sorter) {
        if (this.sorter === sorter) {
            this.updateDirection(this.direction === 1 ? -1 : 1);
        }
        else {
            this.updateSorter(sorter);
            this.updateDirection(1);
        }
    }
    ngAfterViewInit() {
        this.cdr.detectChanges();
    }
    updateSorter(sorter) {
        this.sorter = sorter || (() => 0);
        this.sorterChange.emit(this.sorter);
        this.change$.next();
    }
    updateDirection(direction) {
        this.direction = direction;
        this.directionChange.emit(this.direction);
        this.change$.next();
    }
}
TuiTableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTableDirective, deps: [{ token: IntersectionObserverService }, { token: TUI_MODE }, { token: TUI_STUCK }, { token: TUI_TABLE_OPTIONS }, { token: ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive });
TuiTableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiTableDirective, selector: "table[tuiTable]", inputs: { columns: "columns", size: "size", direction: "direction", sorter: "sorter" }, outputs: { directionChange: "directionChange", sorterChange: "sorterChange" }, host: { listeners: { "$.data-mode.attr": "mode$", "$.class._stuck": "stuck$" }, properties: { "attr.data-size": "this.size" }, styleAttribute: "border-collapse: separate" }, providers: TUI_TABLE_PROVIDERS, usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'table[tuiTable]',
                    providers: TUI_TABLE_PROVIDERS,
                    host: {
                        '($.data-mode.attr)': 'mode$',
                        '($.class._stuck)': 'stuck$',
                        style: 'border-collapse: separate',
                    },
                }]
        }], ctorParameters: function () { return [{ type: i1.Observable, decorators: [{
                    type: Inject,
                    args: [IntersectionObserverService]
                }] }, { type: i1.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_MODE]
                }] }, { type: i1.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_STUCK]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_TABLE_OPTIONS]
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }]; }, propDecorators: { columns: [{
                type: Input
            }], size: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.data-size']
            }], direction: [{
                type: Input
            }], directionChange: [{
                type: Output
            }], sorterChange: [{
                type: Output
            }], sorter: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYWRkb24tdGFibGUvY29tcG9uZW50cy90YWJsZS9kaXJlY3RpdmVzL3RhYmxlLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBRUgsaUJBQWlCLEVBQ2pCLFNBQVMsRUFDVCxZQUFZLEVBQ1osV0FBVyxFQUNYLE1BQU0sRUFDTixLQUFLLEVBQ0wsTUFBTSxHQUNULE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBQywyQkFBMkIsRUFBQyxNQUFNLG9DQUFvQyxDQUFDO0FBRS9FLE9BQU8sRUFBQyxxQkFBcUIsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNwRCxPQUFPLEVBQUMsUUFBUSxFQUFnQixNQUFNLGdCQUFnQixDQUFDO0FBR3ZELE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSw2QkFBNkIsQ0FBQztBQUN0RCxPQUFPLEVBQUMsbUJBQW1CLEVBQUMsTUFBTSw4QkFBOEIsQ0FBQztBQUNqRSxPQUFPLEVBQUMsaUJBQWlCLEVBQWtCLE1BQU0sa0JBQWtCLENBQUM7OztBQVdwRSxNQUFNLE9BQU8saUJBQ1QsU0FBUSxxQkFBcUI7SUFtQjdCLFlBRWEsUUFBaUQsRUFDL0IsS0FBdUMsRUFDdEMsTUFBMkIsRUFDWCxPQUF3QixFQUN4QixHQUFzQjtRQUVsRSxLQUFLLEVBQUUsQ0FBQztRQU5DLGFBQVEsR0FBUixRQUFRLENBQXlDO1FBQy9CLFVBQUssR0FBTCxLQUFLLENBQWtDO1FBQ3RDLFdBQU0sR0FBTixNQUFNLENBQXFCO1FBQ1gsWUFBTyxHQUFQLE9BQU8sQ0FBaUI7UUFDeEIsUUFBRyxHQUFILEdBQUcsQ0FBbUI7UUFyQnRFLFlBQU8sR0FBb0MsRUFBRSxDQUFDO1FBSTlDLFNBQUksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQztRQUd6QixjQUFTLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUM7UUFHMUIsb0JBQWUsR0FBRyxJQUFJLFlBQVksRUFBVSxDQUFDO1FBRzdDLGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQTJCLENBQUM7UUFjcEUsV0FBTSxHQUFxQixHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFIbkMsQ0FBQztJQUtELHdCQUF3QixDQUFDLE1BQStCO1FBQ3BELElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxNQUFNLEVBQUU7WUFDeEIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsU0FBUyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3ZEO2FBQU07WUFDSCxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQzFCLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDM0I7SUFDTCxDQUFDO0lBRUQsZUFBZTtRQUNYLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDN0IsQ0FBQztJQUVELFlBQVksQ0FBQyxNQUErQjtRQUN4QyxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2xDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNwQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3hCLENBQUM7SUFFTyxlQUFlLENBQUMsU0FBaUI7UUFDckMsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDeEIsQ0FBQzs7K0dBekRRLGlCQUFpQixrQkFxQmQsMkJBQTJCLGFBRTNCLFFBQVEsYUFDUixTQUFTLGFBQ1QsaUJBQWlCLGFBQ2pCLGlCQUFpQjttR0ExQnBCLGlCQUFpQiwrWEFQZixtQkFBbUI7NEZBT3JCLGlCQUFpQjtrQkFUN0IsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsaUJBQWlCO29CQUMzQixTQUFTLEVBQUUsbUJBQW1CO29CQUM5QixJQUFJLEVBQUU7d0JBQ0Ysb0JBQW9CLEVBQUUsT0FBTzt3QkFDN0Isa0JBQWtCLEVBQUUsUUFBUTt3QkFDNUIsS0FBSyxFQUFFLDJCQUEyQjtxQkFDckM7aUJBQ0o7OzBCQXNCUSxNQUFNOzJCQUFDLDJCQUEyQjs7MEJBRWxDLE1BQU07MkJBQUMsUUFBUTs7MEJBQ2YsTUFBTTsyQkFBQyxTQUFTOzswQkFDaEIsTUFBTTsyQkFBQyxpQkFBaUI7OzBCQUN4QixNQUFNOzJCQUFDLGlCQUFpQjs0Q0FyQjdCLE9BQU87c0JBRE4sS0FBSztnQkFLTixJQUFJO3NCQUZILEtBQUs7O3NCQUNMLFdBQVc7dUJBQUMsZ0JBQWdCO2dCQUk3QixTQUFTO3NCQURSLEtBQUs7Z0JBSUcsZUFBZTtzQkFEdkIsTUFBTTtnQkFJRSxZQUFZO3NCQURwQixNQUFNO2dCQWVQLE1BQU07c0JBREwsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgQWZ0ZXJWaWV3SW5pdCxcbiAgICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICBEaXJlY3RpdmUsXG4gICAgRXZlbnRFbWl0dGVyLFxuICAgIEhvc3RCaW5kaW5nLFxuICAgIEluamVjdCxcbiAgICBJbnB1dCxcbiAgICBPdXRwdXQsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtJbnRlcnNlY3Rpb25PYnNlcnZlclNlcnZpY2V9IGZyb20gJ0BuZy13ZWItYXBpcy9pbnRlcnNlY3Rpb24tb2JzZXJ2ZXInO1xuaW1wb3J0IHtUdWlDb21wYXJhdG9yfSBmcm9tICdAdGFpZ2EtdWkvYWRkb24tdGFibGUvdHlwZXMnO1xuaW1wb3J0IHtBYnN0cmFjdFR1aUNvbnRyb2xsZXJ9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtUVUlfTU9ERSwgVHVpQnJpZ2h0bmVzc30gZnJvbSAnQHRhaWdhLXVpL2NvcmUnO1xuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHtUVUlfU1RVQ0t9IGZyb20gJy4uL3Byb3ZpZGVycy9zdHVjay5wcm92aWRlcic7XG5pbXBvcnQge1RVSV9UQUJMRV9QUk9WSURFUlN9IGZyb20gJy4uL3Byb3ZpZGVycy90YWJsZS5wcm92aWRlcnMnO1xuaW1wb3J0IHtUVUlfVEFCTEVfT1BUSU9OUywgVHVpVGFibGVPcHRpb25zfSBmcm9tICcuLi90YWJsZS5vcHRpb25zJztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICd0YWJsZVt0dWlUYWJsZV0nLFxuICAgIHByb3ZpZGVyczogVFVJX1RBQkxFX1BST1ZJREVSUyxcbiAgICBob3N0OiB7XG4gICAgICAgICcoJC5kYXRhLW1vZGUuYXR0ciknOiAnbW9kZSQnLFxuICAgICAgICAnKCQuY2xhc3MuX3N0dWNrKSc6ICdzdHVjayQnLFxuICAgICAgICBzdHlsZTogJ2JvcmRlci1jb2xsYXBzZTogc2VwYXJhdGUnLFxuICAgIH0sXG59KVxuZXhwb3J0IGNsYXNzIFR1aVRhYmxlRGlyZWN0aXZlPFQgZXh0ZW5kcyBQYXJ0aWFsPFJlY29yZDxrZXlvZiBULCBhbnk+Pj5cbiAgICBleHRlbmRzIEFic3RyYWN0VHVpQ29udHJvbGxlclxuICAgIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdFxue1xuICAgIEBJbnB1dCgpXG4gICAgY29sdW1uczogUmVhZG9ubHlBcnJheTxzdHJpbmcgfCBrZXlvZiBUPiA9IFtdO1xuXG4gICAgQElucHV0KClcbiAgICBASG9zdEJpbmRpbmcoJ2F0dHIuZGF0YS1zaXplJylcbiAgICBzaXplID0gdGhpcy5vcHRpb25zLnNpemU7XG5cbiAgICBASW5wdXQoKVxuICAgIGRpcmVjdGlvbiA9IHRoaXMub3B0aW9ucy5kaXJlY3Rpb247XG5cbiAgICBAT3V0cHV0KClcbiAgICByZWFkb25seSBkaXJlY3Rpb25DaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPC0xIHwgMT4oKTtcblxuICAgIEBPdXRwdXQoKVxuICAgIHJlYWRvbmx5IHNvcnRlckNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8VHVpQ29tcGFyYXRvcjxUPiB8IG51bGw+KCk7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChJbnRlcnNlY3Rpb25PYnNlcnZlclNlcnZpY2UpXG4gICAgICAgIHJlYWRvbmx5IGVudHJpZXMkOiBPYnNlcnZhYmxlPEludGVyc2VjdGlvbk9ic2VydmVyRW50cnlbXT4sXG4gICAgICAgIEBJbmplY3QoVFVJX01PREUpIHJlYWRvbmx5IG1vZGUkOiBPYnNlcnZhYmxlPFR1aUJyaWdodG5lc3MgfCBudWxsPixcbiAgICAgICAgQEluamVjdChUVUlfU1RVQ0spIHJlYWRvbmx5IHN0dWNrJDogT2JzZXJ2YWJsZTxib29sZWFuPixcbiAgICAgICAgQEluamVjdChUVUlfVEFCTEVfT1BUSU9OUykgcHJpdmF0ZSByZWFkb25seSBvcHRpb25zOiBUdWlUYWJsZU9wdGlvbnMsXG4gICAgICAgIEBJbmplY3QoQ2hhbmdlRGV0ZWN0b3JSZWYpIHByaXZhdGUgcmVhZG9ubHkgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICApIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG5cbiAgICBASW5wdXQoKVxuICAgIHNvcnRlcjogVHVpQ29tcGFyYXRvcjxUPiA9ICgpID0+IDA7XG5cbiAgICB1cGRhdGVTb3J0ZXJBbmREaXJlY3Rpb24oc29ydGVyOiBUdWlDb21wYXJhdG9yPFQ+IHwgbnVsbCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5zb3J0ZXIgPT09IHNvcnRlcikge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVEaXJlY3Rpb24odGhpcy5kaXJlY3Rpb24gPT09IDEgPyAtMSA6IDEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVTb3J0ZXIoc29ydGVyKTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlRGlyZWN0aW9uKDEpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xuICAgICAgICB0aGlzLmNkci5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgfVxuXG4gICAgdXBkYXRlU29ydGVyKHNvcnRlcjogVHVpQ29tcGFyYXRvcjxUPiB8IG51bGwpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5zb3J0ZXIgPSBzb3J0ZXIgfHwgKCgpID0+IDApO1xuICAgICAgICB0aGlzLnNvcnRlckNoYW5nZS5lbWl0KHRoaXMuc29ydGVyKTtcbiAgICAgICAgdGhpcy5jaGFuZ2UkLm5leHQoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHVwZGF0ZURpcmVjdGlvbihkaXJlY3Rpb246IC0xIHwgMSk6IHZvaWQge1xuICAgICAgICB0aGlzLmRpcmVjdGlvbiA9IGRpcmVjdGlvbjtcbiAgICAgICAgdGhpcy5kaXJlY3Rpb25DaGFuZ2UuZW1pdCh0aGlzLmRpcmVjdGlvbik7XG4gICAgICAgIHRoaXMuY2hhbmdlJC5uZXh0KCk7XG4gICAgfVxufVxuIl19