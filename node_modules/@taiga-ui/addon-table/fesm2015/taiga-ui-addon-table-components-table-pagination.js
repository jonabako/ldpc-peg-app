import * as i0 from '@angular/core';
import { EventEmitter, Component, ChangeDetectionStrategy, Inject, Input, Output, NgModule } from '@angular/core';
import { TUI_TABLE_PAGINATION_TEXTS } from '@taiga-ui/addon-table/tokens';
import * as i1 from '@taiga-ui/core';
import { TUI_SPIN_ICONS, TUI_SPIN_TEXTS, TUI_COMMON_ICONS, TuiButtonModule, TuiLinkModule, TuiHostedDropdownModule, TuiDataListModule, TuiSvgModule } from '@taiga-ui/core';
import { tuiCreateToken, tuiProvideOptions } from '@taiga-ui/cdk';
import * as i2 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i3 from '@tinkoff/ng-polymorpheus';
import { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';
import * as i4 from 'rxjs';

function defaultSizeOptionContent({ $implicit }) {
    return `${$implicit}`;
}
const TUI_TABLE_PAGINATION_DEFAULT_OPTIONS = {
    sizeOptionContent: defaultSizeOptionContent,
    showPages: true,
    items: [10, 20, 50, 100],
    size: 10,
};
/**
 * Default parameters for TablePagination component
 */
const TUI_TABLE_PAGINATION_OPTIONS = tuiCreateToken(TUI_TABLE_PAGINATION_DEFAULT_OPTIONS);
function tuiTablePaginationOptionsProvider(options) {
    return tuiProvideOptions(TUI_TABLE_PAGINATION_OPTIONS, options, TUI_TABLE_PAGINATION_DEFAULT_OPTIONS);
}

class TuiTablePaginationComponent {
    constructor(icons, spinTexts$, texts$, options, commonIcons) {
        this.icons = icons;
        this.spinTexts$ = spinTexts$;
        this.texts$ = texts$;
        this.options = options;
        this.commonIcons = commonIcons;
        this.items = this.options.items;
        this.total = 0;
        this.page = 0;
        this.size = this.options.size;
        /**
         * TODO: Remove in 4.0
         * @deprecated use paginationChange
         */
        this.pageChange = new EventEmitter();
        /**
         * TODO: Remove in 4.0
         * @deprecated use paginationChange
         */
        this.sizeChange = new EventEmitter();
        this.paginationChange = new EventEmitter();
        this.open = false;
    }
    get pages() {
        return Math.ceil(this.total / this.size);
    }
    get start() {
        return this.page * this.size;
    }
    get end() {
        return Math.min(this.start + this.size, this.total);
    }
    get leftDisabled() {
        return !this.start;
    }
    get rightDisabled() {
        return this.end === this.total;
    }
    get pagination() {
        return {
            page: this.page,
            size: this.size,
        };
    }
    onItem(size) {
        const { start } = this;
        this.size = size;
        this.sizeChange.emit(size);
        this.open = false;
        this.page = Math.floor(start / this.size);
        this.pageChange.emit(this.page);
        this.paginationChange.emit(this.pagination);
    }
    back() {
        this.page--;
        this.pageChange.emit(this.page);
        this.paginationChange.emit(this.pagination);
    }
    forth() {
        this.page++;
        this.pageChange.emit(this.page);
        this.paginationChange.emit(this.pagination);
    }
}
TuiTablePaginationComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTablePaginationComponent, deps: [{ token: TUI_SPIN_ICONS }, { token: TUI_SPIN_TEXTS }, { token: TUI_TABLE_PAGINATION_TEXTS }, { token: TUI_TABLE_PAGINATION_OPTIONS }, { token: TUI_COMMON_ICONS }], target: i0.ɵɵFactoryTarget.Component });
TuiTablePaginationComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiTablePaginationComponent, selector: "tui-table-pagination", inputs: { items: "items", total: "total", page: "page", size: "size" }, outputs: { pageChange: "pageChange", sizeChange: "sizeChange", paginationChange: "paginationChange" }, ngImport: i0, template: "<ng-container *ngIf=\"texts$ | async as texts\">\n    <span class=\"t-pages\">\n        <ng-container *ngIf=\"options.showPages\">\n            {{ texts.pages }}\n            <strong class=\"t-strong\">{{ pages }}</strong>\n        </ng-container>\n    </span>\n    <span automation-id=\"tui-table-pagination__lines-per-page-wrapper\">\n        {{ texts.linesPerPage }}\n        <tui-hosted-dropdown\n            [content]=\"content\"\n            [(open)]=\"open\"\n        >\n            <button\n                tuiLink\n                type=\"button\"\n            >\n                <strong>{{ start + 1 }}\u2013{{ end }}</strong>\n            </button>\n            <ng-template #content>\n                <tui-data-list size=\"s\">\n                    <ng-container *ngFor=\"let item of items\">\n                        <button\n                            tuiOption\n                            class=\"t-item\"\n                            (click)=\"onItem(item)\"\n                        >\n                            <ng-container\n                                *polymorpheusOutlet=\"\n                                    options.sizeOptionContent as text;\n                                    context: {$implicit: item, total: total}\n                                \"\n                            >\n                                {{ text }}\n                            </ng-container>\n                            <tui-svg\n                                *ngIf=\"item === size; else fakeIcon\"\n                                class=\"t-checkmark\"\n                                [src]=\"commonIcons.check\"\n                            ></tui-svg>\n\n                            <ng-template #fakeIcon>\n                                <span class=\"t-checkmark\"></span>\n                            </ng-template>\n                        </button>\n                    </ng-container>\n                </tui-data-list>\n            </ng-template>\n        </tui-hosted-dropdown>\n        {{ texts.of }}\n        <strong class=\"t-strong\">{{ total }}</strong>\n    </span>\n    <ng-container *ngIf=\"spinTexts$ | async as spinTexts\">\n        <button\n            appearance=\"icon\"\n            size=\"xs\"\n            tuiIconButton\n            type=\"button\"\n            class=\"t-back\"\n            [disabled]=\"leftDisabled\"\n            [icon]=\"icons.decrement\"\n            [title]=\"spinTexts[0]\"\n            (click)=\"back()\"\n        ></button>\n        <button\n            appearance=\"icon\"\n            size=\"xs\"\n            tuiIconButton\n            type=\"button\"\n            [disabled]=\"rightDisabled\"\n            [icon]=\"icons.increment\"\n            [title]=\"spinTexts[1]\"\n            (click)=\"forth()\"\n        ></button>\n    </ng-container>\n</ng-container>\n", styles: [":host{display:flex;font:var(--tui-font-text-s);align-items:center;color:var(--tui-text-03)}.t-strong{color:var(--tui-text-01)}.t-pages{margin-right:auto}.t-item{min-width:5.5rem;box-sizing:border-box}.t-checkmark{min-width:1.5rem;border-left:5px solid transparent}.t-back{margin:0 .25rem 0 1.5rem}\n"], components: [{ type: i1.TuiHostedDropdownComponent, selector: "tui-hosted-dropdown", inputs: ["content", "sided", "canOpen", "open"], outputs: ["openChange", "focusedChange"] }, { type: i1.TuiLinkComponent, selector: "a[tuiLink], button[tuiLink]", inputs: ["pseudo", "icon", "iconAlign", "iconRotated", "mode"], exportAs: ["tuiLink"] }, { type: i1.TuiDataListComponent, selector: "tui-data-list", inputs: ["role", "emptyContent", "size"] }, { type: i1.TuiOptionComponent, selector: "button[tuiOption], a[tuiOption]", inputs: ["size", "role", "disabled", "value"] }, { type: i1.TuiSvgComponent, selector: "tui-svg", inputs: ["src"] }, { type: i1.TuiButtonComponent, selector: "button[tuiButton], button[tuiIconButton], a[tuiButton], a[tuiIconButton]", inputs: ["appearance", "disabled", "icon", "iconRight", "shape", "showLoader", "size"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }], pipes: { "async": i2.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTablePaginationComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-table-pagination',
                    templateUrl: './table-pagination.template.html',
                    styleUrls: ['./table-pagination.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_SPIN_ICONS]
                }] }, { type: i4.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_SPIN_TEXTS]
                }] }, { type: i4.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_TABLE_PAGINATION_TEXTS]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_TABLE_PAGINATION_OPTIONS]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_COMMON_ICONS]
                }] }]; }, propDecorators: { items: [{
                type: Input
            }], total: [{
                type: Input
            }], page: [{
                type: Input
            }], size: [{
                type: Input
            }], pageChange: [{
                type: Output
            }], sizeChange: [{
                type: Output
            }], paginationChange: [{
                type: Output
            }] } });

class TuiTablePaginationModule {
}
TuiTablePaginationModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTablePaginationModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiTablePaginationModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTablePaginationModule, declarations: [TuiTablePaginationComponent], imports: [CommonModule,
        TuiButtonModule,
        TuiLinkModule,
        TuiHostedDropdownModule,
        TuiDataListModule,
        TuiSvgModule,
        PolymorpheusModule], exports: [TuiTablePaginationComponent] });
TuiTablePaginationModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTablePaginationModule, imports: [[
            CommonModule,
            TuiButtonModule,
            TuiLinkModule,
            TuiHostedDropdownModule,
            TuiDataListModule,
            TuiSvgModule,
            PolymorpheusModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTablePaginationModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        TuiButtonModule,
                        TuiLinkModule,
                        TuiHostedDropdownModule,
                        TuiDataListModule,
                        TuiSvgModule,
                        PolymorpheusModule,
                    ],
                    declarations: [TuiTablePaginationComponent],
                    exports: [TuiTablePaginationComponent],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TUI_TABLE_PAGINATION_DEFAULT_OPTIONS, TUI_TABLE_PAGINATION_OPTIONS, TuiTablePaginationComponent, TuiTablePaginationModule, tuiTablePaginationOptionsProvider };
//# sourceMappingURL=taiga-ui-addon-table-components-table-pagination.js.map
