import * as i0 from '@angular/core';
import { Directive, Input, Optional, Inject, Pipe, NgModule } from '@angular/core';
import { ALWAYS_TRUE_HANDLER } from '@taiga-ui/cdk';
import * as i3 from '@angular/forms';
import { NgControl } from '@angular/forms';
import * as i1 from '@taiga-ui/addon-table/components';
import { TuiHeadDirective } from '@taiga-ui/addon-table/components';
import { ReplaySubject, identity, merge, defer, EMPTY } from 'rxjs';
import { switchMap, startWith, map, distinctUntilChanged } from 'rxjs/operators';

class AbstractTuiTableFilter {
}

class TuiGenericFilterDirective extends AbstractTuiTableFilter {
    constructor() {
        super(...arguments);
        this.filter = ALWAYS_TRUE_HANDLER;
    }
}
TuiGenericFilterDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiGenericFilterDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TuiGenericFilterDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiGenericFilterDirective, selector: "[tuiGenericFilter]", inputs: { filter: ["tuiGenericFilter", "filter"] }, providers: [
        {
            provide: AbstractTuiTableFilter,
            useExisting: TuiGenericFilterDirective,
        },
    ], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiGenericFilterDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiGenericFilter]',
                    providers: [
                        {
                            provide: AbstractTuiTableFilter,
                            useExisting: TuiGenericFilterDirective,
                        },
                    ],
                }]
        }], propDecorators: { filter: [{
                type: Input,
                args: ['tuiGenericFilter']
            }] } });

class TuiTableFiltersDirective {
    constructor() {
        this.refresh$ = new ReplaySubject(1);
        this.filters = [];
    }
    register(filter) {
        this.filters = this.filters.concat(filter);
        this.update();
    }
    unregister(filter) {
        this.filters = this.filters.filter(item => item !== filter);
        this.update();
    }
    filter(items) {
        return this.refresh$.pipe(switchMap(identity), startWith(null), map(() => items.filter(item => this.check(item))));
    }
    check(item) {
        return this.filters.every(filter => filter.filter(item));
    }
    update() {
        this.refresh$.next(merge(...this.filters.map(({ refresh$ }) => refresh$)));
    }
}
TuiTableFiltersDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTableFiltersDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
TuiTableFiltersDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiTableFiltersDirective, selector: "[tuiTableFilters]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTableFiltersDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiTableFilters]',
                }]
        }] });

class TuiTableFilterDirective {
    constructor(head, delegate, control, filters) {
        this.head = head;
        this.delegate = delegate;
        this.control = control;
        this.filters = filters;
        this.refresh$ = defer(() => {
            var _a;
            return merge(this.control.valueChanges || EMPTY, ((_a = this.control.statusChanges) === null || _a === void 0 ? void 0 : _a.pipe(distinctUntilChanged())) || EMPTY);
        });
    }
    ngOnInit() {
        this.filters.register(this);
    }
    ngOnDestroy() {
        this.filters.unregister(this);
    }
    filter(item) {
        const { disabled, value } = this.control;
        return (!!disabled ||
            !this.key ||
            this.delegate.filter(item[this.key], value));
    }
    get key() {
        var _a;
        return this.tuiTableFilter || ((_a = this.head) === null || _a === void 0 ? void 0 : _a.tuiHead);
    }
}
TuiTableFilterDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTableFilterDirective, deps: [{ token: TuiHeadDirective, optional: true }, { token: AbstractTuiTableFilter }, { token: NgControl }, { token: TuiTableFiltersDirective }], target: i0.ɵɵFactoryTarget.Directive });
TuiTableFilterDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiTableFilterDirective, selector: "[tuiTableFilter]", inputs: { tuiTableFilter: "tuiTableFilter" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTableFilterDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiTableFilter]',
                }]
        }], ctorParameters: function () { return [{ type: i1.TuiHeadDirective, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TuiHeadDirective]
                }] }, { type: AbstractTuiTableFilter, decorators: [{
                    type: Inject,
                    args: [AbstractTuiTableFilter]
                }] }, { type: i3.NgControl, decorators: [{
                    type: Inject,
                    args: [NgControl]
                }] }, { type: TuiTableFiltersDirective, decorators: [{
                    type: Inject,
                    args: [TuiTableFiltersDirective]
                }] }]; }, propDecorators: { tuiTableFilter: [{
                type: Input
            }] } });

class TuiTableFiltersPipe {
    constructor(filters) {
        this.filters = filters;
    }
    transform(items) {
        return this.filters.filter(items);
    }
}
TuiTableFiltersPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTableFiltersPipe, deps: [{ token: TuiTableFiltersDirective }], target: i0.ɵɵFactoryTarget.Pipe });
TuiTableFiltersPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTableFiltersPipe, name: "tuiTableFilters" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTableFiltersPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'tuiTableFilters',
                }]
        }], ctorParameters: function () { return [{ type: TuiTableFiltersDirective, decorators: [{
                    type: Inject,
                    args: [TuiTableFiltersDirective]
                }] }]; } });

class TuiTableFiltersModule {
}
TuiTableFiltersModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTableFiltersModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiTableFiltersModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTableFiltersModule, declarations: [TuiTableFiltersDirective,
        TuiTableFilterDirective,
        TuiTableFiltersPipe,
        TuiGenericFilterDirective], exports: [TuiTableFiltersDirective,
        TuiTableFilterDirective,
        TuiTableFiltersPipe,
        TuiGenericFilterDirective] });
TuiTableFiltersModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTableFiltersModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTableFiltersModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        TuiTableFiltersDirective,
                        TuiTableFilterDirective,
                        TuiTableFiltersPipe,
                        TuiGenericFilterDirective,
                    ],
                    exports: [
                        TuiTableFiltersDirective,
                        TuiTableFilterDirective,
                        TuiTableFiltersPipe,
                        TuiGenericFilterDirective,
                    ],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { AbstractTuiTableFilter, TuiGenericFilterDirective, TuiTableFilterDirective, TuiTableFiltersDirective, TuiTableFiltersModule, TuiTableFiltersPipe };
//# sourceMappingURL=taiga-ui-addon-table-directives-table-filters.js.map
