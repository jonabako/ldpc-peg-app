import { EventEmitter } from '@angular/core';
import { TuiBooleanHandler, TuiDay, TuiDayRange, TuiMonth, TuiTypedMapper, TuiYear } from '@taiga-ui/cdk';
import { TuiWithOptionalMinMax } from '@taiga-ui/core/interfaces';
import { TuiCalendarView, TuiMarkerHandler } from '@taiga-ui/core/types';
import * as i0 from "@angular/core";
export declare class TuiCalendarComponent implements TuiWithOptionalMinMax<TuiDay> {
    private day;
    private view;
    set initialView(view: TuiCalendarView);
    month: TuiMonth;
    disabledItemHandler: TuiBooleanHandler<TuiDay>;
    min: TuiDay | null;
    max: TuiDay | null;
    minViewedMonth: TuiMonth | null;
    maxViewedMonth: TuiMonth | null;
    hoveredItem: TuiDay | null;
    showAdjacent: boolean;
    markerHandler: TuiMarkerHandler;
    set value(value: TuiDay | TuiDayRange | readonly TuiDay[] | null);
    get value(): TuiDay | TuiDayRange | readonly TuiDay[] | null;
    readonly dayClick: EventEmitter<TuiDay>;
    readonly monthChange: EventEmitter<TuiMonth>;
    readonly hoveredItemChange: EventEmitter<TuiDay | null>;
    get isInYearView(): boolean;
    readonly disabledItemHandlerMapper: TuiTypedMapper<[
        TuiBooleanHandler<TuiDay>,
        TuiDay,
        TuiDay
    ], TuiBooleanHandler<TuiDay>>;
    get computedMin(): TuiDay;
    get computedMax(): TuiDay;
    get computedMinViewedMonth(): TuiMonth;
    get computedMaxViewedMonth(): TuiMonth;
    onPaginationYearClick(): void;
    onPickerYearClick({ year }: TuiYear): void;
    onPaginationValueChange(month: TuiMonth): void;
    onDayClick(day: TuiDay): void;
    onHoveredItemChange(day: TuiDay | null): void;
    private updateViewedMonth;
    private updateHoveredDay;
    static ɵfac: i0.ɵɵFactoryDeclaration<TuiCalendarComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TuiCalendarComponent, "tui-calendar", never, { "initialView": "initialView"; "month": "month"; "disabledItemHandler": "disabledItemHandler"; "min": "min"; "max": "max"; "minViewedMonth": "minViewedMonth"; "maxViewedMonth": "maxViewedMonth"; "hoveredItem": "hoveredItem"; "showAdjacent": "showAdjacent"; "markerHandler": "markerHandler"; "value": "value"; }, { "dayClick": "dayClick"; "monthChange": "monthChange"; "hoveredItemChange": "hoveredItemChange"; }, never, never>;
}
