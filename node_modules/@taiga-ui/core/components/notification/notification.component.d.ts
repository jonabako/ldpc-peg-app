import { EventEmitter } from '@angular/core';
import { TuiCommonIcons, TuiNotificationDefaultOptions } from '@taiga-ui/core/tokens';
import { TuiNotificationT } from '@taiga-ui/core/types';
import { Observable } from 'rxjs';
import * as i0 from "@angular/core";
export declare class TuiNotificationComponent {
    readonly closeWord$: Observable<string>;
    readonly icons: TuiCommonIcons;
    readonly options: TuiNotificationDefaultOptions;
    /**
     * @deprecated Use {@link TuiNotificationComponent.icon} input or TUI_NOTIFICATION_OPTIONS instead
     */
    hasIcon: boolean;
    icon: import("@tinkoff/ng-polymorpheus").PolymorpheusContent<import("@taiga-ui/cdk").TuiContextWithImplicit<TuiNotificationT>>;
    status: TuiNotificationT;
    size: "m" | "l" | "s";
    hideClose: boolean;
    readonly close: EventEmitter<void>;
    constructor(closeWord$: Observable<string>, icons: TuiCommonIcons, options: TuiNotificationDefaultOptions);
    get hasClose(): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<TuiNotificationComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TuiNotificationComponent, "tui-notification,a[tuiNotification],button[tuiNotification]", never, { "hasIcon": "hasIcon"; "icon": "icon"; "status": "status"; "size": "size"; "hideClose": "hideClose"; }, { "close": "close"; }, never, ["*"]>;
}
