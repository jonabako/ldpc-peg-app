import { ElementRef, EventEmitter, QueryList } from '@angular/core';
import { AbstractTuiInteractive, TuiContextWithImplicit } from '@taiga-ui/cdk';
import { TuiHintOptionsDirective } from '@taiga-ui/core/directives/hint';
import { TuiTextfieldController, TuiTextfieldOptions } from '@taiga-ui/core/directives/textfield-controller';
import { TuiSizeL, TuiSizeS } from '@taiga-ui/core/types';
import { PolymorpheusContent } from '@tinkoff/ng-polymorpheus';
import { Observable } from 'rxjs';
import { TuiPrimitiveTextfield } from './primitive-textfield-types';
import * as i0 from "@angular/core";
export declare const TUI_ICON_PADDINGS: Record<TuiSizeL | TuiSizeS, number>;
export declare class TuiPrimitiveTextfieldComponent extends AbstractTuiInteractive implements TuiPrimitiveTextfield {
    readonly controller: TuiTextfieldController;
    readonly hintOptions: TuiHintOptionsDirective | null;
    readonly options: TuiTextfieldOptions;
    private readonly el;
    private readonly focusableElement?;
    editable: boolean;
    /** @deprecated use `tuiTextfieldFiller` from {@link TuiTextfieldControllerModule} instead */
    textfieldFiller: string;
    /**
     * @deprecated:
     * use `tuiTextfieldOptionsProvider({iconCleaner: `tuiIconChevronUp`})`
     */
    iconCleaner: PolymorpheusContent<TuiContextWithImplicit<"m" | "l" | "s">>;
    readOnly: boolean;
    invalid: boolean;
    disabled: boolean;
    /** @deprecated use `tuiTextfieldPrefix` from {@link TuiTextfieldControllerModule} instead */
    textfieldPrefix: string;
    /** @deprecated use `tuiTextfieldPostfix` from {@link TuiTextfieldControllerModule} instead */
    textfieldPostfix: string;
    value: string;
    readonly valueChange: EventEmitter<string>;
    readonly content?: QueryList<unknown>;
    autofilled: boolean;
    constructor(controller: TuiTextfieldController, hintOptions: TuiHintOptionsDirective | null, options: TuiTextfieldOptions, el: ElementRef<HTMLElement>);
    get prefix(): string;
    get postfix(): string;
    get filler(): string;
    get nativeFocusableElement(): HTMLInputElement | null;
    get focused(): boolean;
    get appearance(): string;
    get size(): TuiSizeL | TuiSizeS;
    get computedInvalid(): boolean;
    get inputHidden(): boolean;
    get hasValue(): boolean;
    get hasCleaner(): boolean;
    get hasTooltip(): boolean;
    get hasCustomContent(): boolean;
    get placeholderVisible(): boolean;
    get hasPlaceholder(): boolean;
    get placeholderRaised(): boolean;
    get borderStart(): number;
    get borderEnd(): number;
    get iconContent(): PolymorpheusContent<TuiContextWithImplicit<TuiSizeL | TuiSizeS>>;
    get iconLeftContent(): PolymorpheusContent<TuiContextWithImplicit<TuiSizeL | TuiSizeS>>;
    get showHint(): boolean;
    get name(): 'ccexpiryyear' | null;
    get computedId(): string;
    onFocused(focused: boolean): void;
    getIndent$(element: HTMLElement): Observable<number>;
    clear(): void;
    onMouseDown(event: MouseEvent): void;
    onModelChange(value: string): void;
    onAutofilled(autofilled: boolean): void;
    detectRetargetFromLabel(event: Event): void;
    private get iconPaddingLeft();
    private get placeholderRaisable();
    private updateAutofilled;
    private updateValue;
    static ɵfac: i0.ɵɵFactoryDeclaration<TuiPrimitiveTextfieldComponent, [null, { optional: true; }, null, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TuiPrimitiveTextfieldComponent, "tui-primitive-textfield", never, { "editable": "editable"; "textfieldFiller": "filler"; "iconCleaner": "iconCleaner"; "readOnly": "readOnly"; "invalid": "invalid"; "disabled": "disabled"; "textfieldPrefix": "prefix"; "textfieldPostfix": "postfix"; "value": "value"; }, { "valueChange": "valueChange"; }, ["content"], ["input", "select", "tuiContent", "*"]>;
}
