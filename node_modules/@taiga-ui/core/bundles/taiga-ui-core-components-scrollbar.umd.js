(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@taiga-ui/cdk'), require('@taiga-ui/core/constants'), require('@ng-web-apis/common'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('@taiga-ui/core/components/scrollbar', ['exports', '@angular/core', '@taiga-ui/cdk', '@taiga-ui/core/constants', '@ng-web-apis/common', '@angular/common'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global["taiga-ui"] = global["taiga-ui"] || {}, global["taiga-ui"].core = global["taiga-ui"].core || {}, global["taiga-ui"].core.components = global["taiga-ui"].core.components || {}, global["taiga-ui"].core.components.scrollbar = {}), global.ng.core, global.i1, global["taiga-ui"].core.constants, global.common, global.ng.common));
})(this, (function (exports, i0, i1, constants, common, i2) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);

    /** @deprecated import from `@taiga-ui/cdk` instead */
    var SCROLL_REF_SELECTOR = '[tuiScrollRef]';
    /** @deprecated import from `@taiga-ui/cdk` instead */
    var TuiScrollRefDirective = /** @class */ (function () {
        function TuiScrollRefDirective() {
        }
        return TuiScrollRefDirective;
    }());
    TuiScrollRefDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiScrollRefDirective, deps: [], target: i0__namespace.ɵɵFactoryTarget.Directive });
    TuiScrollRefDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiScrollRefDirective, selector: "[tuiScrollRef]", providers: [
            {
                provide: i1.TUI_SCROLL_REF,
                useExisting: i0.ElementRef,
            },
        ], ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiScrollRefDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: SCROLL_REF_SELECTOR,
                        providers: [
                            {
                                provide: i1.TUI_SCROLL_REF,
                                useExisting: i0.ElementRef,
                            },
                        ],
                    }]
            }] });

    var TuiScrollableDirective = /** @class */ (function () {
        function TuiScrollableDirective(el) {
            this.el = el;
        }
        TuiScrollableDirective.prototype.ngOnInit = function () {
            this.el.nativeElement.dispatchEvent(new CustomEvent(constants.TUI_SCROLLABLE, {
                bubbles: true,
                detail: this.el.nativeElement,
            }));
        };
        return TuiScrollableDirective;
    }());
    TuiScrollableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiScrollableDirective, deps: [{ token: i0.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    TuiScrollableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiScrollableDirective, selector: "[tuiScrollable]", ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiScrollableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[tuiScrollable]',
                    }]
            }], ctorParameters: function () {
            return [{ type: i0__namespace.ElementRef, decorators: [{
                            type: i0.Inject,
                            args: [i0.ElementRef]
                        }] }];
        } });

    // TODO: Remove all legacy code in 4.0
    var TuiScrollbarComponent = /** @class */ (function () {
        function TuiScrollbarComponent(cssRef, el, userAgent, isIos) {
            this.cssRef = cssRef;
            this.el = el;
            this.userAgent = userAgent;
            this.isIos = isIos;
            this.isLegacy = !this.cssRef.supports('position', 'sticky') ||
                (i1.tuiIsFirefox(this.userAgent) &&
                    !this.cssRef.supports('scrollbar-width', 'none'));
            this.hidden = false;
            this.browserScrollRef = new i0.ElementRef(this.el.nativeElement);
        }
        Object.defineProperty(TuiScrollbarComponent.prototype, "delegated", {
            get: function () {
                return this.browserScrollRef.nativeElement !== this.el.nativeElement;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TuiScrollbarComponent.prototype, "showScrollbars", {
            get: function () {
                return !this.hidden && !this.isIos && (!this.isLegacy || this.delegated);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TuiScrollbarComponent.prototype, "showNative", {
            get: function () {
                return this.isLegacy && !this.hidden && !this.delegated;
            },
            enumerable: false,
            configurable: true
        });
        TuiScrollbarComponent.prototype.onScrollable = function (element) {
            this.browserScrollRef.nativeElement = element;
        };
        TuiScrollbarComponent.prototype.scrollIntoView = function (detail) {
            var _a;
            if (this.delegated) {
                return;
            }
            var nativeElement = this.browserScrollRef.nativeElement;
            var _b = i1.tuiGetElementOffset(nativeElement, detail), offsetTop = _b.offsetTop, offsetLeft = _b.offsetLeft;
            var clientHeight = nativeElement.clientHeight, clientWidth = nativeElement.clientWidth;
            var offsetHeight = detail.offsetHeight, offsetWidth = detail.offsetWidth;
            var scrollTop = offsetTop + offsetHeight / 2 - clientHeight / 2;
            var scrollLeft = offsetLeft + offsetWidth / 2 - clientWidth / 2;
            // ?. for our clients on Windows XP and Chrome 49
            (_a = nativeElement.scrollTo) === null || _a === void 0 ? void 0 : _a.call(nativeElement, scrollLeft, scrollTop);
        };
        return TuiScrollbarComponent;
    }());
    TuiScrollbarComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiScrollbarComponent, deps: [{ token: common.CSS }, { token: i0.ElementRef }, { token: common.USER_AGENT }, { token: i1.TUI_IS_IOS }], target: i0__namespace.ɵɵFactoryTarget.Component });
    TuiScrollbarComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiScrollbarComponent, selector: "tui-scrollbar", inputs: { hidden: "hidden" }, host: { listeners: { "tui-scrollable.stop": "onScrollable($event.detail)", "tui-scroll-into-view.stop": "scrollIntoView($event.detail)" }, properties: { "class._legacy": "this.showNative" } }, providers: [
            {
                provide: i1.TUI_SCROLL_REF,
                deps: [TuiScrollbarComponent],
                useFactory: function (_b) {
                    var browserScrollRef = _b.browserScrollRef;
                    return browserScrollRef;
                },
            },
        ], ngImport: i0__namespace, template: "<tui-scroll-controls\n    *ngIf=\"showScrollbars\"\n    class=\"t-bars\"\n></tui-scroll-controls>\n<div\n    class=\"t-content\"\n    [class.t-content_delegated]=\"delegated\"\n>\n    <ng-content></ng-content>\n</div>\n", styles: [":host{position:relative;display:flex;isolation:isolate;overflow:auto}:host:not(._legacy){scrollbar-width:none;-ms-overflow-style:none}:host:not(._legacy)::-webkit-scrollbar,:host:not(._legacy)::-webkit-scrollbar-thumb{background:transparent;width:0;height:0}:host._legacy{overflow:overlay}@media all and (-webkit-min-device-pixel-ratio: 0) and (min-resolution: .001dpcm){:host._legacy::-webkit-scrollbar,:host._legacy::-webkit-scrollbar-thumb{width:1rem;height:1rem;border-radius:6.25rem;background-clip:padding-box;border:.375rem solid transparent}:host._legacy::-webkit-scrollbar{background-color:transparent}:host._legacy::-webkit-scrollbar-thumb{background-color:var(--tui-clear-hover)}:host._legacy::-webkit-scrollbar-thumb:hover{background-color:var(--tui-clear-active)}:host._legacy::-webkit-scrollbar-thumb:active{background-color:var(--tui-text-03)}}.t-content{isolation:isolate;flex:1;flex-basis:auto;width:100%;height:-webkit-max-content;height:max-content}.t-content_delegated{height:100%}.t-bars{color:var(--tui-text-01)}\n"], components: [{ type: i1__namespace.TuiScrollControlsComponent, selector: "tui-scroll-controls" }], directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiScrollbarComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'tui-scrollbar',
                        templateUrl: './scrollbar.template.html',
                        styleUrls: ['./scrollbar.style.less'],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        providers: [
                            {
                                provide: i1.TUI_SCROLL_REF,
                                deps: [TuiScrollbarComponent],
                                useFactory: function (_b) {
                                    var browserScrollRef = _b.browserScrollRef;
                                    return browserScrollRef;
                                },
                            },
                        ],
                    }]
            }], ctorParameters: function () {
            return [{ type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [common.CSS]
                        }] }, { type: i0__namespace.ElementRef, decorators: [{
                            type: i0.Inject,
                            args: [i0.ElementRef]
                        }] }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [common.USER_AGENT]
                        }] }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i1.TUI_IS_IOS]
                        }] }];
        }, propDecorators: { hidden: [{
                    type: i0.Input
                }], showNative: [{
                    type: i0.HostBinding,
                    args: ['class._legacy']
                }], onScrollable: [{
                    type: i0.HostListener,
                    args: [constants.TUI_SCROLLABLE + ".stop", ['$event.detail']]
                }], scrollIntoView: [{
                    type: i0.HostListener,
                    args: [constants.TUI_SCROLL_INTO_VIEW + ".stop", ['$event.detail']]
                }] } });

    var TuiScrollbarModule = /** @class */ (function () {
        function TuiScrollbarModule() {
        }
        return TuiScrollbarModule;
    }());
    TuiScrollbarModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiScrollbarModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    TuiScrollbarModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiScrollbarModule, declarations: [TuiScrollbarComponent, TuiScrollRefDirective, TuiScrollableDirective], imports: [i2.CommonModule, i1.TuiScrollControlsModule], exports: [TuiScrollbarComponent, TuiScrollRefDirective, TuiScrollableDirective] });
    TuiScrollbarModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiScrollbarModule, imports: [[i2.CommonModule, i1.TuiScrollControlsModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiScrollbarModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i2.CommonModule, i1.TuiScrollControlsModule],
                        declarations: [TuiScrollbarComponent, TuiScrollRefDirective, TuiScrollableDirective],
                        exports: [TuiScrollbarComponent, TuiScrollRefDirective, TuiScrollableDirective],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.SCROLL_REF_SELECTOR = SCROLL_REF_SELECTOR;
    exports.TuiScrollRefDirective = TuiScrollRefDirective;
    exports.TuiScrollableDirective = TuiScrollableDirective;
    exports.TuiScrollbarComponent = TuiScrollbarComponent;
    exports.TuiScrollbarModule = TuiScrollbarModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=taiga-ui-core-components-scrollbar.umd.js.map
