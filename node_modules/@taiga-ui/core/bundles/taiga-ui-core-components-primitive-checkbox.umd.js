(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@taiga-ui/cdk'), require('@taiga-ui/core/enums'), require('@angular/core'), require('@taiga-ui/core/components/svg'), require('@taiga-ui/core/directives/wrapper'), require('@tinkoff/ng-polymorpheus')) :
    typeof define === 'function' && define.amd ? define('@taiga-ui/core/components/primitive-checkbox', ['exports', '@taiga-ui/cdk', '@taiga-ui/core/enums', '@angular/core', '@taiga-ui/core/components/svg', '@taiga-ui/core/directives/wrapper', '@tinkoff/ng-polymorpheus'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global["taiga-ui"] = global["taiga-ui"] || {}, global["taiga-ui"].core = global["taiga-ui"].core || {}, global["taiga-ui"].core.components = global["taiga-ui"].core.components || {}, global["taiga-ui"].core.components["primitive-checkbox"] = {}), global.cdk, global["taiga-ui"].core.enums, global.ng.core, global["taiga-ui"].core.components.svg, global["taiga-ui"].core.directives.wrapper, global.i3));
})(this, (function (exports, cdk, enums, i0, i1, i2, i3) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);

    /** Default values for the checkbox options. */
    var TUI_CHECKBOX_DEFAULT_OPTIONS = {
        size: 'm',
        appearances: {
            unchecked: enums.TuiAppearance.Outline,
            checked: enums.TuiAppearance.Primary,
            indeterminate: enums.TuiAppearance.Primary,
        },
        icons: {
            checked: function (_a) {
                var $implicit = _a.$implicit;
                return $implicit === 'm' ? 'tuiIconCheck' : 'tuiIconCheckLarge';
            },
            indeterminate: function (_a) {
                var $implicit = _a.$implicit;
                return $implicit === 'm' ? 'tuiIconMinus' : 'tuiIconMinusLarge';
            },
        },
    };
    /**
     * Default parameters for checkbox component
     */
    var TUI_CHECKBOX_OPTIONS = cdk.tuiCreateToken(TUI_CHECKBOX_DEFAULT_OPTIONS);
    function tuiCheckboxOptionsProvider(options) {
        return cdk.tuiProvideOptions(TUI_CHECKBOX_OPTIONS, options, TUI_CHECKBOX_DEFAULT_OPTIONS);
    }

    var TuiPrimitiveCheckboxComponent = /** @class */ (function () {
        function TuiPrimitiveCheckboxComponent(options) {
            this.options = options;
            this.size = this.options.size;
            this.disabled = false;
            this.focused = false;
            this.hovered = false;
            this.pressed = false;
            this.invalid = false;
            this.icon = this.options.icons.checked;
            this.value = false;
        }
        Object.defineProperty(TuiPrimitiveCheckboxComponent.prototype, "valueSetter", {
            set: function (value) {
                if (value !== false) {
                    this.setCurrentIcon(value);
                }
                this.value = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TuiPrimitiveCheckboxComponent.prototype, "appearance", {
            get: function () {
                switch (this.value) {
                    case false:
                        return this.options.appearances.unchecked;
                    case true:
                        return this.options.appearances.checked;
                    default:
                        return this.options.appearances.indeterminate;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TuiPrimitiveCheckboxComponent.prototype, "empty", {
            get: function () {
                return this.value === false;
            },
            enumerable: false,
            configurable: true
        });
        TuiPrimitiveCheckboxComponent.prototype.setCurrentIcon = function (value) {
            this.icon =
                value === null
                    ? this.options.icons.indeterminate
                    : this.options.icons.checked;
        };
        return TuiPrimitiveCheckboxComponent;
    }());
    TuiPrimitiveCheckboxComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiPrimitiveCheckboxComponent, deps: [{ token: TUI_CHECKBOX_OPTIONS }], target: i0__namespace.ɵɵFactoryTarget.Component });
    TuiPrimitiveCheckboxComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiPrimitiveCheckboxComponent, selector: "tui-primitive-checkbox", inputs: { size: "size", disabled: "disabled", focused: "focused", hovered: "hovered", pressed: "pressed", invalid: "invalid", valueSetter: ["value", "valueSetter"] }, host: { properties: { "attr.data-size": "this.size" } }, ngImport: i0__namespace, template: "<div\n    tuiWrapper\n    [active]=\"pressed\"\n    [appearance]=\"appearance\"\n    [disabled]=\"disabled\"\n    [focus]=\"focused\"\n    [hover]=\"hovered\"\n    [invalid]=\"invalid\"\n>\n    <tui-svg\n        *polymorpheusOutlet=\"icon as src; context: {$implicit: size}\"\n        class=\"t-mark\"\n        [class.t-mark_on]=\"!empty\"\n        [src]=\"src\"\n    ></tui-svg>\n    <ng-content></ng-content>\n</div>\n", styles: [":host{display:block;font-size:0;flex-shrink:0}:host[data-size=m]{width:1rem;height:1rem;border-radius:var(--tui-radius-xs)}:host[data-size=l]{width:1.5rem;height:1.5rem;border-radius:var(--tui-radius-s)}.t-mark{transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;display:block;width:100%;height:100%;transform:scale(0)}.t-mark_on{transform:scale(1)}\n"], components: [{ type: i1__namespace.TuiSvgComponent, selector: "tui-svg", inputs: ["src"] }], directives: [{ type: i2__namespace.TuiWrapperDirective, selector: "[tuiWrapper]", inputs: ["disabled", "readOnly", "hover", "active", "focus", "invalid", "appearance"] }, { type: i3__namespace.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiPrimitiveCheckboxComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'tui-primitive-checkbox',
                        templateUrl: './primitive-checkbox.template.html',
                        styleUrls: ['./primitive-checkbox.style.less'],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () {
            return [{ type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [TUI_CHECKBOX_OPTIONS]
                        }] }];
        }, propDecorators: { size: [{
                    type: i0.Input
                }, {
                    type: i0.HostBinding,
                    args: ['attr.data-size']
                }], disabled: [{
                    type: i0.Input
                }], focused: [{
                    type: i0.Input
                }], hovered: [{
                    type: i0.Input
                }], pressed: [{
                    type: i0.Input
                }], invalid: [{
                    type: i0.Input
                }], valueSetter: [{
                    type: i0.Input,
                    args: ['value']
                }] } });

    var TuiPrimitiveCheckboxModule = /** @class */ (function () {
        function TuiPrimitiveCheckboxModule() {
        }
        return TuiPrimitiveCheckboxModule;
    }());
    TuiPrimitiveCheckboxModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiPrimitiveCheckboxModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    TuiPrimitiveCheckboxModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiPrimitiveCheckboxModule, declarations: [TuiPrimitiveCheckboxComponent], imports: [i1.TuiSvgModule, i2.TuiWrapperModule, i3.PolymorpheusModule], exports: [TuiPrimitiveCheckboxComponent] });
    TuiPrimitiveCheckboxModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiPrimitiveCheckboxModule, imports: [[i1.TuiSvgModule, i2.TuiWrapperModule, i3.PolymorpheusModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiPrimitiveCheckboxModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i1.TuiSvgModule, i2.TuiWrapperModule, i3.PolymorpheusModule],
                        declarations: [TuiPrimitiveCheckboxComponent],
                        exports: [TuiPrimitiveCheckboxComponent],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.TUI_CHECKBOX_DEFAULT_OPTIONS = TUI_CHECKBOX_DEFAULT_OPTIONS;
    exports.TUI_CHECKBOX_OPTIONS = TUI_CHECKBOX_OPTIONS;
    exports.TuiPrimitiveCheckboxComponent = TuiPrimitiveCheckboxComponent;
    exports.TuiPrimitiveCheckboxModule = TuiPrimitiveCheckboxModule;
    exports.tuiCheckboxOptionsProvider = tuiCheckboxOptionsProvider;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=taiga-ui-core-components-primitive-checkbox.umd.js.map
