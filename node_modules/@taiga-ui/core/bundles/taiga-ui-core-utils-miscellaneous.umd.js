(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@taiga-ui/core/constants'), require('@taiga-ui/cdk')) :
    typeof define === 'function' && define.amd ? define('@taiga-ui/core/utils/miscellaneous', ['exports', '@taiga-ui/core/constants', '@taiga-ui/cdk'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global["taiga-ui"] = global["taiga-ui"] || {}, global["taiga-ui"].core = global["taiga-ui"].core || {}, global["taiga-ui"].core.utils = global["taiga-ui"].core.utils || {}, global["taiga-ui"].core.utils.miscellaneous = {}), global["taiga-ui"].core.constants, global.cdk));
})(this, (function (exports, constants, cdk) { 'use strict';

    var ITEM_SIZE = 1.5;
    var CONTENT_SIZE = 2.5;
    function tuiGetBorder(hasIcon, hasCleaner, hasTooltip, hasContent, size) {
        if (hasCleaner === void 0) { hasCleaner = false; }
        if (hasTooltip === void 0) { hasTooltip = false; }
        if (hasContent === void 0) { hasContent = false; }
        if (size === void 0) { size = 'm'; }
        var offset = size === 's' ? 0 : 0.25;
        var border = 0;
        if (hasIcon) {
            border += ITEM_SIZE + offset;
        }
        if (hasCleaner) {
            border += ITEM_SIZE + offset;
        }
        if (hasTooltip) {
            border += ITEM_SIZE + offset;
        }
        if (hasContent) {
            border += CONTENT_SIZE + offset;
        }
        return border;
    }

    function tuiIconsPathFactory(staticPath) {
        var base = staticPath.endsWith('/') ? staticPath : staticPath + "/";
        return function (name) {
            if (name.startsWith('tuiIcon')) {
                return "" + base + name + ".svg" + constants.TUI_CACHE_BUSTING_PAYLOAD + "#" + name;
            }
            return constants.DEFAULT_ICONS_PATH(name);
        };
    }

    /**
     * Check if pressed key is interactive in terms of input field
     */
    function tuiIsEditingKey(key) {
        return key.length === 1 || constants.tuiEditingKeys.includes(key);
    }

    /**
     * @internal
     */
    function tuiIsObscured(el, exceptSelector) {
        if (exceptSelector === void 0) { exceptSelector = 'tui-hints-host'; }
        var _a;
        return !!((_a = cdk.tuiGetElementObscures(el)) === null || _a === void 0 ? void 0 : _a.some(function (el) { return !el.closest(exceptSelector); }));
    }

    function tuiIsPresumedHTMLString(candidate) {
        var trimmed = candidate.trim();
        return trimmed.startsWith('<') && trimmed.endsWith('>');
    }

    function tuiOverrideOptions(override, fallback) {
        return function (directive, options) {
            var result = directive || Object.assign({}, (options || fallback));
            Object.keys(override).forEach(function (key) {
                // Update directive props with new defaults before inputs are processed
                result[key] = override[key];
            });
            return result;
        };
    }

    var SIZES = {
        xxs: 0,
        xs: 1,
        s: 2,
        m: 3,
        l: 4,
        xl: 5,
        xxl: 6,
    };
    /**
     * Compares size constants to determine if first size is bigger than the second
     *
     * @param size size that we need to compare
     * @param biggerThanSize size to compare with, 's' by default
     */
    function tuiSizeBigger(size, biggerThanSize) {
        if (biggerThanSize === void 0) { biggerThanSize = 's'; }
        return SIZES[size] > SIZES[biggerThanSize];
    }

    /**
     * Generated bundle index. Do not edit.
     */

    exports.tuiGetBorder = tuiGetBorder;
    exports.tuiIconsPathFactory = tuiIconsPathFactory;
    exports.tuiIsEditingKey = tuiIsEditingKey;
    exports.tuiIsObscured = tuiIsObscured;
    exports.tuiIsPresumedHTMLString = tuiIsPresumedHTMLString;
    exports.tuiOverrideOptions = tuiOverrideOptions;
    exports.tuiSizeBigger = tuiSizeBigger;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=taiga-ui-core-utils-miscellaneous.umd.js.map
