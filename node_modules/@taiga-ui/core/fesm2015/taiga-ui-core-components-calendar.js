import * as i0 from '@angular/core';
import { EventEmitter, Component, ChangeDetectionStrategy, Input, Output, NgModule } from '@angular/core';
import * as i6 from '@taiga-ui/cdk';
import { TuiMonth, ALWAYS_FALSE_HANDLER, TUI_FIRST_DAY, TUI_LAST_DAY, TuiDay, tuiNullableSame, TuiMapperPipeModule } from '@taiga-ui/cdk';
import { TUI_DEFAULT_MARKER_HANDLER } from '@taiga-ui/core/constants';
import * as i1 from '@taiga-ui/core/components/scrollbar';
import { TuiScrollbarModule } from '@taiga-ui/core/components/scrollbar';
import * as i2 from '@taiga-ui/core/components/primitive-year-picker';
import { TuiPrimitiveYearPickerModule } from '@taiga-ui/core/components/primitive-year-picker';
import * as i3 from '@taiga-ui/core/internal/primitive-year-month-pagination';
import { TuiPrimitiveYearMonthPaginationModule } from '@taiga-ui/core/internal/primitive-year-month-pagination';
import * as i4 from '@taiga-ui/core/components/primitive-calendar';
import { TuiPrimitiveCalendarModule } from '@taiga-ui/core/components/primitive-calendar';
import * as i5 from '@angular/common';
import { CommonModule } from '@angular/common';

class TuiCalendarComponent {
    constructor() {
        this.day = null;
        this.view = 'month';
        this.month = TuiMonth.currentLocal();
        this.disabledItemHandler = ALWAYS_FALSE_HANDLER;
        this.min = TUI_FIRST_DAY;
        this.max = TUI_LAST_DAY;
        this.minViewedMonth = TUI_FIRST_DAY;
        this.maxViewedMonth = TUI_LAST_DAY;
        this.hoveredItem = null;
        this.showAdjacent = true;
        this.markerHandler = TUI_DEFAULT_MARKER_HANDLER;
        this.dayClick = new EventEmitter();
        this.monthChange = new EventEmitter();
        this.hoveredItemChange = new EventEmitter();
        this.disabledItemHandlerMapper = (disabledItemHandler, min, max) => item => item.dayBefore(min) || item.dayAfter(max) || disabledItemHandler(item);
    }
    set initialView(view) {
        this.view = view;
    }
    set value(value) {
        this.day = value;
        if (this.showAdjacent && value instanceof TuiDay) {
            this.month = value;
        }
    }
    get value() {
        return this.day;
    }
    get isInYearView() {
        return this.view === 'year';
    }
    get computedMin() {
        var _a;
        return (_a = this.min) !== null && _a !== void 0 ? _a : TUI_FIRST_DAY;
    }
    get computedMax() {
        var _a;
        return (_a = this.max) !== null && _a !== void 0 ? _a : TUI_LAST_DAY;
    }
    get computedMinViewedMonth() {
        var _a;
        const min = this.computedMin;
        const minViewed = (_a = this.minViewedMonth) !== null && _a !== void 0 ? _a : TUI_FIRST_DAY;
        return minViewed.monthSameOrAfter(min) ? minViewed : min;
    }
    get computedMaxViewedMonth() {
        var _a;
        const max = this.computedMax;
        const maxViewed = (_a = this.maxViewedMonth) !== null && _a !== void 0 ? _a : TUI_LAST_DAY;
        return maxViewed.monthSameOrBefore(max) ? maxViewed : max;
    }
    onPaginationYearClick() {
        this.view = 'year';
    }
    onPickerYearClick({ year }) {
        this.view = 'month';
        this.updateViewedMonth(new TuiMonth(year, this.month.month));
    }
    onPaginationValueChange(month) {
        this.updateViewedMonth(month);
    }
    onDayClick(day) {
        this.dayClick.emit(day);
    }
    onHoveredItemChange(day) {
        this.updateHoveredDay(day);
    }
    updateViewedMonth(month) {
        if (this.month.monthSame(month)) {
            return;
        }
        this.month = month;
        this.monthChange.emit(month);
    }
    updateHoveredDay(day) {
        if (tuiNullableSame(this.hoveredItem, day, (a, b) => a.daySame(b))) {
            return;
        }
        this.hoveredItem = day;
        this.hoveredItemChange.emit(day);
    }
}
TuiCalendarComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiCalendarComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
TuiCalendarComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiCalendarComponent, selector: "tui-calendar", inputs: { initialView: "initialView", month: "month", disabledItemHandler: "disabledItemHandler", min: "min", max: "max", minViewedMonth: "minViewedMonth", maxViewedMonth: "maxViewedMonth", hoveredItem: "hoveredItem", showAdjacent: "showAdjacent", markerHandler: "markerHandler", value: "value" }, outputs: { dayClick: "dayClick", monthChange: "monthChange", hoveredItemChange: "hoveredItemChange" }, ngImport: i0, template: "<tui-scrollbar\n    *ngIf=\"isInYearView; else calendar\"\n    automation-id=\"tui-calendar__scrollbar\"\n    class=\"t-scrollbar\"\n>\n    <tui-primitive-year-picker\n        automation-id=\"tui-calendar__year\"\n        [initialItem]=\"month\"\n        [max]=\"computedMax\"\n        [min]=\"computedMin\"\n        [value]=\"value\"\n        (yearClick)=\"onPickerYearClick($event)\"\n    ></tui-primitive-year-picker>\n</tui-scrollbar>\n<ng-template #calendar>\n    <tui-primitive-year-month-pagination\n        automation-id=\"tui-calendar__pagination\"\n        class=\"t-pagination\"\n        [max]=\"computedMaxViewedMonth\"\n        [min]=\"computedMinViewedMonth\"\n        [value]=\"month\"\n        (valueChange)=\"onPaginationValueChange($event)\"\n        (yearClick)=\"onPaginationYearClick()\"\n    ></tui-primitive-year-month-pagination>\n    <tui-primitive-calendar\n        automation-id=\"tui-calendar__calendar\"\n        [disabledItemHandler]=\"disabledItemHandler | tuiMapper: disabledItemHandlerMapper : computedMin : computedMax\"\n        [hoveredItem]=\"hoveredItem\"\n        [markerHandler]=\"markerHandler\"\n        [month]=\"month\"\n        [showAdjacent]=\"showAdjacent\"\n        [value]=\"value\"\n        (dayClick)=\"onDayClick($event)\"\n        (hoveredItemChange)=\"onHoveredItemChange($event)\"\n    ></tui-primitive-calendar>\n</ng-template>\n", styles: [":host{display:block;height:18.25rem;width:15.75rem;padding:1rem 1.125rem;box-sizing:content-box}.t-scrollbar{height:18.25rem;width:16.875rem}.t-pagination{margin-bottom:1rem}\n"], components: [{ type: i1.TuiScrollbarComponent, selector: "tui-scrollbar", inputs: ["hidden"] }, { type: i2.TuiPrimitiveYearPickerComponent, selector: "tui-primitive-year-picker", inputs: ["value", "initialItem", "min", "max", "disabledItemHandler"], outputs: ["yearClick"] }, { type: i3.TuiPrimitiveYearMonthPaginationComponent, selector: "tui-primitive-year-month-pagination", inputs: ["value", "min", "max"], outputs: ["valueChange", "yearClick"] }, { type: i4.TuiPrimitiveCalendarComponent, selector: "tui-primitive-calendar", inputs: ["month", "disabledItemHandler", "markerHandler", "value", "hoveredItem", "showAdjacent"], outputs: ["hoveredItemChange", "dayClick"] }], directives: [{ type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "tuiMapper": i6.TuiMapperPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiCalendarComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-calendar',
                    templateUrl: './calendar.template.html',
                    styleUrls: ['./calendar.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { initialView: [{
                type: Input
            }], month: [{
                type: Input
            }], disabledItemHandler: [{
                type: Input
            }], min: [{
                type: Input
            }], max: [{
                type: Input
            }], minViewedMonth: [{
                type: Input
            }], maxViewedMonth: [{
                type: Input
            }], hoveredItem: [{
                type: Input
            }], showAdjacent: [{
                type: Input
            }], markerHandler: [{
                type: Input
            }], value: [{
                type: Input
            }], dayClick: [{
                type: Output
            }], monthChange: [{
                type: Output
            }], hoveredItemChange: [{
                type: Output
            }] } });

class TuiCalendarModule {
}
TuiCalendarModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiCalendarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiCalendarModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiCalendarModule, declarations: [TuiCalendarComponent], imports: [CommonModule,
        TuiPrimitiveYearMonthPaginationModule,
        TuiPrimitiveCalendarModule,
        TuiPrimitiveYearPickerModule,
        TuiScrollbarModule,
        TuiMapperPipeModule], exports: [TuiCalendarComponent] });
TuiCalendarModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiCalendarModule, imports: [[
            CommonModule,
            TuiPrimitiveYearMonthPaginationModule,
            TuiPrimitiveCalendarModule,
            TuiPrimitiveYearPickerModule,
            TuiScrollbarModule,
            TuiMapperPipeModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiCalendarModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        TuiPrimitiveYearMonthPaginationModule,
                        TuiPrimitiveCalendarModule,
                        TuiPrimitiveYearPickerModule,
                        TuiScrollbarModule,
                        TuiMapperPipeModule,
                    ],
                    declarations: [TuiCalendarComponent],
                    exports: [TuiCalendarComponent],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TuiCalendarComponent, TuiCalendarModule };
//# sourceMappingURL=taiga-ui-core-components-calendar.js.map
