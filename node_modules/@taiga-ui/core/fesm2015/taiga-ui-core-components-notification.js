import * as i0 from '@angular/core';
import { EventEmitter, Component, ChangeDetectionStrategy, Inject, Input, HostBinding, Output, NgModule } from '@angular/core';
import { tuiIsObserved } from '@taiga-ui/cdk';
import { TUI_CLOSE_WORD, TUI_COMMON_ICONS, TUI_NOTIFICATION_OPTIONS } from '@taiga-ui/core/tokens';
import * as i1 from '@taiga-ui/core/components/svg';
import { TuiSvgModule } from '@taiga-ui/core/components/svg';
import * as i2 from '@taiga-ui/core/components/button';
import { TuiButtonModule } from '@taiga-ui/core/components/button';
import * as i3 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i4 from '@tinkoff/ng-polymorpheus';
import { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';
import * as i5 from 'rxjs';

class TuiNotificationComponent {
    constructor(closeWord$, icons, options) {
        this.closeWord$ = closeWord$;
        this.icons = icons;
        this.options = options;
        /**
         * @deprecated Use {@link TuiNotificationComponent.icon} input or TUI_NOTIFICATION_OPTIONS instead
         */
        this.hasIcon = this.options.hasIcon;
        this.icon = this.options.icon;
        this.status = this.options.status;
        this.size = this.options.size;
        this.hideClose = false;
        this.close = new EventEmitter();
    }
    get hasClose() {
        return !this.hideClose && tuiIsObserved(this.close);
    }
}
TuiNotificationComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiNotificationComponent, deps: [{ token: TUI_CLOSE_WORD }, { token: TUI_COMMON_ICONS }, { token: TUI_NOTIFICATION_OPTIONS }], target: i0.ɵɵFactoryTarget.Component });
TuiNotificationComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiNotificationComponent, selector: "tui-notification,a[tuiNotification],button[tuiNotification]", inputs: { hasIcon: "hasIcon", icon: "icon", status: "status", size: "size", hideClose: "hideClose" }, outputs: { close: "close" }, host: { properties: { "attr.data-status": "this.status", "attr.data-size": "this.size" } }, ngImport: i0, template: "<ng-container *ngIf=\"icon && hasIcon\">\n    <tui-svg\n        *polymorpheusOutlet=\"icon as iconName; context: {$implicit: status}\"\n        automation-id=\"tui-notification__icon\"\n        class=\"t-icon\"\n        [src]=\"iconName\"\n    ></tui-svg>\n</ng-container>\n<div class=\"t-content\">\n    <ng-content></ng-content>\n</div>\n<button\n    *ngIf=\"hasClose\"\n    appearance=\"icon\"\n    automation-id=\"tui-notification__close\"\n    size=\"xs\"\n    tuiIconButton\n    type=\"button\"\n    class=\"t-close\"\n    [icon]=\"icons.close\"\n    [title]=\"closeWord$ | async\"\n    (click)=\"close.emit()\"\n></button>\n<tui-svg\n    automation-id=\"tui-notification__more\"\n    class=\"t-more\"\n    [src]=\"icons.more\"\n></tui-svg>\n", styles: [":host{font:var(--tui-font-text-s);color:var(--tui-text-01);position:relative;display:flex;padding:.75rem 1rem;border-radius:var(--tui-radius-m);background:#fff;background:var(--tui-base-01);box-sizing:border-box;overflow:hidden;text-align:left}:host .t-more{display:none}:hostbutton,:hosta{border:none;cursor:pointer}:hostbutton .t-more,:hosta .t-more{display:inline-flex;color:var(--tui-text-01);opacity:.5}:host[data-size=s]{padding:.375rem .625rem}:host[data-size=s] .t-icon{width:1rem;height:1.25rem;margin:0 .375rem 0 -.125rem}:host[data-size=s] .t-close{margin:-.125rem -.375rem -.125rem .75rem}:host[data-size=s] .t-more{margin:-.125rem -.375rem -.125rem 0}:host[data-size=m]{padding:.75rem}:host[data-size=m] .t-icon{width:1.25rem;height:1.25rem;margin-right:.5rem}:host[data-size=m] .t-close{margin:-.125rem -.125rem -.125rem 1rem}:host[data-size=m] .t-more{margin:-.125rem -.375rem -.125rem 0}:host[data-size=l]{padding:1rem;font:var(--tui-font-text-m);border-radius:var(--tui-radius-l)}:host[data-size=l] .t-icon{width:1.5rem;height:1.5rem;margin-right:.5rem}:host[data-size=l] .t-more{margin-right:-.5rem}:host[data-status=info]{color:var(--tui-info-fill);background:linear-gradient(var(--tui-info-bg),var(--tui-info-bg)),var(--tui-base-01)}:host[data-status=success]{color:var(--tui-success-fill);background:linear-gradient(var(--tui-success-bg),var(--tui-success-bg)),var(--tui-base-01)}:host[data-status=error]{color:var(--tui-error-fill);background:linear-gradient(var(--tui-error-bg),var(--tui-error-bg)),var(--tui-base-01)}:host[data-status=warning]{color:var(--tui-warning-fill);background:linear-gradient(var(--tui-warning-bg),var(--tui-warning-bg)),var(--tui-base-01)}:host[data-status=neutral]{color:var(--tui-neutral-fill);background:linear-gradient(var(--tui-neutral-bg),var(--tui-neutral-bg)),var(--tui-base-01)}.t-content{flex:1;word-break:break-word;color:var(--tui-text-01);text-align:inherit;align-self:center}\n"], components: [{ type: i1.TuiSvgComponent, selector: "tui-svg", inputs: ["src"] }, { type: i2.TuiButtonComponent, selector: "button[tuiButton], button[tuiIconButton], a[tuiButton], a[tuiIconButton]", inputs: ["appearance", "disabled", "icon", "iconRight", "shape", "showLoader", "size"] }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }], pipes: { "async": i3.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiNotificationComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-notification,a[tuiNotification],button[tuiNotification]',
                    templateUrl: './notification.template.html',
                    styleUrls: ['./notification.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i5.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_CLOSE_WORD]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_COMMON_ICONS]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_NOTIFICATION_OPTIONS]
                }] }]; }, propDecorators: { hasIcon: [{
                type: Input
            }], icon: [{
                type: Input
            }], status: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.data-status']
            }], size: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.data-size']
            }], hideClose: [{
                type: Input
            }], close: [{
                type: Output
            }] } });

class TuiNotificationModule {
}
TuiNotificationModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiNotificationModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiNotificationModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiNotificationModule, declarations: [TuiNotificationComponent], imports: [CommonModule, TuiSvgModule, TuiButtonModule, PolymorpheusModule], exports: [TuiNotificationComponent] });
TuiNotificationModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiNotificationModule, imports: [[CommonModule, TuiSvgModule, TuiButtonModule, PolymorpheusModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiNotificationModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, TuiSvgModule, TuiButtonModule, PolymorpheusModule],
                    declarations: [TuiNotificationComponent],
                    exports: [TuiNotificationComponent],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TuiNotificationComponent, TuiNotificationModule };
//# sourceMappingURL=taiga-ui-core-components-notification.js.map
