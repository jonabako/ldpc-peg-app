import * as i0 from '@angular/core';
import { EventEmitter, ElementRef, Component, ChangeDetectionStrategy, Inject, Input, Output, HostListener, NgModule } from '@angular/core';
import { AbstractTuiInteractive, tuiIsNativeFocusedIn } from '@taiga-ui/cdk';
import { TUI_SPIN_ICONS, TUI_SPIN_TEXTS } from '@taiga-ui/core/tokens';
import * as i1 from '@taiga-ui/core/components/button';
import { TuiButtonModule } from '@taiga-ui/core/components/button';
import * as i2 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i3 from 'rxjs';

class TuiPrimitiveSpinButtonComponent extends AbstractTuiInteractive {
    constructor(el, icons, spinTexts$) {
        super();
        this.el = el;
        this.icons = icons;
        this.spinTexts$ = spinTexts$;
        this.disabled = false;
        this.leftDisabled = false;
        this.rightDisabled = false;
        this.leftClick = new EventEmitter();
        this.rightClick = new EventEmitter();
    }
    get focused() {
        return tuiIsNativeFocusedIn(this.el.nativeElement);
    }
    get leftComputedDisabled() {
        return this.computedDisabled || this.leftDisabled;
    }
    get rightComputedDisabled() {
        return this.computedDisabled || this.rightDisabled;
    }
    onLeftClick() {
        if (!this.leftComputedDisabled) {
            this.leftClick.emit();
        }
    }
    onRightClick() {
        if (!this.rightComputedDisabled) {
            this.rightClick.emit();
        }
    }
    onFocused(focused) {
        this.updateFocused(focused);
    }
    onFocusVisible(focusVisible) {
        this.updateFocusVisible(focusVisible);
    }
}
TuiPrimitiveSpinButtonComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPrimitiveSpinButtonComponent, deps: [{ token: ElementRef }, { token: TUI_SPIN_ICONS }, { token: TUI_SPIN_TEXTS }], target: i0.ɵɵFactoryTarget.Component });
TuiPrimitiveSpinButtonComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiPrimitiveSpinButtonComponent, selector: "tui-primitive-spin-button", inputs: { disabled: "disabled", leftDisabled: "leftDisabled", rightDisabled: "rightDisabled" }, outputs: { leftClick: "leftClick", rightClick: "rightClick" }, host: { listeners: { "mousedown.silent.prevent": "(0)", "keydown.arrowLeft.prevent": "onLeftClick()", "keydown.arrowRight.prevent": "onRightClick()", "focusin": "onFocused(true)", "focusout": "onFocused(false)" } }, usesInheritance: true, ngImport: i0, template: "<ng-container *ngIf=\"spinTexts$ | async as texts\">\n    <button\n        appearance=\"flat\"\n        automation-id=\"tui-primitive-spin-button__left\"\n        size=\"xs\"\n        tuiIconButton\n        type=\"button\"\n        [class.t-hidden]=\"leftComputedDisabled\"\n        [focusable]=\"computedFocusable\"\n        [icon]=\"icons.decrement\"\n        [title]=\"texts[0]\"\n        (click)=\"onLeftClick()\"\n    ></button>\n    <span class=\"t-content t-calendar-title\">\n        <ng-content></ng-content>\n    </span>\n    <button\n        appearance=\"flat\"\n        automation-id=\"tui-primitive-spin-button__right\"\n        size=\"xs\"\n        tuiIconButton\n        type=\"button\"\n        [class.t-hidden]=\"rightComputedDisabled\"\n        [focusable]=\"computedFocusable\"\n        [icon]=\"icons.increment\"\n        [title]=\"texts[1]\"\n        (click)=\"onRightClick()\"\n    ></button>\n</ng-container>\n", styles: [":host{display:flex;align-items:center;justify-content:space-between;font:var(--tui-font-text-l);text-align:center;font-weight:bold}.t-hidden{visibility:hidden}.t-content{padding:0 .5rem}\n"], components: [{ type: i1.TuiButtonComponent, selector: "button[tuiButton], button[tuiIconButton], a[tuiButton], a[tuiIconButton]", inputs: ["appearance", "disabled", "icon", "iconRight", "shape", "showLoader", "size"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i2.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPrimitiveSpinButtonComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-primitive-spin-button',
                    templateUrl: './primitive-spin-button.template.html',
                    styleUrls: ['./primitive-spin-button.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: {
                        '(mousedown.silent.prevent)': '(0)',
                    },
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_SPIN_ICONS]
                }] }, { type: i3.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_SPIN_TEXTS]
                }] }]; }, propDecorators: { disabled: [{
                type: Input
            }], leftDisabled: [{
                type: Input
            }], rightDisabled: [{
                type: Input
            }], leftClick: [{
                type: Output
            }], rightClick: [{
                type: Output
            }], onLeftClick: [{
                type: HostListener,
                args: ['keydown.arrowLeft.prevent']
            }], onRightClick: [{
                type: HostListener,
                args: ['keydown.arrowRight.prevent']
            }], onFocused: [{
                type: HostListener,
                args: ['focusin', ['true']]
            }, {
                type: HostListener,
                args: ['focusout', ['false']]
            }] } });

class TuiPrimitiveSpinButtonModule {
}
TuiPrimitiveSpinButtonModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPrimitiveSpinButtonModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiPrimitiveSpinButtonModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPrimitiveSpinButtonModule, declarations: [TuiPrimitiveSpinButtonComponent], imports: [CommonModule, TuiButtonModule], exports: [TuiPrimitiveSpinButtonComponent] });
TuiPrimitiveSpinButtonModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPrimitiveSpinButtonModule, imports: [[CommonModule, TuiButtonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPrimitiveSpinButtonModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, TuiButtonModule],
                    declarations: [TuiPrimitiveSpinButtonComponent],
                    exports: [TuiPrimitiveSpinButtonComponent],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TuiPrimitiveSpinButtonComponent, TuiPrimitiveSpinButtonModule };
//# sourceMappingURL=taiga-ui-core-components-primitive-spin-button.js.map
