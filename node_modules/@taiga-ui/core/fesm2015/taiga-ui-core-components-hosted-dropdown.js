import * as i0 from '@angular/core';
import { Optional, SkipSelf, Directive, InjectionToken, Self, Inject, EventEmitter, ElementRef, Component, ChangeDetectionStrategy, ContentChild, ViewChild, Input, Output, HostListener, NgModule } from '@angular/core';
import { TuiPositionAccessor } from '@taiga-ui/core/abstract';
import * as i1$1 from '@taiga-ui/cdk';
import { TuiDestroyService, tuiTypedFromEvent, tuiGetActualTarget, tuiIsNativeKeyboardFocusable, tuiGetClosestFocusable, tuiIsNativeFocusedIn, tuiIsHTMLElement, tuiIsElementEditable, tuiIsElement, tuiAsFocusableItemAccessor, TuiActiveZoneDirective, TuiLetModule, TuiObscuredModule, TuiActiveZoneModule } from '@taiga-ui/cdk';
import * as i2 from '@taiga-ui/core/directives';
import { TuiDropdownDirective, TuiDropdownOpenDirective } from '@taiga-ui/core/directives';
import { filter, takeUntil, map, switchMap, delay, skip, distinctUntilChanged, share } from 'rxjs/operators';
import * as i1 from 'rxjs';
import { BehaviorSubject, combineLatest, of, EMPTY, merge } from 'rxjs';
import { __decorate } from 'tslib';
import * as i4 from '@taiga-ui/core/directives/dropdown';
import { TuiDropdownHoverDirective, TuiDropdownDirective as TuiDropdownDirective$1, TuiDropdownModule, TuiDropdownOptionsDirective } from '@taiga-ui/core/directives/dropdown';
import { tuiIsEditingKey } from '@taiga-ui/core/utils/miscellaneous';
import { shouldCall } from '@tinkoff/ng-event-plugins';
import * as i5 from '@tinkoff/ng-polymorpheus';
import { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';
import * as i6 from '@angular/common';
import { CommonModule } from '@angular/common';

class TuiAccessorProxyDirective extends TuiPositionAccessor {
    constructor() {
        super(...arguments);
        this.type = 'dummy';
    }
    getPosition() {
        return [0, 0];
    }
}
TuiAccessorProxyDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiAccessorProxyDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TuiAccessorProxyDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiAccessorProxyDirective, selector: "[tuiAccessorProxy]", providers: [
        {
            provide: TuiPositionAccessor,
            multi: true,
            deps: [
                [new Optional(), new SkipSelf(), TuiAccessorProxyDirective],
                TuiAccessorProxyDirective,
            ],
            useFactory: (accessor, fallback) => accessor || fallback,
        },
    ], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiAccessorProxyDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiAccessorProxy]',
                    providers: [
                        {
                            provide: TuiPositionAccessor,
                            multi: true,
                            deps: [
                                [new Optional(), new SkipSelf(), TuiAccessorProxyDirective],
                                TuiAccessorProxyDirective,
                            ],
                            useFactory: (accessor, fallback) => accessor || fallback,
                        },
                    ],
                }]
        }] });

const TUI_HOSTED_DROPDOWN_COMPONENT = new InjectionToken('[TUI_HOSTED_DROPDOWN_COMPONENT]');

class TuiDropdownOpenMonitorDirective {
    constructor(destroy$, hosted, dropdown, open) {
        open === null || open === void 0 ? void 0 : open.tuiDropdownOpenChange.pipe(filter(value => value && open.dropdown === dropdown && !hosted.focused), takeUntil(destroy$)).subscribe(() => {
            var _a;
            (_a = hosted.nativeFocusableElement) === null || _a === void 0 ? void 0 : _a.focus();
            hosted.updateOpen(true);
        });
    }
}
TuiDropdownOpenMonitorDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDropdownOpenMonitorDirective, deps: [{ token: TuiDestroyService, self: true }, { token: TUI_HOSTED_DROPDOWN_COMPONENT }, { token: TuiDropdownDirective, self: true }, { token: TuiDropdownOpenDirective, optional: true }], target: i0.ɵɵFactoryTarget.Directive });
TuiDropdownOpenMonitorDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiDropdownOpenMonitorDirective, selector: "[tuiDropdownOpenMonitor]", providers: [TuiDestroyService], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDropdownOpenMonitorDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiDropdownOpenMonitor]',
                    providers: [TuiDestroyService],
                }]
        }], ctorParameters: function () { return [{ type: i1.Observable, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiDestroyService]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_HOSTED_DROPDOWN_COMPONENT]
                }] }, { type: i2.TuiDropdownDirective, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiDropdownDirective]
                }] }, { type: i2.TuiDropdownOpenDirective, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TuiDropdownOpenDirective]
                }] }]; } });

class TuiHostedDropdownConnectorDirective {
}
TuiHostedDropdownConnectorDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiHostedDropdownConnectorDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
TuiHostedDropdownConnectorDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiHostedDropdownConnectorDirective, selector: "[tuiHostedDropdownHost]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiHostedDropdownConnectorDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiHostedDropdownHost]',
                }]
        }] });

function shouldClose(event) {
    var _a;
    return ('key' in event &&
        event.key.toLowerCase() === 'escape' &&
        this.canOpen &&
        this.open &&
        !((_a = this.dropdown) === null || _a === void 0 ? void 0 : _a.nextElementSibling));
}
class TuiHostedDropdownComponent {
    constructor(hover$, el) {
        this.hover$ = hover$;
        this.el = el;
        this.openChange$ = new BehaviorSubject(false);
        this.hostHover$ = combineLatest([
            tuiTypedFromEvent(this.el.nativeElement, 'mouseover').pipe(map(e => this.computedHost.contains(tuiGetActualTarget(e))), switchMap(visible => {
                var _a, _b;
                return of(visible).pipe(delay((visible ? (_a = this.hover$) === null || _a === void 0 ? void 0 : _a.showDelay : (_b = this.hover$) === null || _b === void 0 ? void 0 : _b.hideDelay) || 0));
            })),
            this.hover$ || EMPTY,
        ]).pipe(map(([visible, hovered]) => visible && hovered));
        this.sided = false;
        this.canOpen = true;
        this.open$ = merge(this.openChange$, this.hostHover$).pipe(skip(1), distinctUntilChanged(), share());
        this.focusedChange = new EventEmitter();
        /** TODO: rename in 4.0 */
        this.openChange = this.openChange$;
        this.close = () => this.updateOpen(false);
    }
    set open(open) {
        this.openChange.next(open);
    }
    get open() {
        return this.openChange.value;
    }
    get host() {
        var _a;
        return ((_a = this.dropdownHost) === null || _a === void 0 ? void 0 : _a.nativeElement) || this.el.nativeElement;
    }
    get computedHost() {
        var _a;
        return (((_a = this.dropdownHost) === null || _a === void 0 ? void 0 : _a.nativeElement) ||
            this.nativeFocusableElement ||
            this.el.nativeElement);
    }
    get dropdown() {
        var _a, _b;
        return (_b = (_a = this.dropdownDirective) === null || _a === void 0 ? void 0 : _a.dropdownBoxRef) === null || _b === void 0 ? void 0 : _b.location.nativeElement;
    }
    get nativeFocusableElement() {
        return tuiIsNativeKeyboardFocusable(this.host)
            ? this.host
            : tuiGetClosestFocusable({
                initial: this.host,
                root: this.el.nativeElement,
            });
    }
    get focused() {
        return (tuiIsNativeFocusedIn(this.host) ||
            (this.open &&
                !!this.wrapper &&
                tuiIsNativeFocusedIn(this.wrapper.nativeElement)));
    }
    onFocusInOut() {
        this.el.nativeElement.classList.toggle('_hosted_dropdown_focused', this.focused);
    }
    onFocusIn(target) {
        if (!this.computedHost.contains(target)) {
            this.updateOpen(false);
        }
    }
    onClick(target) {
        var _a;
        if (!this.hostEditable &&
            this.computedHost.contains(target) &&
            !((_a = this.hover$) === null || _a === void 0 ? void 0 : _a.hovered)) {
            this.updateOpen(!this.open);
        }
    }
    onKeyDownEsc(event) {
        event.preventDefault();
        this.closeDropdown();
    }
    onArrow(event, down) {
        this.focusDropdown(event, down);
    }
    onKeydown({ key, target, defaultPrevented }) {
        if (!defaultPrevented &&
            tuiIsEditingKey(key) &&
            this.hostEditable &&
            tuiIsHTMLElement(target) &&
            !tuiIsElementEditable(target)) {
            this.focusHost();
        }
    }
    onActiveZone(active) {
        this.updateFocused(active);
        if (!active) {
            this.updateOpen(false);
        }
    }
    onHostObscured(obscured) {
        if (obscured) {
            this.closeDropdown();
        }
    }
    updateOpen(open) {
        if (!open || this.canOpen) {
            this.open = open;
        }
    }
    get hostEditable() {
        return tuiIsElementEditable(this.computedHost);
    }
    focusDropdown(event, first) {
        const host = this.nativeFocusableElement;
        if (!host ||
            !tuiIsHTMLElement(host) ||
            !tuiIsElement(event.target) ||
            !host.contains(event.target)) {
            return;
        }
        if (!this.wrapper ||
            !this.open ||
            !this.dropdown ||
            !tuiIsHTMLElement(this.wrapper.nativeElement.nextElementSibling)) {
            this.updateOpen(true);
            if (!tuiIsElementEditable(host)) {
                event.preventDefault();
            }
            return;
        }
        const initial = first
            ? this.wrapper.nativeElement
            : this.wrapper.nativeElement.nextElementSibling;
        const focusable = tuiGetClosestFocusable({
            initial,
            root: this.wrapper.nativeElement,
            previous: !first,
        });
        if (!focusable) {
            return;
        }
        focusable.focus();
        event.preventDefault();
    }
    closeDropdown() {
        if (this.focused) {
            this.focusHost();
        }
        this.updateOpen(false);
    }
    focusHost() {
        const host = this.nativeFocusableElement;
        if (host) {
            host.focus({ preventScroll: true });
        }
    }
    updateFocused(focused) {
        this.focusedChange.emit(focused);
    }
}
TuiHostedDropdownComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiHostedDropdownComponent, deps: [{ token: TuiDropdownHoverDirective, optional: true, self: true }, { token: ElementRef }], target: i0.ɵɵFactoryTarget.Component });
TuiHostedDropdownComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiHostedDropdownComponent, selector: "tui-hosted-dropdown", inputs: { content: "content", sided: "sided", canOpen: "canOpen", open: "open" }, outputs: { open$: "openChange", focusedChange: "focusedChange" }, host: { listeners: { "focusin.capture.silent": "onFocusInOut()", "focusout.capture.silent": "onFocusInOut()", "focusin": "onFocusIn($event.target)", "click": "onClick($event.target)", "document:keydown.silent.capture": "onKeyDownEsc($event)", "keydown.arrowDown": "onArrow($event,true)", "keydown.arrowUp": "onArrow($event,false)" } }, providers: [
        tuiAsFocusableItemAccessor(TuiHostedDropdownComponent),
        {
            provide: TuiAccessorProxyDirective,
            deps: [[new Optional(), new Self(), TuiPositionAccessor]],
            useFactory: (position) => position === null || position === void 0 ? void 0 : position[0],
        },
        {
            provide: TUI_HOSTED_DROPDOWN_COMPONENT,
            useExisting: TuiHostedDropdownComponent,
        },
    ], queries: [{ propertyName: "dropdownHost", first: true, predicate: TuiHostedDropdownConnectorDirective, descendants: true, read: ElementRef }], viewQueries: [{ propertyName: "wrapper", first: true, predicate: ["wrapper"], descendants: true, read: ElementRef }, { propertyName: "dropdownDirective", first: true, predicate: TuiDropdownDirective$1, descendants: true }, { propertyName: "activeZone", first: true, predicate: TuiActiveZoneDirective, descendants: true }], ngImport: i0, template: "<div\n    *tuiLet=\"(open$ | async) ?? openChange.value as isOpen\"\n    #activeZone=\"tuiActiveZone\"\n    tuiAccessorProxy\n    tuiDropdownOpenMonitor\n    class=\"t-wrapper\"\n    [tuiDropdown]=\"dropdown\"\n    [tuiDropdownManual]=\"isOpen && canOpen\"\n    [tuiDropdownSided]=\"sided\"\n    [tuiObscuredEnabled]=\"isOpen\"\n    (tuiActiveZoneChange)=\"onActiveZone($event)\"\n    (tuiObscured)=\"onHostObscured($event)\"\n>\n    <ng-content></ng-content>\n    <ng-template\n        #dropdown=\"polymorpheus\"\n        [polymorpheus]=\"context\"\n    >\n        <div\n            #wrapper\n            class=\"t-dropdown\"\n            (keydown)=\"onKeydown($event)\"\n        >\n            <div\n                *polymorpheusOutlet=\"\n                    content as text;\n                    context: {\n                        $implicit: activeZone,\n                        close: close\n                    }\n                \"\n                class=\"t-primitive\"\n            >\n                {{ text }}\n            </div>\n        </div>\n        <!--This DIV is here to start backwards TreeWalker for focusing last focusable item on ArrowUp-->\n        <div></div>\n    </ng-template>\n</div>\n", styles: [":host{display:inline-flex}.t-wrapper{border-radius:inherit;height:inherit;flex:1 1 auto;width:100%}.t-dropdown{height:100%}.t-primitive{padding:1rem}\n"], directives: [{ type: i1$1.TuiLetDirective, selector: "[tuiLet]", inputs: ["tuiLet"] }, { type: TuiAccessorProxyDirective, selector: "[tuiAccessorProxy]" }, { type: TuiDropdownOpenMonitorDirective, selector: "[tuiDropdownOpenMonitor]" }, { type: i4.TuiDropdownDirective, selector: "[tuiDropdown]:not(ng-container)", inputs: ["tuiDropdown"], exportAs: ["tuiDropdown"] }, { type: i4.TuiDropdownDriverDirective, selector: "[tuiDropdown]" }, { type: i4.TuiDropdownManualDirective, selector: "[tuiDropdown][tuiDropdownManual]", inputs: ["tuiDropdownManual"] }, { type: i4.TuiDropdownPositionSidedDirective, selector: "[tuiDropdownSided]", inputs: ["tuiDropdownSided", "tuiDropdownSidedOffset"] }, { type: i1$1.TuiActiveZoneDirective, selector: "[tuiActiveZone]:not(ng-container), [tuiActiveZoneChange]:not(ng-container), [tuiActiveZoneParent]:not(ng-container)", inputs: ["tuiActiveZoneParent"], outputs: ["tuiActiveZoneChange"], exportAs: ["tuiActiveZone"] }, { type: i1$1.TuiObscuredDirective, selector: "[tuiObscured]", inputs: ["tuiObscuredEnabled"], outputs: ["tuiObscured"] }, { type: i5.PolymorpheusTemplate, selector: "ng-template[polymorpheus]", inputs: ["polymorpheus"], exportAs: ["polymorpheus"] }, { type: i5.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }], pipes: { "async": i6.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    shouldCall(shouldClose)
], TuiHostedDropdownComponent.prototype, "onKeyDownEsc", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiHostedDropdownComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-hosted-dropdown',
                    templateUrl: './hosted-dropdown.template.html',
                    styleUrls: ['./hosted-dropdown.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        tuiAsFocusableItemAccessor(TuiHostedDropdownComponent),
                        {
                            provide: TuiAccessorProxyDirective,
                            deps: [[new Optional(), new Self(), TuiPositionAccessor]],
                            useFactory: (position) => position === null || position === void 0 ? void 0 : position[0],
                        },
                        {
                            provide: TUI_HOSTED_DROPDOWN_COMPONENT,
                            useExisting: TuiHostedDropdownComponent,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i4.TuiDropdownHoverDirective, decorators: [{
                    type: Self
                }, {
                    type: Optional
                }, {
                    type: Inject,
                    args: [TuiDropdownHoverDirective]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }]; }, propDecorators: { dropdownHost: [{
                type: ContentChild,
                args: [TuiHostedDropdownConnectorDirective, { read: ElementRef }]
            }], wrapper: [{
                type: ViewChild,
                args: ['wrapper', { read: ElementRef }]
            }], dropdownDirective: [{
                type: ViewChild,
                args: [TuiDropdownDirective$1]
            }], activeZone: [{
                type: ViewChild,
                args: [TuiActiveZoneDirective]
            }], content: [{
                type: Input
            }], sided: [{
                type: Input
            }], canOpen: [{
                type: Input
            }], open$: [{
                type: Output,
                args: ['openChange']
            }], focusedChange: [{
                type: Output
            }], open: [{
                type: Input
            }], onFocusInOut: [{
                type: HostListener,
                args: ['focusin.capture.silent']
            }, {
                type: HostListener,
                args: ['focusout.capture.silent']
            }], onFocusIn: [{
                type: HostListener,
                args: ['focusin', ['$event.target']]
            }], onClick: [{
                type: HostListener,
                args: ['click', ['$event.target']]
            }], onKeyDownEsc: [{
                type: HostListener,
                args: ['document:keydown.silent.capture', ['$event']]
            }], onArrow: [{
                type: HostListener,
                args: ['keydown.arrowDown', ['$event', 'true']]
            }, {
                type: HostListener,
                args: ['keydown.arrowUp', ['$event', 'false']]
            }] } });

class TuiHostedDropdownModule {
}
TuiHostedDropdownModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiHostedDropdownModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiHostedDropdownModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiHostedDropdownModule, declarations: [TuiAccessorProxyDirective,
        TuiDropdownOpenMonitorDirective,
        TuiHostedDropdownComponent,
        TuiHostedDropdownConnectorDirective], imports: [CommonModule,
        PolymorpheusModule,
        TuiLetModule,
        TuiObscuredModule,
        TuiActiveZoneModule,
        TuiDropdownModule], exports: [TuiHostedDropdownComponent,
        TuiHostedDropdownConnectorDirective,
        TuiDropdownOptionsDirective] });
TuiHostedDropdownModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiHostedDropdownModule, imports: [[
            CommonModule,
            PolymorpheusModule,
            TuiLetModule,
            TuiObscuredModule,
            TuiActiveZoneModule,
            TuiDropdownModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiHostedDropdownModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        PolymorpheusModule,
                        TuiLetModule,
                        TuiObscuredModule,
                        TuiActiveZoneModule,
                        TuiDropdownModule,
                    ],
                    declarations: [
                        TuiAccessorProxyDirective,
                        TuiDropdownOpenMonitorDirective,
                        TuiHostedDropdownComponent,
                        TuiHostedDropdownConnectorDirective,
                    ],
                    exports: [
                        TuiHostedDropdownComponent,
                        TuiHostedDropdownConnectorDirective,
                        TuiDropdownOptionsDirective,
                    ],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TuiAccessorProxyDirective, TuiDropdownOpenMonitorDirective, TuiHostedDropdownComponent, TuiHostedDropdownConnectorDirective, TuiHostedDropdownModule };
//# sourceMappingURL=taiga-ui-core-components-hosted-dropdown.js.map
