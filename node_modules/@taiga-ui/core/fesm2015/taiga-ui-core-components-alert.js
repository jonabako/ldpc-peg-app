import * as i0 from '@angular/core';
import { inject, ElementRef, Component, ChangeDetectionStrategy, Inject, Self, Injectable, Directive, NgModule } from '@angular/core';
import * as i4 from '@taiga-ui/cdk';
import { tuiCreateTokenFromFactory, TUI_IS_MOBILE, tuiIsNumber, TuiDestroyService, AbstractTuiDialogService, TuiIdService, AbstractTuiDialogDirective, tuiAsAlerts } from '@taiga-ui/cdk';
import { tuiFadeIn, tuiSlideIn, tuiHeightCollapse } from '@taiga-ui/core/animations';
import { TUI_ANIMATION_OPTIONS, TUI_NOTIFICATION_OPTIONS } from '@taiga-ui/core/tokens';
import * as i3 from '@tinkoff/ng-polymorpheus';
import { POLYMORPHEUS_CONTEXT, PolymorpheusComponent, PolymorpheusModule } from '@tinkoff/ng-polymorpheus';
import { timer, fromEvent } from 'rxjs';
import { takeUntil, repeatWhen } from 'rxjs/operators';
import * as i1 from '@taiga-ui/core/components/notification';
import { TuiNotificationModule } from '@taiga-ui/core/components/notification';
import * as i2 from '@angular/common';
import { CommonModule } from '@angular/common';

const TUI_ALERT_POSITION = tuiCreateTokenFromFactory(() => inject(TUI_IS_MOBILE) ? '1rem 1rem 0 auto' : '2rem 3rem 0 auto');

// TODO: get rid of $any in template
class TuiAlertComponent {
    constructor(el, destroy$, position, options, item) {
        this.el = el;
        this.destroy$ = destroy$;
        this.position = position;
        this.options = options;
        this.item = item;
        this.autoClose = typeof this.item.autoClose === 'function'
            ? this.item.autoClose(this.item.status)
            : this.item.autoClose;
        this.animation = this.position.endsWith('auto')
            ? Object.assign(Object.assign({}, this.options), { value: 'right' }) : Object.assign(Object.assign({}, this.options), { value: 'left' });
    }
    ngOnInit() {
        this.initAutoClose();
    }
    close() {
        this.item.$implicit.complete();
    }
    initAutoClose() {
        if (!this.autoClose) {
            return;
        }
        timer(tuiIsNumber(this.autoClose) ? this.autoClose : 3000)
            .pipe(takeUntil(fromEvent(this.el.nativeElement, 'mouseenter')), 
        /**
         * TODO: replace to
         * repeat({
         *    delay: () => fromEvent(this.el.nativeElement, 'mouseleave'),
         * })
         *
         * in RxJS 7
         */
        // eslint-disable-next-line rxjs/no-ignored-notifier
        repeatWhen(() => fromEvent(this.el.nativeElement, 'mouseleave')), takeUntil(this.destroy$))
            .subscribe(() => this.close());
    }
}
TuiAlertComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiAlertComponent, deps: [{ token: ElementRef }, { token: TuiDestroyService, self: true }, { token: TUI_ALERT_POSITION }, { token: TUI_ANIMATION_OPTIONS }, { token: POLYMORPHEUS_CONTEXT }], target: i0.ɵɵFactoryTarget.Component });
TuiAlertComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiAlertComponent, selector: "tui-alert", host: { attributes: { "role": "alert" }, properties: { "style.margin": "position", "@tuiFadeIn": "options", "@tuiSlideIn": "animation", "@tuiHeightCollapse": "animation" } }, providers: [TuiDestroyService], ngImport: i0, template: "<tui-notification\n    [hasIcon]=\"item.hasIcon\"\n    [hideClose]=\"!item.hasCloseButton\"\n    [icon]=\"item.icon\"\n    [status]=\"item.status\"\n    (close)=\"close()\"\n>\n    <label\n        *ngIf=\"item.label\"\n        automation-id=\"tui-notification-alert__heading\"\n        class=\"t-heading\"\n    >\n        <ng-container *polymorpheusOutlet=\"item.label as text; context: item\">\n            {{ text }}\n        </ng-container>\n    </label>\n    <div\n        automation-id=\"tui-notification-alert__content\"\n        class=\"t-content\"\n    >\n        <div\n            *polymorpheusOutlet=\"item.content as text; context: item\"\n            [innerHTML]=\"text\"\n        ></div>\n    </div>\n</tui-notification>\n", styles: [":host{display:block;box-shadow:var(--tui-shadow-dropdown);border-radius:var(--tui-radius-l);width:18rem}:host:not(:first-child){margin-top:.75rem!important}:host:not(:last-child){margin-bottom:0!important}.t-heading{margin:0}[data-size=s] .t-heading{font:var(--tui-font-text-s);font-weight:bold}[data-size=m] .t-heading{font:var(--tui-font-text-m);line-height:1.25rem;font-weight:bold}[data-size=l] .t-heading{font:var(--tui-font-text-l);line-height:1.5rem;font-weight:bold}.t-content{color:var(--tui-text-01);word-wrap:break-word;word-break:break-word}.t-content:empty{display:none}\n"], components: [{ type: i1.TuiNotificationComponent, selector: "tui-notification,a[tuiNotification],button[tuiNotification]", inputs: ["hasIcon", "icon", "status", "size", "hideClose"], outputs: ["close"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }], animations: [tuiFadeIn, tuiSlideIn, tuiHeightCollapse], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiAlertComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-alert',
                    templateUrl: './alert.template.html',
                    styleUrls: ['./alert.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [TuiDestroyService],
                    animations: [tuiFadeIn, tuiSlideIn, tuiHeightCollapse],
                    host: {
                        role: 'alert',
                        '[style.margin]': 'position',
                        '[@tuiFadeIn]': 'options',
                        '[@tuiSlideIn]': 'animation',
                        '[@tuiHeightCollapse]': 'animation',
                    },
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: i4.TuiDestroyService, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiDestroyService]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_ALERT_POSITION]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_ANIMATION_OPTIONS]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [POLYMORPHEUS_CONTEXT]
                }] }]; } });

class TuiAlertService extends AbstractTuiDialogService {
    constructor(defaultOptions, idService) {
        super(idService);
        this.defaultOptions = defaultOptions;
        this.component = new PolymorpheusComponent(TuiAlertComponent);
    }
}
TuiAlertService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiAlertService, deps: [{ token: TUI_NOTIFICATION_OPTIONS }, { token: TuiIdService }], target: i0.ɵɵFactoryTarget.Injectable });
TuiAlertService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiAlertService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiAlertService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_NOTIFICATION_OPTIONS]
                }] }, { type: i4.TuiIdService, decorators: [{
                    type: Inject,
                    args: [TuiIdService]
                }] }]; } });

class TuiAlertDirective extends AbstractTuiDialogDirective {
}
TuiAlertDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiAlertDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TuiAlertDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiAlertDirective, selector: "ng-template[tuiAlert]", inputs: { options: ["tuiAlertOptions", "options"], open: ["tuiAlert", "open"] }, outputs: { openChange: "tuiAlertChange" }, providers: [
        {
            provide: AbstractTuiDialogService,
            useExisting: TuiAlertService,
        },
    ], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiAlertDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ng-template[tuiAlert]',
                    inputs: ['options: tuiAlertOptions', 'open: tuiAlert'],
                    outputs: ['openChange: tuiAlertChange'],
                    providers: [
                        {
                            provide: AbstractTuiDialogService,
                            useExisting: TuiAlertService,
                        },
                    ],
                }]
        }] });

class TuiAlertModule {
}
TuiAlertModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiAlertModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiAlertModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiAlertModule, declarations: [TuiAlertComponent, TuiAlertDirective], imports: [CommonModule, PolymorpheusModule, TuiNotificationModule], exports: [TuiAlertComponent, TuiAlertDirective] });
TuiAlertModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiAlertModule, providers: [tuiAsAlerts(TuiAlertService)], imports: [[CommonModule, PolymorpheusModule, TuiNotificationModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiAlertModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, PolymorpheusModule, TuiNotificationModule],
                    declarations: [TuiAlertComponent, TuiAlertDirective],
                    providers: [tuiAsAlerts(TuiAlertService)],
                    exports: [TuiAlertComponent, TuiAlertDirective],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TUI_ALERT_POSITION, TuiAlertComponent, TuiAlertDirective, TuiAlertModule, TuiAlertService };
//# sourceMappingURL=taiga-ui-core-components-alert.js.map
