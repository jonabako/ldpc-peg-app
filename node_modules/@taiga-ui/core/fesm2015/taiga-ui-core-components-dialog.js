import * as i0 from '@angular/core';
import { ElementRef, Injectable, Inject, Component, ChangeDetectionStrategy, Self, HostBinding, inject, Directive, NgModule } from '@angular/core';
import * as i4 from '@taiga-ui/cdk';
import { tuiCreateToken, tuiProvideOptions, tuiTypedFromEvent, tuiGetActualTarget, tuiIsElement, tuiContainsOrAfter, ALWAYS_TRUE_HANDLER, TUI_IS_MOBILE, TuiDestroyService, AbstractTuiDialogService, AbstractTuiDialogDirective, TuiAutoFocusModule, tuiAsDialog } from '@taiga-ui/cdk';
import { tuiSlideInTop, tuiFadeIn } from '@taiga-ui/core/animations';
import { TUI_ANIMATIONS_DURATION, TUI_CLOSE_WORD, TUI_COMMON_ICONS } from '@taiga-ui/core/tokens';
import * as i3 from '@tinkoff/ng-polymorpheus';
import { POLYMORPHEUS_CONTEXT, PolymorpheusComponent, PolymorpheusModule } from '@tinkoff/ng-polymorpheus';
import * as i5 from 'rxjs';
import { EMPTY, Observable, merge, isObservable, of, Subject } from 'rxjs';
import { filter, switchMap, take, map, takeUntil } from 'rxjs/operators';
import * as i2 from '@angular/common';
import { DOCUMENT, CommonModule } from '@angular/common';
import { WINDOW } from '@ng-web-apis/common';
import { tuiGetViewportWidth } from '@taiga-ui/core/utils';
import * as i1 from '@taiga-ui/core/components/button';
import { TuiButtonModule } from '@taiga-ui/core/components/button';

const TUI_DIALOG_DEFAULT_OPTIONS = {
    size: 'm',
    required: false,
    closeable: true,
    dismissible: true,
    label: '',
    header: '',
};
/**
 * A stream to close dialogs
 */
const TUI_DIALOGS_CLOSE = tuiCreateToken(EMPTY);
/**
 * Default parameters for dialog component
 */
const TUI_DIALOG_OPTIONS = tuiCreateToken(TUI_DIALOG_DEFAULT_OPTIONS);
function tuiDialogOptionsProvider(options) {
    return tuiProvideOptions(TUI_DIALOG_OPTIONS, options, TUI_DIALOG_DEFAULT_OPTIONS);
}

const SCROLLBAR_PLACEHOLDER = 17;
class TuiDialogCloseService extends Observable {
    constructor(win, doc, el) {
        super(subscriber => merge(this.esc$, this.mousedown$).subscribe(subscriber));
        this.win = win;
        this.doc = doc;
        this.el = el;
        this.esc$ = tuiTypedFromEvent(this.doc, 'keydown').pipe(filter(event => {
            const target = tuiGetActualTarget(event);
            return (event.key === 'Escape' &&
                !event.defaultPrevented &&
                (this.element.contains(target) || this.isOutside(target)));
        }));
        this.mousedown$ = tuiTypedFromEvent(this.doc, 'mousedown').pipe(filter(event => tuiGetViewportWidth(this.win) - event.clientX > SCROLLBAR_PLACEHOLDER &&
            this.isOutside(tuiGetActualTarget(event))), switchMap(() => tuiTypedFromEvent(this.doc, 'mouseup').pipe(take(1), map(tuiGetActualTarget), filter(target => this.isOutside(target)))));
    }
    get element() {
        return this.el.nativeElement;
    }
    isOutside(target) {
        return (tuiIsElement(target) &&
            (!tuiContainsOrAfter(this.element, target) || target === this.element));
    }
}
TuiDialogCloseService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDialogCloseService, deps: [{ token: WINDOW }, { token: DOCUMENT }, { token: ElementRef }], target: i0.ɵɵFactoryTarget.Injectable });
TuiDialogCloseService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDialogCloseService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDialogCloseService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: Window, decorators: [{
                    type: Inject,
                    args: [WINDOW]
                }] }, { type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }]; } });

const REQUIRED_ERROR = new Error('Required dialog was dismissed');
function toObservable(valueOrStream) {
    return isObservable(valueOrStream) ? valueOrStream : of(valueOrStream);
}
class TuiDialogComponent {
    constructor(duration, isMobile, context, destroy$, dialogClose$, close$, closeWord$, icons) {
        this.duration = duration;
        this.isMobile = isMobile;
        this.context = context;
        this.closeWord$ = closeWord$;
        this.icons = icons;
        this.animation = {
            value: '',
            params: {
                start: '40px',
                duration: this.duration,
            },
        };
        this.fullscreenAnimation = {
            value: '',
            params: {
                start: '100vh',
                duration: this.duration,
            },
        };
        this.close$ = new Subject();
        merge(this.close$.pipe(switchMap(() => toObservable(context.closeable))), dialogClose$.pipe(switchMap(() => toObservable(context.dismissible))), close$.pipe(map(ALWAYS_TRUE_HANDLER)))
            .pipe(filter(Boolean), takeUntil(destroy$))
            .subscribe(() => {
            this.close();
        });
    }
    get size() {
        return this.context.size;
    }
    get header() {
        return this.context.header;
    }
    get slideInTop() {
        return this.fullscreen || this.isMobile
            ? this.fullscreenAnimation
            : this.animation;
    }
    get fullscreen() {
        return !this.isMobile && (this.size === 'fullscreen' || this.size === 'page');
    }
    close() {
        if (this.context.required) {
            this.context.$implicit.error(REQUIRED_ERROR);
        }
        else {
            this.context.$implicit.complete();
        }
    }
}
TuiDialogComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDialogComponent, deps: [{ token: TUI_ANIMATIONS_DURATION }, { token: TUI_IS_MOBILE }, { token: POLYMORPHEUS_CONTEXT }, { token: TuiDestroyService, self: true }, { token: TuiDialogCloseService }, { token: TUI_DIALOGS_CLOSE }, { token: TUI_CLOSE_WORD }, { token: TUI_COMMON_ICONS }], target: i0.ɵɵFactoryTarget.Component });
TuiDialogComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiDialogComponent, selector: "tui-dialog", host: { properties: { "attr.data-appearance": "context.appearance", "attr.data-size": "this.size", "class._centered": "this.header", "@tuiSlideInTop": "this.slideInTop", "@tuiFadeIn": "this.slideInTop" } }, providers: [TuiDestroyService, TuiDialogCloseService], ngImport: i0, template: "<header\n    *ngIf=\"header\"\n    class=\"t-header\"\n>\n    <ng-container *polymorpheusOutlet=\"header as text; context: context\">\n        {{ text }}\n    </ng-container>\n</header>\n<div class=\"t-content\">\n    <h2\n        class=\"t-heading\"\n        [id]=\"context.id\"\n        [textContent]=\"context.label\"\n    ></h2>\n    <section>\n        <!-- TODO: Polymorpheus fix type -->\n        <ng-container *polymorpheusOutlet=\"$any(context.content) as text; context: context\">\n            <div [innerHTML]=\"text\"></div>\n            <div class=\"t-buttons\">\n                <button\n                    size=\"m\"\n                    tuiAutoFocus\n                    tuiButton\n                    type=\"button\"\n                    (click)=\"context.$implicit.complete()\"\n                >\n                    {{ $any(context.data)?.button || 'OK' }}\n                </button>\n            </div>\n        </ng-container>\n    </section>\n</div>\n<div class=\"t-filler\"></div>\n<div\n    *ngIf=\"context.closeable\"\n    class=\"t-wrapper\"\n>\n    <button\n        automation-id=\"tui-dialog__close\"\n        shape=\"rounded\"\n        size=\"s\"\n        tuiIconButton\n        type=\"button\"\n        class=\"t-close\"\n        [appearance]=\"fullscreen ? 'secondary' : ''\"\n        [icon]=\"icons.close\"\n        [title]=\"closeWord$ | async\"\n        (click)=\"close$.next()\"\n        (mousedown.prevent.silent)=\"(0)\"\n    ></button>\n</div>\n", styles: [":host{position:relative;display:flex;font:var(--tui-font-text-m);flex-direction:column;box-sizing:border-box;margin:auto;border-radius:1rem;border:2.5rem solid transparent}:host:after{position:absolute;top:0;left:0;width:100%;height:100%;content:\"\";border-radius:inherit;pointer-events:none;box-shadow:var(--tui-shadow-modal)}:host[data-size=auto]{width:auto}:host[data-size=s]{width:30rem}:host[data-size=s] .t-content{padding:1.5rem}:host[data-size=s] .t-heading{margin-bottom:.5rem;font:var(--tui-font-heading-5)}:host[data-size=m]{width:42.5rem}:host[data-size=m] .t-heading{margin-bottom:.75rem;font:var(--tui-font-heading-4)}:host[data-size=l]{width:55rem}:host[data-size=l] .t-heading{margin-bottom:1rem}:host[data-size=fullscreen],:host[data-size=page]{min-width:100vw;min-height:100%;border-radius:0;border:none;background:var(--tui-elevation-01);box-shadow:0 4rem var(--tui-elevation-01)}:host[data-size=fullscreen] .t-content,:host[data-size=page] .t-content{padding:3rem calc(50vw - (45rem / 2))}:host[data-size=fullscreen] .t-heading,:host[data-size=page] .t-heading{margin-bottom:1rem}:host[data-size=page] .t-content{padding:0}:host._centered{text-align:center}:host :host-context(tui-root._mobile)[data-size]{min-width:100%;width:100%;max-width:100%;border-radius:0;border:none;margin:auto 0 0}:host :host-context(tui-root._mobile)[data-size] .t-content{padding:1.5rem}:host :host-context(tui-root._mobile)[data-size] .t-heading{margin-bottom:.5rem;font:var(--tui-font-heading-5)}.t-heading{margin:0;word-wrap:break-word;font:var(--tui-font-heading-3)}.t-heading:empty{display:none}.t-header{display:flex;border-top-left-radius:inherit;border-top-right-radius:inherit;overflow:hidden}:host[data-size=fullscreen] :host-context(tui-root._mobile) .t-header{flex:1}.t-content{border-radius:inherit;padding:2rem;background:var(--tui-elevation-01)}.t-content:not(:first-child){border-top-left-radius:0;border-top-right-radius:0}.t-wrapper{position:-webkit-sticky;position:sticky;top:0;z-index:1;order:-1}.t-filler{flex-grow:1}.t-close{transition-property:background;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;position:fixed;top:1.5rem;right:1.5rem;display:none;color:var(--tui-base-01)}:host-context(.t-dialog:last-of-type) .t-close{display:block}:host:not([data-size=\"fullscreen\"]):not([data-size=\"page\"]) .t-close{animation:tuiFadeIn var(--tui-duration);background:rgba(104,104,104,.96)}:host:not([data-size=\"fullscreen\"]):not([data-size=\"page\"]) .t-close:hover{background:rgba(159,159,159,.86)}:host:not([data-size=\"fullscreen\"]).ng-animating .t-close{display:none}:host-context(tui-root._mobile) .t-close{position:absolute;top:0;right:0;background:transparent!important;color:var(--tui-text-01);opacity:.5}.t-buttons{margin-top:1.25rem;text-align:right}\n"], components: [{ type: i1.TuiButtonComponent, selector: "button[tuiButton], button[tuiIconButton], a[tuiButton], a[tuiIconButton]", inputs: ["appearance", "disabled", "icon", "iconRight", "shape", "showLoader", "size"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { type: i4.TuiAutoFocusDirective, selector: "[tuiAutoFocus]", inputs: ["tuiAutoFocus"] }], pipes: { "async": i2.AsyncPipe }, animations: [tuiSlideInTop, tuiFadeIn], changeDetection: i0.ChangeDetectionStrategy.Default });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDialogComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-dialog',
                    templateUrl: './dialog.template.html',
                    styleUrls: ['./dialog.style.less'],
                    // So we don't force OnPush on dialog content
                    // eslint-disable-next-line @angular-eslint/prefer-on-push-component-change-detection
                    changeDetection: ChangeDetectionStrategy.Default,
                    providers: [TuiDestroyService, TuiDialogCloseService],
                    animations: [tuiSlideInTop, tuiFadeIn],
                    host: {
                        '[attr.data-appearance]': 'context.appearance',
                    },
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_ANIMATIONS_DURATION]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_IS_MOBILE]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [POLYMORPHEUS_CONTEXT]
                }] }, { type: i5.Observable, decorators: [{
                    type: Inject,
                    args: [TuiDestroyService]
                }, {
                    type: Self
                }] }, { type: i5.Observable, decorators: [{
                    type: Inject,
                    args: [TuiDialogCloseService]
                }] }, { type: i5.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_DIALOGS_CLOSE]
                }] }, { type: i5.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_CLOSE_WORD]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_COMMON_ICONS]
                }] }]; }, propDecorators: { size: [{
                type: HostBinding,
                args: ['attr.data-size']
            }], header: [{
                type: HostBinding,
                args: ['class._centered']
            }], slideInTop: [{
                type: HostBinding,
                args: ['@tuiSlideInTop']
            }, {
                type: HostBinding,
                args: ['@tuiFadeIn']
            }] } });

const DIALOG = new PolymorpheusComponent(TuiDialogComponent);
class TuiDialogService extends AbstractTuiDialogService {
    constructor() {
        super(...arguments);
        this.component = DIALOG;
        this.defaultOptions = Object.assign(Object.assign({}, inject(TUI_DIALOG_OPTIONS)), { data: undefined });
    }
}
TuiDialogService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDialogService, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
TuiDialogService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDialogService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDialogService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });

class TuiDialogDirective extends AbstractTuiDialogDirective {
}
TuiDialogDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDialogDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TuiDialogDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiDialogDirective, selector: "ng-template[tuiDialog]", inputs: { options: ["tuiDialogOptions", "options"], open: ["tuiDialog", "open"] }, outputs: { openChange: "tuiDialogChange" }, providers: [
        {
            provide: AbstractTuiDialogService,
            useExisting: TuiDialogService,
        },
    ], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDialogDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ng-template[tuiDialog]',
                    inputs: ['options: tuiDialogOptions', 'open: tuiDialog'],
                    outputs: ['openChange: tuiDialogChange'],
                    providers: [
                        {
                            provide: AbstractTuiDialogService,
                            useExisting: TuiDialogService,
                        },
                    ],
                }]
        }] });

class TuiDialogModule {
}
TuiDialogModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDialogModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiDialogModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDialogModule, declarations: [TuiDialogComponent, TuiDialogDirective], imports: [PolymorpheusModule, TuiButtonModule, CommonModule, TuiAutoFocusModule], exports: [TuiDialogComponent, TuiDialogDirective] });
TuiDialogModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDialogModule, providers: [tuiAsDialog(TuiDialogService)], imports: [[PolymorpheusModule, TuiButtonModule, CommonModule, TuiAutoFocusModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDialogModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [PolymorpheusModule, TuiButtonModule, CommonModule, TuiAutoFocusModule],
                    declarations: [TuiDialogComponent, TuiDialogDirective],
                    providers: [tuiAsDialog(TuiDialogService)],
                    exports: [TuiDialogComponent, TuiDialogDirective],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TUI_DIALOGS_CLOSE, TUI_DIALOG_DEFAULT_OPTIONS, TUI_DIALOG_OPTIONS, TuiDialogCloseService, TuiDialogComponent, TuiDialogDirective, TuiDialogModule, TuiDialogService, tuiDialogOptionsProvider };
//# sourceMappingURL=taiga-ui-core-components-dialog.js.map
