import { Inject, Injectable, NgZone } from '@angular/core';
import { TUI_WINDOW_SIZE, tuiZoneOptimized } from '@taiga-ui/cdk';
import { TUI_MEDIA } from '@taiga-ui/core/tokens';
import { Observable } from 'rxjs';
import { distinctUntilChanged, map, shareReplay } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "rxjs";
/**
 * Service to provide the current breakpoint based on Taiga UI's media queries
 */
export class TuiBreakpointService extends Observable {
    constructor(media, ngZone, size$) {
        super(subscriber => this.stream$.subscribe(subscriber));
        this.media = media;
        this.ngZone = ngZone;
        this.size$ = size$;
        this.sorted = Object.values(this.media).sort((a, b) => a - b);
        this.invert = Object.keys(this.media).reduce((ret, key) => (Object.assign(Object.assign({}, ret), { [this.media[key]]: key })), {});
        this.stream$ = this.size$.pipe(map(({ width }) => this.sorted.find(size => size > width)), map(key => this.invert[key || this.sorted[this.sorted.length - 1]]), distinctUntilChanged(), tuiZoneOptimized(this.ngZone), shareReplay({ bufferSize: 1, refCount: true }));
    }
}
TuiBreakpointService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiBreakpointService, deps: [{ token: TUI_MEDIA }, { token: NgZone }, { token: TUI_WINDOW_SIZE }], target: i0.ɵɵFactoryTarget.Injectable });
TuiBreakpointService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiBreakpointService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiBreakpointService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_MEDIA]
                }] }, { type: i0.NgZone, decorators: [{
                    type: Inject,
                    args: [NgZone]
                }] }, { type: i1.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_WINDOW_SIZE]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJlYWtwb2ludC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvY29yZS9zZXJ2aWNlcy9icmVha3BvaW50LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3pELE9BQU8sRUFBQyxlQUFlLEVBQUUsZ0JBQWdCLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFaEUsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBQ2hELE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDaEMsT0FBTyxFQUFDLG9CQUFvQixFQUFFLEdBQUcsRUFBRSxXQUFXLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQzs7O0FBSXRFOztHQUVHO0FBSUgsTUFBTSxPQUFPLG9CQUFxQixTQUFRLFVBQXdDO0lBb0I5RSxZQUN3QyxLQUFlLEVBQ2xCLE1BQWMsRUFDTCxLQUE2QjtRQUV2RSxLQUFLLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1FBSnBCLFVBQUssR0FBTCxLQUFLLENBQVU7UUFDbEIsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUNMLFVBQUssR0FBTCxLQUFLLENBQXdCO1FBdEIxRCxXQUFNLEdBQWEsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ25FLFdBQU0sR0FBMEMsTUFBTSxDQUFDLElBQUksQ0FDeEUsSUFBSSxDQUFDLEtBQUssQ0FDYixDQUFDLE1BQU0sQ0FDSixDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLGlDQUNQLEdBQUcsS0FDTixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBNEIsQ0FBQyxDQUFDLEVBQUUsR0FBRyxJQUNqRCxFQUNGLEVBQUUsQ0FDTCxDQUFDO1FBRWUsWUFBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUN0QyxHQUFHLENBQUMsQ0FBQyxFQUFDLEtBQUssRUFBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsQ0FBQyxFQUN4RCxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDbkUsb0JBQW9CLEVBQUUsRUFDdEIsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUM3QixXQUFXLENBQUMsRUFBQyxVQUFVLEVBQUUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUMvQyxDQUFDO0lBUUYsQ0FBQzs7a0hBMUJRLG9CQUFvQixrQkFxQmpCLFNBQVMsYUFDVCxNQUFNLGFBQ04sZUFBZTtzSEF2QmxCLG9CQUFvQixjQUZqQixNQUFNOzRGQUVULG9CQUFvQjtrQkFIaEMsVUFBVTttQkFBQztvQkFDUixVQUFVLEVBQUUsTUFBTTtpQkFDckI7OzBCQXNCUSxNQUFNOzJCQUFDLFNBQVM7OzBCQUNoQixNQUFNOzJCQUFDLE1BQU07OzBCQUNiLE1BQU07MkJBQUMsZUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0LCBJbmplY3RhYmxlLCBOZ1pvbmV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtUVUlfV0lORE9XX1NJWkUsIHR1aVpvbmVPcHRpbWl6ZWR9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtUdWlNZWRpYX0gZnJvbSAnQHRhaWdhLXVpL2NvcmUvaW50ZXJmYWNlcyc7XG5pbXBvcnQge1RVSV9NRURJQX0gZnJvbSAnQHRhaWdhLXVpL2NvcmUvdG9rZW5zJztcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5pbXBvcnQge2Rpc3RpbmN0VW50aWxDaGFuZ2VkLCBtYXAsIHNoYXJlUmVwbGF5fSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmV4cG9ydCB0eXBlIFR1aUJyZWFrcG9pbnRNZWRpYUtleSA9IGtleW9mIE9taXQ8VHVpTWVkaWEsICd0YWJsZXQnPjtcblxuLyoqXG4gKiBTZXJ2aWNlIHRvIHByb3ZpZGUgdGhlIGN1cnJlbnQgYnJlYWtwb2ludCBiYXNlZCBvbiBUYWlnYSBVSSdzIG1lZGlhIHF1ZXJpZXNcbiAqL1xuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgVHVpQnJlYWtwb2ludFNlcnZpY2UgZXh0ZW5kcyBPYnNlcnZhYmxlPFR1aUJyZWFrcG9pbnRNZWRpYUtleSB8IG51bGw+IHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IHNvcnRlZDogbnVtYmVyW10gPSBPYmplY3QudmFsdWVzKHRoaXMubWVkaWEpLnNvcnQoKGEsIGIpID0+IGEgLSBiKTtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGludmVydDogUmVjb3JkPG51bWJlciwgVHVpQnJlYWtwb2ludE1lZGlhS2V5PiA9IE9iamVjdC5rZXlzKFxuICAgICAgICB0aGlzLm1lZGlhLFxuICAgICkucmVkdWNlKFxuICAgICAgICAocmV0LCBrZXkpID0+ICh7XG4gICAgICAgICAgICAuLi5yZXQsXG4gICAgICAgICAgICBbdGhpcy5tZWRpYVtrZXkgYXMgVHVpQnJlYWtwb2ludE1lZGlhS2V5XV06IGtleSxcbiAgICAgICAgfSksXG4gICAgICAgIHt9LFxuICAgICk7XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IHN0cmVhbSQgPSB0aGlzLnNpemUkLnBpcGUoXG4gICAgICAgIG1hcCgoe3dpZHRofSkgPT4gdGhpcy5zb3J0ZWQuZmluZChzaXplID0+IHNpemUgPiB3aWR0aCkpLFxuICAgICAgICBtYXAoa2V5ID0+IHRoaXMuaW52ZXJ0W2tleSB8fCB0aGlzLnNvcnRlZFt0aGlzLnNvcnRlZC5sZW5ndGggLSAxXV0pLFxuICAgICAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpLFxuICAgICAgICB0dWlab25lT3B0aW1pemVkKHRoaXMubmdab25lKSxcbiAgICAgICAgc2hhcmVSZXBsYXkoe2J1ZmZlclNpemU6IDEsIHJlZkNvdW50OiB0cnVlfSksXG4gICAgKTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KFRVSV9NRURJQSkgcHJpdmF0ZSByZWFkb25seSBtZWRpYTogVHVpTWVkaWEsXG4gICAgICAgIEBJbmplY3QoTmdab25lKSBwcml2YXRlIHJlYWRvbmx5IG5nWm9uZTogTmdab25lLFxuICAgICAgICBASW5qZWN0KFRVSV9XSU5ET1dfU0laRSkgcHJpdmF0ZSByZWFkb25seSBzaXplJDogT2JzZXJ2YWJsZTxDbGllbnRSZWN0PixcbiAgICApIHtcbiAgICAgICAgc3VwZXIoc3Vic2NyaWJlciA9PiB0aGlzLnN0cmVhbSQuc3Vic2NyaWJlKHN1YnNjcmliZXIpKTtcbiAgICB9XG59XG4iXX0=