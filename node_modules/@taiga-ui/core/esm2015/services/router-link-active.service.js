import { Inject, Injectable, NgZone, Optional, Self } from '@angular/core';
import { RouterLinkActive } from '@angular/router';
import { ANIMATION_FRAME } from '@ng-web-apis/common';
import { TuiDestroyService, tuiZoneOptimized } from '@taiga-ui/cdk';
import { EMPTY, merge, Observable, timer } from 'rxjs';
import { distinctUntilChanged, map, takeUntil } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "rxjs";
import * as i3 from "@taiga-ui/cdk";
// TODO: Remove when Angular is update and `RouterLinkActive` has output
export class TuiRouterLinkActiveService extends Observable {
    constructor(routerLinkActive, zone, animationFrame$, destroy$) {
        const stream$ = routerLinkActive
            ? merge(timer(0), // SSR (animationFrame$ never emits value during SSR)
            animationFrame$).pipe(map(() => routerLinkActive.isActive), distinctUntilChanged(), tuiZoneOptimized(zone), takeUntil(destroy$))
            : EMPTY;
        super(subscriber => stream$.subscribe(subscriber));
    }
}
TuiRouterLinkActiveService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiRouterLinkActiveService, deps: [{ token: RouterLinkActive, optional: true }, { token: NgZone }, { token: ANIMATION_FRAME }, { token: TuiDestroyService, self: true }], target: i0.ɵɵFactoryTarget.Injectable });
TuiRouterLinkActiveService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiRouterLinkActiveService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiRouterLinkActiveService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.RouterLinkActive, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [RouterLinkActive]
                }] }, { type: i0.NgZone, decorators: [{
                    type: Inject,
                    args: [NgZone]
                }] }, { type: i2.Observable, decorators: [{
                    type: Inject,
                    args: [ANIMATION_FRAME]
                }] }, { type: i3.TuiDestroyService, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiDestroyService]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVyLWxpbmstYWN0aXZlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlL3NlcnZpY2VzL3JvdXRlci1saW5rLWFjdGl2ZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3pFLE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQ2pELE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQUNwRCxPQUFPLEVBQUMsaUJBQWlCLEVBQUUsZ0JBQWdCLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDbEUsT0FBTyxFQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUNyRCxPQUFPLEVBQUMsb0JBQW9CLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDOzs7OztBQUVwRSx3RUFBd0U7QUFFeEUsTUFBTSxPQUFPLDBCQUEyQixTQUFRLFVBQW1CO0lBQy9ELFlBR0ksZ0JBQXlDLEVBQ3pCLElBQVksRUFDSCxlQUFtQyxFQUN6QixRQUEyQjtRQUU5RCxNQUFNLE9BQU8sR0FBRyxnQkFBZ0I7WUFDNUIsQ0FBQyxDQUFDLEtBQUssQ0FDRCxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUscURBQXFEO1lBQy9ELGVBQWUsQ0FDbEIsQ0FBQyxJQUFJLENBQ0YsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxFQUNwQyxvQkFBb0IsRUFBRSxFQUN0QixnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsRUFDdEIsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUN0QjtZQUNILENBQUMsQ0FBQyxLQUFLLENBQUM7UUFFWixLQUFLLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7SUFDdkQsQ0FBQzs7d0hBdEJRLDBCQUEwQixrQkFHdkIsZ0JBQWdCLDZCQUVoQixNQUFNLGFBQ04sZUFBZSxhQUNQLGlCQUFpQjs0SEFQNUIsMEJBQTBCOzRGQUExQiwwQkFBMEI7a0JBRHRDLFVBQVU7OzBCQUdGLFFBQVE7OzBCQUNSLE1BQU07MkJBQUMsZ0JBQWdCOzswQkFFdkIsTUFBTTsyQkFBQyxNQUFNOzswQkFDYixNQUFNOzJCQUFDLGVBQWU7OzBCQUN0QixJQUFJOzswQkFBSSxNQUFNOzJCQUFDLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0LCBJbmplY3RhYmxlLCBOZ1pvbmUsIE9wdGlvbmFsLCBTZWxmfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7Um91dGVyTGlua0FjdGl2ZX0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7QU5JTUFUSU9OX0ZSQU1FfSBmcm9tICdAbmctd2ViLWFwaXMvY29tbW9uJztcbmltcG9ydCB7VHVpRGVzdHJveVNlcnZpY2UsIHR1aVpvbmVPcHRpbWl6ZWR9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtFTVBUWSwgbWVyZ2UsIE9ic2VydmFibGUsIHRpbWVyfSBmcm9tICdyeGpzJztcbmltcG9ydCB7ZGlzdGluY3RVbnRpbENoYW5nZWQsIG1hcCwgdGFrZVVudGlsfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbi8vIFRPRE86IFJlbW92ZSB3aGVuIEFuZ3VsYXIgaXMgdXBkYXRlIGFuZCBgUm91dGVyTGlua0FjdGl2ZWAgaGFzIG91dHB1dFxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFR1aVJvdXRlckxpbmtBY3RpdmVTZXJ2aWNlIGV4dGVuZHMgT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBPcHRpb25hbCgpXG4gICAgICAgIEBJbmplY3QoUm91dGVyTGlua0FjdGl2ZSlcbiAgICAgICAgcm91dGVyTGlua0FjdGl2ZTogUm91dGVyTGlua0FjdGl2ZSB8IG51bGwsXG4gICAgICAgIEBJbmplY3QoTmdab25lKSB6b25lOiBOZ1pvbmUsXG4gICAgICAgIEBJbmplY3QoQU5JTUFUSU9OX0ZSQU1FKSBhbmltYXRpb25GcmFtZSQ6IE9ic2VydmFibGU8bnVtYmVyPixcbiAgICAgICAgQFNlbGYoKSBASW5qZWN0KFR1aURlc3Ryb3lTZXJ2aWNlKSBkZXN0cm95JDogVHVpRGVzdHJveVNlcnZpY2UsXG4gICAgKSB7XG4gICAgICAgIGNvbnN0IHN0cmVhbSQgPSByb3V0ZXJMaW5rQWN0aXZlXG4gICAgICAgICAgICA/IG1lcmdlKFxuICAgICAgICAgICAgICAgICAgdGltZXIoMCksIC8vIFNTUiAoYW5pbWF0aW9uRnJhbWUkIG5ldmVyIGVtaXRzIHZhbHVlIGR1cmluZyBTU1IpXG4gICAgICAgICAgICAgICAgICBhbmltYXRpb25GcmFtZSQsXG4gICAgICAgICAgICAgICkucGlwZShcbiAgICAgICAgICAgICAgICAgIG1hcCgoKSA9PiByb3V0ZXJMaW5rQWN0aXZlLmlzQWN0aXZlKSxcbiAgICAgICAgICAgICAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKCksXG4gICAgICAgICAgICAgICAgICB0dWlab25lT3B0aW1pemVkKHpvbmUpLFxuICAgICAgICAgICAgICAgICAgdGFrZVVudGlsKGRlc3Ryb3kkKSxcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgOiBFTVBUWTtcblxuICAgICAgICBzdXBlcihzdWJzY3JpYmVyID0+IHN0cmVhbSQuc3Vic2NyaWJlKHN1YnNjcmliZXIpKTtcbiAgICB9XG59XG4iXX0=