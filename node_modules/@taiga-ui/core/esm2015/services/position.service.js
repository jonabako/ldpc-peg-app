import { ElementRef, Inject, Injectable, NgZone } from '@angular/core';
import { ANIMATION_FRAME } from '@ng-web-apis/common';
import { EMPTY_CLIENT_RECT, tuiZonefree } from '@taiga-ui/cdk';
import { TuiPositionAccessor } from '@taiga-ui/core/abstract';
import { Observable } from 'rxjs';
import { finalize, map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "rxjs";
import * as i2 from "@taiga-ui/core/abstract";
export class TuiPositionService extends Observable {
    constructor(
    // Destructuring here causes memory leak
    el, animationFrame, zone, accessor) {
        super(subscriber => animationFrame
            .pipe(map(() => el.nativeElement.getBoundingClientRect()), map(rect => accessor.getPosition(rect)), tuiZonefree(zone), finalize(() => accessor.getPosition(EMPTY_CLIENT_RECT)))
            .subscribe(subscriber));
    }
}
TuiPositionService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPositionService, deps: [{ token: ElementRef }, { token: ANIMATION_FRAME }, { token: NgZone }, { token: TuiPositionAccessor }], target: i0.ɵɵFactoryTarget.Injectable });
TuiPositionService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPositionService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPositionService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: i1.Observable, decorators: [{
                    type: Inject,
                    args: [ANIMATION_FRAME]
                }] }, { type: i0.NgZone, decorators: [{
                    type: Inject,
                    args: [NgZone]
                }] }, { type: i2.TuiPositionAccessor, decorators: [{
                    type: Inject,
                    args: [TuiPositionAccessor]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9zaXRpb24uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmUvc2VydmljZXMvcG9zaXRpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3JFLE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQUNwRCxPQUFPLEVBQUMsaUJBQWlCLEVBQUUsV0FBVyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzdELE9BQU8sRUFBQyxtQkFBbUIsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBRTVELE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDaEMsT0FBTyxFQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQzs7OztBQUc3QyxNQUFNLE9BQU8sa0JBQW1CLFNBQVEsVUFBb0I7SUFDeEQ7SUFDSSx3Q0FBd0M7SUFDcEIsRUFBMkIsRUFDdEIsY0FBbUMsRUFDNUMsSUFBWSxFQUNDLFFBQTZCO1FBRTFELEtBQUssQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUNmLGNBQWM7YUFDVCxJQUFJLENBQ0QsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMscUJBQXFCLEVBQUUsQ0FBQyxFQUNuRCxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQ3ZDLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFDakIsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUMxRDthQUNBLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FDN0IsQ0FBQztJQUNOLENBQUM7O2dIQWxCUSxrQkFBa0Isa0JBR2YsVUFBVSxhQUNWLGVBQWUsYUFDZixNQUFNLGFBQ04sbUJBQW1CO29IQU50QixrQkFBa0I7NEZBQWxCLGtCQUFrQjtrQkFEOUIsVUFBVTs7MEJBSUYsTUFBTTsyQkFBQyxVQUFVOzswQkFDakIsTUFBTTsyQkFBQyxlQUFlOzswQkFDdEIsTUFBTTsyQkFBQyxNQUFNOzswQkFDYixNQUFNOzJCQUFDLG1CQUFtQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RWxlbWVudFJlZiwgSW5qZWN0LCBJbmplY3RhYmxlLCBOZ1pvbmV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtBTklNQVRJT05fRlJBTUV9IGZyb20gJ0BuZy13ZWItYXBpcy9jb21tb24nO1xuaW1wb3J0IHtFTVBUWV9DTElFTlRfUkVDVCwgdHVpWm9uZWZyZWV9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtUdWlQb3NpdGlvbkFjY2Vzc29yfSBmcm9tICdAdGFpZ2EtdWkvY29yZS9hYnN0cmFjdCc7XG5pbXBvcnQge1R1aVBvaW50fSBmcm9tICdAdGFpZ2EtdWkvY29yZS90eXBlcyc7XG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtmaW5hbGl6ZSwgbWFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBUdWlQb3NpdGlvblNlcnZpY2UgZXh0ZW5kcyBPYnNlcnZhYmxlPFR1aVBvaW50PiB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIC8vIERlc3RydWN0dXJpbmcgaGVyZSBjYXVzZXMgbWVtb3J5IGxlYWtcbiAgICAgICAgQEluamVjdChFbGVtZW50UmVmKSBlbDogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4sXG4gICAgICAgIEBJbmplY3QoQU5JTUFUSU9OX0ZSQU1FKSBhbmltYXRpb25GcmFtZTogT2JzZXJ2YWJsZTx1bmtub3duPixcbiAgICAgICAgQEluamVjdChOZ1pvbmUpIHpvbmU6IE5nWm9uZSxcbiAgICAgICAgQEluamVjdChUdWlQb3NpdGlvbkFjY2Vzc29yKSBhY2Nlc3NvcjogVHVpUG9zaXRpb25BY2Nlc3NvcixcbiAgICApIHtcbiAgICAgICAgc3VwZXIoc3Vic2NyaWJlciA9PlxuICAgICAgICAgICAgYW5pbWF0aW9uRnJhbWVcbiAgICAgICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICAgICAgbWFwKCgpID0+IGVsLm5hdGl2ZUVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkpLFxuICAgICAgICAgICAgICAgICAgICBtYXAocmVjdCA9PiBhY2Nlc3Nvci5nZXRQb3NpdGlvbihyZWN0KSksXG4gICAgICAgICAgICAgICAgICAgIHR1aVpvbmVmcmVlKHpvbmUpLFxuICAgICAgICAgICAgICAgICAgICBmaW5hbGl6ZSgoKSA9PiBhY2Nlc3Nvci5nZXRQb3NpdGlvbihFTVBUWV9DTElFTlRfUkVDVCkpLFxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAuc3Vic2NyaWJlKHN1YnNjcmliZXIpLFxuICAgICAgICApO1xuICAgIH1cbn1cbiJdfQ==