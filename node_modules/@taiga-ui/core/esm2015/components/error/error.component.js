import { ChangeDetectionStrategy, Component, HostListener, Inject, Input, } from '@angular/core';
import { tuiIsString, TuiValidationError } from '@taiga-ui/cdk';
import { tuiFadeIn, tuiHeightCollapse } from '@taiga-ui/core/animations';
import { MODE_PROVIDER } from '@taiga-ui/core/providers';
import { TUI_ANIMATION_OPTIONS, TUI_DEFAULT_ERROR_MESSAGE, TUI_MODE, } from '@taiga-ui/core/tokens';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@tinkoff/ng-polymorpheus";
import * as i3 from "rxjs";
export class TuiErrorComponent {
    constructor(animation, mode$, defaultErrorMessage$) {
        this.animation = animation;
        this.mode$ = mode$;
        this.defaultErrorMessage$ = defaultErrorMessage$;
        this.error = null;
        this.visible = true;
    }
    set errorSetter(error) {
        this.error = tuiIsString(error) ? new TuiValidationError(error) : error;
    }
    onAnimation(visible) {
        this.visible = visible;
    }
}
TuiErrorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiErrorComponent, deps: [{ token: TUI_ANIMATION_OPTIONS }, { token: TUI_MODE }, { token: TUI_DEFAULT_ERROR_MESSAGE }], target: i0.ɵɵFactoryTarget.Component });
TuiErrorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiErrorComponent, selector: "tui-error", inputs: { errorSetter: ["error", "errorSetter"] }, host: { listeners: { "animationcancel.self": "onAnimation(false)", "animationstart.self": "onAnimation(true)" } }, providers: [MODE_PROVIDER], ngImport: i0, template: "<div\n    *ngIf=\"error && visible\"\n    automation-id=\"tui-error__text\"\n    class=\"t-message-text\"\n    [@tuiFadeIn]=\"animation\"\n    [@tuiHeightCollapse]=\"animation\"\n    [class.t-message-text_light]=\"(mode$ | async) === 'onDark'\"\n>\n    <ng-container\n        *polymorpheusOutlet=\"error.message || (defaultErrorMessage$ | async) as text; context: error.context || {}\"\n    >\n        {{ text }}\n    </ng-container>\n</div>\n", styles: [":host{font:var(--tui-font-text-s);color:var(--tui-text-01);display:block;color:var(--tui-negative);word-wrap:break-word;animation:tuiPresent 1s infinite}.t-message-text{margin-top:.25rem;white-space:pre-line}.t-message-text_light{color:var(--tui-negative-night)}\n"], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }], pipes: { "async": i1.AsyncPipe }, animations: [tuiHeightCollapse, tuiFadeIn], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiErrorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-error',
                    templateUrl: './error.template.html',
                    styleUrls: ['./error.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [MODE_PROVIDER],
                    animations: [tuiHeightCollapse, tuiFadeIn],
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_ANIMATION_OPTIONS]
                }] }, { type: i3.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_MODE]
                }] }, { type: i3.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_DEFAULT_ERROR_MESSAGE]
                }] }]; }, propDecorators: { errorSetter: [{
                type: Input,
                args: ['error']
            }], onAnimation: [{
                type: HostListener,
                args: ['animationcancel.self', ['false']]
            }, {
                type: HostListener,
                args: ['animationstart.self', ['true']]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3IuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY29yZS9jb21wb25lbnRzL2Vycm9yL2Vycm9yLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmUvY29tcG9uZW50cy9lcnJvci9lcnJvci50ZW1wbGF0ZS5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFDSCx1QkFBdUIsRUFDdkIsU0FBUyxFQUNULFlBQVksRUFDWixNQUFNLEVBQ04sS0FBSyxHQUNSLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBQyxXQUFXLEVBQUUsa0JBQWtCLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFDLFNBQVMsRUFBRSxpQkFBaUIsRUFBQyxNQUFNLDJCQUEyQixDQUFDO0FBQ3ZFLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUN2RCxPQUFPLEVBQ0gscUJBQXFCLEVBQ3JCLHlCQUF5QixFQUN6QixRQUFRLEdBQ1gsTUFBTSx1QkFBdUIsQ0FBQzs7Ozs7QUFZL0IsTUFBTSxPQUFPLGlCQUFpQjtJQVUxQixZQUM0QyxTQUEyQixFQUN4QyxLQUF1QyxFQUV6RCxvQkFBd0M7UUFIVCxjQUFTLEdBQVQsU0FBUyxDQUFrQjtRQUN4QyxVQUFLLEdBQUwsS0FBSyxDQUFrQztRQUV6RCx5QkFBb0IsR0FBcEIsb0JBQW9CLENBQW9CO1FBUnJELFVBQUssR0FBOEIsSUFBSSxDQUFDO1FBRXhDLFlBQU8sR0FBRyxJQUFJLENBQUM7SUFPWixDQUFDO0lBZEosSUFDSSxXQUFXLENBQUMsS0FBeUM7UUFDckQsSUFBSSxDQUFDLEtBQUssR0FBRyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksa0JBQWtCLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztJQUM1RSxDQUFDO0lBZUQsV0FBVyxDQUFDLE9BQWdCO1FBQ3hCLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQzNCLENBQUM7OytHQXJCUSxpQkFBaUIsa0JBV2QscUJBQXFCLGFBQ3JCLFFBQVEsYUFDUix5QkFBeUI7bUdBYjVCLGlCQUFpQiwwTUFIZixDQUFDLGFBQWEsQ0FBQywwQkN4QjlCLDZiQWNBLDhpQkRXZ0IsQ0FBQyxpQkFBaUIsRUFBRSxTQUFTLENBQUM7NEZBRWpDLGlCQUFpQjtrQkFSN0IsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsV0FBVztvQkFDckIsV0FBVyxFQUFFLHVCQUF1QjtvQkFDcEMsU0FBUyxFQUFFLENBQUMsb0JBQW9CLENBQUM7b0JBQ2pDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO29CQUMvQyxTQUFTLEVBQUUsQ0FBQyxhQUFhLENBQUM7b0JBQzFCLFVBQVUsRUFBRSxDQUFDLGlCQUFpQixFQUFFLFNBQVMsQ0FBQztpQkFDN0M7OzBCQVlRLE1BQU07MkJBQUMscUJBQXFCOzswQkFDNUIsTUFBTTsyQkFBQyxRQUFROzswQkFDZixNQUFNOzJCQUFDLHlCQUF5Qjs0Q0FYakMsV0FBVztzQkFEZCxLQUFLO3VCQUFDLE9BQU87Z0JBa0JkLFdBQVc7c0JBRlYsWUFBWTt1QkFBQyxzQkFBc0IsRUFBRSxDQUFDLE9BQU8sQ0FBQzs7c0JBQzlDLFlBQVk7dUJBQUMscUJBQXFCLEVBQUUsQ0FBQyxNQUFNLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0FuaW1hdGlvbk9wdGlvbnN9IGZyb20gJ0Bhbmd1bGFyL2FuaW1hdGlvbnMnO1xuaW1wb3J0IHtcbiAgICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgICBDb21wb25lbnQsXG4gICAgSG9zdExpc3RlbmVyLFxuICAgIEluamVjdCxcbiAgICBJbnB1dCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge3R1aUlzU3RyaW5nLCBUdWlWYWxpZGF0aW9uRXJyb3J9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHt0dWlGYWRlSW4sIHR1aUhlaWdodENvbGxhcHNlfSBmcm9tICdAdGFpZ2EtdWkvY29yZS9hbmltYXRpb25zJztcbmltcG9ydCB7TU9ERV9QUk9WSURFUn0gZnJvbSAnQHRhaWdhLXVpL2NvcmUvcHJvdmlkZXJzJztcbmltcG9ydCB7XG4gICAgVFVJX0FOSU1BVElPTl9PUFRJT05TLFxuICAgIFRVSV9ERUZBVUxUX0VSUk9SX01FU1NBR0UsXG4gICAgVFVJX01PREUsXG59IGZyb20gJ0B0YWlnYS11aS9jb3JlL3Rva2Vucyc7XG5pbXBvcnQge1R1aUJyaWdodG5lc3N9IGZyb20gJ0B0YWlnYS11aS9jb3JlL3R5cGVzJztcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAndHVpLWVycm9yJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vZXJyb3IudGVtcGxhdGUuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vZXJyb3Iuc3R5bGUubGVzcyddLFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICAgIHByb3ZpZGVyczogW01PREVfUFJPVklERVJdLFxuICAgIGFuaW1hdGlvbnM6IFt0dWlIZWlnaHRDb2xsYXBzZSwgdHVpRmFkZUluXSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpRXJyb3JDb21wb25lbnQge1xuICAgIEBJbnB1dCgnZXJyb3InKVxuICAgIHNldCBlcnJvclNldHRlcihlcnJvcjogVHVpVmFsaWRhdGlvbkVycm9yIHwgc3RyaW5nIHwgbnVsbCkge1xuICAgICAgICB0aGlzLmVycm9yID0gdHVpSXNTdHJpbmcoZXJyb3IpID8gbmV3IFR1aVZhbGlkYXRpb25FcnJvcihlcnJvcikgOiBlcnJvcjtcbiAgICB9XG5cbiAgICBlcnJvcjogVHVpVmFsaWRhdGlvbkVycm9yIHwgbnVsbCA9IG51bGw7XG5cbiAgICB2aXNpYmxlID0gdHJ1ZTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KFRVSV9BTklNQVRJT05fT1BUSU9OUykgcmVhZG9ubHkgYW5pbWF0aW9uOiBBbmltYXRpb25PcHRpb25zLFxuICAgICAgICBASW5qZWN0KFRVSV9NT0RFKSByZWFkb25seSBtb2RlJDogT2JzZXJ2YWJsZTxUdWlCcmlnaHRuZXNzIHwgbnVsbD4sXG4gICAgICAgIEBJbmplY3QoVFVJX0RFRkFVTFRfRVJST1JfTUVTU0FHRSlcbiAgICAgICAgcmVhZG9ubHkgZGVmYXVsdEVycm9yTWVzc2FnZSQ6IE9ic2VydmFibGU8c3RyaW5nPixcbiAgICApIHt9XG5cbiAgICBASG9zdExpc3RlbmVyKCdhbmltYXRpb25jYW5jZWwuc2VsZicsIFsnZmFsc2UnXSlcbiAgICBASG9zdExpc3RlbmVyKCdhbmltYXRpb25zdGFydC5zZWxmJywgWyd0cnVlJ10pXG4gICAgb25BbmltYXRpb24odmlzaWJsZTogYm9vbGVhbik6IHZvaWQge1xuICAgICAgICB0aGlzLnZpc2libGUgPSB2aXNpYmxlO1xuICAgIH1cbn1cbiIsIjxkaXZcbiAgICAqbmdJZj1cImVycm9yICYmIHZpc2libGVcIlxuICAgIGF1dG9tYXRpb24taWQ9XCJ0dWktZXJyb3JfX3RleHRcIlxuICAgIGNsYXNzPVwidC1tZXNzYWdlLXRleHRcIlxuICAgIFtAdHVpRmFkZUluXT1cImFuaW1hdGlvblwiXG4gICAgW0B0dWlIZWlnaHRDb2xsYXBzZV09XCJhbmltYXRpb25cIlxuICAgIFtjbGFzcy50LW1lc3NhZ2UtdGV4dF9saWdodF09XCIobW9kZSQgfCBhc3luYykgPT09ICdvbkRhcmsnXCJcbj5cbiAgICA8bmctY29udGFpbmVyXG4gICAgICAgICpwb2x5bW9ycGhldXNPdXRsZXQ9XCJlcnJvci5tZXNzYWdlIHx8IChkZWZhdWx0RXJyb3JNZXNzYWdlJCB8IGFzeW5jKSBhcyB0ZXh0OyBjb250ZXh0OiBlcnJvci5jb250ZXh0IHx8IHt9XCJcbiAgICA+XG4gICAgICAgIHt7IHRleHQgfX1cbiAgICA8L25nLWNvbnRhaW5lcj5cbjwvZGl2PlxuIl19