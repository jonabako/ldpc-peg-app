import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, ContentChild, ElementRef, EventEmitter, HostListener, Inject, Input, Optional, Output, Self, ViewChild, } from '@angular/core';
import { TuiActiveZoneDirective, tuiAsFocusableItemAccessor, tuiGetActualTarget, tuiGetClosestFocusable, tuiIsElement, tuiIsElementEditable, tuiIsHTMLElement, tuiIsNativeFocusedIn, tuiIsNativeKeyboardFocusable, tuiTypedFromEvent, } from '@taiga-ui/cdk';
import { TuiPositionAccessor } from '@taiga-ui/core/abstract';
import { TuiDropdownDirective, TuiDropdownHoverDirective, } from '@taiga-ui/core/directives/dropdown';
import { tuiIsEditingKey } from '@taiga-ui/core/utils/miscellaneous';
import { shouldCall } from '@tinkoff/ng-event-plugins';
import { BehaviorSubject, combineLatest, EMPTY, merge, of } from 'rxjs';
import { delay, distinctUntilChanged, map, share, skip, switchMap } from 'rxjs/operators';
import { TuiAccessorProxyDirective } from './accessor-proxy.directive';
import { TUI_HOSTED_DROPDOWN_COMPONENT } from './hosted-dropdown.token';
import { TuiHostedDropdownConnectorDirective } from './hosted-dropdown-connector.directive';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/cdk";
import * as i2 from "./accessor-proxy.directive";
import * as i3 from "./dropdown-open-monitor.directive";
import * as i4 from "@taiga-ui/core/directives/dropdown";
import * as i5 from "@tinkoff/ng-polymorpheus";
import * as i6 from "@angular/common";
function shouldClose(event) {
    var _a;
    return ('key' in event &&
        event.key.toLowerCase() === 'escape' &&
        this.canOpen &&
        this.open &&
        !((_a = this.dropdown) === null || _a === void 0 ? void 0 : _a.nextElementSibling));
}
export class TuiHostedDropdownComponent {
    constructor(hover$, el) {
        this.hover$ = hover$;
        this.el = el;
        this.openChange$ = new BehaviorSubject(false);
        this.hostHover$ = combineLatest([
            tuiTypedFromEvent(this.el.nativeElement, 'mouseover').pipe(map(e => this.computedHost.contains(tuiGetActualTarget(e))), switchMap(visible => {
                var _a, _b;
                return of(visible).pipe(delay((visible ? (_a = this.hover$) === null || _a === void 0 ? void 0 : _a.showDelay : (_b = this.hover$) === null || _b === void 0 ? void 0 : _b.hideDelay) || 0));
            })),
            this.hover$ || EMPTY,
        ]).pipe(map(([visible, hovered]) => visible && hovered));
        this.sided = false;
        this.canOpen = true;
        this.open$ = merge(this.openChange$, this.hostHover$).pipe(skip(1), distinctUntilChanged(), share());
        this.focusedChange = new EventEmitter();
        /** TODO: rename in 4.0 */
        this.openChange = this.openChange$;
        this.close = () => this.updateOpen(false);
    }
    set open(open) {
        this.openChange.next(open);
    }
    get open() {
        return this.openChange.value;
    }
    get host() {
        var _a;
        return ((_a = this.dropdownHost) === null || _a === void 0 ? void 0 : _a.nativeElement) || this.el.nativeElement;
    }
    get computedHost() {
        var _a;
        return (((_a = this.dropdownHost) === null || _a === void 0 ? void 0 : _a.nativeElement) ||
            this.nativeFocusableElement ||
            this.el.nativeElement);
    }
    get dropdown() {
        var _a, _b;
        return (_b = (_a = this.dropdownDirective) === null || _a === void 0 ? void 0 : _a.dropdownBoxRef) === null || _b === void 0 ? void 0 : _b.location.nativeElement;
    }
    get nativeFocusableElement() {
        return tuiIsNativeKeyboardFocusable(this.host)
            ? this.host
            : tuiGetClosestFocusable({
                initial: this.host,
                root: this.el.nativeElement,
            });
    }
    get focused() {
        return (tuiIsNativeFocusedIn(this.host) ||
            (this.open &&
                !!this.wrapper &&
                tuiIsNativeFocusedIn(this.wrapper.nativeElement)));
    }
    onFocusInOut() {
        this.el.nativeElement.classList.toggle('_hosted_dropdown_focused', this.focused);
    }
    onFocusIn(target) {
        if (!this.computedHost.contains(target)) {
            this.updateOpen(false);
        }
    }
    onClick(target) {
        var _a;
        if (!this.hostEditable &&
            this.computedHost.contains(target) &&
            !((_a = this.hover$) === null || _a === void 0 ? void 0 : _a.hovered)) {
            this.updateOpen(!this.open);
        }
    }
    onKeyDownEsc(event) {
        event.preventDefault();
        this.closeDropdown();
    }
    onArrow(event, down) {
        this.focusDropdown(event, down);
    }
    onKeydown({ key, target, defaultPrevented }) {
        if (!defaultPrevented &&
            tuiIsEditingKey(key) &&
            this.hostEditable &&
            tuiIsHTMLElement(target) &&
            !tuiIsElementEditable(target)) {
            this.focusHost();
        }
    }
    onActiveZone(active) {
        this.updateFocused(active);
        if (!active) {
            this.updateOpen(false);
        }
    }
    onHostObscured(obscured) {
        if (obscured) {
            this.closeDropdown();
        }
    }
    updateOpen(open) {
        if (!open || this.canOpen) {
            this.open = open;
        }
    }
    get hostEditable() {
        return tuiIsElementEditable(this.computedHost);
    }
    focusDropdown(event, first) {
        const host = this.nativeFocusableElement;
        if (!host ||
            !tuiIsHTMLElement(host) ||
            !tuiIsElement(event.target) ||
            !host.contains(event.target)) {
            return;
        }
        if (!this.wrapper ||
            !this.open ||
            !this.dropdown ||
            !tuiIsHTMLElement(this.wrapper.nativeElement.nextElementSibling)) {
            this.updateOpen(true);
            if (!tuiIsElementEditable(host)) {
                event.preventDefault();
            }
            return;
        }
        const initial = first
            ? this.wrapper.nativeElement
            : this.wrapper.nativeElement.nextElementSibling;
        const focusable = tuiGetClosestFocusable({
            initial,
            root: this.wrapper.nativeElement,
            previous: !first,
        });
        if (!focusable) {
            return;
        }
        focusable.focus();
        event.preventDefault();
    }
    closeDropdown() {
        if (this.focused) {
            this.focusHost();
        }
        this.updateOpen(false);
    }
    focusHost() {
        const host = this.nativeFocusableElement;
        if (host) {
            host.focus({ preventScroll: true });
        }
    }
    updateFocused(focused) {
        this.focusedChange.emit(focused);
    }
}
TuiHostedDropdownComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiHostedDropdownComponent, deps: [{ token: TuiDropdownHoverDirective, optional: true, self: true }, { token: ElementRef }], target: i0.ɵɵFactoryTarget.Component });
TuiHostedDropdownComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiHostedDropdownComponent, selector: "tui-hosted-dropdown", inputs: { content: "content", sided: "sided", canOpen: "canOpen", open: "open" }, outputs: { open$: "openChange", focusedChange: "focusedChange" }, host: { listeners: { "focusin.capture.silent": "onFocusInOut()", "focusout.capture.silent": "onFocusInOut()", "focusin": "onFocusIn($event.target)", "click": "onClick($event.target)", "document:keydown.silent.capture": "onKeyDownEsc($event)", "keydown.arrowDown": "onArrow($event,true)", "keydown.arrowUp": "onArrow($event,false)" } }, providers: [
        tuiAsFocusableItemAccessor(TuiHostedDropdownComponent),
        {
            provide: TuiAccessorProxyDirective,
            deps: [[new Optional(), new Self(), TuiPositionAccessor]],
            useFactory: (position) => position === null || position === void 0 ? void 0 : position[0],
        },
        {
            provide: TUI_HOSTED_DROPDOWN_COMPONENT,
            useExisting: TuiHostedDropdownComponent,
        },
    ], queries: [{ propertyName: "dropdownHost", first: true, predicate: TuiHostedDropdownConnectorDirective, descendants: true, read: ElementRef }], viewQueries: [{ propertyName: "wrapper", first: true, predicate: ["wrapper"], descendants: true, read: ElementRef }, { propertyName: "dropdownDirective", first: true, predicate: TuiDropdownDirective, descendants: true }, { propertyName: "activeZone", first: true, predicate: TuiActiveZoneDirective, descendants: true }], ngImport: i0, template: "<div\n    *tuiLet=\"(open$ | async) ?? openChange.value as isOpen\"\n    #activeZone=\"tuiActiveZone\"\n    tuiAccessorProxy\n    tuiDropdownOpenMonitor\n    class=\"t-wrapper\"\n    [tuiDropdown]=\"dropdown\"\n    [tuiDropdownManual]=\"isOpen && canOpen\"\n    [tuiDropdownSided]=\"sided\"\n    [tuiObscuredEnabled]=\"isOpen\"\n    (tuiActiveZoneChange)=\"onActiveZone($event)\"\n    (tuiObscured)=\"onHostObscured($event)\"\n>\n    <ng-content></ng-content>\n    <ng-template\n        #dropdown=\"polymorpheus\"\n        [polymorpheus]=\"context\"\n    >\n        <div\n            #wrapper\n            class=\"t-dropdown\"\n            (keydown)=\"onKeydown($event)\"\n        >\n            <div\n                *polymorpheusOutlet=\"\n                    content as text;\n                    context: {\n                        $implicit: activeZone,\n                        close: close\n                    }\n                \"\n                class=\"t-primitive\"\n            >\n                {{ text }}\n            </div>\n        </div>\n        <!--This DIV is here to start backwards TreeWalker for focusing last focusable item on ArrowUp-->\n        <div></div>\n    </ng-template>\n</div>\n", styles: [":host{display:inline-flex}.t-wrapper{border-radius:inherit;height:inherit;flex:1 1 auto;width:100%}.t-dropdown{height:100%}.t-primitive{padding:1rem}\n"], directives: [{ type: i1.TuiLetDirective, selector: "[tuiLet]", inputs: ["tuiLet"] }, { type: i2.TuiAccessorProxyDirective, selector: "[tuiAccessorProxy]" }, { type: i3.TuiDropdownOpenMonitorDirective, selector: "[tuiDropdownOpenMonitor]" }, { type: i4.TuiDropdownDirective, selector: "[tuiDropdown]:not(ng-container)", inputs: ["tuiDropdown"], exportAs: ["tuiDropdown"] }, { type: i4.TuiDropdownDriverDirective, selector: "[tuiDropdown]" }, { type: i4.TuiDropdownManualDirective, selector: "[tuiDropdown][tuiDropdownManual]", inputs: ["tuiDropdownManual"] }, { type: i4.TuiDropdownPositionSidedDirective, selector: "[tuiDropdownSided]", inputs: ["tuiDropdownSided", "tuiDropdownSidedOffset"] }, { type: i1.TuiActiveZoneDirective, selector: "[tuiActiveZone]:not(ng-container), [tuiActiveZoneChange]:not(ng-container), [tuiActiveZoneParent]:not(ng-container)", inputs: ["tuiActiveZoneParent"], outputs: ["tuiActiveZoneChange"], exportAs: ["tuiActiveZone"] }, { type: i1.TuiObscuredDirective, selector: "[tuiObscured]", inputs: ["tuiObscuredEnabled"], outputs: ["tuiObscured"] }, { type: i5.PolymorpheusTemplate, selector: "ng-template[polymorpheus]", inputs: ["polymorpheus"], exportAs: ["polymorpheus"] }, { type: i5.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }], pipes: { "async": i6.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    shouldCall(shouldClose)
], TuiHostedDropdownComponent.prototype, "onKeyDownEsc", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiHostedDropdownComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-hosted-dropdown',
                    templateUrl: './hosted-dropdown.template.html',
                    styleUrls: ['./hosted-dropdown.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        tuiAsFocusableItemAccessor(TuiHostedDropdownComponent),
                        {
                            provide: TuiAccessorProxyDirective,
                            deps: [[new Optional(), new Self(), TuiPositionAccessor]],
                            useFactory: (position) => position === null || position === void 0 ? void 0 : position[0],
                        },
                        {
                            provide: TUI_HOSTED_DROPDOWN_COMPONENT,
                            useExisting: TuiHostedDropdownComponent,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i4.TuiDropdownHoverDirective, decorators: [{
                    type: Self
                }, {
                    type: Optional
                }, {
                    type: Inject,
                    args: [TuiDropdownHoverDirective]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }]; }, propDecorators: { dropdownHost: [{
                type: ContentChild,
                args: [TuiHostedDropdownConnectorDirective, { read: ElementRef }]
            }], wrapper: [{
                type: ViewChild,
                args: ['wrapper', { read: ElementRef }]
            }], dropdownDirective: [{
                type: ViewChild,
                args: [TuiDropdownDirective]
            }], activeZone: [{
                type: ViewChild,
                args: [TuiActiveZoneDirective]
            }], content: [{
                type: Input
            }], sided: [{
                type: Input
            }], canOpen: [{
                type: Input
            }], open$: [{
                type: Output,
                args: ['openChange']
            }], focusedChange: [{
                type: Output
            }], open: [{
                type: Input
            }], onFocusInOut: [{
                type: HostListener,
                args: ['focusin.capture.silent']
            }, {
                type: HostListener,
                args: ['focusout.capture.silent']
            }], onFocusIn: [{
                type: HostListener,
                args: ['focusin', ['$event.target']]
            }], onClick: [{
                type: HostListener,
                args: ['click', ['$event.target']]
            }], onKeyDownEsc: [{
                type: HostListener,
                args: ['document:keydown.silent.capture', ['$event']]
            }], onArrow: [{
                type: HostListener,
                args: ['keydown.arrowDown', ['$event', 'true']]
            }, {
                type: HostListener,
                args: ['keydown.arrowUp', ['$event', 'false']]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG9zdGVkLWRyb3Bkb3duLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmUvY29tcG9uZW50cy9ob3N0ZWQtZHJvcGRvd24vaG9zdGVkLWRyb3Bkb3duLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmUvY29tcG9uZW50cy9ob3N0ZWQtZHJvcGRvd24vaG9zdGVkLWRyb3Bkb3duLnRlbXBsYXRlLmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDSCx1QkFBdUIsRUFDdkIsU0FBUyxFQUNULFlBQVksRUFDWixVQUFVLEVBQ1YsWUFBWSxFQUNaLFlBQVksRUFDWixNQUFNLEVBQ04sS0FBSyxFQUNMLFFBQVEsRUFDUixNQUFNLEVBQ04sSUFBSSxFQUNKLFNBQVMsR0FDWixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQ0gsc0JBQXNCLEVBQ3RCLDBCQUEwQixFQUcxQixrQkFBa0IsRUFDbEIsc0JBQXNCLEVBQ3RCLFlBQVksRUFDWixvQkFBb0IsRUFDcEIsZ0JBQWdCLEVBQ2hCLG9CQUFvQixFQUNwQiw0QkFBNEIsRUFFNUIsaUJBQWlCLEdBQ3BCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBQyxtQkFBbUIsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBQzVELE9BQU8sRUFDSCxvQkFBb0IsRUFDcEIseUJBQXlCLEdBQzVCLE1BQU0sb0NBQW9DLENBQUM7QUFDNUMsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLG9DQUFvQyxDQUFDO0FBQ25FLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQztBQUVyRCxPQUFPLEVBQUMsZUFBZSxFQUFFLGFBQWEsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUN0RSxPQUFPLEVBQUMsS0FBSyxFQUFFLG9CQUFvQixFQUFFLEdB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O2dCQVFYLGFBQWE7c0JBRHJCLE1BQU07Z0JBaUJILElBQUk7c0JBRFAsS0FBSztnQkE2Q04sWUFBWTtzQkFGWCxZQUFZO3VCQUFDLHdCQUF3Qjs7c0JBQ3JDLFlBQVk7dUJBQUMseUJBQXlCO2dCQU12QyxTQUFTO3NCQURSLFlBQVk7dUJBQUMsU0FBUyxFQUFFLENBQUMsZUFBZSxDQUFDO2dCQVExQyxPQUFPO3NCQUROLFlBQVk7dUJBQUMsT0FBTyxFQUFFLENBQUMsZUFBZSxDQUFDO2dCQWF4QyxZQUFZO3NCQURYLFlBQVk7dUJBQUMsaUNBQWlDLEVBQUUsQ0FBQyxRQUFRLENBQUM7Z0JBUTNELE9BQU87c0JBRk4sWUFBWTt1QkFBQyxtQkFBbUIsRUFBRSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUM7O3NCQUNwRCxZQUFZO3VCQUFDLGlCQUFpQixFQUFFLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gICAgQ29tcG9uZW50LFxuICAgIENvbnRlbnRDaGlsZCxcbiAgICBFbGVtZW50UmVmLFxuICAgIEV2ZW50RW1pdHRlcixcbiAgICBIb3N0TGlzdGVuZXIsXG4gICAgSW5qZWN0LFxuICAgIElucHV0LFxuICAgIE9wdGlvbmFsLFxuICAgIE91dHB1dCxcbiAgICBTZWxmLFxuICAgIFZpZXdDaGlsZCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICAgIFR1aUFjdGl2ZVpvbmVEaXJlY3RpdmUsXG4gICAgdHVpQXNGb2N1c2FibGVJdGVtQWNjZXNzb3IsXG4gICAgVHVpQ29udGV4dFdpdGhJbXBsaWNpdCxcbiAgICBUdWlGb2N1c2FibGVFbGVtZW50QWNjZXNzb3IsXG4gICAgdHVpR2V0QWN0dWFsVGFyZ2V0LFxuICAgIHR1aUdldENsb3Nlc3RGb2N1c2FibGUsXG4gICAgdHVpSXNFbGVtZW50LFxuICAgIHR1aUlzRWxlbWVudEVkaXRhYmxlLFxuICAgIHR1aUlzSFRNTEVsZW1lbnQsXG4gICAgdHVpSXNOYXRpdmVGb2N1c2VkSW4sXG4gICAgdHVpSXNOYXRpdmVLZXlib2FyZEZvY3VzYWJsZSxcbiAgICBUdWlOYXRpdmVGb2N1c2FibGVFbGVtZW50LFxuICAgIHR1aVR5cGVkRnJvbUV2ZW50LFxufSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7VHVpUG9zaXRpb25BY2Nlc3Nvcn0gZnJvbSAnQHRhaWdhLXVpL2NvcmUvYWJzdHJhY3QnO1xuaW1wb3J0IHtcbiAgICBUdWlEcm9wZG93bkRpcmVjdGl2ZSxcbiAgICBUdWlEcm9wZG93bkhvdmVyRGlyZWN0aXZlLFxufSBmcm9tICdAdGFpZ2EtdWkvY29yZS9kaXJlY3RpdmVzL2Ryb3Bkb3duJztcbmltcG9ydCB7dHVpSXNFZGl0aW5nS2V5fSBmcm9tICdAdGFpZ2EtdWkvY29yZS91dGlscy9taXNjZWxsYW5lb3VzJztcbmltcG9ydCB7c2hvdWxkQ2FsbH0gZnJvbSAnQHRpbmtvZmYvbmctZXZlbnQtcGx1Z2lucyc7XG5pbXBvcnQge1BvbHltb3JwaGV1c0NvbnRlbnR9IGZyb20gJ0B0aW5rb2ZmL25nLXBvbHltb3JwaGV1cyc7XG5pbXBvcnQge0JlaGF2aW9yU3ViamVjdCwgY29tYmluZUxhdGVzdCwgRU1QVFksIG1lcmdlLCBvZn0gZnJvbSAncnhqcyc7XG5pbXBvcnQge2RlbGF5LCBkaXN0aW5jdFVudGlsQ2hhbmdlZCwgbWFwLCBzaGFyZSwgc2tpcCwgc3dpdGNoTWFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7VHVpQWNjZXNzb3JQcm94eURpcmVjdGl2ZX0gZnJvbSAnLi9hY2Nlc3Nvci1wcm94eS5kaXJlY3RpdmUnO1xuaW1wb3J0IHtUVUlfSE9TVEVEX0RST1BET1dOX0NPTVBPTkVOVH0gZnJvbSAnLi9ob3N0ZWQtZHJvcGRvd24udG9rZW4nO1xuaW1wb3J0IHtUdWlIb3N0ZWREcm9wZG93bkNvbm5lY3RvckRpcmVjdGl2ZX0gZnJvbSAnLi9ob3N0ZWQtZHJvcGRvd24tY29ubmVjdG9yLmRpcmVjdGl2ZSc7XG5cbmZ1bmN0aW9uIHNob3VsZENsb3NlKFxuICAgIHRoaXM6IFR1aUhvc3RlZERyb3Bkb3duQ29tcG9uZW50LFxuICAgIGV2ZW50OiBFdmVudCB8IEtleWJvYXJkRXZlbnQsXG4pOiBib29sZWFuIHtcbiAgICByZXR1cm4gKFxuICAgICAgICAna2V5JyBpbiBldmVudCAmJlxuICAgICAgICBldmVudC5rZXkudG9Mb3dlckNhc2UoKSA9PT0gJ2VzY2FwZScgJiZcbiAgICAgICAgdGhpcy5jYW5PcGVuICYmXG4gICAgICAgIHRoaXMub3BlbiAmJlxuICAgICAgICAhdGhpcy5kcm9wZG93bj8ubmV4dEVsZW1lbnRTaWJsaW5nXG4gICAgKTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUdWlIb3N0ZWREcm9wZG93bkNvbnRleHRcbiAgICBleHRlbmRzIFR1aUNvbnRleHRXaXRoSW1wbGljaXQ8VHVpQWN0aXZlWm9uZURpcmVjdGl2ZT4ge1xuICAgIGNsb3NlKCk6IHZvaWQ7XG59XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAndHVpLWhvc3RlZC1kcm9wZG93bicsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2hvc3RlZC1kcm9wZG93bi50ZW1wbGF0ZS5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9ob3N0ZWQtZHJvcGRvd24uc3R5bGUubGVzcyddLFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICAgIHByb3ZpZGVyczogW1xuICAgICAgICB0dWlBc0ZvY3VzYWJsZUl0ZW1BY2Nlc3NvcihUdWlIb3N0ZWREcm9wZG93bkNvbXBvbmVudCksXG4gICAgICAgIHtcbiAgICAgICAgICAgIHByb3ZpZGU6IFR1aUFjY2Vzc29yUHJveHlEaXJlY3RpdmUsXG4gICAgICAgICAgICBkZXBzOiBbW25ldyBPcHRpb25hbCgpLCBuZXcgU2VsZigpLCBUdWlQb3NpdGlvbkFjY2Vzc29yXV0sXG4gICAgICAgICAgICB1c2VGYWN0b3J5OiAocG9zaXRpb246IFR1aVBvc2l0aW9uQWNjZXNzb3JbXSB8IG51bGwpID0+IHBvc2l0aW9uPy5bMF0sXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIHByb3ZpZGU6IFRVSV9IT1NURURfRFJPUERPV05fQ09NUE9ORU5ULFxuICAgICAgICAgICAgdXNlRXhpc3Rpbmc6IFR1aUhvc3RlZERyb3Bkb3duQ29tcG9uZW50LFxuICAgICAgICB9LFxuICAgIF0sXG59KVxuZXhwb3J0IGNsYXNzIFR1aUhvc3RlZERyb3Bkb3duQ29tcG9uZW50IGltcGxlbWVudHMgVHVpRm9jdXNhYmxlRWxlbWVudEFjY2Vzc29yIHtcbiAgICBAQ29udGVudENoaWxkKFR1aUhvc3RlZERyb3Bkb3duQ29ubmVjdG9yRGlyZWN0aXZlLCB7cmVhZDogRWxlbWVudFJlZn0pXG4gICAgcHJpdmF0ZSByZWFkb25seSBkcm9wZG93bkhvc3Q/OiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PjtcblxuICAgIEBWaWV3Q2hpbGQoJ3dyYXBwZXInLCB7cmVhZDogRWxlbWVudFJlZn0pXG4gICAgcHJpdmF0ZSByZWFkb25seSB3cmFwcGVyPzogRWxlbWVudFJlZjxIVE1MRGl2RWxlbWVudD47XG5cbiAgICBAVmlld0NoaWxkKFR1aURyb3Bkb3duRGlyZWN0aXZlKVxuICAgIHByaXZhdGUgcmVhZG9ubHkgZHJvcGRvd25EaXJlY3RpdmU/OiBUdWlEcm9wZG93bkRpcmVjdGl2ZTtcblxuICAgIHByaXZhdGUgcmVhZG9ubHkgb3BlbkNoYW5nZSQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0KGZhbHNlKTtcblxuICAgIHByaXZhdGUgcmVhZG9ubHkgaG9zdEhvdmVyJCA9IGNvbWJpbmVMYXRlc3QoW1xuICAgICAgICB0dWlUeXBlZEZyb21FdmVudCh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsICdtb3VzZW92ZXInKS5waXBlKFxuICAgICAgICAgICAgbWFwKGUgPT4gdGhpcy5jb21wdXRlZEhvc3QuY29udGFpbnModHVpR2V0QWN0dWFsVGFyZ2V0KGUpKSksXG4gICAgICAgICAgICBzd2l0Y2hNYXAodmlzaWJsZSA9PlxuICAgICAgICAgICAgICAgIG9mKHZpc2libGUpLnBpcGUoXG4gICAgICAgICAgICAgICAgICAgIGRlbGF5KFxuICAgICAgICAgICAgICAgICAgICAgICAgKHZpc2libGUgPyB0aGlzLmhvdmVyJD8uc2hvd0RlbGF5IDogdGhpcy5ob3ZlciQ/LmhpZGVEZWxheSkgfHwgMCxcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgKSxcbiAgICAgICAgdGhpcy5ob3ZlciQgfHwgRU1QVFksXG4gICAgXSkucGlwZShtYXAoKFt2aXNpYmxlLCBob3ZlcmVkXSkgPT4gdmlzaWJsZSAmJiBob3ZlcmVkKSk7XG5cbiAgICBAVmlld0NoaWxkKFR1aUFjdGl2ZVpvbmVEaXJlY3RpdmUpXG4gICAgcmVhZG9ubHkgYWN0aXZlWm9uZSE6IFR1aUFjdGl2ZVpvbmVEaXJlY3RpdmU7XG5cbiAgICBASW5wdXQoKVxuICAgIGNvbnRlbnQ6IFBvbHltb3JwaGV1c0NvbnRlbnQ8VHVpSG9zdGVkRHJvcGRvd25Db250ZXh0PjtcblxuICAgIEBJbnB1dCgpXG4gICAgc2lkZWQgPSBmYWxzZTtcblxuICAgIEBJbnB1dCgpXG4gICAgY2FuT3BlbiA9IHRydWU7XG5cbiAgICBAT3V0cHV0KCdvcGVuQ2hhbmdlJylcbiAgICByZWFkb25seSBvcGVuJCA9IG1lcmdlKHRoaXMub3BlbkNoYW5nZSQsIHRoaXMuaG9zdEhvdmVyJCkucGlwZShcbiAgICAgICAgc2tpcCgxKSxcbiAgICAgICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKSxcbiAgICAgICAgc2hhcmUoKSxcbiAgICApO1xuXG4gICAgQE91dHB1dCgpXG4gICAgcmVhZG9ubHkgZm9jdXNlZENoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4oKTtcblxuICAgIC8qKiBUT0RPOiByZW5hbWUgaW4gNC4wICovXG4gICAgcmVhZG9ubHkgb3BlbkNoYW5nZSA9IHRoaXMub3BlbkNoYW5nZSQ7XG5cbiAgICByZWFkb25seSBjb250ZXh0ITogVHVpQ29udGV4dFdpdGhJbXBsaWNpdDxUdWlBY3RpdmVab25lRGlyZWN0aXZlPjtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBAU2VsZigpXG4gICAgICAgIEBPcHRpb25hbCgpXG4gICAgICAgIEBJbmplY3QoVHVpRHJvcGRvd25Ib3ZlckRpcmVjdGl2ZSlcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBob3ZlciQ6IFR1aURyb3Bkb3duSG92ZXJEaXJlY3RpdmUgfCBudWxsLFxuICAgICAgICBASW5qZWN0KEVsZW1lbnRSZWYpIHByaXZhdGUgcmVhZG9ubHkgZWw6IEVsZW1lbnRSZWYsXG4gICAgKSB7fVxuXG4gICAgQElucHV0KClcbiAgICBzZXQgb3BlbihvcGVuOiBib29sZWFuKSB7XG4gICAgICAgIHRoaXMub3BlbkNoYW5nZS5uZXh0KG9wZW4pO1xuICAgIH1cblxuICAgIGdldCBvcGVuKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5vcGVuQ2hhbmdlLnZhbHVlO1xuICAgIH1cblxuICAgIGdldCBob3N0KCk6IEhUTUxFbGVtZW50IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZHJvcGRvd25Ib3N0Py5uYXRpdmVFbGVtZW50IHx8IHRoaXMuZWwubmF0aXZlRWxlbWVudDtcbiAgICB9XG5cbiAgICBnZXQgY29tcHV0ZWRIb3N0KCk6IEhUTUxFbGVtZW50IHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIHRoaXMuZHJvcGRvd25Ib3N0Py5uYXRpdmVFbGVtZW50IHx8XG4gICAgICAgICAgICB0aGlzLm5hdGl2ZUZvY3VzYWJsZUVsZW1lbnQgfHxcbiAgICAgICAgICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudFxuICAgICAgICApO1xuICAgIH1cblxuICAgIGdldCBkcm9wZG93bigpOiBIVE1MRWxlbWVudCB8IHVuZGVmaW5lZCB7XG4gICAgICAgIHJldHVybiB0aGlzLmRyb3Bkb3duRGlyZWN0aXZlPy5kcm9wZG93bkJveFJlZj8ubG9jYXRpb24ubmF0aXZlRWxlbWVudDtcbiAgICB9XG5cbiAgICBnZXQgbmF0aXZlRm9jdXNhYmxlRWxlbWVudCgpOiBUdWlOYXRpdmVGb2N1c2FibGVFbGVtZW50IHwgbnVsbCB7XG4gICAgICAgIHJldHVybiB0dWlJc05hdGl2ZUtleWJvYXJkRm9jdXNhYmxlKHRoaXMuaG9zdClcbiAgICAgICAgICAgID8gdGhpcy5ob3N0XG4gICAgICAgICAgICA6IHR1aUdldENsb3Nlc3RGb2N1c2FibGUoe1xuICAgICAgICAgICAgICAgICAgaW5pdGlhbDogdGhpcy5ob3N0LFxuICAgICAgICAgICAgICAgICAgcm9vdDogdGhpcy5lbC5uYXRpdmVFbGVtZW50LFxuICAgICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBnZXQgZm9jdXNlZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIHR1aUlzTmF0aXZlRm9jdXNlZEluKHRoaXMuaG9zdCkgfHxcbiAgICAgICAgICAgICh0aGlzLm9wZW4gJiZcbiAgICAgICAgICAgICAgICAhIXRoaXMud3JhcHBlciAmJlxuICAgICAgICAgICAgICAgIHR1aUlzTmF0aXZlRm9jdXNlZEluKHRoaXMud3JhcHBlci5uYXRpdmVFbGVtZW50KSlcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBASG9zdExpc3RlbmVyKCdmb2N1c2luLmNhcHR1cmUuc2lsZW50JylcbiAgICBASG9zdExpc3RlbmVyKCdmb2N1c291dC5jYXB0dXJlLnNpbGVudCcpXG4gICAgb25Gb2N1c0luT3V0KCk6IHZvaWQge1xuICAgICAgICB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LnRvZ2dsZSgnX2hvc3RlZF9kcm9wZG93bl9mb2N1c2VkJywgdGhpcy5mb2N1c2VkKTtcbiAgICB9XG5cbiAgICBASG9zdExpc3RlbmVyKCdmb2N1c2luJywgWyckZXZlbnQudGFyZ2V0J10pXG4gICAgb25Gb2N1c0luKHRhcmdldDogSFRNTEVsZW1lbnQpOiB2b2lkIHtcbiAgICAgICAgaWYgKCF0aGlzLmNvbXB1dGVkSG9zdC5jb250YWlucyh0YXJnZXQpKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZU9wZW4oZmFsc2UpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgQEhvc3RMaXN0ZW5lcignY2xpY2snLCBbJyRldmVudC50YXJnZXQnXSlcbiAgICBvbkNsaWNrKHRhcmdldDogSFRNTEVsZW1lbnQpOiB2b2lkIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgIXRoaXMuaG9zdEVkaXRhYmxlICYmXG4gICAgICAgICAgICB0aGlzLmNvbXB1dGVkSG9zdC5jb250YWlucyh0YXJnZXQpICYmXG4gICAgICAgICAgICAhdGhpcy5ob3ZlciQ/LmhvdmVyZWRcbiAgICAgICAgKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZU9wZW4oIXRoaXMub3Blbik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBAc2hvdWxkQ2FsbChzaG91bGRDbG9zZSlcbiAgICBASG9zdExpc3RlbmVyKCdkb2N1bWVudDprZXlkb3duLnNpbGVudC5jYXB0dXJlJywgWyckZXZlbnQnXSlcbiAgICBvbktleURvd25Fc2MoZXZlbnQ6IEV2ZW50KTogdm9pZCB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHRoaXMuY2xvc2VEcm9wZG93bigpO1xuICAgIH1cblxuICAgIEBIb3N0TGlzdGVuZXIoJ2tleWRvd24uYXJyb3dEb3duJywgWyckZXZlbnQnLCAndHJ1ZSddKVxuICAgIEBIb3N0TGlzdGVuZXIoJ2tleWRvd24uYXJyb3dVcCcsIFsnJGV2ZW50JywgJ2ZhbHNlJ10pXG4gICAgb25BcnJvdyhldmVudDogS2V5Ym9hcmRFdmVudCwgZG93bjogYm9vbGVhbik6IHZvaWQge1xuICAgICAgICB0aGlzLmZvY3VzRHJvcGRvd24oZXZlbnQsIGRvd24pO1xuICAgIH1cblxuICAgIG9uS2V5ZG93bih7a2V5LCB0YXJnZXQsIGRlZmF1bHRQcmV2ZW50ZWR9OiBLZXlib2FyZEV2ZW50KTogdm9pZCB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgICFkZWZhdWx0UHJldmVudGVkICYmXG4gICAgICAgICAgICB0dWlJc0VkaXRpbmdLZXkoa2V5KSAmJlxuICAgICAgICAgICAgdGhpcy5ob3N0RWRpdGFibGUgJiZcbiAgICAgICAgICAgIHR1aUlzSFRNTEVsZW1lbnQodGFyZ2V0KSAmJlxuICAgICAgICAgICAgIXR1aUlzRWxlbWVudEVkaXRhYmxlKHRhcmdldClcbiAgICAgICAgKSB7XG4gICAgICAgICAgICB0aGlzLmZvY3VzSG9zdCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25BY3RpdmVab25lKGFjdGl2ZTogYm9vbGVhbik6IHZvaWQge1xuICAgICAgICB0aGlzLnVwZGF0ZUZvY3VzZWQoYWN0aXZlKTtcblxuICAgICAgICBpZiAoIWFjdGl2ZSkge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVPcGVuKGZhbHNlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uSG9zdE9ic2N1cmVkKG9ic2N1cmVkOiBib29sZWFuKTogdm9pZCB7XG4gICAgICAgIGlmIChvYnNjdXJlZCkge1xuICAgICAgICAgICAgdGhpcy5jbG9zZURyb3Bkb3duKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB1cGRhdGVPcGVuKG9wZW46IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgICAgaWYgKCFvcGVuIHx8IHRoaXMuY2FuT3Blbikge1xuICAgICAgICAgICAgdGhpcy5vcGVuID0gb3BlbjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlYWRvbmx5IGNsb3NlID0gKCk6IHZvaWQgPT4gdGhpcy51cGRhdGVPcGVuKGZhbHNlKTtcblxuICAgIHByaXZhdGUgZ2V0IGhvc3RFZGl0YWJsZSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHR1aUlzRWxlbWVudEVkaXRhYmxlKHRoaXMuY29tcHV0ZWRIb3N0KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGZvY3VzRHJvcGRvd24oZXZlbnQ6IEtleWJvYXJkRXZlbnQsIGZpcnN0OiBib29sZWFuKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGhvc3QgPSB0aGlzLm5hdGl2ZUZvY3VzYWJsZUVsZW1lbnQ7XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgIWhvc3QgfHxcbiAgICAgICAgICAgICF0dWlJc0hUTUxFbGVtZW50KGhvc3QpIHx8XG4gICAgICAgICAgICAhdHVpSXNFbGVtZW50KGV2ZW50LnRhcmdldCkgfHxcbiAgICAgICAgICAgICFob3N0LmNvbnRhaW5zKGV2ZW50LnRhcmdldClcbiAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXG4gICAgICAgICAgICAhdGhpcy53cmFwcGVyIHx8XG4gICAgICAgICAgICAhdGhpcy5vcGVuIHx8XG4gICAgICAgICAgICAhdGhpcy5kcm9wZG93biB8fFxuICAgICAgICAgICAgIXR1aUlzSFRNTEVsZW1lbnQodGhpcy53cmFwcGVyLm5hdGl2ZUVsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlT3Blbih0cnVlKTtcblxuICAgICAgICAgICAgaWYgKCF0dWlJc0VsZW1lbnRFZGl0YWJsZShob3N0KSkge1xuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGluaXRpYWwgPSBmaXJzdFxuICAgICAgICAgICAgPyB0aGlzLndyYXBwZXIubmF0aXZlRWxlbWVudFxuICAgICAgICAgICAgOiB0aGlzLndyYXBwZXIubmF0aXZlRWxlbWVudC5uZXh0RWxlbWVudFNpYmxpbmc7XG4gICAgICAgIGNvbnN0IGZvY3VzYWJsZSA9IHR1aUdldENsb3Nlc3RGb2N1c2FibGUoe1xuICAgICAgICAgICAgaW5pdGlhbCxcbiAgICAgICAgICAgIHJvb3Q6IHRoaXMud3JhcHBlci5uYXRpdmVFbGVtZW50LFxuICAgICAgICAgICAgcHJldmlvdXM6ICFmaXJzdCxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKCFmb2N1c2FibGUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvY3VzYWJsZS5mb2N1cygpO1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgY2xvc2VEcm9wZG93bigpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuZm9jdXNlZCkge1xuICAgICAgICAgICAgdGhpcy5mb2N1c0hvc3QoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudXBkYXRlT3BlbihmYWxzZSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBmb2N1c0hvc3QoKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGhvc3QgPSB0aGlzLm5hdGl2ZUZvY3VzYWJsZUVsZW1lbnQ7XG5cbiAgICAgICAgaWYgKGhvc3QpIHtcbiAgICAgICAgICAgIGhvc3QuZm9jdXMoe3ByZXZlbnRTY3JvbGw6IHRydWV9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgdXBkYXRlRm9jdXNlZChmb2N1c2VkOiBib29sZWFuKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZm9jdXNlZENoYW5nZS5lbWl0KGZvY3VzZWQpO1xuICAgIH1cbn1cbiIsIjxkaXZcbiAgICAqdHVpTGV0PVwiKG9wZW4kIHwgYXN5bmMpID8/IG9wZW5DaGFuZ2UudmFsdWUgYXMgaXNPcGVuXCJcbiAgICAjYWN0aXZlWm9uZT1cInR1aUFjdGl2ZVpvbmVcIlxuICAgIHR1aUFjY2Vzc29yUHJveHlcbiAgICB0dWlEcm9wZG93bk9wZW5Nb25pdG9yXG4gICAgY2xhc3M9XCJ0LXdyYXBwZXJcIlxuICAgIFt0dWlEcm9wZG93bl09XCJkcm9wZG93blwiXG4gICAgW3R1aURyb3Bkb3duTWFudWFsXT1cImlzT3BlbiAmJiBjYW5PcGVuXCJcbiAgICBbdHVpRHJvcGRvd25TaWRlZF09XCJzaWRlZFwiXG4gICAgW3R1aU9ic2N1cmVkRW5hYmxlZF09XCJpc09wZW5cIlxuICAgICh0dWlBY3RpdmVab25lQ2hhbmdlKT1cIm9uQWN0aXZlWm9uZSgkZXZlbnQpXCJcbiAgICAodHVpT2JzY3VyZWQpPVwib25Ib3N0T2JzY3VyZWQoJGV2ZW50KVwiXG4+XG4gICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuICAgIDxuZy10ZW1wbGF0ZVxuICAgICAgICAjZHJvcGRvd249XCJwb2x5bW9ycGhldXNcIlxuICAgICAgICBbcG9seW1vcnBoZXVzXT1cImNvbnRleHRcIlxuICAgID5cbiAgICAgICAgPGRpdlxuICAgICAgICAgICAgI3dyYXBwZXJcbiAgICAgICAgICAgIGNsYXNzPVwidC1kcm9wZG93blwiXG4gICAgICAgICAgICAoa2V5ZG93bik9XCJvbktleWRvd24oJGV2ZW50KVwiXG4gICAgICAgID5cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAqcG9seW1vcnBoZXVzT3V0bGV0PVwiXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQgYXMgdGV4dDtcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgJGltcGxpY2l0OiBhY3RpdmVab25lLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xvc2U6IGNsb3NlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcIlxuICAgICAgICAgICAgICAgIGNsYXNzPVwidC1wcmltaXRpdmVcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHt7IHRleHQgfX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPCEtLVRoaXMgRElWIGlzIGhlcmUgdG8gc3RhcnQgYmFja3dhcmRzIFRyZWVXYWxrZXIgZm9yIGZvY3VzaW5nIGxhc3QgZm9jdXNhYmxlIGl0ZW0gb24gQXJyb3dVcC0tPlxuICAgICAgICA8ZGl2PjwvZGl2PlxuICAgIDwvbmctdGVtcGxhdGU+XG48L2Rpdj5cbiJdfQ==