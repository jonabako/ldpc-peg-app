import { Directive, Inject, Optional, Self } from '@angular/core';
import { TuiDestroyService } from '@taiga-ui/cdk';
import { TuiDropdownDirective, TuiDropdownOpenDirective } from '@taiga-ui/core/directives';
import { filter, takeUntil } from 'rxjs/operators';
import { TUI_HOSTED_DROPDOWN_COMPONENT } from './hosted-dropdown.token';
import * as i0 from "@angular/core";
import * as i1 from "rxjs";
import * as i2 from "@taiga-ui/core/directives";
export class TuiDropdownOpenMonitorDirective {
    constructor(destroy$, hosted, dropdown, open) {
        open === null || open === void 0 ? void 0 : open.tuiDropdownOpenChange.pipe(filter(value => value && open.dropdown === dropdown && !hosted.focused), takeUntil(destroy$)).subscribe(() => {
            var _a;
            (_a = hosted.nativeFocusableElement) === null || _a === void 0 ? void 0 : _a.focus();
            hosted.updateOpen(true);
        });
    }
}
TuiDropdownOpenMonitorDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDropdownOpenMonitorDirective, deps: [{ token: TuiDestroyService, self: true }, { token: TUI_HOSTED_DROPDOWN_COMPONENT }, { token: TuiDropdownDirective, self: true }, { token: TuiDropdownOpenDirective, optional: true }], target: i0.ɵɵFactoryTarget.Directive });
TuiDropdownOpenMonitorDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiDropdownOpenMonitorDirective, selector: "[tuiDropdownOpenMonitor]", providers: [TuiDestroyService], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDropdownOpenMonitorDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiDropdownOpenMonitor]',
                    providers: [TuiDestroyService],
                }]
        }], ctorParameters: function () { return [{ type: i1.Observable, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiDestroyService]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_HOSTED_DROPDOWN_COMPONENT]
                }] }, { type: i2.TuiDropdownDirective, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiDropdownDirective]
                }] }, { type: i2.TuiDropdownOpenDirective, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TuiDropdownOpenDirective]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcGRvd24tb3Blbi1tb25pdG9yLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmUvY29tcG9uZW50cy9ob3N0ZWQtZHJvcGRvd24vZHJvcGRvd24tb3Blbi1tb25pdG9yLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ2hFLE9BQU8sRUFBQyxpQkFBaUIsRUFBd0IsTUFBTSxlQUFlLENBQUM7QUFDdkUsT0FBTyxFQUFDLG9CQUFvQixFQUFFLHdCQUF3QixFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFFekYsT0FBTyxFQUFDLE1BQU0sRUFBRSxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUVqRCxPQUFPLEVBQUMsNkJBQTZCLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQzs7OztBQU10RSxNQUFNLE9BQU8sK0JBQStCO0lBQ3hDLFlBQ3VDLFFBQTZCLEVBRWhFLE1BQW1FLEVBQzdCLFFBQThCLEVBR3BFLElBQXFDO1FBRXJDLElBQUksYUFBSixJQUFJLHVCQUFKLElBQUksQ0FBRSxxQkFBcUIsQ0FDdEIsSUFBSSxDQUNELE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsUUFBUSxLQUFLLFFBQVEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFDdkUsU0FBUyxDQUFDLFFBQVEsQ0FBQyxFQUV0QixTQUFTLENBQUMsR0FBRyxFQUFFOztZQUNaLE1BQUEsTUFBTSxDQUFDLHNCQUFzQiwwQ0FBRSxLQUFLLEVBQUUsQ0FBQztZQUN2QyxNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzVCLENBQUMsQ0FBQyxDQUFDO0lBQ1gsQ0FBQzs7NkhBbkJRLCtCQUErQixrQkFFcEIsaUJBQWlCLHlCQUN6Qiw2QkFBNkIsYUFFckIsb0JBQW9CLHlCQUU1Qix3QkFBd0I7aUhBUDNCLCtCQUErQixtREFGN0IsQ0FBQyxpQkFBaUIsQ0FBQzs0RkFFckIsK0JBQStCO2tCQUozQyxTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSwwQkFBMEI7b0JBQ3BDLFNBQVMsRUFBRSxDQUFDLGlCQUFpQixDQUFDO2lCQUNqQzs7MEJBR1EsSUFBSTs7MEJBQUksTUFBTTsyQkFBQyxpQkFBaUI7OzBCQUNoQyxNQUFNOzJCQUFDLDZCQUE2Qjs7MEJBRXBDLElBQUk7OzBCQUFJLE1BQU07MkJBQUMsb0JBQW9COzswQkFDbkMsUUFBUTs7MEJBQ1IsTUFBTTsyQkFBQyx3QkFBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgSW5qZWN0LCBPcHRpb25hbCwgU2VsZn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1R1aURlc3Ryb3lTZXJ2aWNlLCBUdWlJbmplY3Rpb25Ub2tlblR5cGV9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtUdWlEcm9wZG93bkRpcmVjdGl2ZSwgVHVpRHJvcGRvd25PcGVuRGlyZWN0aXZlfSBmcm9tICdAdGFpZ2EtdWkvY29yZS9kaXJlY3RpdmVzJztcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5pbXBvcnQge2ZpbHRlciwgdGFrZVVudGlsfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7VFVJX0hPU1RFRF9EUk9QRE9XTl9DT01QT05FTlR9IGZyb20gJy4vaG9zdGVkLWRyb3Bkb3duLnRva2VuJztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbdHVpRHJvcGRvd25PcGVuTW9uaXRvcl0nLFxuICAgIHByb3ZpZGVyczogW1R1aURlc3Ryb3lTZXJ2aWNlXSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpRHJvcGRvd25PcGVuTW9uaXRvckRpcmVjdGl2ZSB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBTZWxmKCkgQEluamVjdChUdWlEZXN0cm95U2VydmljZSkgZGVzdHJveSQ6IE9ic2VydmFibGU8dW5rbm93bj4sXG4gICAgICAgIEBJbmplY3QoVFVJX0hPU1RFRF9EUk9QRE9XTl9DT01QT05FTlQpXG4gICAgICAgIGhvc3RlZDogVHVpSW5qZWN0aW9uVG9rZW5UeXBlPHR5cGVvZiBUVUlfSE9TVEVEX0RST1BET1dOX0NPTVBPTkVOVD4sXG4gICAgICAgIEBTZWxmKCkgQEluamVjdChUdWlEcm9wZG93bkRpcmVjdGl2ZSkgZHJvcGRvd246IFR1aURyb3Bkb3duRGlyZWN0aXZlLFxuICAgICAgICBAT3B0aW9uYWwoKVxuICAgICAgICBASW5qZWN0KFR1aURyb3Bkb3duT3BlbkRpcmVjdGl2ZSlcbiAgICAgICAgb3BlbjogVHVpRHJvcGRvd25PcGVuRGlyZWN0aXZlIHwgbnVsbCxcbiAgICApIHtcbiAgICAgICAgb3Blbj8udHVpRHJvcGRvd25PcGVuQ2hhbmdlXG4gICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICBmaWx0ZXIodmFsdWUgPT4gdmFsdWUgJiYgb3Blbi5kcm9wZG93biA9PT0gZHJvcGRvd24gJiYgIWhvc3RlZC5mb2N1c2VkKSxcbiAgICAgICAgICAgICAgICB0YWtlVW50aWwoZGVzdHJveSQpLFxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgaG9zdGVkLm5hdGl2ZUZvY3VzYWJsZUVsZW1lbnQ/LmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgaG9zdGVkLnVwZGF0ZU9wZW4odHJ1ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG59XG4iXX0=