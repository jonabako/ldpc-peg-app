import { ChangeDetectionStrategy, Component, ElementRef, Inject, Self, } from '@angular/core';
import { TuiDestroyService, tuiIsNumber } from '@taiga-ui/cdk';
import { tuiFadeIn, tuiHeightCollapse, tuiSlideIn } from '@taiga-ui/core/animations';
import { TUI_ANIMATION_OPTIONS } from '@taiga-ui/core/tokens';
import { POLYMORPHEUS_CONTEXT } from '@tinkoff/ng-polymorpheus';
import { fromEvent, timer } from 'rxjs';
import { repeatWhen, takeUntil } from 'rxjs/operators';
import { TUI_ALERT_POSITION } from './alert.providers';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core/components/notification";
import * as i2 from "@angular/common";
import * as i3 from "@tinkoff/ng-polymorpheus";
import * as i4 from "@taiga-ui/cdk";
// TODO: get rid of $any in template
export class TuiAlertComponent {
    constructor(el, destroy$, position, options, item) {
        this.el = el;
        this.destroy$ = destroy$;
        this.position = position;
        this.options = options;
        this.item = item;
        this.autoClose = typeof this.item.autoClose === 'function'
            ? this.item.autoClose(this.item.status)
            : this.item.autoClose;
        this.animation = this.position.endsWith('auto')
            ? Object.assign(Object.assign({}, this.options), { value: 'right' }) : Object.assign(Object.assign({}, this.options), { value: 'left' });
    }
    ngOnInit() {
        this.initAutoClose();
    }
    close() {
        this.item.$implicit.complete();
    }
    initAutoClose() {
        if (!this.autoClose) {
            return;
        }
        timer(tuiIsNumber(this.autoClose) ? this.autoClose : 3000)
            .pipe(takeUntil(fromEvent(this.el.nativeElement, 'mouseenter')), 
        /**
         * TODO: replace to
         * repeat({
         *    delay: () => fromEvent(this.el.nativeElement, 'mouseleave'),
         * })
         *
         * in RxJS 7
         */
        // eslint-disable-next-line rxjs/no-ignored-notifier
        repeatWhen(() => fromEvent(this.el.nativeElement, 'mouseleave')), takeUntil(this.destroy$))
            .subscribe(() => this.close());
    }
}
TuiAlertComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiAlertComponent, deps: [{ token: ElementRef }, { token: TuiDestroyService, self: true }, { token: TUI_ALERT_POSITION }, { token: TUI_ANIMATION_OPTIONS }, { token: POLYMORPHEUS_CONTEXT }], target: i0.ɵɵFactoryTarget.Component });
TuiAlertComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiAlertComponent, selector: "tui-alert", host: { attributes: { "role": "alert" }, properties: { "style.margin": "position", "@tuiFadeIn": "options", "@tuiSlideIn": "animation", "@tuiHeightCollapse": "animation" } }, providers: [TuiDestroyService], ngImport: i0, template: "<tui-notification\n    [hasIcon]=\"item.hasIcon\"\n    [hideClose]=\"!item.hasCloseButton\"\n    [icon]=\"item.icon\"\n    [status]=\"item.status\"\n    (close)=\"close()\"\n>\n    <label\n        *ngIf=\"item.label\"\n        automation-id=\"tui-notification-alert__heading\"\n        class=\"t-heading\"\n    >\n        <ng-container *polymorpheusOutlet=\"item.label as text; context: item\">\n            {{ text }}\n        </ng-container>\n    </label>\n    <div\n        automation-id=\"tui-notification-alert__content\"\n        class=\"t-content\"\n    >\n        <div\n            *polymorpheusOutlet=\"item.content as text; context: item\"\n            [innerHTML]=\"text\"\n        ></div>\n    </div>\n</tui-notification>\n", styles: [":host{display:block;box-shadow:var(--tui-shadow-dropdown);border-radius:var(--tui-radius-l);width:18rem}:host:not(:first-child){margin-top:.75rem!important}:host:not(:last-child){margin-bottom:0!important}.t-heading{margin:0}[data-size=s] .t-heading{font:var(--tui-font-text-s);font-weight:bold}[data-size=m] .t-heading{font:var(--tui-font-text-m);line-height:1.25rem;font-weight:bold}[data-size=l] .t-heading{font:var(--tui-font-text-l);line-height:1.5rem;font-weight:bold}.t-content{color:var(--tui-text-01);word-wrap:break-word;word-break:break-word}.t-content:empty{display:none}\n"], components: [{ type: i1.TuiNotificationComponent, selector: "tui-notification,a[tuiNotification],button[tuiNotification]", inputs: ["hasIcon", "icon", "status", "size", "hideClose"], outputs: ["close"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }], animations: [tuiFadeIn, tuiSlideIn, tuiHeightCollapse], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiAlertComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-alert',
                    templateUrl: './alert.template.html',
                    styleUrls: ['./alert.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [TuiDestroyService],
                    animations: [tuiFadeIn, tuiSlideIn, tuiHeightCollapse],
                    host: {
                        role: 'alert',
                        '[style.margin]': 'position',
                        '[@tuiFadeIn]': 'options',
                        '[@tuiSlideIn]': 'animation',
                        '[@tuiHeightCollapse]': 'animation',
                    },
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: i4.TuiDestroyService, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiDestroyService]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_ALERT_POSITION]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_ANIMATION_OPTIONS]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [POLYMORPHEUS_CONTEXT]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxlcnQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY29yZS9jb21wb25lbnRzL2FsZXJ0L2FsZXJ0LmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmUvY29tcG9uZW50cy9hbGVydC9hbGVydC50ZW1wbGF0ZS5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFDSCx1QkFBdUIsRUFDdkIsU0FBUyxFQUNULFVBQVUsRUFDVixNQUFNLEVBRU4sSUFBSSxHQUNQLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBQyxpQkFBaUIsRUFBYSxXQUFXLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDeEUsT0FBTyxFQUFDLFNBQVMsRUFBRSxpQkFBaUIsRUFBRSxVQUFVLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQztBQUVuRixPQUFPLEVBQUMscUJBQXFCLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUM1RCxPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUM5RCxPQUFPLEVBQUMsU0FBUyxFQUFFLEtBQUssRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUN0QyxPQUFPLEVBQUMsVUFBVSxFQUFFLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBRXJELE9BQU8sRUFBQyxrQkFBa0IsRUFBQyxNQUFNLG1CQUFtQixDQUFDOzs7Ozs7QUFFckQsb0NBQW9DO0FBZ0JwQyxNQUFNLE9BQU8saUJBQWlCO0lBZ0IxQixZQUN5QyxFQUEyQixFQUNaLFFBQTJCLEVBQzFDLFFBQWdCLEVBQ2IsT0FBeUIsRUFDMUIsSUFBc0M7UUFKeEMsT0FBRSxHQUFGLEVBQUUsQ0FBeUI7UUFDWixhQUFRLEdBQVIsUUFBUSxDQUFtQjtRQUMxQyxhQUFRLEdBQVIsUUFBUSxDQUFRO1FBQ2IsWUFBTyxHQUFQLE9BQU8sQ0FBa0I7UUFDMUIsU0FBSSxHQUFKLElBQUksQ0FBa0M7UUFwQmhFLGNBQVMsR0FDdEIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsS0FBSyxVQUFVO1lBQ3JDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztZQUN2QyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7UUFFckIsY0FBUyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQztZQUMvQyxDQUFDLGlDQUNRLElBQUksQ0FBQyxPQUFPLEtBQ2YsS0FBSyxFQUFFLE9BQU8sSUFFcEIsQ0FBQyxpQ0FDUSxJQUFJLENBQUMsT0FBTyxLQUNmLEtBQUssRUFBRSxNQUFNLEdBQ2hCLENBQUM7SUFRTCxDQUFDO0lBRUosUUFBUTtRQUNKLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN6QixDQUFDO0lBRUQsS0FBSztRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ25DLENBQUM7SUFFTyxhQUFhO1FBQ2pCLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2pCLE9BQU87U0FDVjtRQUVELEtBQUssQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7YUFDckQsSUFBSSxDQUNELFNBQVMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDekQ7Ozs7Ozs7V0FPRztRQUNILG9EQUFvRDtRQUNwRCxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLFlBQVksQ0FBQyxDQUFDLEVBQ2hFLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQzNCO2FBQ0EsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7OytHQXJEUSxpQkFBaUIsa0JBaUJkLFVBQVUsYUFDRixpQkFBaUIseUJBQ3pCLGtCQUFrQixhQUNsQixxQkFBcUIsYUFDckIsb0JBQW9CO21HQXJCdkIsaUJBQWlCLG1OQVZmLENBQUMsaUJBQWlCLENBQUMsMEJDekJsQyxpdUJBMEJBLDJoQ0RBZ0IsQ0FBQyxTQUFTLEVBQUUsVUFBVSxFQUFFLGlCQUFpQixDQUFDOzRGQVM3QyxpQkFBaUI7a0JBZjdCLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLFdBQVc7b0JBQ3JCLFdBQVcsRUFBRSx1QkFBdUI7b0JBQ3BDLFNBQVMsRUFBRSxDQUFDLG9CQUFvQixDQUFDO29CQUNqQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFDL0MsU0FBUyxFQUFFLENBQUMsaUJBQWlCLENBQUM7b0JBQzlCLFVBQVUsRUFBRSxDQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsaUJBQWlCLENBQUM7b0JBQ3RELElBQUksRUFBRTt3QkFDRixJQUFJLEVBQUUsT0FBTzt3QkFDYixnQkFBZ0IsRUFBRSxVQUFVO3dCQUM1QixjQUFjLEVBQUUsU0FBUzt3QkFDekIsZUFBZSxFQUFFLFdBQVc7d0JBQzVCLHNCQUFzQixFQUFFLFdBQVc7cUJBQ3RDO2lCQUNKOzswQkFrQlEsTUFBTTsyQkFBQyxVQUFVOzswQkFDakIsSUFBSTs7MEJBQUksTUFBTTsyQkFBQyxpQkFBaUI7OzBCQUNoQyxNQUFNOzJCQUFDLGtCQUFrQjs7MEJBQ3pCLE1BQU07MkJBQUMscUJBQXFCOzswQkFDNUIsTUFBTTsyQkFBQyxvQkFBb0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0FuaW1hdGlvbk9wdGlvbnN9IGZyb20gJ0Bhbmd1bGFyL2FuaW1hdGlvbnMnO1xuaW1wb3J0IHtcbiAgICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgICBDb21wb25lbnQsXG4gICAgRWxlbWVudFJlZixcbiAgICBJbmplY3QsXG4gICAgT25Jbml0LFxuICAgIFNlbGYsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtUdWlEZXN0cm95U2VydmljZSwgVHVpRGlhbG9nLCB0dWlJc051bWJlcn0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge3R1aUZhZGVJbiwgdHVpSGVpZ2h0Q29sbGFwc2UsIHR1aVNsaWRlSW59IGZyb20gJ0B0YWlnYS11aS9jb3JlL2FuaW1hdGlvbnMnO1xuaW1wb3J0IHtUdWlBbGVydE9wdGlvbnN9IGZyb20gJ0B0YWlnYS11aS9jb3JlL2ludGVyZmFjZXMnO1xuaW1wb3J0IHtUVUlfQU5JTUFUSU9OX09QVElPTlN9IGZyb20gJ0B0YWlnYS11aS9jb3JlL3Rva2Vucyc7XG5pbXBvcnQge1BPTFlNT1JQSEVVU19DT05URVhUfSBmcm9tICdAdGlua29mZi9uZy1wb2x5bW9ycGhldXMnO1xuaW1wb3J0IHtmcm9tRXZlbnQsIHRpbWVyfSBmcm9tICdyeGpzJztcbmltcG9ydCB7cmVwZWF0V2hlbiwgdGFrZVVudGlsfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7VFVJX0FMRVJUX1BPU0lUSU9OfSBmcm9tICcuL2FsZXJ0LnByb3ZpZGVycyc7XG5cbi8vIFRPRE86IGdldCByaWQgb2YgJGFueSBpbiB0ZW1wbGF0ZVxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICd0dWktYWxlcnQnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9hbGVydC50ZW1wbGF0ZS5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9hbGVydC5zdHlsZS5sZXNzJ10sXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gICAgcHJvdmlkZXJzOiBbVHVpRGVzdHJveVNlcnZpY2VdLFxuICAgIGFuaW1hdGlvbnM6IFt0dWlGYWRlSW4sIHR1aVNsaWRlSW4sIHR1aUhlaWdodENvbGxhcHNlXSxcbiAgICBob3N0OiB7XG4gICAgICAgIHJvbGU6ICdhbGVydCcsXG4gICAgICAgICdbc3R5bGUubWFyZ2luXSc6ICdwb3NpdGlvbicsXG4gICAgICAgICdbQHR1aUZhZGVJbl0nOiAnb3B0aW9ucycsXG4gICAgICAgICdbQHR1aVNsaWRlSW5dJzogJ2FuaW1hdGlvbicsXG4gICAgICAgICdbQHR1aUhlaWdodENvbGxhcHNlXSc6ICdhbmltYXRpb24nLFxuICAgIH0sXG59KVxuZXhwb3J0IGNsYXNzIFR1aUFsZXJ0Q29tcG9uZW50PE8sIEk+IGltcGxlbWVudHMgT25Jbml0IHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGF1dG9DbG9zZSA9XG4gICAgICAgIHR5cGVvZiB0aGlzLml0ZW0uYXV0b0Nsb3NlID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICA/IHRoaXMuaXRlbS5hdXRvQ2xvc2UodGhpcy5pdGVtLnN0YXR1cylcbiAgICAgICAgICAgIDogdGhpcy5pdGVtLmF1dG9DbG9zZTtcblxuICAgIHJlYWRvbmx5IGFuaW1hdGlvbiA9IHRoaXMucG9zaXRpb24uZW5kc1dpdGgoJ2F1dG8nKVxuICAgICAgICA/IHtcbiAgICAgICAgICAgICAgLi4udGhpcy5vcHRpb25zLFxuICAgICAgICAgICAgICB2YWx1ZTogJ3JpZ2h0JyxcbiAgICAgICAgICB9XG4gICAgICAgIDoge1xuICAgICAgICAgICAgICAuLi50aGlzLm9wdGlvbnMsXG4gICAgICAgICAgICAgIHZhbHVlOiAnbGVmdCcsXG4gICAgICAgICAgfTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KEVsZW1lbnRSZWYpIHByaXZhdGUgcmVhZG9ubHkgZWw6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+LFxuICAgICAgICBAU2VsZigpIEBJbmplY3QoVHVpRGVzdHJveVNlcnZpY2UpIHByaXZhdGUgcmVhZG9ubHkgZGVzdHJveSQ6IFR1aURlc3Ryb3lTZXJ2aWNlLFxuICAgICAgICBASW5qZWN0KFRVSV9BTEVSVF9QT1NJVElPTikgcmVhZG9ubHkgcG9zaXRpb246IHN0cmluZyxcbiAgICAgICAgQEluamVjdChUVUlfQU5JTUFUSU9OX09QVElPTlMpIHJlYWRvbmx5IG9wdGlvbnM6IEFuaW1hdGlvbk9wdGlvbnMsXG4gICAgICAgIEBJbmplY3QoUE9MWU1PUlBIRVVTX0NPTlRFWFQpIHJlYWRvbmx5IGl0ZW06IFR1aURpYWxvZzxUdWlBbGVydE9wdGlvbnM8ST4sIE8+LFxuICAgICkge31cblxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xuICAgICAgICB0aGlzLmluaXRBdXRvQ2xvc2UoKTtcbiAgICB9XG5cbiAgICBjbG9zZSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5pdGVtLiRpbXBsaWNpdC5jb21wbGV0ZSgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgaW5pdEF1dG9DbG9zZSgpOiB2b2lkIHtcbiAgICAgICAgaWYgKCF0aGlzLmF1dG9DbG9zZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGltZXIodHVpSXNOdW1iZXIodGhpcy5hdXRvQ2xvc2UpID8gdGhpcy5hdXRvQ2xvc2UgOiAzMDAwKVxuICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgICAgdGFrZVVudGlsKGZyb21FdmVudCh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsICdtb3VzZWVudGVyJykpLFxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIFRPRE86IHJlcGxhY2UgdG9cbiAgICAgICAgICAgICAgICAgKiByZXBlYXQoe1xuICAgICAgICAgICAgICAgICAqICAgIGRlbGF5OiAoKSA9PiBmcm9tRXZlbnQodGhpcy5lbC5uYXRpdmVFbGVtZW50LCAnbW91c2VsZWF2ZScpLFxuICAgICAgICAgICAgICAgICAqIH0pXG4gICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgKiBpbiBSeEpTIDdcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcnhqcy9uby1pZ25vcmVkLW5vdGlmaWVyXG4gICAgICAgICAgICAgICAgcmVwZWF0V2hlbigoKSA9PiBmcm9tRXZlbnQodGhpcy5lbC5uYXRpdmVFbGVtZW50LCAnbW91c2VsZWF2ZScpKSxcbiAgICAgICAgICAgICAgICB0YWtlVW50aWwodGhpcy5kZXN0cm95JCksXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAuc3Vic2NyaWJlKCgpID0+IHRoaXMuY2xvc2UoKSk7XG4gICAgfVxufVxuIiwiPHR1aS1ub3RpZmljYXRpb25cbiAgICBbaGFzSWNvbl09XCJpdGVtLmhhc0ljb25cIlxuICAgIFtoaWRlQ2xvc2VdPVwiIWl0ZW0uaGFzQ2xvc2VCdXR0b25cIlxuICAgIFtpY29uXT1cIml0ZW0uaWNvblwiXG4gICAgW3N0YXR1c109XCJpdGVtLnN0YXR1c1wiXG4gICAgKGNsb3NlKT1cImNsb3NlKClcIlxuPlxuICAgIDxsYWJlbFxuICAgICAgICAqbmdJZj1cIml0ZW0ubGFiZWxcIlxuICAgICAgICBhdXRvbWF0aW9uLWlkPVwidHVpLW5vdGlmaWNhdGlvbi1hbGVydF9faGVhZGluZ1wiXG4gICAgICAgIGNsYXNzPVwidC1oZWFkaW5nXCJcbiAgICA+XG4gICAgICAgIDxuZy1jb250YWluZXIgKnBvbHltb3JwaGV1c091dGxldD1cIml0ZW0ubGFiZWwgYXMgdGV4dDsgY29udGV4dDogaXRlbVwiPlxuICAgICAgICAgICAge3sgdGV4dCB9fVxuICAgICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICA8L2xhYmVsPlxuICAgIDxkaXZcbiAgICAgICAgYXV0b21hdGlvbi1pZD1cInR1aS1ub3RpZmljYXRpb24tYWxlcnRfX2NvbnRlbnRcIlxuICAgICAgICBjbGFzcz1cInQtY29udGVudFwiXG4gICAgPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgICAqcG9seW1vcnBoZXVzT3V0bGV0PVwiaXRlbS5jb250ZW50IGFzIHRleHQ7IGNvbnRleHQ6IGl0ZW1cIlxuICAgICAgICAgICAgW2lubmVySFRNTF09XCJ0ZXh0XCJcbiAgICAgICAgPjwvZGl2PlxuICAgIDwvZGl2PlxuPC90dWktbm90aWZpY2F0aW9uPlxuIl19