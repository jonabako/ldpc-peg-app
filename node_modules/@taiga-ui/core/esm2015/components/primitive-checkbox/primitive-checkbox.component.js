import { ChangeDetectionStrategy, Component, HostBinding, Inject, Input, } from '@angular/core';
import { TUI_CHECKBOX_OPTIONS } from './checkbox.options';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core/components/svg";
import * as i2 from "@taiga-ui/core/directives/wrapper";
import * as i3 from "@tinkoff/ng-polymorpheus";
export class TuiPrimitiveCheckboxComponent {
    constructor(options) {
        this.options = options;
        this.size = this.options.size;
        this.disabled = false;
        this.focused = false;
        this.hovered = false;
        this.pressed = false;
        this.invalid = false;
        this.icon = this.options.icons.checked;
        this.value = false;
    }
    set valueSetter(value) {
        if (value !== false) {
            this.setCurrentIcon(value);
        }
        this.value = value;
    }
    get appearance() {
        switch (this.value) {
            case false:
                return this.options.appearances.unchecked;
            case true:
                return this.options.appearances.checked;
            default:
                return this.options.appearances.indeterminate;
        }
    }
    get empty() {
        return this.value === false;
    }
    setCurrentIcon(value) {
        this.icon =
            value === null
                ? this.options.icons.indeterminate
                : this.options.icons.checked;
    }
}
TuiPrimitiveCheckboxComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPrimitiveCheckboxComponent, deps: [{ token: TUI_CHECKBOX_OPTIONS }], target: i0.ɵɵFactoryTarget.Component });
TuiPrimitiveCheckboxComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiPrimitiveCheckboxComponent, selector: "tui-primitive-checkbox", inputs: { size: "size", disabled: "disabled", focused: "focused", hovered: "hovered", pressed: "pressed", invalid: "invalid", valueSetter: ["value", "valueSetter"] }, host: { properties: { "attr.data-size": "this.size" } }, ngImport: i0, template: "<div\n    tuiWrapper\n    [active]=\"pressed\"\n    [appearance]=\"appearance\"\n    [disabled]=\"disabled\"\n    [focus]=\"focused\"\n    [hover]=\"hovered\"\n    [invalid]=\"invalid\"\n>\n    <tui-svg\n        *polymorpheusOutlet=\"icon as src; context: {$implicit: size}\"\n        class=\"t-mark\"\n        [class.t-mark_on]=\"!empty\"\n        [src]=\"src\"\n    ></tui-svg>\n    <ng-content></ng-content>\n</div>\n", styles: [":host{display:block;font-size:0;flex-shrink:0}:host[data-size=m]{width:1rem;height:1rem;border-radius:var(--tui-radius-xs)}:host[data-size=l]{width:1.5rem;height:1.5rem;border-radius:var(--tui-radius-s)}.t-mark{transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;display:block;width:100%;height:100%;transform:scale(0)}.t-mark_on{transform:scale(1)}\n"], components: [{ type: i1.TuiSvgComponent, selector: "tui-svg", inputs: ["src"] }], directives: [{ type: i2.TuiWrapperDirective, selector: "[tuiWrapper]", inputs: ["disabled", "readOnly", "hover", "active", "focus", "invalid", "appearance"] }, { type: i3.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPrimitiveCheckboxComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-primitive-checkbox',
                    templateUrl: './primitive-checkbox.template.html',
                    styleUrls: ['./primitive-checkbox.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_CHECKBOX_OPTIONS]
                }] }]; }, propDecorators: { size: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.data-size']
            }], disabled: [{
                type: Input
            }], focused: [{
                type: Input
            }], hovered: [{
                type: Input
            }], pressed: [{
                type: Input
            }], invalid: [{
                type: Input
            }], valueSetter: [{
                type: Input,
                args: ['value']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJpbWl0aXZlLWNoZWNrYm94LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmUvY29tcG9uZW50cy9wcmltaXRpdmUtY2hlY2tib3gvcHJpbWl0aXZlLWNoZWNrYm94LmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmUvY29tcG9uZW50cy9wcmltaXRpdmUtY2hlY2tib3gvcHJpbWl0aXZlLWNoZWNrYm94LnRlbXBsYXRlLmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNILHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsV0FBVyxFQUNYLE1BQU0sRUFDTixLQUFLLEdBQ1IsTUFBTSxlQUFlLENBQUM7QUFLdkIsT0FBTyxFQUFDLG9CQUFvQixFQUFxQixNQUFNLG9CQUFvQixDQUFDOzs7OztBQVE1RSxNQUFNLE9BQU8sNkJBQTZCO0lBa0N0QyxZQUNtRCxPQUEyQjtRQUEzQixZQUFPLEdBQVAsT0FBTyxDQUFvQjtRQWhDOUUsU0FBSSxHQUFhLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO1FBR25DLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFHakIsWUFBTyxHQUFHLEtBQUssQ0FBQztRQUdoQixZQUFPLEdBQW1CLEtBQUssQ0FBQztRQUdoQyxZQUFPLEdBQW1CLEtBQUssQ0FBQztRQUdoQyxZQUFPLEdBQUcsS0FBSyxDQUFDO1FBV2hCLFNBQUksR0FDQSxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUM7UUFFL0IsVUFBSyxHQUFtQixLQUFLLENBQUM7SUFJM0IsQ0FBQztJQWhCSixJQUNJLFdBQVcsQ0FBQyxLQUFxQjtRQUNqQyxJQUFJLEtBQUssS0FBSyxLQUFLLEVBQUU7WUFDakIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUM5QjtRQUVELElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0lBQ3ZCLENBQUM7SUFXRCxJQUFJLFVBQVU7UUFDVixRQUFRLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDaEIsS0FBSyxLQUFLO2dCQUNOLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDO1lBQzlDLEtBQUssSUFBSTtnQkFDTCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQztZQUM1QztnQkFDSSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQztTQUNyRDtJQUNMLENBQUM7SUFFRCxJQUFJLEtBQUs7UUFDTCxPQUFPLElBQUksQ0FBQyxLQUFLLEtBQUssS0FBSyxDQUFDO0lBQ2hDLENBQUM7SUFFTyxjQUFjLENBQUMsS0FBcUI7UUFDeEMsSUFBSSxDQUFDLElBQUk7WUFDTCxLQUFLLEtBQUssSUFBSTtnQkFDVixDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsYUFBYTtnQkFDbEMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQztJQUN6QyxDQUFDOzsySEExRFEsNkJBQTZCLGtCQW1DMUIsb0JBQW9COytHQW5DdkIsNkJBQTZCLDhSQ25CMUMsc2FBaUJBOzRGREVhLDZCQUE2QjtrQkFOekMsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsd0JBQXdCO29CQUNsQyxXQUFXLEVBQUUsb0NBQW9DO29CQUNqRCxTQUFTLEVBQUUsQ0FBQyxpQ0FBaUMsQ0FBQztvQkFDOUMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07aUJBQ2xEOzswQkFvQ1EsTUFBTTsyQkFBQyxvQkFBb0I7NENBaENoQyxJQUFJO3NCQUZILEtBQUs7O3NCQUNMLFdBQVc7dUJBQUMsZ0JBQWdCO2dCQUk3QixRQUFRO3NCQURQLEtBQUs7Z0JBSU4sT0FBTztzQkFETixLQUFLO2dCQUlOLE9BQU87c0JBRE4sS0FBSztnQkFJTixPQUFPO3NCQUROLEtBQUs7Z0JBSU4sT0FBTztzQkFETixLQUFLO2dCQUlGLFdBQVc7c0JBRGQsS0FBSzt1QkFBQyxPQUFPIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgICBDb21wb25lbnQsXG4gICAgSG9zdEJpbmRpbmcsXG4gICAgSW5qZWN0LFxuICAgIElucHV0LFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7VHVpQ29udGV4dFdpdGhJbXBsaWNpdH0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge1R1aVNpemVMfSBmcm9tICdAdGFpZ2EtdWkvY29yZS90eXBlcyc7XG5pbXBvcnQge1BvbHltb3JwaGV1c0NvbnRlbnR9IGZyb20gJ0B0aW5rb2ZmL25nLXBvbHltb3JwaGV1cyc7XG5cbmltcG9ydCB7VFVJX0NIRUNLQk9YX09QVElPTlMsIFR1aUNoZWNrYm94T3B0aW9uc30gZnJvbSAnLi9jaGVja2JveC5vcHRpb25zJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICd0dWktcHJpbWl0aXZlLWNoZWNrYm94JyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vcHJpbWl0aXZlLWNoZWNrYm94LnRlbXBsYXRlLmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL3ByaW1pdGl2ZS1jaGVja2JveC5zdHlsZS5sZXNzJ10sXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuZXhwb3J0IGNsYXNzIFR1aVByaW1pdGl2ZUNoZWNrYm94Q29tcG9uZW50IHtcbiAgICBASW5wdXQoKVxuICAgIEBIb3N0QmluZGluZygnYXR0ci5kYXRhLXNpemUnKVxuICAgIHNpemU6IFR1aVNpemVMID0gdGhpcy5vcHRpb25zLnNpemU7XG5cbiAgICBASW5wdXQoKVxuICAgIGRpc2FibGVkID0gZmFsc2U7XG5cbiAgICBASW5wdXQoKVxuICAgIGZvY3VzZWQgPSBmYWxzZTtcblxuICAgIEBJbnB1dCgpXG4gICAgaG92ZXJlZDogYm9vbGVhbiB8IG51bGwgPSBmYWxzZTtcblxuICAgIEBJbnB1dCgpXG4gICAgcHJlc3NlZDogYm9vbGVhbiB8IG51bGwgPSBmYWxzZTtcblxuICAgIEBJbnB1dCgpXG4gICAgaW52YWxpZCA9IGZhbHNlO1xuXG4gICAgQElucHV0KCd2YWx1ZScpXG4gICAgc2V0IHZhbHVlU2V0dGVyKHZhbHVlOiBib29sZWFuIHwgbnVsbCkge1xuICAgICAgICBpZiAodmFsdWUgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICB0aGlzLnNldEN1cnJlbnRJY29uKHZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBpY29uOiBQb2x5bW9ycGhldXNDb250ZW50PFR1aUNvbnRleHRXaXRoSW1wbGljaXQ8VHVpU2l6ZUw+PiA9XG4gICAgICAgIHRoaXMub3B0aW9ucy5pY29ucy5jaGVja2VkO1xuXG4gICAgdmFsdWU6IGJvb2xlYW4gfCBudWxsID0gZmFsc2U7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChUVUlfQ0hFQ0tCT1hfT1BUSU9OUykgcHJpdmF0ZSByZWFkb25seSBvcHRpb25zOiBUdWlDaGVja2JveE9wdGlvbnMsXG4gICAgKSB7fVxuXG4gICAgZ2V0IGFwcGVhcmFuY2UoKTogc3RyaW5nIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLnZhbHVlKSB7XG4gICAgICAgICAgICBjYXNlIGZhbHNlOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuYXBwZWFyYW5jZXMudW5jaGVja2VkO1xuICAgICAgICAgICAgY2FzZSB0cnVlOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuYXBwZWFyYW5jZXMuY2hlY2tlZDtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5hcHBlYXJhbmNlcy5pbmRldGVybWluYXRlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0IGVtcHR5KCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZSA9PT0gZmFsc2U7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzZXRDdXJyZW50SWNvbih2YWx1ZTogYm9vbGVhbiB8IG51bGwpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5pY29uID1cbiAgICAgICAgICAgIHZhbHVlID09PSBudWxsXG4gICAgICAgICAgICAgICAgPyB0aGlzLm9wdGlvbnMuaWNvbnMuaW5kZXRlcm1pbmF0ZVxuICAgICAgICAgICAgICAgIDogdGhpcy5vcHRpb25zLmljb25zLmNoZWNrZWQ7XG4gICAgfVxufVxuIiwiPGRpdlxuICAgIHR1aVdyYXBwZXJcbiAgICBbYWN0aXZlXT1cInByZXNzZWRcIlxuICAgIFthcHBlYXJhbmNlXT1cImFwcGVhcmFuY2VcIlxuICAgIFtkaXNhYmxlZF09XCJkaXNhYmxlZFwiXG4gICAgW2ZvY3VzXT1cImZvY3VzZWRcIlxuICAgIFtob3Zlcl09XCJob3ZlcmVkXCJcbiAgICBbaW52YWxpZF09XCJpbnZhbGlkXCJcbj5cbiAgICA8dHVpLXN2Z1xuICAgICAgICAqcG9seW1vcnBoZXVzT3V0bGV0PVwiaWNvbiBhcyBzcmM7IGNvbnRleHQ6IHskaW1wbGljaXQ6IHNpemV9XCJcbiAgICAgICAgY2xhc3M9XCJ0LW1hcmtcIlxuICAgICAgICBbY2xhc3MudC1tYXJrX29uXT1cIiFlbXB0eVwiXG4gICAgICAgIFtzcmNdPVwic3JjXCJcbiAgICA+PC90dWktc3ZnPlxuICAgIDxuZy1jb250ZW50PjwvbmctY29udGVudD5cbjwvZGl2PlxuIl19