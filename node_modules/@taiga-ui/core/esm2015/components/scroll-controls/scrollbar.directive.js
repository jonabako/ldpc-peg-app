import { DOCUMENT } from '@angular/common';
import { Directive, ElementRef, Inject, Input, NgZone, Renderer2, Self, } from '@angular/core';
import { ANIMATION_FRAME } from '@ng-web-apis/common';
import { POLLING_TIME, TUI_SCROLL_REF, TuiDestroyService, tuiScrollFrom, tuiStopPropagation, tuiTypedFromEvent, tuiZonefree, } from '@taiga-ui/cdk';
import { TUI_ELEMENT_REF } from '@taiga-ui/core/tokens';
import { merge } from 'rxjs';
import { map, switchMap, takeUntil, throttleTime } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "rxjs";
const MIN_WIDTH = 24;
function getOffsetVertical({ clientY }, { top, height }) {
    return (clientY - top) / height;
}
function getOffsetHorizontal({ clientX }, { left, width }) {
    return (clientX - left) / width;
}
export class TuiScrollbarDirective {
    constructor(zone, renderer, destroy$, animationFrame$, wrapper, container, doc, el) {
        this.wrapper = wrapper;
        this.container = container;
        this.doc = doc;
        this.el = el;
        this.tuiScrollbar = 'vertical';
        const { nativeElement } = this.el;
        const mousedown$ = tuiTypedFromEvent(nativeElement, 'mousedown');
        const mousemove$ = tuiTypedFromEvent(this.doc, 'mousemove');
        const mouseup$ = tuiTypedFromEvent(this.doc, 'mouseup');
        const mousedownWrapper$ = tuiTypedFromEvent(this.wrapper.nativeElement, 'mousedown');
        merge(mousedownWrapper$.pipe(map(event => this.getScrolled(event, 0.5, 0.5))), mousedown$.pipe(tuiStopPropagation(), switchMap(event => {
            const rect = nativeElement.getBoundingClientRect();
            const vertical = getOffsetVertical(event, rect);
            const horizontal = getOffsetHorizontal(event, rect);
            return mousemove$.pipe(map(event => this.getScrolled(event, vertical, horizontal)), takeUntil(mouseup$));
        })))
            .pipe(tuiZonefree(zone), takeUntil(destroy$))
            .subscribe(([scrollTop, scrollLeft]) => {
            if (this.tuiScrollbar === 'vertical') {
                renderer.setProperty(this.element, 'scrollTop', scrollTop);
            }
            else {
                renderer.setProperty(this.element, 'scrollLeft', scrollLeft);
            }
        });
        merge(animationFrame$.pipe(throttleTime(POLLING_TIME)), tuiScrollFrom(this.element))
            .pipe(tuiZonefree(zone), takeUntil(destroy$))
            .subscribe(() => {
            if (this.tuiScrollbar === 'vertical') {
                renderer.setStyle(nativeElement, 'top', `${this.thumb * 100}%`);
                renderer.setStyle(nativeElement, 'height', `${this.view * 100}%`);
            }
            else {
                renderer.setStyle(nativeElement, 'left', `${this.thumb * 100}%`);
                renderer.setStyle(nativeElement, 'width', `${this.view * 100}%`);
            }
        });
    }
    get scrolled() {
        const { scrollTop, scrollHeight, clientHeight, scrollLeft, scrollWidth, clientWidth, } = this.element;
        return this.tuiScrollbar === 'vertical'
            ? scrollTop / (scrollHeight - clientHeight)
            : scrollLeft / (scrollWidth - clientWidth);
    }
    get compensation() {
        const { clientHeight, scrollHeight, clientWidth, scrollWidth } = this.element;
        if (((clientHeight * clientHeight) / scrollHeight > MIN_WIDTH &&
            this.tuiScrollbar === 'vertical') ||
            ((clientWidth * clientWidth) / scrollWidth > MIN_WIDTH &&
                this.tuiScrollbar === 'horizontal')) {
            return 0;
        }
        return this.tuiScrollbar === 'vertical'
            ? MIN_WIDTH / clientHeight
            : MIN_WIDTH / clientWidth;
    }
    get thumb() {
        const compensation = this.compensation || this.view;
        return this.scrolled * (1 - compensation);
    }
    get view() {
        const { clientHeight, scrollHeight, clientWidth, scrollWidth } = this.element;
        return this.tuiScrollbar === 'vertical'
            ? Math.ceil((clientHeight / scrollHeight) * 100) / 100
            : Math.ceil((clientWidth / scrollWidth) * 100) / 100;
    }
    get element() {
        return this.container.nativeElement;
    }
    getScrolled({ clientY, clientX }, offsetVertical, offsetHorizontal) {
        const { offsetHeight, offsetWidth } = this.el.nativeElement;
        const { top, left, width, height } = this.wrapper.nativeElement.getBoundingClientRect();
        const maxTop = this.element.scrollHeight - height;
        const maxLeft = this.element.scrollWidth - width;
        const scrolledTop = (clientY - top - offsetHeight * offsetVertical) / (height - offsetHeight);
        const scrolledLeft = (clientX - left - offsetWidth * offsetHorizontal) / (width - offsetWidth);
        return [maxTop * scrolledTop, maxLeft * scrolledLeft];
    }
}
TuiScrollbarDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiScrollbarDirective, deps: [{ token: NgZone }, { token: Renderer2 }, { token: TuiDestroyService, self: true }, { token: ANIMATION_FRAME }, { token: TUI_ELEMENT_REF }, { token: TUI_SCROLL_REF }, { token: DOCUMENT }, { token: ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
TuiScrollbarDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiScrollbarDirective, selector: "[tuiScrollbar]", inputs: { tuiScrollbar: "tuiScrollbar" }, providers: [TuiDestroyService], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiScrollbarDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiScrollbar]',
                    providers: [TuiDestroyService],
                }]
        }], ctorParameters: function () { return [{ type: i0.NgZone, decorators: [{
                    type: Inject,
                    args: [NgZone]
                }] }, { type: i0.Renderer2, decorators: [{
                    type: Inject,
                    args: [Renderer2]
                }] }, { type: i1.Observable, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiDestroyService]
                }] }, { type: i1.Observable, decorators: [{
                    type: Inject,
                    args: [ANIMATION_FRAME]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [TUI_ELEMENT_REF]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [TUI_SCROLL_REF]
                }] }, { type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }]; }, propDecorators: { tuiScrollbar: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,