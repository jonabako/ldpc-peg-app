import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, HostBinding, HostListener, Inject, Input, Self, TemplateRef, ViewChild, } from '@angular/core';
import { TUI_PARENT_ANIMATION, TuiDestroyService } from '@taiga-ui/cdk';
import { TUI_EXPAND_LOADED } from '@taiga-ui/core/constants';
import { timer } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { TuiExpandContentDirective } from './expand-content.directive';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core/components/loader";
import * as i2 from "@angular/common";
import * as i3 from "rxjs";
const State = {
    Idle: 0,
    Loading: 1,
    Prepared: 2,
    Animated: 3,
};
const LOADER_HEIGHT = 48;
export class TuiExpandComponent {
    constructor(cdr, destroy$) {
        this.cdr = cdr;
        this.destroy$ = destroy$;
        this.state = State.Idle;
        this.async = false;
        this.content = null;
        this.expanded = null;
    }
    set expandedSetter(expanded) {
        if (this.expanded === null) {
            this.expanded = expanded;
            return;
        }
        if (this.state !== State.Idle) {
            this.expanded = expanded;
            this.state = State.Animated;
            return;
        }
        this.expanded = expanded;
        this.retrigger(this.async && expanded ? State.Loading : State.Animated);
    }
    get overflow() {
        return this.state !== State.Idle;
    }
    get loading() {
        return !!this.expanded && this.async && this.state === State.Loading;
    }
    get height() {
        const { expanded, state, contentWrapper } = this;
        if ((expanded && state === State.Prepared) ||
            (!expanded && state === State.Animated)) {
            return 0;
        }
        if (contentWrapper &&
            ((!expanded && state === State.Prepared) ||
                (expanded && state === State.Animated))) {
            return contentWrapper.nativeElement.offsetHeight;
        }
        if (contentWrapper && expanded && state === State.Loading) {
            return Math.max(contentWrapper.nativeElement.offsetHeight, LOADER_HEIGHT);
        }
        return null;
    }
    get contentVisible() {
        return this.expanded || this.state !== State.Idle;
    }
    onTransitionEnd({ propertyName }) {
        if (propertyName === 'opacity' && this.state === State.Animated) {
            this.state = State.Idle;
        }
    }
    onExpandLoaded(event) {
        event.stopPropagation();
        if (this.state === State.Loading) {
            this.retrigger(State.Animated);
        }
    }
    retrigger(state) {
        this.state = State.Prepared;
        timer(0)
            .pipe(takeUntil(this.destroy$))
            .subscribe(() => {
            // We need delay to re-trigger CSS height transition from the correct number
            if (this.state !== State.Prepared) {
                return;
            }
            this.state = state;
            this.cdr.markForCheck();
        });
    }
}
TuiExpandComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiExpandComponent, deps: [{ token: ChangeDetectorRef }, { token: TuiDestroyService, self: true }], target: i0.ɵɵFactoryTarget.Component });
TuiExpandComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiExpandComponent, selector: "tui-expand", inputs: { async: "async", expandedSetter: ["expanded", "expandedSetter"] }, host: { listeners: { "transitionend.self": "onTransitionEnd($event)", "tui-expand-loaded": "onExpandLoaded($event)" }, properties: { "class._expanded": "this.expanded", "attr.aria-expanded": "this.expanded", "class._overflow": "this.overflow", "class._loading": "this.loading", "style.height.px": "this.height" } }, providers: [TuiDestroyService], queries: [{ propertyName: "content", first: true, predicate: TuiExpandContentDirective, descendants: true, read: TemplateRef }], viewQueries: [{ propertyName: "contentWrapper", first: true, predicate: ["wrapper"], descendants: true }], ngImport: i0, template: "<div\n    #wrapper\n    class=\"t-wrapper\"\n    @tuiParentAnimation\n    [@.disabled]=\"overflow\"\n>\n    <ng-container *ngIf=\"contentVisible\">\n        <ng-content></ng-content>\n        <tui-loader\n            *ngIf=\"async; else content\"\n            size=\"l\"\n            [overlay]=\"true\"\n            [showLoader]=\"loading\"\n        >\n            <ng-container [ngTemplateOutlet]=\"content\"></ng-container>\n        </tui-loader>\n    </ng-container>\n</div>\n", styles: [":host{transition-property:opacity,height,visibility;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;display:block;opacity:0;transition-delay:1ms}:host._overflow{overflow:hidden}:host._expanded{opacity:1;transform:translate(0)}:host._loading{opacity:.99}.t-wrapper:before,.t-wrapper:after{content:\"\";display:table}\n"], components: [{ type: i1.TuiLoaderComponent, selector: "tui-loader", inputs: ["size", "inheritColor", "overlay", "textContent", "showLoader"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], animations: [TUI_PARENT_ANIMATION], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiExpandComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-expand',
                    templateUrl: './expand.template.html',
                    styleUrls: ['./expand.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [TuiDestroyService],
                    animations: [TUI_PARENT_ANIMATION],
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: i3.Observable, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiDestroyService]
                }] }]; }, propDecorators: { contentWrapper: [{
                type: ViewChild,
                args: ['wrapper']
            }], async: [{
                type: Input
            }], expandedSetter: [{
                type: Input,
                args: ['expanded']
            }], content: [{
                type: ContentChild,
                args: [TuiExpandContentDirective, { read: TemplateRef }]
            }], expanded: [{
                type: HostBinding,
                args: ['class._expanded']
            }, {
                type: HostBinding,
                args: ['attr.aria-expanded']
            }], overflow: [{
                type: HostBinding,
                args: ['class._overflow']
            }], loading: [{
                type: HostBinding,
                args: ['class._loading']
            }], height: [{
                type: HostBinding,
                args: ['style.height.px']
            }], onTransitionEnd: [{
                type: HostListener,
                args: ['transitionend.self', ['$event']]
            }], onExpandLoaded: [{
                type: HostListener,
                args: [TUI_EXPAND_LOADED, ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,