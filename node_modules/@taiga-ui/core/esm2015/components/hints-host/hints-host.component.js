import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Inject, Self, } from '@angular/core';
import { TUI_PARENT_ANIMATION, TuiDestroyService } from '@taiga-ui/cdk';
import { TuiHintService } from '@taiga-ui/core/services';
import { takeUntil } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@taiga-ui/cdk";
import * as i3 from "@tinkoff/ng-polymorpheus";
import * as i4 from "rxjs";
export class TuiHintsHostComponent {
    constructor(hints$, destroy$, cdr) {
        this.hints$ = hints$;
        this.destroy$ = destroy$;
        this.cdr = cdr;
        this.hints = [];
    }
    ngOnInit() {
        // Due to this view being parallel to app content, `markForCheck` from `async` pipe
        // can happen after view was checked, so calling `detectChanges` instead
        this.hints$.pipe(takeUntil(this.destroy$)).subscribe(hints => {
            this.hints = hints;
            this.cdr.detectChanges();
        });
    }
}
TuiHintsHostComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiHintsHostComponent, deps: [{ token: TuiHintService }, { token: TuiDestroyService, self: true }, { token: ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
TuiHintsHostComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiHintsHostComponent, selector: "tui-hints-host", host: { attributes: { "aria-live": "polite" } }, providers: [TuiDestroyService], ngImport: i0, template: "<div\n    *ngFor=\"let hint of hints\"\n    role=\"tooltip\"\n    @tuiParentAnimation\n    [tuiActiveZoneParent]=\"hint.activeZone || null\"\n>\n    <ng-container *polymorpheusOutlet=\"hint.component; context: {$implicit: hint}\"></ng-container>\n</div>\n", styles: [":host{position:fixed;top:0;left:0;width:100%;height:0}\n"], directives: [{ type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2.TuiActiveZoneDirective, selector: "[tuiActiveZone]:not(ng-container), [tuiActiveZoneChange]:not(ng-container), [tuiActiveZoneParent]:not(ng-container)", inputs: ["tuiActiveZoneParent"], outputs: ["tuiActiveZoneChange"], exportAs: ["tuiActiveZone"] }, { type: i3.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }], animations: [TUI_PARENT_ANIMATION], changeDetection: i0.ChangeDetectionStrategy.Default });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiHintsHostComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-hints-host',
                    templateUrl: './hints-host.template.html',
                    styleUrls: ['./hints-host.style.less'],
                    // So that we do not force OnPush on custom hints
                    // eslint-disable-next-line @angular-eslint/prefer-on-push-component-change-detection
                    changeDetection: ChangeDetectionStrategy.Default,
                    providers: [TuiDestroyService],
                    animations: [TUI_PARENT_ANIMATION],
                    host: {
                        'aria-live': 'polite',
                    },
                }]
        }], ctorParameters: function () { return [{ type: i4.Observable, decorators: [{
                    type: Inject,
                    args: [TuiHintService]
                }] }, { type: i4.Observable, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiDestroyService]
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGludHMtaG9zdC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlL2NvbXBvbmVudHMvaGludHMtaG9zdC9oaW50cy1ob3N0LmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmUvY29tcG9uZW50cy9oaW50cy1ob3N0L2hpbnRzLWhvc3QudGVtcGxhdGUuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0gsdUJBQXVCLEVBQ3ZCLGlCQUFpQixFQUNqQixTQUFTLEVBQ1QsTUFBTSxFQUVOLElBQUksR0FDUCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUMsb0JBQW9CLEVBQUUsaUJBQWlCLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFdEUsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBRXZELE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQzs7Ozs7O0FBZXpDLE1BQU0sT0FBTyxxQkFBcUI7SUFHOUIsWUFFcUIsTUFBNEMsRUFDVCxRQUEwQixFQUNsQyxHQUFzQjtRQUZqRCxXQUFNLEdBQU4sTUFBTSxDQUFzQztRQUNULGFBQVEsR0FBUixRQUFRLENBQWtCO1FBQ2xDLFFBQUcsR0FBSCxHQUFHLENBQW1CO1FBTnRFLFVBQUssR0FBNkIsRUFBRSxDQUFDO0lBT2xDLENBQUM7SUFFSixRQUFRO1FBQ0osbUZBQW1GO1FBQ25GLHdFQUF3RTtRQUN4RSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3pELElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1lBQ25CLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDN0IsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDOzttSEFqQlEscUJBQXFCLGtCQUlsQixjQUFjLGFBRU4saUJBQWlCLHlCQUN6QixpQkFBaUI7dUdBUHBCLHFCQUFxQiwwRkFObkIsQ0FBQyxpQkFBaUIsQ0FBQywwQkNyQmxDLGlRQVFBLDJsQkRjZ0IsQ0FBQyxvQkFBb0IsQ0FBQzs0RkFLekIscUJBQXFCO2tCQWJqQyxTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSxnQkFBZ0I7b0JBQzFCLFdBQVcsRUFBRSw0QkFBNEI7b0JBQ3pDLFNBQVMsRUFBRSxDQUFDLHlCQUF5QixDQUFDO29CQUN0QyxpREFBaUQ7b0JBQ2pELHFGQUFxRjtvQkFDckYsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE9BQU87b0JBQ2hELFNBQVMsRUFBRSxDQUFDLGlCQUFpQixDQUFDO29CQUM5QixVQUFVLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQztvQkFDbEMsSUFBSSxFQUFFO3dCQUNGLFdBQVcsRUFBRSxRQUFRO3FCQUN4QjtpQkFDSjs7MEJBS1EsTUFBTTsyQkFBQyxjQUFjOzswQkFFckIsSUFBSTs7MEJBQUksTUFBTTsyQkFBQyxpQkFBaUI7OzBCQUNoQyxNQUFNOzJCQUFDLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gICAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgQ29tcG9uZW50LFxuICAgIEluamVjdCxcbiAgICBPbkluaXQsXG4gICAgU2VsZixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1RVSV9QQVJFTlRfQU5JTUFUSU9OLCBUdWlEZXN0cm95U2VydmljZX0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge1R1aVBvcnRhbEl0ZW19IGZyb20gJ0B0YWlnYS11aS9jb3JlL2ludGVyZmFjZXMnO1xuaW1wb3J0IHtUdWlIaW50U2VydmljZX0gZnJvbSAnQHRhaWdhLXVpL2NvcmUvc2VydmljZXMnO1xuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcbmltcG9ydCB7dGFrZVVudGlsfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAndHVpLWhpbnRzLWhvc3QnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9oaW50cy1ob3N0LnRlbXBsYXRlLmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL2hpbnRzLWhvc3Quc3R5bGUubGVzcyddLFxuICAgIC8vIFNvIHRoYXQgd2UgZG8gbm90IGZvcmNlIE9uUHVzaCBvbiBjdXN0b20gaGludHNcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQGFuZ3VsYXItZXNsaW50L3ByZWZlci1vbi1wdXNoLWNvbXBvbmVudC1jaGFuZ2UtZGV0ZWN0aW9uXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5EZWZhdWx0LFxuICAgIHByb3ZpZGVyczogW1R1aURlc3Ryb3lTZXJ2aWNlXSxcbiAgICBhbmltYXRpb25zOiBbVFVJX1BBUkVOVF9BTklNQVRJT05dLFxuICAgIGhvc3Q6IHtcbiAgICAgICAgJ2FyaWEtbGl2ZSc6ICdwb2xpdGUnLFxuICAgIH0sXG59KVxuZXhwb3J0IGNsYXNzIFR1aUhpbnRzSG9zdENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gICAgaGludHM6IHJlYWRvbmx5IFR1aVBvcnRhbEl0ZW1bXSA9IFtdO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoVHVpSGludFNlcnZpY2UpXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgaGludHMkOiBPYnNlcnZhYmxlPHJlYWRvbmx5IFR1aVBvcnRhbEl0ZW1bXT4sXG4gICAgICAgIEBTZWxmKCkgQEluamVjdChUdWlEZXN0cm95U2VydmljZSkgcHJpdmF0ZSByZWFkb25seSBkZXN0cm95JDogT2JzZXJ2YWJsZTx2b2lkPixcbiAgICAgICAgQEluamVjdChDaGFuZ2VEZXRlY3RvclJlZikgcHJpdmF0ZSByZWFkb25seSBjZHI6IENoYW5nZURldGVjdG9yUmVmLFxuICAgICkge31cblxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xuICAgICAgICAvLyBEdWUgdG8gdGhpcyB2aWV3IGJlaW5nIHBhcmFsbGVsIHRvIGFwcCBjb250ZW50LCBgbWFya0ZvckNoZWNrYCBmcm9tIGBhc3luY2AgcGlwZVxuICAgICAgICAvLyBjYW4gaGFwcGVuIGFmdGVyIHZpZXcgd2FzIGNoZWNrZWQsIHNvIGNhbGxpbmcgYGRldGVjdENoYW5nZXNgIGluc3RlYWRcbiAgICAgICAgdGhpcy5oaW50cyQucGlwZSh0YWtlVW50aWwodGhpcy5kZXN0cm95JCkpLnN1YnNjcmliZShoaW50cyA9PiB7XG4gICAgICAgICAgICB0aGlzLmhpbnRzID0gaGludHM7XG4gICAgICAgICAgICB0aGlzLmNkci5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiIsIjxkaXZcbiAgICAqbmdGb3I9XCJsZXQgaGludCBvZiBoaW50c1wiXG4gICAgcm9sZT1cInRvb2x0aXBcIlxuICAgIEB0dWlQYXJlbnRBbmltYXRpb25cbiAgICBbdHVpQWN0aXZlWm9uZVBhcmVudF09XCJoaW50LmFjdGl2ZVpvbmUgfHwgbnVsbFwiXG4+XG4gICAgPG5nLWNvbnRhaW5lciAqcG9seW1vcnBoZXVzT3V0bGV0PVwiaGludC5jb21wb25lbnQ7IGNvbnRleHQ6IHskaW1wbGljaXQ6IGhpbnR9XCI+PC9uZy1jb250YWluZXI+XG48L2Rpdj5cbiJdfQ==