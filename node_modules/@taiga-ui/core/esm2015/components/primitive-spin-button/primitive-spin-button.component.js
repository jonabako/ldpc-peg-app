import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, HostListener, Inject, Input, Output, } from '@angular/core';
import { AbstractTuiInteractive, tuiIsNativeFocusedIn } from '@taiga-ui/cdk';
import { TUI_SPIN_ICONS, TUI_SPIN_TEXTS } from '@taiga-ui/core/tokens';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core/components/button";
import * as i2 from "@angular/common";
import * as i3 from "rxjs";
export class TuiPrimitiveSpinButtonComponent extends AbstractTuiInteractive {
    constructor(el, icons, spinTexts$) {
        super();
        this.el = el;
        this.icons = icons;
        this.spinTexts$ = spinTexts$;
        this.disabled = false;
        this.leftDisabled = false;
        this.rightDisabled = false;
        this.leftClick = new EventEmitter();
        this.rightClick = new EventEmitter();
    }
    get focused() {
        return tuiIsNativeFocusedIn(this.el.nativeElement);
    }
    get leftComputedDisabled() {
        return this.computedDisabled || this.leftDisabled;
    }
    get rightComputedDisabled() {
        return this.computedDisabled || this.rightDisabled;
    }
    onLeftClick() {
        if (!this.leftComputedDisabled) {
            this.leftClick.emit();
        }
    }
    onRightClick() {
        if (!this.rightComputedDisabled) {
            this.rightClick.emit();
        }
    }
    onFocused(focused) {
        this.updateFocused(focused);
    }
    onFocusVisible(focusVisible) {
        this.updateFocusVisible(focusVisible);
    }
}
TuiPrimitiveSpinButtonComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPrimitiveSpinButtonComponent, deps: [{ token: ElementRef }, { token: TUI_SPIN_ICONS }, { token: TUI_SPIN_TEXTS }], target: i0.ɵɵFactoryTarget.Component });
TuiPrimitiveSpinButtonComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiPrimitiveSpinButtonComponent, selector: "tui-primitive-spin-button", inputs: { disabled: "disabled", leftDisabled: "leftDisabled", rightDisabled: "rightDisabled" }, outputs: { leftClick: "leftClick", rightClick: "rightClick" }, host: { listeners: { "mousedown.silent.prevent": "(0)", "keydown.arrowLeft.prevent": "onLeftClick()", "keydown.arrowRight.prevent": "onRightClick()", "focusin": "onFocused(true)", "focusout": "onFocused(false)" } }, usesInheritance: true, ngImport: i0, template: "<ng-container *ngIf=\"spinTexts$ | async as texts\">\n    <button\n        appearance=\"flat\"\n        automation-id=\"tui-primitive-spin-button__left\"\n        size=\"xs\"\n        tuiIconButton\n        type=\"button\"\n        [class.t-hidden]=\"leftComputedDisabled\"\n        [focusable]=\"computedFocusable\"\n        [icon]=\"icons.decrement\"\n        [title]=\"texts[0]\"\n        (click)=\"onLeftClick()\"\n    ></button>\n    <span class=\"t-content t-calendar-title\">\n        <ng-content></ng-content>\n    </span>\n    <button\n        appearance=\"flat\"\n        automation-id=\"tui-primitive-spin-button__right\"\n        size=\"xs\"\n        tuiIconButton\n        type=\"button\"\n        [class.t-hidden]=\"rightComputedDisabled\"\n        [focusable]=\"computedFocusable\"\n        [icon]=\"icons.increment\"\n        [title]=\"texts[1]\"\n        (click)=\"onRightClick()\"\n    ></button>\n</ng-container>\n", styles: [":host{display:flex;align-items:center;justify-content:space-between;font:var(--tui-font-text-l);text-align:center;font-weight:bold}.t-hidden{visibility:hidden}.t-content{padding:0 .5rem}\n"], components: [{ type: i1.TuiButtonComponent, selector: "button[tuiButton], button[tuiIconButton], a[tuiButton], a[tuiIconButton]", inputs: ["appearance", "disabled", "icon", "iconRight", "shape", "showLoader", "size"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i2.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPrimitiveSpinButtonComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-primitive-spin-button',
                    templateUrl: './primitive-spin-button.template.html',
                    styleUrls: ['./primitive-spin-button.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: {
                        '(mousedown.silent.prevent)': '(0)',
                    },
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_SPIN_ICONS]
                }] }, { type: i3.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_SPIN_TEXTS]
                }] }]; }, propDecorators: { disabled: [{
                type: Input
            }], leftDisabled: [{
                type: Input
            }], rightDisabled: [{
                type: Input
            }], leftClick: [{
                type: Output
            }], rightClick: [{
                type: Output
            }], onLeftClick: [{
                type: HostListener,
                args: ['keydown.arrowLeft.prevent']
            }], onRightClick: [{
                type: HostListener,
                args: ['keydown.arrowRight.prevent']
            }], onFocused: [{
                type: HostListener,
                args: ['focusin', ['true']]
            }, {
                type: HostListener,
                args: ['focusout', ['false']]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJpbWl0aXZlLXNwaW4tYnV0dG9uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmUvY29tcG9uZW50cy9wcmltaXRpdmUtc3Bpbi1idXR0b24vcHJpbWl0aXZlLXNwaW4tYnV0dG9uLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmUvY29tcG9uZW50cy9wcmltaXRpdmUtc3Bpbi1idXR0b24vcHJpbWl0aXZlLXNwaW4tYnV0dG9uLnRlbXBsYXRlLmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNILHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsVUFBVSxFQUNWLFlBQVksRUFDWixZQUFZLEVBQ1osTUFBTSxFQUNOLEtBQUssRUFDTCxNQUFNLEdBQ1QsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFDLHNCQUFzQixFQUFFLG9CQUFvQixFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzNFLE9BQU8sRUFBQyxjQUFjLEVBQUUsY0FBYyxFQUFlLE1BQU0sdUJBQXVCLENBQUM7Ozs7O0FBWW5GLE1BQU0sT0FBTywrQkFBZ0MsU0FBUSxzQkFBc0I7SUFnQnZFLFlBQ3lDLEVBQTJCLEVBQy9CLEtBQW1CLEVBQ25CLFVBQXdDO1FBRXpFLEtBQUssRUFBRSxDQUFDO1FBSjZCLE9BQUUsR0FBRixFQUFFLENBQXlCO1FBQy9CLFVBQUssR0FBTCxLQUFLLENBQWM7UUFDbkIsZUFBVSxHQUFWLFVBQVUsQ0FBOEI7UUFqQjdFLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFHakIsaUJBQVksR0FBRyxLQUFLLENBQUM7UUFHckIsa0JBQWEsR0FBRyxLQUFLLENBQUM7UUFHYixjQUFTLEdBQUcsSUFBSSxZQUFZLEVBQVEsQ0FBQztRQUdyQyxlQUFVLEdBQUcsSUFBSSxZQUFZLEVBQVEsQ0FBQztJQVEvQyxDQUFDO0lBRUQsSUFBSSxPQUFPO1FBQ1AsT0FBTyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFFRCxJQUFJLG9CQUFvQjtRQUNwQixPQUFPLElBQUksQ0FBQyxnQkFBZ0IsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDO0lBQ3RELENBQUM7SUFFRCxJQUFJLHFCQUFxQjtRQUNyQixPQUFPLElBQUksQ0FBQyxnQkFBZ0IsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDO0lBQ3ZELENBQUM7SUFHRCxXQUFXO1FBQ1AsSUFBSSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsRUFBRTtZQUM1QixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDO1NBQ3pCO0lBQ0wsQ0FBQztJQUdELFlBQVk7UUFDUixJQUFJLENBQUMsSUFBSSxDQUFDLHFCQUFxQixFQUFFO1lBQzdCLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDMUI7SUFDTCxDQUFDO0lBSUQsU0FBUyxDQUFDLE9BQWdCO1FBQ3RCLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUVELGNBQWMsQ0FBQyxZQUFxQjtRQUNoQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDMUMsQ0FBQzs7NkhBMURRLCtCQUErQixrQkFpQjVCLFVBQVUsYUFDVixjQUFjLGFBQ2QsY0FBYztpSEFuQmpCLCtCQUErQiwrY0N2QjVDLHU2QkE2QkE7NEZETmEsK0JBQStCO2tCQVQzQyxTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSwyQkFBMkI7b0JBQ3JDLFdBQVcsRUFBRSx1Q0FBdUM7b0JBQ3BELFNBQVMsRUFBRSxDQUFDLG9DQUFvQyxDQUFDO29CQUNqRCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFDL0MsSUFBSSxFQUFFO3dCQUNGLDRCQUE0QixFQUFFLEtBQUs7cUJBQ3RDO2lCQUNKOzswQkFrQlEsTUFBTTsyQkFBQyxVQUFVOzswQkFDakIsTUFBTTsyQkFBQyxjQUFjOzswQkFDckIsTUFBTTsyQkFBQyxjQUFjOzRDQWpCMUIsUUFBUTtzQkFEUCxLQUFLO2dCQUlOLFlBQVk7c0JBRFgsS0FBSztnQkFJTixhQUFhO3NCQURaLEtBQUs7Z0JBSUcsU0FBUztzQkFEakIsTUFBTTtnQkFJRSxVQUFVO3NCQURsQixNQUFNO2dCQXdCUCxXQUFXO3NCQURWLFlBQVk7dUJBQUMsMkJBQTJCO2dCQVF6QyxZQUFZO3NCQURYLFlBQVk7dUJBQUMsNEJBQTRCO2dCQVMxQyxTQUFTO3NCQUZSLFlBQVk7dUJBQUMsU0FBUyxFQUFFLENBQUMsTUFBTSxDQUFDOztzQkFDaEMsWUFBWTt1QkFBQyxVQUFVLEVBQUUsQ0FBQyxPQUFPLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICAgIENvbXBvbmVudCxcbiAgICBFbGVtZW50UmVmLFxuICAgIEV2ZW50RW1pdHRlcixcbiAgICBIb3N0TGlzdGVuZXIsXG4gICAgSW5qZWN0LFxuICAgIElucHV0LFxuICAgIE91dHB1dCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0Fic3RyYWN0VHVpSW50ZXJhY3RpdmUsIHR1aUlzTmF0aXZlRm9jdXNlZElufSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7VFVJX1NQSU5fSUNPTlMsIFRVSV9TUElOX1RFWFRTLCBUdWlTcGluSWNvbnN9IGZyb20gJ0B0YWlnYS11aS9jb3JlL3Rva2Vucyc7XG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ3R1aS1wcmltaXRpdmUtc3Bpbi1idXR0b24nLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9wcmltaXRpdmUtc3Bpbi1idXR0b24udGVtcGxhdGUuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vcHJpbWl0aXZlLXNwaW4tYnV0dG9uLnN0eWxlLmxlc3MnXSxcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgICBob3N0OiB7XG4gICAgICAgICcobW91c2Vkb3duLnNpbGVudC5wcmV2ZW50KSc6ICcoMCknLFxuICAgIH0sXG59KVxuZXhwb3J0IGNsYXNzIFR1aVByaW1pdGl2ZVNwaW5CdXR0b25Db21wb25lbnQgZXh0ZW5kcyBBYnN0cmFjdFR1aUludGVyYWN0aXZlIHtcbiAgICBASW5wdXQoKVxuICAgIGRpc2FibGVkID0gZmFsc2U7XG5cbiAgICBASW5wdXQoKVxuICAgIGxlZnREaXNhYmxlZCA9IGZhbHNlO1xuXG4gICAgQElucHV0KClcbiAgICByaWdodERpc2FibGVkID0gZmFsc2U7XG5cbiAgICBAT3V0cHV0KClcbiAgICByZWFkb25seSBsZWZ0Q2xpY2sgPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG5cbiAgICBAT3V0cHV0KClcbiAgICByZWFkb25seSByaWdodENsaWNrID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoRWxlbWVudFJlZikgcHJpdmF0ZSByZWFkb25seSBlbDogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4sXG4gICAgICAgIEBJbmplY3QoVFVJX1NQSU5fSUNPTlMpIHJlYWRvbmx5IGljb25zOiBUdWlTcGluSWNvbnMsXG4gICAgICAgIEBJbmplY3QoVFVJX1NQSU5fVEVYVFMpIHJlYWRvbmx5IHNwaW5UZXh0cyQ6IE9ic2VydmFibGU8W3N0cmluZywgc3RyaW5nXT4sXG4gICAgKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuXG4gICAgZ2V0IGZvY3VzZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0dWlJc05hdGl2ZUZvY3VzZWRJbih0aGlzLmVsLm5hdGl2ZUVsZW1lbnQpO1xuICAgIH1cblxuICAgIGdldCBsZWZ0Q29tcHV0ZWREaXNhYmxlZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcHV0ZWREaXNhYmxlZCB8fCB0aGlzLmxlZnREaXNhYmxlZDtcbiAgICB9XG5cbiAgICBnZXQgcmlnaHRDb21wdXRlZERpc2FibGVkKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wdXRlZERpc2FibGVkIHx8IHRoaXMucmlnaHREaXNhYmxlZDtcbiAgICB9XG5cbiAgICBASG9zdExpc3RlbmVyKCdrZXlkb3duLmFycm93TGVmdC5wcmV2ZW50JylcbiAgICBvbkxlZnRDbGljaygpOiB2b2lkIHtcbiAgICAgICAgaWYgKCF0aGlzLmxlZnRDb21wdXRlZERpc2FibGVkKSB7XG4gICAgICAgICAgICB0aGlzLmxlZnRDbGljay5lbWl0KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBASG9zdExpc3RlbmVyKCdrZXlkb3duLmFycm93UmlnaHQucHJldmVudCcpXG4gICAgb25SaWdodENsaWNrKCk6IHZvaWQge1xuICAgICAgICBpZiAoIXRoaXMucmlnaHRDb21wdXRlZERpc2FibGVkKSB7XG4gICAgICAgICAgICB0aGlzLnJpZ2h0Q2xpY2suZW1pdCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgQEhvc3RMaXN0ZW5lcignZm9jdXNpbicsIFsndHJ1ZSddKVxuICAgIEBIb3N0TGlzdGVuZXIoJ2ZvY3Vzb3V0JywgWydmYWxzZSddKVxuICAgIG9uRm9jdXNlZChmb2N1c2VkOiBib29sZWFuKTogdm9pZCB7XG4gICAgICAgIHRoaXMudXBkYXRlRm9jdXNlZChmb2N1c2VkKTtcbiAgICB9XG5cbiAgICBvbkZvY3VzVmlzaWJsZShmb2N1c1Zpc2libGU6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgICAgdGhpcy51cGRhdGVGb2N1c1Zpc2libGUoZm9jdXNWaXNpYmxlKTtcbiAgICB9XG59XG4iLCI8bmctY29udGFpbmVyICpuZ0lmPVwic3BpblRleHRzJCB8IGFzeW5jIGFzIHRleHRzXCI+XG4gICAgPGJ1dHRvblxuICAgICAgICBhcHBlYXJhbmNlPVwiZmxhdFwiXG4gICAgICAgIGF1dG9tYXRpb24taWQ9XCJ0dWktcHJpbWl0aXZlLXNwaW4tYnV0dG9uX19sZWZ0XCJcbiAgICAgICAgc2l6ZT1cInhzXCJcbiAgICAgICAgdHVpSWNvbkJ1dHRvblxuICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgW2NsYXNzLnQtaGlkZGVuXT1cImxlZnRDb21wdXRlZERpc2FibGVkXCJcbiAgICAgICAgW2ZvY3VzYWJsZV09XCJjb21wdXRlZEZvY3VzYWJsZVwiXG4gICAgICAgIFtpY29uXT1cImljb25zLmRlY3JlbWVudFwiXG4gICAgICAgIFt0aXRsZV09XCJ0ZXh0c1swXVwiXG4gICAgICAgIChjbGljayk9XCJvbkxlZnRDbGljaygpXCJcbiAgICA+PC9idXR0b24+XG4gICAgPHNwYW4gY2xhc3M9XCJ0LWNvbnRlbnQgdC1jYWxlbmRhci10aXRsZVwiPlxuICAgICAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG4gICAgPC9zcGFuPlxuICAgIDxidXR0b25cbiAgICAgICAgYXBwZWFyYW5jZT1cImZsYXRcIlxuICAgICAgICBhdXRvbWF0aW9uLWlkPVwidHVpLXByaW1pdGl2ZS1zcGluLWJ1dHRvbl9fcmlnaHRcIlxuICAgICAgICBzaXplPVwieHNcIlxuICAgICAgICB0dWlJY29uQnV0dG9uXG4gICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICBbY2xhc3MudC1oaWRkZW5dPVwicmlnaHRDb21wdXRlZERpc2FibGVkXCJcbiAgICAgICAgW2ZvY3VzYWJsZV09XCJjb21wdXRlZEZvY3VzYWJsZVwiXG4gICAgICAgIFtpY29uXT1cImljb25zLmluY3JlbWVudFwiXG4gICAgICAgIFt0aXRsZV09XCJ0ZXh0c1sxXVwiXG4gICAgICAgIChjbGljayk9XCJvblJpZ2h0Q2xpY2soKVwiXG4gICAgPjwvYnV0dG9uPlxuPC9uZy1jb250YWluZXI+XG4iXX0=