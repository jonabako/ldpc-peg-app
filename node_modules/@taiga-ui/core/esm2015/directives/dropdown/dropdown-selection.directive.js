import { DOCUMENT } from '@angular/common';
import { Directive, ElementRef, Inject, Input, ViewContainerRef, } from '@angular/core';
import { ALWAYS_TRUE_HANDLER, CHAR_NO_BREAK_SPACE, CHAR_ZERO_WIDTH_SPACE, EMPTY_CLIENT_RECT, TUI_RANGE, tuiGetNativeFocused, tuiIsElement, tuiIsString, tuiIsTextfield, tuiIsTextNode, tuiPx, } from '@taiga-ui/cdk';
import { tuiAsDriver, tuiAsRectAccessor, TuiDriver, } from '@taiga-ui/core/abstract';
import { TUI_SELECTION_STREAM } from '@taiga-ui/core/tokens';
import { tuiGetWordRange } from '@taiga-ui/core/utils';
import { BehaviorSubject, combineLatest } from 'rxjs';
import { distinctUntilChanged, map } from 'rxjs/operators';
import { TuiDropdownDirective } from './dropdown.directive';
import * as i0 from "@angular/core";
import * as i1 from "rxjs";
import * as i2 from "./dropdown.directive";
export class TuiDropdownSelectionDirective extends TuiDriver {
    constructor(range, doc, selection$, el, vcr, dropdown) {
        super(subscriber => this.stream$.subscribe(subscriber));
        this.range = range;
        this.doc = doc;
        this.selection$ = selection$;
        this.el = el;
        this.vcr = vcr;
        this.dropdown = dropdown;
        this.handler$ = new BehaviorSubject(ALWAYS_TRUE_HANDLER);
        this.stream$ = combineLatest([
            this.handler$,
            this.selection$.pipe(map(() => this.getRange()), distinctUntilChanged((x, y) => x.startOffset === y.startOffset && x.endOffset === y.endOffset)),
        ]).pipe(map(([handler, range]) => {
            const contained = this.el.nativeElement.contains(range.commonAncestorContainer);
            this.range =
                contained && tuiIsTextNode(range.commonAncestorContainer)
                    ? range
                    : this.range;
            return (contained && handler(this.range)) || this.inDropdown(range);
        }));
        this.position = 'selection';
        this.type = 'dropdown';
    }
    set tuiDropdownSelection(visible) {
        if (!tuiIsString(visible)) {
            this.handler$.next(visible);
        }
    }
    getClientRect() {
        switch (this.position) {
            case 'tag': {
                const { commonAncestorContainer } = this.range;
                const element = tuiIsElement(commonAncestorContainer)
                    ? commonAncestorContainer
                    : commonAncestorContainer.parentNode;
                return element && tuiIsElement(element)
                    ? element.getBoundingClientRect()
                    : EMPTY_CLIENT_RECT;
            }
            case 'word':
                return tuiGetWordRange(this.range).getBoundingClientRect();
            default:
                return this.range.getBoundingClientRect();
        }
    }
    ngOnDestroy() {
        if (this.ghost) {
            this.vcr.element.nativeElement.removeChild(this.ghost);
        }
    }
    getRange() {
        const active = tuiGetNativeFocused(this.doc);
        const selection = this.doc.getSelection();
        const range = active && tuiIsTextfield(active) && this.el.nativeElement.contains(active)
            ? this.veryVerySadInputFix(active)
            : ((selection === null || selection === void 0 ? void 0 : selection.rangeCount) && selection.getRangeAt(0)) || this.range;
        return range.cloneRange();
    }
    /**
     * Check if Node is inside dropdown
     */
    boxContains(node) {
        var _a;
        return !!((_a = this.dropdown.dropdownBoxRef) === null || _a === void 0 ? void 0 : _a.location.nativeElement.contains(node));
    }
    /**
     * Check if given range is at least partially inside dropdown
     */
    inDropdown(range) {
        const { startContainer, endContainer } = range;
        const { nativeElement } = this.el;
        const inDropdown = this.boxContains(range.commonAncestorContainer);
        const hostToDropdown = this.boxContains(endContainer) && nativeElement.contains(startContainer);
        const dropdownToHost = this.boxContains(startContainer) && nativeElement.contains(endContainer);
        return inDropdown || hostToDropdown || dropdownToHost;
    }
    veryVerySadInputFix(element) {
        const { ghost = this.initGhost(element) } = this;
        const { top, left, width, height } = element.getBoundingClientRect();
        const { selectionStart, selectionEnd, value } = element;
        const range = this.doc.createRange();
        const hostRect = this.el.nativeElement.getBoundingClientRect();
        ghost.style.top = tuiPx(top - hostRect.top);
        ghost.style.left = tuiPx(left - hostRect.left);
        ghost.style.width = tuiPx(width);
        ghost.style.height = tuiPx(height);
        ghost.textContent = CHAR_ZERO_WIDTH_SPACE + value + CHAR_NO_BREAK_SPACE;
        range.setStart(ghost.firstChild, selectionStart || 0);
        range.setEnd(ghost.firstChild, selectionEnd || 0);
        return range;
    }
    /**
     * Create an invisible DIV styled exactly like input/textarea element inside directive
     */
    initGhost(element) {
        const ghost = this.doc.createElement('div');
        const { font, letterSpacing, textTransform, padding } = getComputedStyle(element);
        ghost.style.position = 'absolute';
        ghost.style.pointerEvents = 'none';
        ghost.style.opacity = '0';
        ghost.style.whiteSpace = 'pre-wrap';
        ghost.style.font = font;
        ghost.style.letterSpacing = letterSpacing;
        ghost.style.textTransform = textTransform;
        ghost.style.padding = padding;
        this.vcr.element.nativeElement.appendChild(ghost);
        this.ghost = ghost;
        return ghost;
    }
}
TuiDropdownSelectionDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDropdownSelectionDirective, deps: [{ token: TUI_RANGE }, { token: DOCUMENT }, { token: TUI_SELECTION_STREAM }, { token: ElementRef }, { token: ViewContainerRef }, { token: TuiDropdownDirective }], target: i0.ɵɵFactoryTarget.Directive });
TuiDropdownSelectionDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiDropdownSelectionDirective, selector: "[tuiDropdown][tuiDropdownSelection]", inputs: { position: ["tuiDropdownSelectionPosition", "position"], tuiDropdownSelection: "tuiDropdownSelection" }, providers: [
        tuiAsDriver(TuiDropdownSelectionDirective),
        tuiAsRectAccessor(TuiDropdownSelectionDirective),
    ], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDropdownSelectionDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiDropdown][tuiDropdownSelection]',
                    providers: [
                        tuiAsDriver(TuiDropdownSelectionDirective),
                        tuiAsRectAccessor(TuiDropdownSelectionDirective),
                    ],
                }]
        }], ctorParameters: function () { return [{ type: Range, decorators: [{
                    type: Inject,
                    args: [TUI_RANGE]
                }] }, { type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }, { type: i1.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_SELECTION_STREAM]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: i0.ViewContainerRef, decorators: [{
                    type: Inject,
                    args: [ViewContainerRef]
                }] }, { type: i2.TuiDropdownDirective, decorators: [{
                    type: Inject,
                    args: [TuiDropdownDirective]
                }] }]; }, propDecorators: { position: [{
                type: Input,
                args: ['tuiDropdownSelectionPosition']
            }], tuiDropdownSelection: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,