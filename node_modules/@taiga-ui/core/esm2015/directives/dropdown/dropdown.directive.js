import { __decorate } from "tslib";
import { Directive, ElementRef, Inject, INJECTOR, Input, Optional, Self, } from '@angular/core';
import { TuiDestroyService, TuiDropdownPortalService, tuiPure, } from '@taiga-ui/cdk';
import { tuiAsRectAccessor, tuiAsVehicle, } from '@taiga-ui/core/abstract';
import { tuiCheckFixedPosition } from '@taiga-ui/core/utils';
import { PolymorpheusComponent } from '@tinkoff/ng-polymorpheus';
import { Subject } from 'rxjs';
import { takeUntil, throttleTime } from 'rxjs/operators';
import { TUI_DROPDOWN_COMPONENT } from './dropdown.providers';
import { TuiDropdownOpenDirective } from './dropdown-open.directive';
import * as i0 from "@angular/core";
import * as i1 from "rxjs";
import * as i2 from "@taiga-ui/cdk";
import * as i3 from "./dropdown-open.directive";
export class TuiDropdownDirective {
    constructor(destroy$, el, dropdown, injector, dropdownService, open) {
        this.el = el;
        this.dropdown = dropdown;
        this.injector = injector;
        this.dropdownService = dropdownService;
        this.open = open;
        this.refresh$ = new Subject();
        this.dropdownBoxRef = null;
        this.type = 'dropdown';
        this.component = new PolymorpheusComponent(this.dropdown, this.injector);
        if (this.open && !this.open.dropdown) {
            this.open.dropdown = this;
        }
        else {
            this.open = null;
        }
        // Ignore multiple change detection triggers at the same frame
        this.refresh$.pipe(throttleTime(0), takeUntil(destroy$)).subscribe(() => {
            var _a, _b;
            (_a = this.dropdownBoxRef) === null || _a === void 0 ? void 0 : _a.changeDetectorRef.detectChanges();
            (_b = this.dropdownBoxRef) === null || _b === void 0 ? void 0 : _b.changeDetectorRef.markForCheck();
        });
    }
    get position() {
        return tuiCheckFixedPosition(this.el.nativeElement) ? 'fixed' : 'absolute';
    }
    ngAfterViewChecked() {
        this.refresh$.next();
    }
    ngAfterViewInit() {
        if (this.open) {
            this.toggle(this.open.tuiDropdownOpen);
        }
    }
    ngOnChanges() {
        if (!this.content) {
            this.toggle(false);
        }
    }
    ngOnDestroy() {
        this.toggle(false);
        if (this.open) {
            this.open.dropdown = undefined;
        }
    }
    getClientRect() {
        return this.el.nativeElement.getBoundingClientRect();
    }
    toggle(show) {
        var _a, _b;
        if (show && this.content && !this.dropdownBoxRef) {
            this.dropdownBoxRef = this.dropdownService.add(this.component);
            (_a = this.open) === null || _a === void 0 ? void 0 : _a.update(true);
        }
        else if (!show && this.dropdownBoxRef) {
            this.dropdownService.remove(this.dropdownBoxRef);
            this.dropdownBoxRef = null;
            (_b = this.open) === null || _b === void 0 ? void 0 : _b.update(false);
        }
    }
}
TuiDropdownDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDropdownDirective, deps: [{ token: TuiDestroyService, self: true }, { token: ElementRef }, { token: TUI_DROPDOWN_COMPONENT }, { token: INJECTOR }, { token: TuiDropdownPortalService }, { token: TuiDropdownOpenDirective, optional: true }], target: i0.ɵɵFactoryTarget.Directive });
TuiDropdownDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiDropdownDirective, selector: "[tuiDropdown]:not(ng-container)", inputs: { content: ["tuiDropdown", "content"] }, providers: [
        TuiDestroyService,
        tuiAsRectAccessor(TuiDropdownDirective),
        tuiAsVehicle(TuiDropdownDirective),
    ], exportAs: ["tuiDropdown"], usesOnChanges: true, ngImport: i0 });
__decorate([
    tuiPure
], TuiDropdownDirective.prototype, "position", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDropdownDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiDropdown]:not(ng-container)',
                    providers: [
                        TuiDestroyService,
                        tuiAsRectAccessor(TuiDropdownDirective),
                        tuiAsVehicle(TuiDropdownDirective),
                    ],
                    exportAs: 'tuiDropdown',
                }]
        }], ctorParameters: function () { return [{ type: i1.Observable, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiDestroyService]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: i0.Type, decorators: [{
                    type: Inject,
                    args: [TUI_DROPDOWN_COMPONENT]
                }] }, { type: i0.Injector, decorators: [{
                    type: Inject,
                    args: [INJECTOR]
                }] }, { type: i2.TuiDropdownPortalService, decorators: [{
                    type: Inject,
                    args: [TuiDropdownPortalService]
                }] }, { type: i3.TuiDropdownOpenDirective, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TuiDropdownOpenDirective]
                }] }]; }, propDecorators: { content: [{
                type: Input,
                args: ['tuiDropdown']
            }], position: [] } });
//# sourceMappingURL=data:application/json;base64,