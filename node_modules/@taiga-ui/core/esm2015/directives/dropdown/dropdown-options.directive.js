import { Directive, forwardRef, Inject, Input, Optional, SkipSelf, } from '@angular/core';
import { tuiCreateToken } from '@taiga-ui/cdk';
import { tuiOverrideOptions } from '@taiga-ui/core/utils';
import * as i0 from "@angular/core";
/** Default values for dropdown options */
export const TUI_DROPDOWN_DEFAULT_OPTIONS = {
    align: 'left',
    direction: null,
    limitWidth: 'auto',
    maxHeight: 400,
    minHeight: 80,
    offset: 4,
    appearance: '',
};
/**
 * Default parameters for dropdown directive
 */
export const TUI_DROPDOWN_OPTIONS = tuiCreateToken(TUI_DROPDOWN_DEFAULT_OPTIONS);
export const tuiDropdownOptionsProvider = (override) => ({
    provide: TUI_DROPDOWN_OPTIONS,
    deps: [
        [new Optional(), TuiDropdownOptionsDirective],
        [new Optional(), new SkipSelf(), TUI_DROPDOWN_OPTIONS],
    ],
    useFactory: tuiOverrideOptions(override, TUI_DROPDOWN_DEFAULT_OPTIONS),
});
export class TuiDropdownOptionsDirective {
    constructor(options) {
        this.options = options;
        this.align = this.options.align;
        this.appearance = this.options.appearance;
        this.direction = this.options.direction;
        this.limitWidth = this.options.limitWidth;
        this.minHeight = this.options.minHeight;
        this.maxHeight = this.options.maxHeight;
        this.offset = this.options.offset;
    }
}
TuiDropdownOptionsDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDropdownOptionsDirective, deps: [{ token: TUI_DROPDOWN_OPTIONS, skipSelf: true }], target: i0.ɵɵFactoryTarget.Directive });
TuiDropdownOptionsDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiDropdownOptionsDirective, selector: "[tuiDropdownAlign], [tuiDropdownAppearance], [tuiDropdownDirection], [tuiDropdownLimitWidth], [tuiDropdownMinHeight], [tuiDropdownMaxHeight], [tuiDropdownOffset]", inputs: { align: ["tuiDropdownAlign", "align"], appearance: ["tuiDropdownAppearance", "appearance"], direction: ["tuiDropdownDirection", "direction"], limitWidth: ["tuiDropdownLimitWidth", "limitWidth"], minHeight: ["tuiDropdownMinHeight", "minHeight"], maxHeight: ["tuiDropdownMaxHeight", "maxHeight"], offset: ["tuiDropdownOffset", "offset"] }, providers: [
        {
            provide: TUI_DROPDOWN_OPTIONS,
            useExisting: forwardRef(() => TuiDropdownOptionsDirective),
        },
    ], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDropdownOptionsDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiDropdownAlign], [tuiDropdownAppearance], [tuiDropdownDirection], [tuiDropdownLimitWidth], [tuiDropdownMinHeight], [tuiDropdownMaxHeight], [tuiDropdownOffset]',
                    providers: [
                        {
                            provide: TUI_DROPDOWN_OPTIONS,
                            useExisting: forwardRef(() => TuiDropdownOptionsDirective),
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: SkipSelf
                }, {
                    type: Inject,
                    args: [TUI_DROPDOWN_OPTIONS]
                }] }]; }, propDecorators: { align: [{
                type: Input,
                args: ['tuiDropdownAlign']
            }], appearance: [{
                type: Input,
                args: ['tuiDropdownAppearance']
            }], direction: [{
                type: Input,
                args: ['tuiDropdownDirection']
            }], limitWidth: [{
                type: Input,
                args: ['tuiDropdownLimitWidth']
            }], minHeight: [{
                type: Input,
                args: ['tuiDropdownMinHeight']
            }], maxHeight: [{
                type: Input,
                args: ['tuiDropdownMaxHeight']
            }], offset: [{
                type: Input,
                args: ['tuiDropdownOffset']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcGRvd24tb3B0aW9ucy5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlL2RpcmVjdGl2ZXMvZHJvcGRvd24vZHJvcGRvd24tb3B0aW9ucy5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNILFNBQVMsRUFFVCxVQUFVLEVBQ1YsTUFBTSxFQUNOLEtBQUssRUFDTCxRQUFRLEVBQ1IsUUFBUSxHQUNYLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFNN0MsT0FBTyxFQUFDLGtCQUFrQixFQUFDLE1BQU0sc0JBQXNCLENBQUM7O0FBWXhELDBDQUEwQztBQUMxQyxNQUFNLENBQUMsTUFBTSw0QkFBNEIsR0FBdUI7SUFDNUQsS0FBSyxFQUFFLE1BQU07SUFDYixTQUFTLEVBQUUsSUFBSTtJQUNmLFVBQVUsRUFBRSxNQUFNO0lBQ2xCLFNBQVMsRUFBRSxHQUFHO0lBQ2QsU0FBUyxFQUFFLEVBQUU7SUFDYixNQUFNLEVBQUUsQ0FBQztJQUNULFVBQVUsRUFBRSxFQUFFO0NBQ2pCLENBQUM7QUFFRjs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLGNBQWMsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO0FBRWpGLE1BQU0sQ0FBQyxNQUFNLDBCQUEwQixHQUVoQixDQUFDLFFBQXFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDL0QsT0FBTyxFQUFFLG9CQUFvQjtJQUM3QixJQUFJLEVBQUU7UUFDRixDQUFDLElBQUksUUFBUSxFQUFFLEVBQUUsMkJBQTJCLENBQUM7UUFDN0MsQ0FBQyxJQUFJLFFBQVEsRUFBRSxFQUFFLElBQUksUUFBUSxFQUFFLEVBQUUsb0JBQW9CLENBQUM7S0FDekQ7SUFDRCxVQUFVLEVBQUUsa0JBQWtCLENBQUMsUUFBUSxFQUFFLDRCQUE0QixDQUFDO0NBQ3pFLENBQUMsQ0FBQztBQVlILE1BQU0sT0FBTywyQkFBMkI7SUFzQnBDLFlBR3FCLE9BQTJCO1FBQTNCLFlBQU8sR0FBUCxPQUFPLENBQW9CO1FBdkJoRCxVQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUM7UUFHM0IsZUFBVSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDO1FBR3JDLGNBQVMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQztRQUduQyxlQUFVLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUM7UUFHckMsY0FBUyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDO1FBR25DLGNBQVMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQztRQUduQyxXQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7SUFNMUIsQ0FBQzs7eUhBMUJLLDJCQUEyQixrQkF3QnhCLG9CQUFvQjs2R0F4QnZCLDJCQUEyQix1aEJBUHpCO1FBQ1A7WUFDSSxPQUFPLEVBQUUsb0JBQW9CO1lBQzdCLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsMkJBQTJCLENBQUM7U0FDN0Q7S0FDSjs0RkFFUSwyQkFBMkI7a0JBVnZDLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUNKLG1LQUFtSztvQkFDdkssU0FBUyxFQUFFO3dCQUNQOzRCQUNJLE9BQU8sRUFBRSxvQkFBb0I7NEJBQzdCLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLDRCQUE0QixDQUFDO3lCQUM3RDtxQkFDSjtpQkFDSjs7MEJBd0JRLFFBQVE7OzBCQUNSLE1BQU07MkJBQUMsb0JBQW9COzRDQXRCaEMsS0FBSztzQkFESixLQUFLO3VCQUFDLGtCQUFrQjtnQkFJekIsVUFBVTtzQkFEVCxLQUFLO3VCQUFDLHVCQUF1QjtnQkFJOUIsU0FBUztzQkFEUixLQUFLO3VCQUFDLHNCQUFzQjtnQkFJN0IsVUFBVTtzQkFEVCxLQUFLO3VCQUFDLHVCQUF1QjtnQkFJOUIsU0FBUztzQkFEUixLQUFLO3VCQUFDLHNCQUFzQjtnQkFJN0IsU0FBUztzQkFEUixLQUFLO3VCQUFDLHNCQUFzQjtnQkFJN0IsTUFBTTtzQkFETCxLQUFLO3VCQUFDLG1CQUFtQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgRGlyZWN0aXZlLFxuICAgIEZhY3RvcnlQcm92aWRlcixcbiAgICBmb3J3YXJkUmVmLFxuICAgIEluamVjdCxcbiAgICBJbnB1dCxcbiAgICBPcHRpb25hbCxcbiAgICBTa2lwU2VsZixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge3R1aUNyZWF0ZVRva2VufSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7XG4gICAgVHVpRHJvcGRvd25BbGlnbixcbiAgICBUdWlEcm9wZG93bldpZHRoLFxuICAgIFR1aVZlcnRpY2FsRGlyZWN0aW9uLFxufSBmcm9tICdAdGFpZ2EtdWkvY29yZS90eXBlcyc7XG5pbXBvcnQge3R1aU92ZXJyaWRlT3B0aW9uc30gZnJvbSAnQHRhaWdhLXVpL2NvcmUvdXRpbHMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFR1aURyb3Bkb3duT3B0aW9ucyB7XG4gICAgcmVhZG9ubHkgYWxpZ246IFR1aURyb3Bkb3duQWxpZ247XG4gICAgcmVhZG9ubHkgYXBwZWFyYW5jZTogc3RyaW5nO1xuICAgIHJlYWRvbmx5IGRpcmVjdGlvbjogVHVpVmVydGljYWxEaXJlY3Rpb24gfCBudWxsO1xuICAgIHJlYWRvbmx5IGxpbWl0V2lkdGg6IFR1aURyb3Bkb3duV2lkdGg7XG4gICAgcmVhZG9ubHkgbWF4SGVpZ2h0OiBudW1iZXI7XG4gICAgcmVhZG9ubHkgbWluSGVpZ2h0OiBudW1iZXI7XG4gICAgcmVhZG9ubHkgb2Zmc2V0OiBudW1iZXI7XG59XG5cbi8qKiBEZWZhdWx0IHZhbHVlcyBmb3IgZHJvcGRvd24gb3B0aW9ucyAqL1xuZXhwb3J0IGNvbnN0IFRVSV9EUk9QRE9XTl9ERUZBVUxUX09QVElPTlM6IFR1aURyb3Bkb3duT3B0aW9ucyA9IHtcbiAgICBhbGlnbjogJ2xlZnQnLFxuICAgIGRpcmVjdGlvbjogbnVsbCxcbiAgICBsaW1pdFdpZHRoOiAnYXV0bycsXG4gICAgbWF4SGVpZ2h0OiA0MDAsXG4gICAgbWluSGVpZ2h0OiA4MCxcbiAgICBvZmZzZXQ6IDQsXG4gICAgYXBwZWFyYW5jZTogJycsXG59O1xuXG4vKipcbiAqIERlZmF1bHQgcGFyYW1ldGVycyBmb3IgZHJvcGRvd24gZGlyZWN0aXZlXG4gKi9cbmV4cG9ydCBjb25zdCBUVUlfRFJPUERPV05fT1BUSU9OUyA9IHR1aUNyZWF0ZVRva2VuKFRVSV9EUk9QRE9XTl9ERUZBVUxUX09QVElPTlMpO1xuXG5leHBvcnQgY29uc3QgdHVpRHJvcGRvd25PcHRpb25zUHJvdmlkZXI6IChcbiAgICBvcHRpb25zOiBQYXJ0aWFsPFR1aURyb3Bkb3duT3B0aW9ucz4sXG4pID0+IEZhY3RvcnlQcm92aWRlciA9IChvdmVycmlkZTogUGFydGlhbDxUdWlEcm9wZG93bk9wdGlvbnM+KSA9PiAoe1xuICAgIHByb3ZpZGU6IFRVSV9EUk9QRE9XTl9PUFRJT05TLFxuICAgIGRlcHM6IFtcbiAgICAgICAgW25ldyBPcHRpb25hbCgpLCBUdWlEcm9wZG93bk9wdGlvbnNEaXJlY3RpdmVdLFxuICAgICAgICBbbmV3IE9wdGlvbmFsKCksIG5ldyBTa2lwU2VsZigpLCBUVUlfRFJPUERPV05fT1BUSU9OU10sXG4gICAgXSxcbiAgICB1c2VGYWN0b3J5OiB0dWlPdmVycmlkZU9wdGlvbnMob3ZlcnJpZGUsIFRVSV9EUk9QRE9XTl9ERUZBVUxUX09QVElPTlMpLFxufSk7XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOlxuICAgICAgICAnW3R1aURyb3Bkb3duQWxpZ25dLCBbdHVpRHJvcGRvd25BcHBlYXJhbmNlXSwgW3R1aURyb3Bkb3duRGlyZWN0aW9uXSwgW3R1aURyb3Bkb3duTGltaXRXaWR0aF0sIFt0dWlEcm9wZG93bk1pbkhlaWdodF0sIFt0dWlEcm9wZG93bk1heEhlaWdodF0sIFt0dWlEcm9wZG93bk9mZnNldF0nLFxuICAgIHByb3ZpZGVyczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBwcm92aWRlOiBUVUlfRFJPUERPV05fT1BUSU9OUyxcbiAgICAgICAgICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IFR1aURyb3Bkb3duT3B0aW9uc0RpcmVjdGl2ZSksXG4gICAgICAgIH0sXG4gICAgXSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpRHJvcGRvd25PcHRpb25zRGlyZWN0aXZlIGltcGxlbWVudHMgVHVpRHJvcGRvd25PcHRpb25zIHtcbiAgICBASW5wdXQoJ3R1aURyb3Bkb3duQWxpZ24nKVxuICAgIGFsaWduID0gdGhpcy5vcHRpb25zLmFsaWduO1xuXG4gICAgQElucHV0KCd0dWlEcm9wZG93bkFwcGVhcmFuY2UnKVxuICAgIGFwcGVhcmFuY2UgPSB0aGlzLm9wdGlvbnMuYXBwZWFyYW5jZTtcblxuICAgIEBJbnB1dCgndHVpRHJvcGRvd25EaXJlY3Rpb24nKVxuICAgIGRpcmVjdGlvbiA9IHRoaXMub3B0aW9ucy5kaXJlY3Rpb247XG5cbiAgICBASW5wdXQoJ3R1aURyb3Bkb3duTGltaXRXaWR0aCcpXG4gICAgbGltaXRXaWR0aCA9IHRoaXMub3B0aW9ucy5saW1pdFdpZHRoO1xuXG4gICAgQElucHV0KCd0dWlEcm9wZG93bk1pbkhlaWdodCcpXG4gICAgbWluSGVpZ2h0ID0gdGhpcy5vcHRpb25zLm1pbkhlaWdodDtcblxuICAgIEBJbnB1dCgndHVpRHJvcGRvd25NYXhIZWlnaHQnKVxuICAgIG1heEhlaWdodCA9IHRoaXMub3B0aW9ucy5tYXhIZWlnaHQ7XG5cbiAgICBASW5wdXQoJ3R1aURyb3Bkb3duT2Zmc2V0JylcbiAgICBvZmZzZXQgPSB0aGlzLm9wdGlvbnMub2Zmc2V0O1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBTa2lwU2VsZigpXG4gICAgICAgIEBJbmplY3QoVFVJX0RST1BET1dOX09QVElPTlMpXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgb3B0aW9uczogVHVpRHJvcGRvd25PcHRpb25zLFxuICAgICkge31cbn1cbiJdfQ==