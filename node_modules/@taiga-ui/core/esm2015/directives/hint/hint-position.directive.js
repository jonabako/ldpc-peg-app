import { __decorate } from "tslib";
import { Directive, Inject, Input } from '@angular/core';
import { EMPTY_CLIENT_RECT, tuiPure } from '@taiga-ui/cdk';
import { tuiAsPositionAccessor, tuiFallbackRectAccessor, TuiPositionAccessor, TuiRectAccessor, } from '@taiga-ui/core/abstract';
import { TUI_HINT_DIRECTIONS } from '@taiga-ui/core/constants';
import { TUI_VIEWPORT } from '@taiga-ui/core/tokens';
import { TuiHintDirective } from './hint.directive';
import { TUI_HINT_OPTIONS } from './hint-options.directive';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core/abstract";
const OFFSET = 8;
const ARROW_OFFSET = 22;
const TOP = 0;
const LEFT = 1;
export class TuiHintPositionDirective extends TuiPositionAccessor {
    constructor(options, viewport, directive, accessors) {
        super();
        this.options = options;
        this.viewport = viewport;
        this.directive = directive;
        this.accessors = accessors;
        this.points = TUI_HINT_DIRECTIONS.reduce((acc, direction) => (Object.assign(Object.assign({}, acc), { [direction]: [0, 0] })), {});
        this.direction = this.options.direction;
        this.type = 'hint';
    }
    getPosition({ width, height }) {
        var _a, _b;
        const hostRect = (_b = (_a = this.accessor) === null || _a === void 0 ? void 0 : _a.getClientRect()) !== null && _b !== void 0 ? _b : EMPTY_CLIENT_RECT;
        const leftCenter = hostRect.left + hostRect.width / 2;
        const topCenter = hostRect.top + hostRect.height / 2;
        this.points['top-left'][TOP] = hostRect.top - height - OFFSET;
        this.points['top-left'][LEFT] = leftCenter - width + ARROW_OFFSET;
        this.points.top[TOP] = this.points['top-left'][TOP];
        this.points.top[LEFT] = leftCenter - width / 2;
        this.points['top-right'][TOP] = this.points['top-left'][TOP];
        this.points['top-right'][LEFT] = leftCenter - ARROW_OFFSET;
        this.points['bottom-left'][TOP] = hostRect.bottom + OFFSET;
        this.points['bottom-left'][LEFT] = this.points['top-left'][LEFT];
        this.points.bottom[TOP] = this.points['bottom-left'][TOP];
        this.points.bottom[LEFT] = this.points.top[LEFT];
        this.points['bottom-right'][TOP] = this.points['bottom-left'][TOP];
        this.points['bottom-right'][LEFT] = this.points['top-right'][LEFT];
        this.points['left-top'][TOP] = topCenter - height + ARROW_OFFSET;
        this.points['left-top'][LEFT] = hostRect.left - width - OFFSET;
        this.points.left[TOP] = topCenter - height / 2;
        this.points.left[LEFT] = this.points['left-top'][LEFT];
        this.points['left-bottom'][TOP] = topCenter - ARROW_OFFSET;
        this.points['left-bottom'][LEFT] = this.points['left-top'][LEFT];
        this.points['right-top'][TOP] = this.points['left-top'][TOP];
        this.points['right-top'][LEFT] = hostRect.right + OFFSET;
        this.points.right[TOP] = this.points.left[TOP];
        this.points.right[LEFT] = this.points['right-top'][LEFT];
        this.points['right-bottom'][TOP] = this.points['left-bottom'][TOP];
        this.points['right-bottom'][LEFT] = this.points['right-top'][LEFT];
        if (this.checkPosition(this.points[this.direction], width, height)) {
            return this.points[this.direction];
        }
        const direction = TUI_HINT_DIRECTIONS.find(direction => this.checkPosition(this.points[direction], width, height));
        return this.points[direction || this.fallback];
    }
    get accessor() {
        return tuiFallbackRectAccessor('hint')(this.accessors, this.directive);
    }
    get fallback() {
        return this.points.top[TOP] >
            this.viewport.getClientRect().bottom - this.points.bottom[TOP]
            ? 'top'
            : 'bottom';
    }
    checkPosition([top, left], width, height) {
        const viewport = this.viewport.getClientRect();
        return (top > OFFSET &&
            left > OFFSET &&
            top + height < viewport.bottom - OFFSET &&
            left + width < viewport.right - OFFSET);
    }
}
TuiHintPositionDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiHintPositionDirective, deps: [{ token: TUI_HINT_OPTIONS }, { token: TUI_VIEWPORT }, { token: TuiHintDirective }, { token: TuiRectAccessor }], target: i0.ɵɵFactoryTarget.Directive });
TuiHintPositionDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiHintPositionDirective, selector: "[tuiHint]:not([tuiHintCustomPosition]):not(ng-container):not(ng-template)", inputs: { direction: ["tuiHintDirection", "direction"] }, providers: [tuiAsPositionAccessor(TuiHintPositionDirective)], usesInheritance: true, ngImport: i0 });
__decorate([
    tuiPure
], TuiHintPositionDirective.prototype, "accessor", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiHintPositionDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiHint]:not([tuiHintCustomPosition]):not(ng-container):not(ng-template)',
                    providers: [tuiAsPositionAccessor(TuiHintPositionDirective)],
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_HINT_OPTIONS]
                }] }, { type: i1.TuiRectAccessor, decorators: [{
                    type: Inject,
                    args: [TUI_VIEWPORT]
                }] }, { type: i1.TuiRectAccessor, decorators: [{
                    type: Inject,
                    args: [TuiHintDirective]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TuiRectAccessor]
                }] }]; }, propDecorators: { direction: [{
                type: Input,
                args: ['tuiHintDirection']
            }], accessor: [] } });
//# sourceMappingURL=data:application/json;base64,