import { __decorate } from "tslib";
import { DOCUMENT } from '@angular/common';
import { Directive, ElementRef, Inject, Input, NgZone } from '@angular/core';
import { tuiIfMap, tuiIsNativeFocused, tuiIsPresent, tuiPure, tuiTypedFromEvent, tuiZoneOptimized, } from '@taiga-ui/cdk';
import { tuiAsDriver, TuiDriver } from '@taiga-ui/core/abstract';
import { merge, of, ReplaySubject, timer } from 'rxjs';
import { debounce, distinctUntilChanged, map, skip, startWith, switchMap, } from 'rxjs/operators';
import * as i0 from "@angular/core";
export class TuiHintDescribeDirective extends TuiDriver {
    constructor(zone, doc, el) {
        super(subscriber => this.stream$.subscribe(subscriber));
        this.zone = zone;
        this.doc = doc;
        this.el = el;
        this.id$ = new ReplaySubject(1);
        this.stream$ = this.id$.pipe(tuiIfMap(() => tuiTypedFromEvent(this.doc, 'keydown', {
            capture: true,
        }), tuiIsPresent), switchMap(() => this.focused
            ? of(false)
            : merge(tuiTypedFromEvent(this.doc, 'keyup'), tuiTypedFromEvent(this.element, 'blur')).pipe(map(() => this.focused))), debounce(visible => (visible ? timer(1000) : of(null))), startWith(false), distinctUntilChanged(), skip(1), tuiZoneOptimized(this.zone));
        this.tuiHintDescribe = '';
        this.type = 'hint';
    }
    ngOnChanges() {
        this.id$.next(this.tuiHintDescribe);
    }
    get focused() {
        return tuiIsNativeFocused(this.element);
    }
    get element() {
        return (this.doc.getElementById(this.tuiHintDescribe || '') || this.el.nativeElement);
    }
}
TuiHintDescribeDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiHintDescribeDirective, deps: [{ token: NgZone }, { token: DOCUMENT }, { token: ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
TuiHintDescribeDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiHintDescribeDirective, selector: "[tuiHintDescribe]", inputs: { tuiHintDescribe: "tuiHintDescribe" }, providers: [tuiAsDriver(TuiHintDescribeDirective)], usesInheritance: true, usesOnChanges: true, ngImport: i0 });
__decorate([
    tuiPure
], TuiHintDescribeDirective.prototype, "element", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiHintDescribeDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiHintDescribe]',
                    providers: [tuiAsDriver(TuiHintDescribeDirective)],
                }]
        }], ctorParameters: function () { return [{ type: i0.NgZone, decorators: [{
                    type: Inject,
                    args: [NgZone]
                }] }, { type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }]; }, propDecorators: { tuiHintDescribe: [{
                type: Input
            }], element: [] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGludC1kZXNjcmliZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlL2RpcmVjdGl2ZXMvaGludC9oaW50LWRlc2NyaWJlLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQ3pDLE9BQU8sRUFBQyxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFZLE1BQU0sZUFBZSxDQUFDO0FBQ3RGLE9BQU8sRUFDSCxRQUFRLEVBQ1Isa0JBQWtCLEVBQ2xCLFlBQVksRUFDWixPQUFPLEVBQ1AsaUJBQWlCLEVBQ2pCLGdCQUFnQixHQUNuQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUMsV0FBVyxFQUFFLFNBQVMsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBQy9ELE9BQU8sRUFBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLGFBQWEsRUFBRSxLQUFLLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDckQsT0FBTyxFQUNILFFBQVEsRUFDUixvQkFBb0IsRUFDcEIsR0FBRyxFQUNILElBQUksRUFDSixTQUFTLEVBQ1QsU0FBUyxHQUNaLE1BQU0sZ0JBQWdCLENBQUM7O0FBTXhCLE1BQU0sT0FBTyx3QkFBeUIsU0FBUSxTQUFTO0lBK0JuRCxZQUNxQyxJQUFZLEVBQ1YsR0FBYSxFQUNYLEVBQTJCO1FBRWhFLEtBQUssQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFKdkIsU0FBSSxHQUFKLElBQUksQ0FBUTtRQUNWLFFBQUcsR0FBSCxHQUFHLENBQVU7UUFDWCxPQUFFLEdBQUYsRUFBRSxDQUF5QjtRQWpDbkQsUUFBRyxHQUFHLElBQUksYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRTNCLFlBQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FDcEMsUUFBUSxDQUNKLEdBQUcsRUFBRSxDQUNELGlCQUFpQixDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsU0FBUyxFQUFFO1lBQ25DLE9BQU8sRUFBRSxJQUFJO1NBQ2hCLENBQUMsRUFDTixZQUFZLENBQ2YsRUFDRCxTQUFTLENBQUMsR0FBRyxFQUFFLENBQ1gsSUFBSSxDQUFDLE9BQU87WUFDUixDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQztZQUNYLENBQUMsQ0FBQyxLQUFLLENBQ0QsaUJBQWlCLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsRUFDcEMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FDMUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUN4QyxFQUNELFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQ3ZELFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFDaEIsb0JBQW9CLEVBQUUsRUFDdEIsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUNQLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FDOUIsQ0FBQztRQUdGLG9CQUFlLEdBQXVCLEVBQUUsQ0FBQztRQUVoQyxTQUFJLEdBQUcsTUFBTSxDQUFDO0lBUXZCLENBQUM7SUFFRCxXQUFXO1FBQ1AsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFFRCxJQUFZLE9BQU87UUFDZixPQUFPLGtCQUFrQixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBR0QsSUFBWSxPQUFPO1FBQ2YsT0FBTyxDQUNILElBQUksQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxlQUFlLElBQUksRUFBRSxDQUFDLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQy9FLENBQUM7SUFDTixDQUFDOztzSEFwRFEsd0JBQXdCLGtCQWdDckIsTUFBTSxhQUNOLFFBQVEsYUFDUixVQUFVOzBHQWxDYix3QkFBd0IsNEZBRnRCLENBQUMsV0FBVyxDQUFDLHdCQUF3QixDQUFDLENBQUM7QUFrRGxEO0lBREMsT0FBTzt1REFLUDs0RkFwRFEsd0JBQXdCO2tCQUpwQyxTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSxtQkFBbUI7b0JBQzdCLFNBQVMsRUFBRSxDQUFDLFdBQVcsMEJBQTBCLENBQUM7aUJBQ3JEOzswQkFpQ1EsTUFBTTsyQkFBQyxNQUFNOzhCQUMwQixRQUFROzBCQUEvQyxNQUFNOzJCQUFDLFFBQVE7OzBCQUNmLE1BQU07MkJBQUMsVUFBVTs0Q0FQdEIsZUFBZTtzQkFEZCxLQUFLO2dCQXNCTSxPQUFPIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtET0NVTUVOVH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7RGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbmplY3QsIElucHV0LCBOZ1pvbmUsIE9uQ2hhbmdlc30gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICAgIHR1aUlmTWFwLFxuICAgIHR1aUlzTmF0aXZlRm9jdXNlZCxcbiAgICB0dWlJc1ByZXNlbnQsXG4gICAgdHVpUHVyZSxcbiAgICB0dWlUeXBlZEZyb21FdmVudCxcbiAgICB0dWlab25lT3B0aW1pemVkLFxufSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7dHVpQXNEcml2ZXIsIFR1aURyaXZlcn0gZnJvbSAnQHRhaWdhLXVpL2NvcmUvYWJzdHJhY3QnO1xuaW1wb3J0IHttZXJnZSwgb2YsIFJlcGxheVN1YmplY3QsIHRpbWVyfSBmcm9tICdyeGpzJztcbmltcG9ydCB7XG4gICAgZGVib3VuY2UsXG4gICAgZGlzdGluY3RVbnRpbENoYW5nZWQsXG4gICAgbWFwLFxuICAgIHNraXAsXG4gICAgc3RhcnRXaXRoLFxuICAgIHN3aXRjaE1hcCxcbn0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1t0dWlIaW50RGVzY3JpYmVdJyxcbiAgICBwcm92aWRlcnM6IFt0dWlBc0RyaXZlcihUdWlIaW50RGVzY3JpYmVEaXJlY3RpdmUpXSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpSGludERlc2NyaWJlRGlyZWN0aXZlIGV4dGVuZHMgVHVpRHJpdmVyIGltcGxlbWVudHMgT25DaGFuZ2VzIHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGlkJCA9IG5ldyBSZXBsYXlTdWJqZWN0KDEpO1xuXG4gICAgcHJpdmF0ZSByZWFkb25seSBzdHJlYW0kID0gdGhpcy5pZCQucGlwZShcbiAgICAgICAgdHVpSWZNYXAoXG4gICAgICAgICAgICAoKSA9PlxuICAgICAgICAgICAgICAgIHR1aVR5cGVkRnJvbUV2ZW50KHRoaXMuZG9jLCAna2V5ZG93bicsIHtcbiAgICAgICAgICAgICAgICAgICAgY2FwdHVyZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHR1aUlzUHJlc2VudCxcbiAgICAgICAgKSxcbiAgICAgICAgc3dpdGNoTWFwKCgpID0+XG4gICAgICAgICAgICB0aGlzLmZvY3VzZWRcbiAgICAgICAgICAgICAgICA/IG9mKGZhbHNlKVxuICAgICAgICAgICAgICAgIDogbWVyZ2UoXG4gICAgICAgICAgICAgICAgICAgICAgdHVpVHlwZWRGcm9tRXZlbnQodGhpcy5kb2MsICdrZXl1cCcpLFxuICAgICAgICAgICAgICAgICAgICAgIHR1aVR5cGVkRnJvbUV2ZW50KHRoaXMuZWxlbWVudCwgJ2JsdXInKSxcbiAgICAgICAgICAgICAgICAgICkucGlwZShtYXAoKCkgPT4gdGhpcy5mb2N1c2VkKSksXG4gICAgICAgICksXG4gICAgICAgIGRlYm91bmNlKHZpc2libGUgPT4gKHZpc2libGUgPyB0aW1lcigxMDAwKSA6IG9mKG51bGwpKSksXG4gICAgICAgIHN0YXJ0V2l0aChmYWxzZSksXG4gICAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKCksXG4gICAgICAgIHNraXAoMSksXG4gICAgICAgIHR1aVpvbmVPcHRpbWl6ZWQodGhpcy56b25lKSxcbiAgICApO1xuXG4gICAgQElucHV0KClcbiAgICB0dWlIaW50RGVzY3JpYmU6IHN0cmluZyB8ICcnIHwgbnVsbCA9ICcnO1xuXG4gICAgcmVhZG9ubHkgdHlwZSA9ICdoaW50JztcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KE5nWm9uZSkgcHJpdmF0ZSByZWFkb25seSB6b25lOiBOZ1pvbmUsXG4gICAgICAgIEBJbmplY3QoRE9DVU1FTlQpIHByaXZhdGUgcmVhZG9ubHkgZG9jOiBEb2N1bWVudCxcbiAgICAgICAgQEluamVjdChFbGVtZW50UmVmKSBwcml2YXRlIHJlYWRvbmx5IGVsOiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PixcbiAgICApIHtcbiAgICAgICAgc3VwZXIoc3Vic2NyaWJlciA9PiB0aGlzLnN0cmVhbSQuc3Vic2NyaWJlKHN1YnNjcmliZXIpKTtcbiAgICB9XG5cbiAgICBuZ09uQ2hhbmdlcygpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5pZCQubmV4dCh0aGlzLnR1aUhpbnREZXNjcmliZSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXQgZm9jdXNlZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHR1aUlzTmF0aXZlRm9jdXNlZCh0aGlzLmVsZW1lbnQpO1xuICAgIH1cblxuICAgIEB0dWlQdXJlXG4gICAgcHJpdmF0ZSBnZXQgZWxlbWVudCgpOiBIVE1MRWxlbWVudCB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICB0aGlzLmRvYy5nZXRFbGVtZW50QnlJZCh0aGlzLnR1aUhpbnREZXNjcmliZSB8fCAnJykgfHwgdGhpcy5lbC5uYXRpdmVFbGVtZW50XG4gICAgICAgICk7XG4gICAgfVxufVxuIl19