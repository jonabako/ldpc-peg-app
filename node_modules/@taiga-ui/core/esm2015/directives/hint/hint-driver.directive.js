import { Directive, Inject, Self } from '@angular/core';
import { TuiDestroyService } from '@taiga-ui/cdk';
import { AbstractTuiDriverDirective, TuiDriver, TuiVehicle } from '@taiga-ui/core/abstract';
import * as i0 from "@angular/core";
import * as i1 from "rxjs";
export class TuiHintDriverDirective extends AbstractTuiDriverDirective {
    // TODO: Figure out why this is necessary under nx test runner
    constructor(destroy$, drivers, vehicles) {
        super(destroy$, drivers, vehicles);
        this.type = 'hint';
    }
}
TuiHintDriverDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiHintDriverDirective, deps: [{ token: TuiDestroyService, self: true }, { token: TuiDriver }, { token: TuiVehicle }], target: i0.ɵɵFactoryTarget.Directive });
TuiHintDriverDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiHintDriverDirective, selector: "[tuiHint]:not(ng-container):not(ng-template)", providers: [TuiDestroyService], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiHintDriverDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiHint]:not(ng-container):not(ng-template)',
                    providers: [TuiDestroyService],
                }]
        }], ctorParameters: function () { return [{ type: i1.Observable, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiDestroyService]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TuiDriver]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TuiVehicle]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGludC1kcml2ZXIuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY29yZS9kaXJlY3RpdmVzL2hpbnQvaGludC1kcml2ZXIuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN0RCxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDaEQsT0FBTyxFQUFDLDBCQUEwQixFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQzs7O0FBTzFGLE1BQU0sT0FBTyxzQkFBdUIsU0FBUSwwQkFBMEI7SUFHbEUsOERBQThEO0lBQzlELFlBQ3VDLFFBQTZCLEVBQzdDLE9BQW9CLEVBQ25CLFFBQXNCO1FBRTFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBUjlCLFNBQUksR0FBRyxNQUFNLENBQUM7SUFTdkIsQ0FBQzs7b0hBVlEsc0JBQXNCLGtCQUtYLGlCQUFpQix5QkFDekIsU0FBUyxhQUNULFVBQVU7d0dBUGIsc0JBQXNCLHVFQUZwQixDQUFDLGlCQUFpQixDQUFDOzRGQUVyQixzQkFBc0I7a0JBSmxDLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLDhDQUE4QztvQkFDeEQsU0FBUyxFQUFFLENBQUMsaUJBQWlCLENBQUM7aUJBQ2pDOzswQkFNUSxJQUFJOzswQkFBSSxNQUFNOzJCQUFDLGlCQUFpQjs7MEJBQ2hDLE1BQU07MkJBQUMsU0FBUzs7MEJBQ2hCLE1BQU07MkJBQUMsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGlyZWN0aXZlLCBJbmplY3QsIFNlbGZ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtUdWlEZXN0cm95U2VydmljZX0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge0Fic3RyYWN0VHVpRHJpdmVyRGlyZWN0aXZlLCBUdWlEcml2ZXIsIFR1aVZlaGljbGV9IGZyb20gJ0B0YWlnYS11aS9jb3JlL2Fic3RyYWN0JztcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW3R1aUhpbnRdOm5vdChuZy1jb250YWluZXIpOm5vdChuZy10ZW1wbGF0ZSknLFxuICAgIHByb3ZpZGVyczogW1R1aURlc3Ryb3lTZXJ2aWNlXSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpSGludERyaXZlckRpcmVjdGl2ZSBleHRlbmRzIEFic3RyYWN0VHVpRHJpdmVyRGlyZWN0aXZlIHtcbiAgICByZWFkb25seSB0eXBlID0gJ2hpbnQnO1xuXG4gICAgLy8gVE9ETzogRmlndXJlIG91dCB3aHkgdGhpcyBpcyBuZWNlc3NhcnkgdW5kZXIgbnggdGVzdCBydW5uZXJcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQFNlbGYoKSBASW5qZWN0KFR1aURlc3Ryb3lTZXJ2aWNlKSBkZXN0cm95JDogT2JzZXJ2YWJsZTx1bmtub3duPixcbiAgICAgICAgQEluamVjdChUdWlEcml2ZXIpIGRyaXZlcnM6IFR1aURyaXZlcltdLFxuICAgICAgICBASW5qZWN0KFR1aVZlaGljbGUpIHZlaGljbGVzOiBUdWlWZWhpY2xlW10sXG4gICAgKSB7XG4gICAgICAgIHN1cGVyKGRlc3Ryb3kkLCBkcml2ZXJzLCB2ZWhpY2xlcyk7XG4gICAgfVxufVxuIl19