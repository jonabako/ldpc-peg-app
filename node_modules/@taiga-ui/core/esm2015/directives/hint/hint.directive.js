import { Directive, ElementRef, Inject, INJECTOR, Input, Optional, } from '@angular/core';
import { TuiActiveZoneDirective } from '@taiga-ui/cdk';
import { tuiAsRectAccessor, tuiAsVehicle, } from '@taiga-ui/core/abstract';
import { TuiHintService } from '@taiga-ui/core/services';
import { PolymorpheusComponent } from '@tinkoff/ng-polymorpheus';
import { TUI_HINT_COMPONENT } from './hint.providers';
import { TUI_HINT_OPTIONS } from './hint-options.directive';
import * as i0 from "@angular/core";
import * as i1 from "@tinkoff/ng-polymorpheus";
import * as i2 from "@taiga-ui/core/services";
import * as i3 from "@taiga-ui/cdk";
export class TuiHintDirective {
    constructor(el, component, hintService, options, activeZone) {
        this.el = el;
        this.component = component;
        this.hintService = hintService;
        this.options = options;
        this.activeZone = activeZone;
        this.tuiHintAppearance = null;
        this.type = 'hint';
    }
    get appearance() {
        var _a;
        return (_a = this.tuiHintAppearance) !== null && _a !== void 0 ? _a : this.options.appearance;
    }
    ngOnChanges() {
        if (!this.content) {
            this.toggle(false);
        }
    }
    ngOnDestroy() {
        this.toggle(false);
    }
    getClientRect() {
        return this.el.nativeElement.getBoundingClientRect();
    }
    toggle(show) {
        if (show && this.content) {
            this.hintService.add(this);
        }
        else {
            this.hintService.remove(this);
        }
    }
}
TuiHintDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiHintDirective, deps: [{ token: ElementRef }, { token: PolymorpheusComponent }, { token: TuiHintService }, { token: TUI_HINT_OPTIONS }, { token: TuiActiveZoneDirective, optional: true }], target: i0.ɵɵFactoryTarget.Directive });
TuiHintDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiHintDirective, selector: "[tuiHint]:not(ng-container):not(ng-template)", inputs: { content: ["tuiHint", "content"], context: ["tuiHintContext", "context"], tuiHintAppearance: "tuiHintAppearance" }, providers: [
        tuiAsRectAccessor(TuiHintDirective),
        tuiAsVehicle(TuiHintDirective),
        {
            provide: PolymorpheusComponent,
            deps: [TUI_HINT_COMPONENT, INJECTOR],
            useClass: PolymorpheusComponent,
        },
    ], usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiHintDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiHint]:not(ng-container):not(ng-template)',
                    providers: [
                        tuiAsRectAccessor(TuiHintDirective),
                        tuiAsVehicle(TuiHintDirective),
                        {
                            provide: PolymorpheusComponent,
                            deps: [TUI_HINT_COMPONENT, INJECTOR],
                            useClass: PolymorpheusComponent,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: i1.PolymorpheusComponent, decorators: [{
                    type: Inject,
                    args: [PolymorpheusComponent]
                }] }, { type: i2.TuiHintService, decorators: [{
                    type: Inject,
                    args: [TuiHintService]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_HINT_OPTIONS]
                }] }, { type: i3.TuiActiveZoneDirective, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TuiActiveZoneDirective]
                }] }]; }, propDecorators: { content: [{
                type: Input,
                args: ['tuiHint']
            }], context: [{
                type: Input,
                args: ['tuiHintContext']
            }], tuiHintAppearance: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGludC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlL2RpcmVjdGl2ZXMvaGludC9oaW50LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0gsU0FBUyxFQUNULFVBQVUsRUFDVixNQUFNLEVBQ04sUUFBUSxFQUNSLEtBQUssRUFHTCxRQUFRLEdBQ1gsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFDLHNCQUFzQixFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3JELE9BQU8sRUFDSCxpQkFBaUIsRUFDakIsWUFBWSxHQUdmLE1BQU0seUJBQXlCLENBQUM7QUFFakMsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBQ3ZELE9BQU8sRUFBQyxxQkFBcUIsRUFBc0IsTUFBTSwwQkFBMEIsQ0FBQztBQUVwRixPQUFPLEVBQUMsa0JBQWtCLEVBQUMsTUFBTSxrQkFBa0IsQ0FBQztBQUNwRCxPQUFPLEVBQUMsZ0JBQWdCLEVBQWlCLE1BQU0sMEJBQTBCLENBQUM7Ozs7O0FBYzFFLE1BQU0sT0FBTyxnQkFBZ0I7SUFjekIsWUFDeUMsRUFBMkIsRUFDMUIsU0FBeUMsRUFDdEMsV0FBMkIsRUFDekIsT0FBdUIsRUFHekQsVUFBMEM7UUFOZCxPQUFFLEdBQUYsRUFBRSxDQUF5QjtRQUMxQixjQUFTLEdBQVQsU0FBUyxDQUFnQztRQUN0QyxnQkFBVyxHQUFYLFdBQVcsQ0FBZ0I7UUFDekIsWUFBTyxHQUFQLE9BQU8sQ0FBZ0I7UUFHekQsZUFBVSxHQUFWLFVBQVUsQ0FBZ0M7UUFYdkQsc0JBQWlCLEdBQWtCLElBQUksQ0FBQztRQUUvQixTQUFJLEdBQUcsTUFBTSxDQUFDO0lBVXBCLENBQUM7SUFFSixJQUFJLFVBQVU7O1FBQ1YsT0FBTyxNQUFBLElBQUksQ0FBQyxpQkFBaUIsbUNBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUM7SUFDN0QsQ0FBQztJQUVELFdBQVc7UUFDUCxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNmLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDdEI7SUFDTCxDQUFDO0lBRUQsV0FBVztRQUNQLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdkIsQ0FBQztJQUVELGFBQWE7UUFDVCxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLHFCQUFxQixFQUFFLENBQUM7SUFDekQsQ0FBQztJQUVELE1BQU0sQ0FBQyxJQUFhO1FBQ2hCLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDdEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDOUI7YUFBTTtZQUNILElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ2pDO0lBQ0wsQ0FBQzs7OEdBaERRLGdCQUFnQixrQkFlYixVQUFVLGFBQ1YscUJBQXFCLGFBQ3JCLGNBQWMsYUFDZCxnQkFBZ0IsYUFFaEIsc0JBQXNCO2tHQXBCekIsZ0JBQWdCLG9NQVZkO1FBQ1AsaUJBQWlCLENBQUMsZ0JBQWdCLENBQUM7UUFDbkMsWUFBWSxDQUFDLGdCQUFnQixDQUFDO1FBQzlCO1lBQ0ksT0FBTyxFQUFFLHFCQUFxQjtZQUM5QixJQUFJLEVBQUUsQ0FBQyxrQkFBa0IsRUFBRSxRQUFRLENBQUM7WUFDcEMsUUFBUSxFQUFFLHFCQUFxQjtTQUNsQztLQUNKOzRGQUVRLGdCQUFnQjtrQkFaNUIsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsOENBQThDO29CQUN4RCxTQUFTLEVBQUU7d0JBQ1AsaUJBQWlCLGtCQUFrQjt3QkFDbkMsWUFBWSxrQkFBa0I7d0JBQzlCOzRCQUNJLE9BQU8sRUFBRSxxQkFBcUI7NEJBQzlCLElBQUksRUFBRSxDQUFDLGtCQUFrQixFQUFFLFFBQVEsQ0FBQzs0QkFDcEMsUUFBUSxFQUFFLHFCQUFxQjt5QkFDbEM7cUJBQ0o7aUJBQ0o7OzBCQWdCUSxNQUFNOzJCQUFDLFVBQVU7OzBCQUNqQixNQUFNOzJCQUFDLHFCQUFxQjs7MEJBQzVCLE1BQU07MkJBQUMsY0FBYzs7MEJBQ3JCLE1BQU07MkJBQUMsZ0JBQWdCOzswQkFDdkIsUUFBUTs7MEJBQ1IsTUFBTTsyQkFBQyxzQkFBc0I7NENBaEJsQyxPQUFPO3NCQUROLEtBQUs7dUJBQUMsU0FBUztnQkFJaEIsT0FBTztzQkFETixLQUFLO3VCQUFDLGdCQUFnQjtnQkFJdkIsaUJBQWlCO3NCQURoQixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBEaXJlY3RpdmUsXG4gICAgRWxlbWVudFJlZixcbiAgICBJbmplY3QsXG4gICAgSU5KRUNUT1IsXG4gICAgSW5wdXQsXG4gICAgT25DaGFuZ2VzLFxuICAgIE9uRGVzdHJveSxcbiAgICBPcHRpb25hbCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1R1aUFjdGl2ZVpvbmVEaXJlY3RpdmV9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtcbiAgICB0dWlBc1JlY3RBY2Nlc3NvcixcbiAgICB0dWlBc1ZlaGljbGUsXG4gICAgVHVpUmVjdEFjY2Vzc29yLFxuICAgIFR1aVZlaGljbGUsXG59IGZyb20gJ0B0YWlnYS11aS9jb3JlL2Fic3RyYWN0JztcbmltcG9ydCB7VHVpUG9ydGFsSXRlbX0gZnJvbSAnQHRhaWdhLXVpL2NvcmUvaW50ZXJmYWNlcyc7XG5pbXBvcnQge1R1aUhpbnRTZXJ2aWNlfSBmcm9tICdAdGFpZ2EtdWkvY29yZS9zZXJ2aWNlcyc7XG5pbXBvcnQge1BvbHltb3JwaGV1c0NvbXBvbmVudCwgUG9seW1vcnBoZXVzQ29udGVudH0gZnJvbSAnQHRpbmtvZmYvbmctcG9seW1vcnBoZXVzJztcblxuaW1wb3J0IHtUVUlfSElOVF9DT01QT05FTlR9IGZyb20gJy4vaGludC5wcm92aWRlcnMnO1xuaW1wb3J0IHtUVUlfSElOVF9PUFRJT05TLCBUdWlIaW50T3B0aW9uc30gZnJvbSAnLi9oaW50LW9wdGlvbnMuZGlyZWN0aXZlJztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbdHVpSGludF06bm90KG5nLWNvbnRhaW5lcik6bm90KG5nLXRlbXBsYXRlKScsXG4gICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHR1aUFzUmVjdEFjY2Vzc29yKFR1aUhpbnREaXJlY3RpdmUpLFxuICAgICAgICB0dWlBc1ZlaGljbGUoVHVpSGludERpcmVjdGl2ZSksXG4gICAgICAgIHtcbiAgICAgICAgICAgIHByb3ZpZGU6IFBvbHltb3JwaGV1c0NvbXBvbmVudCxcbiAgICAgICAgICAgIGRlcHM6IFtUVUlfSElOVF9DT01QT05FTlQsIElOSkVDVE9SXSxcbiAgICAgICAgICAgIHVzZUNsYXNzOiBQb2x5bW9ycGhldXNDb21wb25lbnQsXG4gICAgICAgIH0sXG4gICAgXSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpSGludERpcmVjdGl2ZTxDPlxuICAgIGltcGxlbWVudHMgT25EZXN0cm95LCBPbkNoYW5nZXMsIFR1aVBvcnRhbEl0ZW08Qz4sIFR1aVJlY3RBY2Nlc3NvciwgVHVpVmVoaWNsZVxue1xuICAgIEBJbnB1dCgndHVpSGludCcpXG4gICAgY29udGVudDogUG9seW1vcnBoZXVzQ29udGVudDxDPjtcblxuICAgIEBJbnB1dCgndHVpSGludENvbnRleHQnKVxuICAgIGNvbnRleHQ/OiBDO1xuXG4gICAgQElucHV0KClcbiAgICB0dWlIaW50QXBwZWFyYW5jZTogc3RyaW5nIHwgbnVsbCA9IG51bGw7XG5cbiAgICByZWFkb25seSB0eXBlID0gJ2hpbnQnO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoRWxlbWVudFJlZikgcHJpdmF0ZSByZWFkb25seSBlbDogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4sXG4gICAgICAgIEBJbmplY3QoUG9seW1vcnBoZXVzQ29tcG9uZW50KSBwdWJsaWMgY29tcG9uZW50OiBQb2x5bW9ycGhldXNDb21wb25lbnQ8dW5rbm93bj4sXG4gICAgICAgIEBJbmplY3QoVHVpSGludFNlcnZpY2UpIHByaXZhdGUgcmVhZG9ubHkgaGludFNlcnZpY2U6IFR1aUhpbnRTZXJ2aWNlLFxuICAgICAgICBASW5qZWN0KFRVSV9ISU5UX09QVElPTlMpIHByaXZhdGUgcmVhZG9ubHkgb3B0aW9uczogVHVpSGludE9wdGlvbnMsXG4gICAgICAgIEBPcHRpb25hbCgpXG4gICAgICAgIEBJbmplY3QoVHVpQWN0aXZlWm9uZURpcmVjdGl2ZSlcbiAgICAgICAgcmVhZG9ubHkgYWN0aXZlWm9uZT86IFR1aUFjdGl2ZVpvbmVEaXJlY3RpdmUgfCBudWxsLFxuICAgICkge31cblxuICAgIGdldCBhcHBlYXJhbmNlKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLnR1aUhpbnRBcHBlYXJhbmNlID8/IHRoaXMub3B0aW9ucy5hcHBlYXJhbmNlO1xuICAgIH1cblxuICAgIG5nT25DaGFuZ2VzKCk6IHZvaWQge1xuICAgICAgICBpZiAoIXRoaXMuY29udGVudCkge1xuICAgICAgICAgICAgdGhpcy50b2dnbGUoZmFsc2UpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgICAgIHRoaXMudG9nZ2xlKGZhbHNlKTtcbiAgICB9XG5cbiAgICBnZXRDbGllbnRSZWN0KCk6IENsaWVudFJlY3Qge1xuICAgICAgICByZXR1cm4gdGhpcy5lbC5uYXRpdmVFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIH1cblxuICAgIHRvZ2dsZShzaG93OiBib29sZWFuKTogdm9pZCB7XG4gICAgICAgIGlmIChzaG93ICYmIHRoaXMuY29udGVudCkge1xuICAgICAgICAgICAgdGhpcy5oaW50U2VydmljZS5hZGQodGhpcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmhpbnRTZXJ2aWNlLnJlbW92ZSh0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==