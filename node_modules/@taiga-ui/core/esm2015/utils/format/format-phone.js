import { CHAR_PLUS } from '@taiga-ui/cdk';
/**
 * TODO: delete in v4.0
 * @deprecated Use {@link https://maskito.dev/core-concepts/transformer maskitoTransform} instead<br/>
 * @example
 * import {maskitoTransform} from '@maskito/core';
 *
 * const mask = {
 *     mask: ['+', '1', ' ', /\d/, /\d/, /\d/, ')', ' ', /\d/, /\d/, /\d/, '-', /\d/, /\d/, /\d/, /\d/],
 * };
 * maskitoTransform('12125552368', mask); // +1 (212) 555-2368
 * ___
 * Formats a string with the phone format +7XXXXXXXXXXXX or XXXXXXXXXXXX,
 * adding parentheses and hyphens.
 *
 * @param value the input string
 * @param countryCode a country code
 * @param phoneMask a phone number mask
 * @return the formatted phone string of the form +7 XXX XXX-XX-XX
 */
export function tuiFormatPhone(value, countryCode, phoneMask) {
    if (!value) {
        return '';
    }
    let result = countryCode;
    countryCode = countryCode.replace(/[()]/g, '');
    if (!value.startsWith(countryCode)) {
        value = countryCode + value.replace(CHAR_PLUS, '');
    }
    const splitPhoneMask = phoneMask.split('');
    const splitValue = value.slice(countryCode.length).split('');
    result += ' ';
    if (splitValue.length === 0) {
        return result;
    }
    for (const mask of splitPhoneMask) {
        if (splitValue.length === 0) {
            break;
        }
        if (mask === '#') {
            result += splitValue[0] || '';
            splitValue.splice(0, 1);
        }
        else {
            result += mask;
        }
    }
    return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWF0LXBob25lLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY29yZS91dGlscy9mb3JtYXQvZm9ybWF0LXBob25lLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFeEM7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQWtCRztBQUNILE1BQU0sVUFBVSxjQUFjLENBQzFCLEtBQWEsRUFDYixXQUFtQixFQUNuQixTQUFpQjtJQUVqQixJQUFJLENBQUMsS0FBSyxFQUFFO1FBQ1IsT0FBTyxFQUFFLENBQUM7S0FDYjtJQUVELElBQUksTUFBTSxHQUFHLFdBQVcsQ0FBQztJQUV6QixXQUFXLEdBQUcsV0FBVyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFFL0MsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLEVBQUU7UUFDaEMsS0FBSyxHQUFHLFdBQVcsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQztLQUN0RDtJQUVELE1BQU0sY0FBYyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDM0MsTUFBTSxVQUFVLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRTdELE1BQU0sSUFBSSxHQUFHLENBQUM7SUFFZCxJQUFJLFVBQVUsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQ3pCLE9BQU8sTUFBTSxDQUFDO0tBQ2pCO0lBRUQsS0FBSyxNQUFNLElBQUksSUFBSSxjQUFjLEVBQUU7UUFDL0IsSUFBSSxVQUFVLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUN6QixNQUFNO1NBQ1Q7UUFFRCxJQUFJLElBQUksS0FBSyxHQUFHLEVBQUU7WUFDZCxNQUFNLElBQUksVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUM5QixVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztTQUMzQjthQUFNO1lBQ0gsTUFBTSxJQUFJLElBQUksQ0FBQztTQUNsQjtLQUNKO0lBRUQsT0FBTyxNQUFNLENBQUM7QUFDbEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q0hBUl9QTFVTfSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcblxuLyoqXG4gKiBUT0RPOiBkZWxldGUgaW4gdjQuMFxuICogQGRlcHJlY2F0ZWQgVXNlIHtAbGluayBodHRwczovL21hc2tpdG8uZGV2L2NvcmUtY29uY2VwdHMvdHJhbnNmb3JtZXIgbWFza2l0b1RyYW5zZm9ybX0gaW5zdGVhZDxici8+XG4gKiBAZXhhbXBsZVxuICogaW1wb3J0IHttYXNraXRvVHJhbnNmb3JtfSBmcm9tICdAbWFza2l0by9jb3JlJztcbiAqXG4gKiBjb25zdCBtYXNrID0ge1xuICogICAgIG1hc2s6IFsnKycsICcxJywgJyAnLCAvXFxkLywgL1xcZC8sIC9cXGQvLCAnKScsICcgJywgL1xcZC8sIC9cXGQvLCAvXFxkLywgJy0nLCAvXFxkLywgL1xcZC8sIC9cXGQvLCAvXFxkL10sXG4gKiB9O1xuICogbWFza2l0b1RyYW5zZm9ybSgnMTIxMjU1NTIzNjgnLCBtYXNrKTsgLy8gKzEgKDIxMikgNTU1LTIzNjhcbiAqIF9fX1xuICogRm9ybWF0cyBhIHN0cmluZyB3aXRoIHRoZSBwaG9uZSBmb3JtYXQgKzdYWFhYWFhYWFhYWFggb3IgWFhYWFhYWFhYWFhYLFxuICogYWRkaW5nIHBhcmVudGhlc2VzIGFuZCBoeXBoZW5zLlxuICpcbiAqIEBwYXJhbSB2YWx1ZSB0aGUgaW5wdXQgc3RyaW5nXG4gKiBAcGFyYW0gY291bnRyeUNvZGUgYSBjb3VudHJ5IGNvZGVcbiAqIEBwYXJhbSBwaG9uZU1hc2sgYSBwaG9uZSBudW1iZXIgbWFza1xuICogQHJldHVybiB0aGUgZm9ybWF0dGVkIHBob25lIHN0cmluZyBvZiB0aGUgZm9ybSArNyBYWFggWFhYLVhYLVhYXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0dWlGb3JtYXRQaG9uZShcbiAgICB2YWx1ZTogc3RyaW5nLFxuICAgIGNvdW50cnlDb2RlOiBzdHJpbmcsXG4gICAgcGhvbmVNYXNrOiBzdHJpbmcsXG4pOiBzdHJpbmcge1xuICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSBjb3VudHJ5Q29kZTtcblxuICAgIGNvdW50cnlDb2RlID0gY291bnRyeUNvZGUucmVwbGFjZSgvWygpXS9nLCAnJyk7XG5cbiAgICBpZiAoIXZhbHVlLnN0YXJ0c1dpdGgoY291bnRyeUNvZGUpKSB7XG4gICAgICAgIHZhbHVlID0gY291bnRyeUNvZGUgKyB2YWx1ZS5yZXBsYWNlKENIQVJfUExVUywgJycpO1xuICAgIH1cblxuICAgIGNvbnN0IHNwbGl0UGhvbmVNYXNrID0gcGhvbmVNYXNrLnNwbGl0KCcnKTtcbiAgICBjb25zdCBzcGxpdFZhbHVlID0gdmFsdWUuc2xpY2UoY291bnRyeUNvZGUubGVuZ3RoKS5zcGxpdCgnJyk7XG5cbiAgICByZXN1bHQgKz0gJyAnO1xuXG4gICAgaWYgKHNwbGl0VmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBtYXNrIG9mIHNwbGl0UGhvbmVNYXNrKSB7XG4gICAgICAgIGlmIChzcGxpdFZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobWFzayA9PT0gJyMnKSB7XG4gICAgICAgICAgICByZXN1bHQgKz0gc3BsaXRWYWx1ZVswXSB8fCAnJztcbiAgICAgICAgICAgIHNwbGl0VmFsdWUuc3BsaWNlKDAsIDEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0ICs9IG1hc2s7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuIl19