import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, } from '@angular/core';
import { TUI_FIRST_DAY, TUI_LAST_DAY, TuiMonth, } from '@taiga-ui/cdk';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core/components/primitive-spin-button";
import * as i2 from "@taiga-ui/core/components/link";
import * as i3 from "@angular/common";
import * as i4 from "@taiga-ui/cdk";
import * as i5 from "@taiga-ui/core/pipes";
export class TuiPrimitiveYearMonthPaginationComponent {
    constructor() {
        this.value = TuiMonth.currentLocal();
        this.min = TUI_FIRST_DAY;
        this.max = TUI_LAST_DAY;
        this.valueChange = new EventEmitter();
        this.yearClick = new EventEmitter();
    }
    get computedMin() {
        var _a;
        return (_a = this.min) !== null && _a !== void 0 ? _a : TUI_FIRST_DAY;
    }
    get computedMax() {
        var _a;
        return (_a = this.max) !== null && _a !== void 0 ? _a : TUI_LAST_DAY;
    }
    get prevMonthDisabled() {
        return this.value.monthSameOrBefore(this.computedMin);
    }
    get nextMonthDisabled() {
        return this.value.monthSameOrAfter(this.computedMax);
    }
    get oneYear() {
        const { computedMin, computedMax } = this;
        return computedMin.year === computedMax.year;
    }
    onYearClick() {
        this.yearClick.next(this.value);
    }
    onPrevMonthClick() {
        this.appendValueWithLimit({ month: -1 });
    }
    onNextMonthClick() {
        this.appendValueWithLimit({ month: 1 });
    }
    appendValueWithLimit(date) {
        const newMonth = this.value.append(date);
        const { computedMin, computedMax } = this;
        if (computedMin.monthSameOrAfter(newMonth)) {
            this.updateValue(computedMin);
            return;
        }
        this.updateValue(computedMax.monthSameOrBefore(newMonth) ? computedMax : newMonth);
    }
    updateValue(value) {
        if (this.value.monthSame(value)) {
            return;
        }
        this.value = value;
        this.valueChange.emit(value);
    }
}
TuiPrimitiveYearMonthPaginationComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPrimitiveYearMonthPaginationComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
TuiPrimitiveYearMonthPaginationComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiPrimitiveYearMonthPaginationComponent, selector: "tui-primitive-year-month-pagination", inputs: { value: "value", min: "min", max: "max" }, outputs: { valueChange: "valueChange", yearClick: "yearClick" }, ngImport: i0, template: "<tui-primitive-spin-button\n    [focusable]=\"false\"\n    [leftDisabled]=\"prevMonthDisabled\"\n    [rightDisabled]=\"nextMonthDisabled\"\n    (leftClick)=\"onPrevMonthClick()\"\n    (rightClick)=\"onNextMonthClick()\"\n>\n    {{ value | tuiMonth | async }}\n    <ng-container *ngIf=\"oneYear; else button\">\n        {{ value.formattedYear }}\n    </ng-container>\n    <ng-template #button>\n        <button\n            id=\"year-btn\"\n            automation-id=\"tui-primitive-year-month-pagination__year-button\"\n            tuiLink\n            type=\"button\"\n            [tuiFocusable]=\"false\"\n            (click)=\"onYearClick()\"\n        >\n            {{ value.formattedYear }}\n        </button>\n    </ng-template>\n</tui-primitive-spin-button>\n", styles: [":host{display:block}\n"], components: [{ type: i1.TuiPrimitiveSpinButtonComponent, selector: "tui-primitive-spin-button", inputs: ["disabled", "leftDisabled", "rightDisabled"], outputs: ["leftClick", "rightClick"] }, { type: i2.TuiLinkComponent, selector: "a[tuiLink], button[tuiLink]", inputs: ["pseudo", "icon", "iconAlign", "iconRotated", "mode"], exportAs: ["tuiLink"] }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.TuiFocusableDirective, selector: "[tuiFocusable]", inputs: ["tuiFocusable"] }], pipes: { "async": i3.AsyncPipe, "tuiMonth": i5.TuiMonthPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPrimitiveYearMonthPaginationComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-primitive-year-month-pagination',
                    templateUrl: './primitive-year-month-pagination.template.html',
                    styleUrls: ['./primitive-year-month-pagination.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { value: [{
                type: Input
            }], min: [{
                type: Input
            }], max: [{
                type: Input
            }], valueChange: [{
                type: Output
            }], yearClick: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJpbWl0aXZlLXllYXItbW9udGgtcGFnaW5hdGlvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlL2ludGVybmFsL3ByaW1pdGl2ZS15ZWFyLW1vbnRoLXBhZ2luYXRpb24vcHJpbWl0aXZlLXllYXItbW9udGgtcGFnaW5hdGlvbi5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlL2ludGVybmFsL3ByaW1pdGl2ZS15ZWFyLW1vbnRoLXBhZ2luYXRpb24vcHJpbWl0aXZlLXllYXItbW9udGgtcGFnaW5hdGlvbi50ZW1wbGF0ZS5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDSCx1QkFBdUIsRUFDdkIsU0FBUyxFQUNULFlBQVksRUFDWixLQUFLLEVBQ0wsTUFBTSxHQUNULE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFDSCxhQUFhLEVBQ2IsWUFBWSxFQUNaLFFBQVEsR0FHWCxNQUFNLGVBQWUsQ0FBQzs7Ozs7OztBQVN2QixNQUFNLE9BQU8sd0NBQXdDO0lBTnJEO1FBVUksVUFBSyxHQUFHLFFBQVEsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUdoQyxRQUFHLEdBQW9CLGFBQWEsQ0FBQztRQUdyQyxRQUFHLEdBQW9CLFlBQVksQ0FBQztRQUczQixnQkFBVyxHQUFHLElBQUksWUFBWSxFQUFZLENBQUM7UUFHM0MsY0FBUyxHQUFHLElBQUksWUFBWSxFQUFXLENBQUM7S0EyRHBEO0lBekRHLElBQUksV0FBVzs7UUFDWCxPQUFPLE1BQUEsSUFBSSxDQUFDLEdBQUcsbUNBQUksYUFBYSxDQUFDO0lBQ3JDLENBQUM7SUFFRCxJQUFJLFdBQVc7O1FBQ1gsT0FBTyxNQUFBLElBQUksQ0FBQyxHQUFHLG1DQUFJLFlBQVksQ0FBQztJQUNwQyxDQUFDO0lBRUQsSUFBSSxpQkFBaUI7UUFDakIsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUMxRCxDQUFDO0lBRUQsSUFBSSxpQkFBaUI7UUFDakIsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBRUQsSUFBSSxPQUFPO1FBQ1AsTUFBTSxFQUFDLFdBQVcsRUFBRSxXQUFXLEVBQUMsR0FBRyxJQUFJLENBQUM7UUFFeEMsT0FBTyxXQUFXLENBQUMsSUFBSSxLQUFLLFdBQVcsQ0FBQyxJQUFJLENBQUM7SUFDakQsQ0FBQztJQUVELFdBQVc7UUFDUCxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVELGdCQUFnQjtRQUNaLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxFQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVELGdCQUFnQjtRQUNaLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxFQUFDLEtBQUssRUFBRSxDQUFDLEVBQUMsQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFFTyxvQkFBb0IsQ0FBQyxJQUFrQjtRQUMzQyxNQUFNLFFBQVEsR0FBYSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNuRCxNQUFNLEVBQUMsV0FBVyxFQUFFLFdBQVcsRUFBQyxHQUFHLElBQUksQ0FBQztRQUV4QyxJQUFJLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUN4QyxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBRTlCLE9BQU87U0FDVjtRQUVELElBQUksQ0FBQyxXQUFXLENBQ1osV0FBVyxDQUFDLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FDbkUsQ0FBQztJQUNOLENBQUM7SUFFTyxXQUFXLENBQUMsS0FBZTtRQUMvQixJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQzdCLE9BQU87U0FDVjtRQUVELElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2pDLENBQUM7O3NJQTFFUSx3Q0FBd0M7MEhBQXhDLHdDQUF3QyxnTUN0QnJELGd3QkF3QkE7NEZERmEsd0NBQXdDO2tCQU5wRCxTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSxxQ0FBcUM7b0JBQy9DLFdBQVcsRUFBRSxpREFBaUQ7b0JBQzlELFNBQVMsRUFBRSxDQUFDLDhDQUE4QyxDQUFDO29CQUMzRCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtpQkFDbEQ7OEJBS0csS0FBSztzQkFESixLQUFLO2dCQUlOLEdBQUc7c0JBREYsS0FBSztnQkFJTixHQUFHO3NCQURGLEtBQUs7Z0JBSUcsV0FBVztzQkFEbkIsTUFBTTtnQkFJRSxTQUFTO3NCQURqQixNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgICBDb21wb25lbnQsXG4gICAgRXZlbnRFbWl0dGVyLFxuICAgIElucHV0LFxuICAgIE91dHB1dCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICAgIFRVSV9GSVJTVF9EQVksXG4gICAgVFVJX0xBU1RfREFZLFxuICAgIFR1aU1vbnRoLFxuICAgIFR1aU1vbnRoTGlrZSxcbiAgICBUdWlZZWFyLFxufSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7VHVpV2l0aE9wdGlvbmFsTWluTWF4fSBmcm9tICdAdGFpZ2EtdWkvY29yZS9pbnRlcmZhY2VzJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICd0dWktcHJpbWl0aXZlLXllYXItbW9udGgtcGFnaW5hdGlvbicsXG4gICAgdGVtcGxhdGVVcmw6ICcuL3ByaW1pdGl2ZS15ZWFyLW1vbnRoLXBhZ2luYXRpb24udGVtcGxhdGUuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vcHJpbWl0aXZlLXllYXItbW9udGgtcGFnaW5hdGlvbi5zdHlsZS5sZXNzJ10sXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuZXhwb3J0IGNsYXNzIFR1aVByaW1pdGl2ZVllYXJNb250aFBhZ2luYXRpb25Db21wb25lbnRcbiAgICBpbXBsZW1lbnRzIFR1aVdpdGhPcHRpb25hbE1pbk1heDxUdWlNb250aD5cbntcbiAgICBASW5wdXQoKVxuICAgIHZhbHVlID0gVHVpTW9udGguY3VycmVudExvY2FsKCk7XG5cbiAgICBASW5wdXQoKVxuICAgIG1pbjogVHVpTW9udGggfCBudWxsID0gVFVJX0ZJUlNUX0RBWTtcblxuICAgIEBJbnB1dCgpXG4gICAgbWF4OiBUdWlNb250aCB8IG51bGwgPSBUVUlfTEFTVF9EQVk7XG5cbiAgICBAT3V0cHV0KClcbiAgICByZWFkb25seSB2YWx1ZUNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8VHVpTW9udGg+KCk7XG5cbiAgICBAT3V0cHV0KClcbiAgICByZWFkb25seSB5ZWFyQ2xpY2sgPSBuZXcgRXZlbnRFbWl0dGVyPFR1aVllYXI+KCk7XG5cbiAgICBnZXQgY29tcHV0ZWRNaW4oKTogVHVpTW9udGgge1xuICAgICAgICByZXR1cm4gdGhpcy5taW4gPz8gVFVJX0ZJUlNUX0RBWTtcbiAgICB9XG5cbiAgICBnZXQgY29tcHV0ZWRNYXgoKTogVHVpTW9udGgge1xuICAgICAgICByZXR1cm4gdGhpcy5tYXggPz8gVFVJX0xBU1RfREFZO1xuICAgIH1cblxuICAgIGdldCBwcmV2TW9udGhEaXNhYmxlZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWUubW9udGhTYW1lT3JCZWZvcmUodGhpcy5jb21wdXRlZE1pbik7XG4gICAgfVxuXG4gICAgZ2V0IG5leHRNb250aERpc2FibGVkKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZS5tb250aFNhbWVPckFmdGVyKHRoaXMuY29tcHV0ZWRNYXgpO1xuICAgIH1cblxuICAgIGdldCBvbmVZZWFyKCk6IGJvb2xlYW4ge1xuICAgICAgICBjb25zdCB7Y29tcHV0ZWRNaW4sIGNvbXB1dGVkTWF4fSA9IHRoaXM7XG5cbiAgICAgICAgcmV0dXJuIGNvbXB1dGVkTWluLnllYXIgPT09IGNvbXB1dGVkTWF4LnllYXI7XG4gICAgfVxuXG4gICAgb25ZZWFyQ2xpY2soKTogdm9pZCB7XG4gICAgICAgIHRoaXMueWVhckNsaWNrLm5leHQodGhpcy52YWx1ZSk7XG4gICAgfVxuXG4gICAgb25QcmV2TW9udGhDbGljaygpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5hcHBlbmRWYWx1ZVdpdGhMaW1pdCh7bW9udGg6IC0xfSk7XG4gICAgfVxuXG4gICAgb25OZXh0TW9udGhDbGljaygpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5hcHBlbmRWYWx1ZVdpdGhMaW1pdCh7bW9udGg6IDF9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFwcGVuZFZhbHVlV2l0aExpbWl0KGRhdGU6IFR1aU1vbnRoTGlrZSk6IHZvaWQge1xuICAgICAgICBjb25zdCBuZXdNb250aDogVHVpTW9udGggPSB0aGlzLnZhbHVlLmFwcGVuZChkYXRlKTtcbiAgICAgICAgY29uc3Qge2NvbXB1dGVkTWluLCBjb21wdXRlZE1heH0gPSB0aGlzO1xuXG4gICAgICAgIGlmIChjb21wdXRlZE1pbi5tb250aFNhbWVPckFmdGVyKG5ld01vbnRoKSkge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVWYWx1ZShjb21wdXRlZE1pbik7XG5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudXBkYXRlVmFsdWUoXG4gICAgICAgICAgICBjb21wdXRlZE1heC5tb250aFNhbWVPckJlZm9yZShuZXdNb250aCkgPyBjb21wdXRlZE1heCA6IG5ld01vbnRoLFxuICAgICAgICApO1xuICAgIH1cblxuICAgIHByaXZhdGUgdXBkYXRlVmFsdWUodmFsdWU6IFR1aU1vbnRoKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLnZhbHVlLm1vbnRoU2FtZSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy52YWx1ZUNoYW5nZS5lbWl0KHZhbHVlKTtcbiAgICB9XG59XG4iLCI8dHVpLXByaW1pdGl2ZS1zcGluLWJ1dHRvblxuICAgIFtmb2N1c2FibGVdPVwiZmFsc2VcIlxuICAgIFtsZWZ0RGlzYWJsZWRdPVwicHJldk1vbnRoRGlzYWJsZWRcIlxuICAgIFtyaWdodERpc2FibGVkXT1cIm5leHRNb250aERpc2FibGVkXCJcbiAgICAobGVmdENsaWNrKT1cIm9uUHJldk1vbnRoQ2xpY2soKVwiXG4gICAgKHJpZ2h0Q2xpY2spPVwib25OZXh0TW9udGhDbGljaygpXCJcbj5cbiAgICB7eyB2YWx1ZSB8IHR1aU1vbnRoIHwgYXN5bmMgfX1cbiAgICA8bmctY29udGFpbmVyICpuZ0lmPVwib25lWWVhcjsgZWxzZSBidXR0b25cIj5cbiAgICAgICAge3sgdmFsdWUuZm9ybWF0dGVkWWVhciB9fVxuICAgIDwvbmctY29udGFpbmVyPlxuICAgIDxuZy10ZW1wbGF0ZSAjYnV0dG9uPlxuICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICBpZD1cInllYXItYnRuXCJcbiAgICAgICAgICAgIGF1dG9tYXRpb24taWQ9XCJ0dWktcHJpbWl0aXZlLXllYXItbW9udGgtcGFnaW5hdGlvbl9feWVhci1idXR0b25cIlxuICAgICAgICAgICAgdHVpTGlua1xuICAgICAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgICBbdHVpRm9jdXNhYmxlXT1cImZhbHNlXCJcbiAgICAgICAgICAgIChjbGljayk9XCJvblllYXJDbGljaygpXCJcbiAgICAgICAgPlxuICAgICAgICAgICAge3sgdmFsdWUuZm9ybWF0dGVkWWVhciB9fVxuICAgICAgICA8L2J1dHRvbj5cbiAgICA8L25nLXRlbXBsYXRlPlxuPC90dWktcHJpbWl0aXZlLXNwaW4tYnV0dG9uPlxuIl19