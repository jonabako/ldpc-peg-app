import { Directive, ElementRef, Inject, Input } from '@angular/core';
import { tuiGetActualTarget } from '@taiga-ui/cdk';
import * as i0 from "@angular/core";
export class TuiSwipeActionsAutoCloseDirective {
    constructor(el) {
        this.el = el;
        this.autoClose = true;
    }
    handleEvent(event) {
        const target = tuiGetActualTarget(event);
        if (this.autoClose !== false && !this.el.nativeElement.contains(target)) {
            this.close();
        }
    }
    close() {
        this.el.nativeElement.scrollTo({
            left: 0,
            behavior: 'smooth',
        });
    }
}
TuiSwipeActionsAutoCloseDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSwipeActionsAutoCloseDirective, deps: [{ token: ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
TuiSwipeActionsAutoCloseDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiSwipeActionsAutoCloseDirective, selector: "tui-swipe-actions[autoClose]", inputs: { autoClose: "autoClose" }, host: { listeners: { "document:pointerdown.silent": "handleEvent($event)", "document:focusin.silent": "handleEvent($event)" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSwipeActionsAutoCloseDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'tui-swipe-actions[autoClose]',
                    host: {
                        '(document:pointerdown.silent)': 'handleEvent($event)',
                        '(document:focusin.silent)': 'handleEvent($event)',
                    },
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }]; }, propDecorators: { autoClose: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3dpcGUtYWN0aW9ucy1hdXRvLWNsb3NlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2V4cGVyaW1lbnRhbC9jb21wb25lbnRzL3N3aXBlLWFjdGlvbi9zd2lwZS1hY3Rpb25zLWF1dG8tY2xvc2UuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDbkUsT0FBTyxFQUFDLGtCQUFrQixFQUFDLE1BQU0sZUFBZSxDQUFDOztBQVNqRCxNQUFNLE9BQU8saUNBQWlDO0lBSTFDLFlBQWlELEVBQTJCO1FBQTNCLE9BQUUsR0FBRixFQUFFLENBQXlCO1FBRjVFLGNBQVMsR0FBcUIsSUFBSSxDQUFDO0lBRTRDLENBQUM7SUFFaEYsV0FBVyxDQUFDLEtBQVk7UUFDcEIsTUFBTSxNQUFNLEdBQUcsa0JBQWtCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFekMsSUFBSSxJQUFJLENBQUMsU0FBUyxLQUFLLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUNyRSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7U0FDaEI7SUFDTCxDQUFDO0lBRU8sS0FBSztRQUNULElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQztZQUMzQixJQUFJLEVBQUUsQ0FBQztZQUNQLFFBQVEsRUFBRSxRQUFRO1NBQ3JCLENBQUMsQ0FBQztJQUNQLENBQUM7OytIQW5CUSxpQ0FBaUMsa0JBSXRCLFVBQVU7bUhBSnJCLGlDQUFpQzs0RkFBakMsaUNBQWlDO2tCQVA3QyxTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSw4QkFBOEI7b0JBQ3hDLElBQUksRUFBRTt3QkFDRiwrQkFBK0IsRUFBRSxxQkFBcUI7d0JBQ3RELDJCQUEyQixFQUFFLHFCQUFxQjtxQkFDckQ7aUJBQ0o7OzBCQUtnQixNQUFNOzJCQUFDLFVBQVU7NENBRjlCLFNBQVM7c0JBRFIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbmplY3QsIElucHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7dHVpR2V0QWN0dWFsVGFyZ2V0fSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICd0dWktc3dpcGUtYWN0aW9uc1thdXRvQ2xvc2VdJyxcbiAgICBob3N0OiB7XG4gICAgICAgICcoZG9jdW1lbnQ6cG9pbnRlcmRvd24uc2lsZW50KSc6ICdoYW5kbGVFdmVudCgkZXZlbnQpJyxcbiAgICAgICAgJyhkb2N1bWVudDpmb2N1c2luLnNpbGVudCknOiAnaGFuZGxlRXZlbnQoJGV2ZW50KScsXG4gICAgfSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpU3dpcGVBY3Rpb25zQXV0b0Nsb3NlRGlyZWN0aXZlIHtcbiAgICBASW5wdXQoKVxuICAgIGF1dG9DbG9zZTogYm9vbGVhbiB8IHN0cmluZyA9IHRydWU7XG5cbiAgICBjb25zdHJ1Y3RvcihASW5qZWN0KEVsZW1lbnRSZWYpIHByaXZhdGUgcmVhZG9ubHkgZWw6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+KSB7fVxuXG4gICAgaGFuZGxlRXZlbnQoZXZlbnQ6IEV2ZW50KTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IHR1aUdldEFjdHVhbFRhcmdldChldmVudCk7XG5cbiAgICAgICAgaWYgKHRoaXMuYXV0b0Nsb3NlICE9PSBmYWxzZSAmJiAhdGhpcy5lbC5uYXRpdmVFbGVtZW50LmNvbnRhaW5zKHRhcmdldCkpIHtcbiAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgY2xvc2UoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudC5zY3JvbGxUbyh7XG4gICAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgICAgYmVoYXZpb3I6ICdzbW9vdGgnLFxuICAgICAgICB9KTtcbiAgICB9XG59XG4iXX0=