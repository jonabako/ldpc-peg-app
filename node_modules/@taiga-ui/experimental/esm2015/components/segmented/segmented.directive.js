import { ContentChildren, Directive, ElementRef, HostListener, Inject, Self, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { RouterLinkActive } from '@angular/router';
import { EMPTY_QUERY, TuiDestroyService, tuiQueryListChanges } from '@taiga-ui/cdk';
import { EMPTY } from 'rxjs';
import { switchMap, takeUntil } from 'rxjs/operators';
import { TuiSegmentedComponent } from './segmented.component';
import * as i0 from "@angular/core";
import * as i1 from "rxjs";
import * as i2 from "./segmented.component";
export class TuiSegmentedDirective {
    constructor(destroy$, component, el) {
        this.destroy$ = destroy$;
        this.component = component;
        this.el = el;
        this.controls = EMPTY_QUERY;
        this.links = EMPTY_QUERY;
        this.elements = EMPTY_QUERY;
    }
    update(target) {
        const index = this.getIndex(target);
        if (index >= 0) {
            this.component.update(index);
        }
    }
    ngAfterContentInit() {
        tuiQueryListChanges(this.controls)
            .pipe(switchMap(() => { var _a; return ((_a = this.controls.last) === null || _a === void 0 ? void 0 : _a.valueChanges) || EMPTY; }), takeUntil(this.destroy$))
            .subscribe(() => {
            this.update(this.el.nativeElement.querySelector(':checked'));
        });
    }
    ngAfterContentChecked() {
        var _a;
        if (this.links.length) {
            this.update(((_a = this.elements.get(this.linkIndex)) === null || _a === void 0 ? void 0 : _a.nativeElement) || null);
        }
    }
    get linkIndex() {
        return this.links.toArray().findIndex(link => link.isActive);
    }
    getIndex(element) {
        return Array.from(this.component.tabs).findIndex(tab => tab.contains(element));
    }
}
TuiSegmentedDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSegmentedDirective, deps: [{ token: TuiDestroyService, self: true }, { token: TuiSegmentedComponent }, { token: ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
TuiSegmentedDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiSegmentedDirective, selector: "tui-segmented", host: { listeners: { "click": "update($event.target)" } }, queries: [{ propertyName: "controls", predicate: NgControl, descendants: true }, { propertyName: "links", predicate: RouterLinkActive }, { propertyName: "elements", predicate: RouterLinkActive, read: ElementRef }], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSegmentedDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'tui-segmented',
                }]
        }], ctorParameters: function () { return [{ type: i1.Observable, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiDestroyService]
                }] }, { type: i2.TuiSegmentedComponent, decorators: [{
                    type: Inject,
                    args: [TuiSegmentedComponent]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }]; }, propDecorators: { controls: [{
                type: ContentChildren,
                args: [NgControl, { descendants: true }]
            }], links: [{
                type: ContentChildren,
                args: [RouterLinkActive]
            }], elements: [{
                type: ContentChildren,
                args: [RouterLinkActive, { read: ElementRef }]
            }], update: [{
                type: HostListener,
                args: ['click', ['$event.target']]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VnbWVudGVkLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2V4cGVyaW1lbnRhbC9jb21wb25lbnRzL3NlZ21lbnRlZC9zZWdtZW50ZWQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFHSCxlQUFlLEVBQ2YsU0FBUyxFQUNULFVBQVUsRUFDVixZQUFZLEVBQ1osTUFBTSxFQUVOLElBQUksR0FDUCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDekMsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFDakQsT0FBTyxFQUFDLFdBQVcsRUFBRSxpQkFBaUIsRUFBRSxtQkFBbUIsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNsRixPQUFPLEVBQUMsS0FBSyxFQUFhLE1BQU0sTUFBTSxDQUFDO0FBQ3ZDLE9BQU8sRUFBQyxTQUFTLEVBQUUsU0FBUyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFFcEQsT0FBTyxFQUFDLHFCQUFxQixFQUFDLE1BQU0sdUJBQXVCLENBQUM7Ozs7QUFLNUQsTUFBTSxPQUFPLHFCQUFxQjtJQVU5QixZQUN3RCxRQUE2QixFQUNqQyxTQUFnQyxFQUMzQyxFQUEyQjtRQUZaLGFBQVEsR0FBUixRQUFRLENBQXFCO1FBQ2pDLGNBQVMsR0FBVCxTQUFTLENBQXVCO1FBQzNDLE9BQUUsR0FBRixFQUFFLENBQXlCO1FBWG5ELGFBQVEsR0FBeUIsV0FBVyxDQUFDO1FBRzdDLFVBQUssR0FBZ0MsV0FBVyxDQUFDO1FBR2pELGFBQVEsR0FBdUMsV0FBVyxDQUFDO0lBTXpFLENBQUM7SUFHSixNQUFNLENBQUMsTUFBc0I7UUFDekIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUVwQyxJQUFJLEtBQUssSUFBSSxDQUFDLEVBQUU7WUFDWixJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNoQztJQUNMLENBQUM7SUFFRCxrQkFBa0I7UUFDZCxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO2FBQzdCLElBQUksQ0FDRCxTQUFTLENBQUMsR0FBRyxFQUFFLFdBQUMsT0FBQSxDQUFBLE1BQUEsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLDBDQUFFLFlBQVksS0FBSSxLQUFLLENBQUEsRUFBQSxDQUFDLEVBQzFELFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQzNCO2FBQ0EsU0FBUyxDQUFDLEdBQUcsRUFBRTtZQUNaLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFDakUsQ0FBQyxDQUFDLENBQUM7SUFDWCxDQUFDO0lBRUQscUJBQXFCOztRQUNqQixJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1lBQ25CLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQSxNQUFBLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsMENBQUUsYUFBYSxLQUFJLElBQUksQ0FBQyxDQUFDO1NBQ3pFO0lBQ0wsQ0FBQztJQUVELElBQVksU0FBUztRQUNqQixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2pFLENBQUM7SUFFTyxRQUFRLENBQUMsT0FBdUI7UUFDcEMsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ25GLENBQUM7O21IQWhEUSxxQkFBcUIsa0JBV1YsaUJBQWlCLHlCQUN6QixxQkFBcUIsYUFDckIsVUFBVTt1R0FiYixxQkFBcUIseUlBQ2IsU0FBUywyREFHVCxnQkFBZ0IsMkNBR2hCLGdCQUFnQixRQUFTLFVBQVU7NEZBUDNDLHFCQUFxQjtrQkFIakMsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsZUFBZTtpQkFDNUI7OzBCQVlRLElBQUk7OzBCQUFJLE1BQU07MkJBQUMsaUJBQWlCOzswQkFDaEMsTUFBTTsyQkFBQyxxQkFBcUI7OzBCQUM1QixNQUFNOzJCQUFDLFVBQVU7NENBWEwsUUFBUTtzQkFEeEIsZUFBZTt1QkFBQyxTQUFTLEVBQUUsRUFBQyxXQUFXLEVBQUUsSUFBSSxFQUFDO2dCQUk5QixLQUFLO3NCQURyQixlQUFlO3VCQUFDLGdCQUFnQjtnQkFJaEIsUUFBUTtzQkFEeEIsZUFBZTt1QkFBQyxnQkFBZ0IsRUFBRSxFQUFDLElBQUksRUFBRSxVQUFVLEVBQUM7Z0JBVXJELE1BQU07c0JBREwsWUFBWTt1QkFBQyxPQUFPLEVBQUUsQ0FBQyxlQUFlLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIEFmdGVyQ29udGVudENoZWNrZWQsXG4gICAgQWZ0ZXJDb250ZW50SW5pdCxcbiAgICBDb250ZW50Q2hpbGRyZW4sXG4gICAgRGlyZWN0aXZlLFxuICAgIEVsZW1lbnRSZWYsXG4gICAgSG9zdExpc3RlbmVyLFxuICAgIEluamVjdCxcbiAgICBRdWVyeUxpc3QsXG4gICAgU2VsZixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge05nQ29udHJvbH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHtSb3V0ZXJMaW5rQWN0aXZlfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHtFTVBUWV9RVUVSWSwgVHVpRGVzdHJveVNlcnZpY2UsIHR1aVF1ZXJ5TGlzdENoYW5nZXN9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtFTVBUWSwgT2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5pbXBvcnQge3N3aXRjaE1hcCwgdGFrZVVudGlsfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7VHVpU2VnbWVudGVkQ29tcG9uZW50fSBmcm9tICcuL3NlZ21lbnRlZC5jb21wb25lbnQnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ3R1aS1zZWdtZW50ZWQnLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlTZWdtZW50ZWREaXJlY3RpdmUgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRDaGVja2VkLCBBZnRlckNvbnRlbnRJbml0IHtcbiAgICBAQ29udGVudENoaWxkcmVuKE5nQ29udHJvbCwge2Rlc2NlbmRhbnRzOiB0cnVlfSlcbiAgICBwcml2YXRlIHJlYWRvbmx5IGNvbnRyb2xzOiBRdWVyeUxpc3Q8TmdDb250cm9sPiA9IEVNUFRZX1FVRVJZO1xuXG4gICAgQENvbnRlbnRDaGlsZHJlbihSb3V0ZXJMaW5rQWN0aXZlKVxuICAgIHByaXZhdGUgcmVhZG9ubHkgbGlua3M6IFF1ZXJ5TGlzdDxSb3V0ZXJMaW5rQWN0aXZlPiA9IEVNUFRZX1FVRVJZO1xuXG4gICAgQENvbnRlbnRDaGlsZHJlbihSb3V0ZXJMaW5rQWN0aXZlLCB7cmVhZDogRWxlbWVudFJlZn0pXG4gICAgcHJpdmF0ZSByZWFkb25seSBlbGVtZW50czogUXVlcnlMaXN0PEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+PiA9IEVNUFRZX1FVRVJZO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBTZWxmKCkgQEluamVjdChUdWlEZXN0cm95U2VydmljZSkgcHJpdmF0ZSByZWFkb25seSBkZXN0cm95JDogT2JzZXJ2YWJsZTx1bmtub3duPixcbiAgICAgICAgQEluamVjdChUdWlTZWdtZW50ZWRDb21wb25lbnQpIHByaXZhdGUgcmVhZG9ubHkgY29tcG9uZW50OiBUdWlTZWdtZW50ZWRDb21wb25lbnQsXG4gICAgICAgIEBJbmplY3QoRWxlbWVudFJlZikgcHJpdmF0ZSByZWFkb25seSBlbDogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4sXG4gICAgKSB7fVxuXG4gICAgQEhvc3RMaXN0ZW5lcignY2xpY2snLCBbJyRldmVudC50YXJnZXQnXSlcbiAgICB1cGRhdGUodGFyZ2V0OiBFbGVtZW50IHwgbnVsbCk6IHZvaWQge1xuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuZ2V0SW5kZXgodGFyZ2V0KTtcblxuICAgICAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICAgICAgdGhpcy5jb21wb25lbnQudXBkYXRlKGluZGV4KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkIHtcbiAgICAgICAgdHVpUXVlcnlMaXN0Q2hhbmdlcyh0aGlzLmNvbnRyb2xzKVxuICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgICAgc3dpdGNoTWFwKCgpID0+IHRoaXMuY29udHJvbHMubGFzdD8udmFsdWVDaGFuZ2VzIHx8IEVNUFRZKSxcbiAgICAgICAgICAgICAgICB0YWtlVW50aWwodGhpcy5kZXN0cm95JCksXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZSh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3RvcignOmNoZWNrZWQnKSk7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBuZ0FmdGVyQ29udGVudENoZWNrZWQoKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLmxpbmtzLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy51cGRhdGUodGhpcy5lbGVtZW50cy5nZXQodGhpcy5saW5rSW5kZXgpPy5uYXRpdmVFbGVtZW50IHx8IG51bGwpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXQgbGlua0luZGV4KCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmxpbmtzLnRvQXJyYXkoKS5maW5kSW5kZXgobGluayA9PiBsaW5rLmlzQWN0aXZlKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldEluZGV4KGVsZW1lbnQ6IEVsZW1lbnQgfCBudWxsKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5jb21wb25lbnQudGFicykuZmluZEluZGV4KHRhYiA9PiB0YWIuY29udGFpbnMoZWxlbWVudCkpO1xuICAgIH1cbn1cbiJdfQ==