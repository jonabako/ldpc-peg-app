import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, Inject, Input, Optional, Self, } from '@angular/core';
import { NgControl, NgModel } from '@angular/forms';
import { tuiControlValue, TuiDestroyService, tuiIsString, tuiWatch, } from '@taiga-ui/cdk';
import { TUI_ICON_RESOLVER } from '@taiga-ui/experimental/tokens';
import { distinctUntilChanged, takeUntil } from 'rxjs/operators';
import { TUI_CHECKBOX_OPTIONS } from './checkbox.options';
import * as i0 from "@angular/core";
import * as i1 from "rxjs";
import * as i2 from "@angular/forms";
export class TuiCheckboxComponent {
    constructor(cdr, resolver, options, destroy$, el, control) {
        this.cdr = cdr;
        this.resolver = resolver;
        this.options = options;
        this.destroy$ = destroy$;
        this.el = el;
        this.control = control;
        this.size = this.options.size;
    }
    get icon() {
        const option = this.el.nativeElement.indeterminate
            ? this.options.icons.indeterminate
            : this.options.icons.checked;
        const icon = tuiIsString(option) ? option : option(this.size);
        return `url(${this.resolver(icon)})`;
    }
    ngOnInit() {
        var _a;
        if (!((_a = this.control) === null || _a === void 0 ? void 0 : _a.valueChanges)) {
            return;
        }
        tuiControlValue(this.control)
            .pipe(distinctUntilChanged(), tuiWatch(this.cdr), takeUntil(this.destroy$))
            .subscribe(value => {
            // https://github.com/angular/angular/issues/14988
            const fix = this.control instanceof NgModel ? this.control.model : value;
            this.el.nativeElement.indeterminate = fix === null;
        });
    }
}
TuiCheckboxComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiCheckboxComponent, deps: [{ token: ChangeDetectorRef }, { token: TUI_ICON_RESOLVER }, { token: TUI_CHECKBOX_OPTIONS }, { token: TuiDestroyService, self: true }, { token: ElementRef }, { token: NgControl, optional: true }], target: i0.ɵɵFactoryTarget.Component });
TuiCheckboxComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiCheckboxComponent, selector: "input[type=\"checkbox\"][tuiCheckbox]", inputs: { size: "size" }, host: { attributes: { "tuiAppearance": "" }, properties: { "disabled": "!control || control.disabled", "attr.data-size": "size", "class._invalid": "control?.invalid && control?.touched", "class._readonly": "!control", "style.--t-mask": "icon" } }, providers: [TuiDestroyService], ngImport: i0, template: '', isInline: true, styles: [":host{width:1.5rem;height:1.5rem;border-radius:var(--tui-radius-s);color:var(--tui-primary-text);cursor:pointer;margin:0;box-shadow:inset 0 0 0 .0625rem var(--tui-clear-active)}:host:before{position:absolute;top:0;left:0;width:100%;height:100%;content:\"\";background:currentColor;-webkit-mask:url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\"></svg>') center / 100%;mask:url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\"></svg>') center / 100%;transform:scale(0);transition:transform var(--tui-duration) ease-in-out,-webkit-mask 0s var(--tui-duration) ease-in-out;transition:transform var(--tui-duration) ease-in-out,mask 0s var(--tui-duration) ease-in-out;transition:transform var(--tui-duration) ease-in-out,mask 0s var(--tui-duration) ease-in-out,-webkit-mask 0s var(--tui-duration) ease-in-out}:host:disabled._readonly{opacity:1}:host:checked,:host:indeterminate{box-shadow:none;background:var(--tui-primary)}:host:checked:hover,:host:indeterminate:hover{background:var(--tui-primary-hover)}:host:checked:active,:host:indeterminate:active{background:var(--tui-primary-active)}:host:checked:before,:host:indeterminate:before{-webkit-mask-image:var(--t-mask);mask-image:var(--t-mask);transform:scale(1);transition:transform var(--tui-duration) ease-in-out,-webkit-mask 0s ease-in-out;transition:transform var(--tui-duration) ease-in-out,mask 0s ease-in-out;transition:transform var(--tui-duration) ease-in-out,mask 0s ease-in-out,-webkit-mask 0s ease-in-out}:host[data-size=s]{width:1rem;height:1rem;border-radius:var(--tui-radius-xs)}:host._invalid{box-shadow:inset 0 0 0 .0625rem var(--tui-error-bg-hover)}:host._invalid:checked,:host._invalid:indeterminate{background:var(--tui-error-fill)}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiCheckboxComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'input[type="checkbox"][tuiCheckbox]',
                    template: '',
                    styleUrls: ['./checkbox.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [TuiDestroyService],
                    host: {
                        tuiAppearance: '',
                        '[disabled]': '!control || control.disabled',
                        '[attr.data-size]': 'size',
                        '[class._invalid]': 'control?.invalid && control?.touched',
                        '[class._readonly]': '!control',
                        '[style.--t-mask]': 'icon',
                    },
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_ICON_RESOLVER]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_CHECKBOX_OPTIONS]
                }] }, { type: i1.Observable, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiDestroyService]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: i2.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [NgControl]
                }] }]; }, propDecorators: { size: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tib3guY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvZXhwZXJpbWVudGFsL2NvbXBvbmVudHMvY2hlY2tib3gvY2hlY2tib3guY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDSCx1QkFBdUIsRUFDdkIsaUJBQWlCLEVBQ2pCLFNBQVMsRUFDVCxVQUFVLEVBQ1YsTUFBTSxFQUNOLEtBQUssRUFFTCxRQUFRLEVBQ1IsSUFBSSxHQUNQLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBQyxTQUFTLEVBQUUsT0FBTyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDbEQsT0FBTyxFQUNILGVBQWUsRUFDZixpQkFBaUIsRUFDakIsV0FBVyxFQUVYLFFBQVEsR0FDWCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSwrQkFBK0IsQ0FBQztBQUVoRSxPQUFPLEVBQUMsb0JBQW9CLEVBQUUsU0FBUyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFFL0QsT0FBTyxFQUFDLG9CQUFvQixFQUFxQixNQUFNLG9CQUFvQixDQUFDOzs7O0FBaUI1RSxNQUFNLE9BQU8sb0JBQW9CO0lBSTdCLFlBQ2dELEdBQXNCLEVBQ3RCLFFBQWtDLEVBQy9CLE9BQTJCLEVBQ3RCLFFBQTZCLEVBQzVDLEVBQWdDLEVBQzdCLE9BQXlCO1FBTHJCLFFBQUcsR0FBSCxHQUFHLENBQW1CO1FBQ3RCLGFBQVEsR0FBUixRQUFRLENBQTBCO1FBQy9CLFlBQU8sR0FBUCxPQUFPLENBQW9CO1FBQ3RCLGFBQVEsR0FBUixRQUFRLENBQXFCO1FBQzVDLE9BQUUsR0FBRixFQUFFLENBQThCO1FBQzdCLFlBQU8sR0FBUCxPQUFPLENBQWtCO1FBUnJFLFNBQUksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQztJQVN0QixDQUFDO0lBRUosSUFBSSxJQUFJO1FBQ0osTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsYUFBYTtZQUM5QyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsYUFBYTtZQUNsQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDO1FBQ2pDLE1BQU0sSUFBSSxHQUFHLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRTlELE9BQU8sT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7SUFDekMsQ0FBQztJQUVELFFBQVE7O1FBQ0osSUFBSSxDQUFDLENBQUEsTUFBQSxJQUFJLENBQUMsT0FBTywwQ0FBRSxZQUFZLENBQUEsRUFBRTtZQUM3QixPQUFPO1NBQ1Y7UUFFRCxlQUFlLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQzthQUN4QixJQUFJLENBQUMsb0JBQW9CLEVBQUUsRUFBRSxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7YUFDMUUsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ2Ysa0RBQWtEO1lBQ2xELE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxPQUFPLFlBQVksT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1lBRXpFLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLGFBQWEsR0FBRyxHQUFHLEtBQUssSUFBSSxDQUFDO1FBQ3ZELENBQUMsQ0FBQyxDQUFDO0lBQ1gsQ0FBQzs7a0hBbkNRLG9CQUFvQixrQkFLakIsaUJBQWlCLGFBQ2pCLGlCQUFpQixhQUNqQixvQkFBb0IsYUFDWixpQkFBaUIseUJBQ3pCLFVBQVUsYUFDRSxTQUFTO3NHQVZ4QixvQkFBb0Isa1ZBVmxCLENBQUMsaUJBQWlCLENBQUMsMEJBSHBCLEVBQUU7NEZBYUgsb0JBQW9CO2tCQWZoQyxTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSxxQ0FBcUM7b0JBQy9DLFFBQVEsRUFBRSxFQUFFO29CQUNaLFNBQVMsRUFBRSxDQUFDLHVCQUF1QixDQUFDO29CQUNwQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFDL0MsU0FBUyxFQUFFLENBQUMsaUJBQWlCLENBQUM7b0JBQzlCLElBQUksRUFBRTt3QkFDRixhQUFhLEVBQUUsRUFBRTt3QkFDakIsWUFBWSxFQUFFLDhCQUE4Qjt3QkFDNUMsa0JBQWtCLEVBQUUsTUFBTTt3QkFDMUIsa0JBQWtCLEVBQUUsc0NBQXNDO3dCQUMxRCxtQkFBbUIsRUFBRSxVQUFVO3dCQUMvQixrQkFBa0IsRUFBRSxNQUFNO3FCQUM3QjtpQkFDSjs7MEJBTVEsTUFBTTsyQkFBQyxpQkFBaUI7OzBCQUN4QixNQUFNOzJCQUFDLGlCQUFpQjs7MEJBQ3hCLE1BQU07MkJBQUMsb0JBQW9COzswQkFDM0IsSUFBSTs7MEJBQUksTUFBTTsyQkFBQyxpQkFBaUI7OzBCQUNoQyxNQUFNOzJCQUFDLFVBQVU7OzBCQUNqQixRQUFROzswQkFBSSxNQUFNOzJCQUFDLFNBQVM7NENBUmpDLElBQUk7c0JBREgsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gICAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgQ29tcG9uZW50LFxuICAgIEVsZW1lbnRSZWYsXG4gICAgSW5qZWN0LFxuICAgIElucHV0LFxuICAgIE9uSW5pdCxcbiAgICBPcHRpb25hbCxcbiAgICBTZWxmLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7TmdDb250cm9sLCBOZ01vZGVsfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQge1xuICAgIHR1aUNvbnRyb2xWYWx1ZSxcbiAgICBUdWlEZXN0cm95U2VydmljZSxcbiAgICB0dWlJc1N0cmluZyxcbiAgICBUdWlTdHJpbmdIYW5kbGVyLFxuICAgIHR1aVdhdGNoLFxufSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7VFVJX0lDT05fUkVTT0xWRVJ9IGZyb20gJ0B0YWlnYS11aS9leHBlcmltZW50YWwvdG9rZW5zJztcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5pbXBvcnQge2Rpc3RpbmN0VW50aWxDaGFuZ2VkLCB0YWtlVW50aWx9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHtUVUlfQ0hFQ0tCT1hfT1BUSU9OUywgVHVpQ2hlY2tib3hPcHRpb25zfSBmcm9tICcuL2NoZWNrYm94Lm9wdGlvbnMnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2lucHV0W3R5cGU9XCJjaGVja2JveFwiXVt0dWlDaGVja2JveF0nLFxuICAgIHRlbXBsYXRlOiAnJyxcbiAgICBzdHlsZVVybHM6IFsnLi9jaGVja2JveC5zdHlsZS5sZXNzJ10sXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gICAgcHJvdmlkZXJzOiBbVHVpRGVzdHJveVNlcnZpY2VdLFxuICAgIGhvc3Q6IHtcbiAgICAgICAgdHVpQXBwZWFyYW5jZTogJycsIC8vIEFwcGx5IGJhc2UgYXBwZWFyYW5jZVxuICAgICAgICAnW2Rpc2FibGVkXSc6ICchY29udHJvbCB8fCBjb250cm9sLmRpc2FibGVkJyxcbiAgICAgICAgJ1thdHRyLmRhdGEtc2l6ZV0nOiAnc2l6ZScsXG4gICAgICAgICdbY2xhc3MuX2ludmFsaWRdJzogJ2NvbnRyb2w/LmludmFsaWQgJiYgY29udHJvbD8udG91Y2hlZCcsXG4gICAgICAgICdbY2xhc3MuX3JlYWRvbmx5XSc6ICchY29udHJvbCcsXG4gICAgICAgICdbc3R5bGUuLS10LW1hc2tdJzogJ2ljb24nLFxuICAgIH0sXG59KVxuZXhwb3J0IGNsYXNzIFR1aUNoZWNrYm94Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgICBASW5wdXQoKVxuICAgIHNpemUgPSB0aGlzLm9wdGlvbnMuc2l6ZTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KENoYW5nZURldGVjdG9yUmVmKSBwcml2YXRlIHJlYWRvbmx5IGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgICAgIEBJbmplY3QoVFVJX0lDT05fUkVTT0xWRVIpIHByaXZhdGUgcmVhZG9ubHkgcmVzb2x2ZXI6IFR1aVN0cmluZ0hhbmRsZXI8c3RyaW5nPixcbiAgICAgICAgQEluamVjdChUVUlfQ0hFQ0tCT1hfT1BUSU9OUykgcHJpdmF0ZSByZWFkb25seSBvcHRpb25zOiBUdWlDaGVja2JveE9wdGlvbnMsXG4gICAgICAgIEBTZWxmKCkgQEluamVjdChUdWlEZXN0cm95U2VydmljZSkgcHJpdmF0ZSByZWFkb25seSBkZXN0cm95JDogT2JzZXJ2YWJsZTx1bmtub3duPixcbiAgICAgICAgQEluamVjdChFbGVtZW50UmVmKSBwcml2YXRlIHJlYWRvbmx5IGVsOiBFbGVtZW50UmVmPEhUTUxJbnB1dEVsZW1lbnQ+LFxuICAgICAgICBAT3B0aW9uYWwoKSBASW5qZWN0KE5nQ29udHJvbCkgcmVhZG9ubHkgY29udHJvbDogTmdDb250cm9sIHwgbnVsbCxcbiAgICApIHt9XG5cbiAgICBnZXQgaWNvbigpOiBzdHJpbmcge1xuICAgICAgICBjb25zdCBvcHRpb24gPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuaW5kZXRlcm1pbmF0ZVxuICAgICAgICAgICAgPyB0aGlzLm9wdGlvbnMuaWNvbnMuaW5kZXRlcm1pbmF0ZVxuICAgICAgICAgICAgOiB0aGlzLm9wdGlvbnMuaWNvbnMuY2hlY2tlZDtcbiAgICAgICAgY29uc3QgaWNvbiA9IHR1aUlzU3RyaW5nKG9wdGlvbikgPyBvcHRpb24gOiBvcHRpb24odGhpcy5zaXplKTtcblxuICAgICAgICByZXR1cm4gYHVybCgke3RoaXMucmVzb2x2ZXIoaWNvbil9KWA7XG4gICAgfVxuXG4gICAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgICAgIGlmICghdGhpcy5jb250cm9sPy52YWx1ZUNoYW5nZXMpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHR1aUNvbnRyb2xWYWx1ZSh0aGlzLmNvbnRyb2wpXG4gICAgICAgICAgICAucGlwZShkaXN0aW5jdFVudGlsQ2hhbmdlZCgpLCB0dWlXYXRjaCh0aGlzLmNkciksIHRha2VVbnRpbCh0aGlzLmRlc3Ryb3kkKSlcbiAgICAgICAgICAgIC5zdWJzY3JpYmUodmFsdWUgPT4ge1xuICAgICAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIvaXNzdWVzLzE0OTg4XG4gICAgICAgICAgICAgICAgY29uc3QgZml4ID0gdGhpcy5jb250cm9sIGluc3RhbmNlb2YgTmdNb2RlbCA/IHRoaXMuY29udHJvbC5tb2RlbCA6IHZhbHVlO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5lbC5uYXRpdmVFbGVtZW50LmluZGV0ZXJtaW5hdGUgPSBmaXggPT09IG51bGw7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG59XG4iXX0=