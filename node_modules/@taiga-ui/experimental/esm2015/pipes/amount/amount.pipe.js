import { Inject, Pipe } from '@angular/core';
import { tuiFormatCurrency, tuiFormatSignSymbol } from '@taiga-ui/addon-commerce';
import { CHAR_NO_BREAK_SPACE } from '@taiga-ui/cdk';
import { TUI_NUMBER_FORMAT_OBSERVABLE, tuiFormatNumber, } from '@taiga-ui/core';
import { map } from 'rxjs/operators';
import { TUI_AMOUNT_OPTIONS } from './amount.options';
import * as i0 from "@angular/core";
import * as i1 from "rxjs";
const DEFAULT_DECIMAL_LIMIT = 2;
export class TuiAmountPipePipe {
    constructor(options, format) {
        this.options = options;
        this.format = format;
    }
    transform(value, currency = this.options.currency, currencyAlign = this.options.currencyAlign) {
        return this.format.pipe(map(format => {
            const sign = tuiFormatSignSymbol(value, this.options.sign);
            const currencySymbol = tuiFormatCurrency(currency);
            const formatted = tuiFormatNumber(Math.abs(value), Object.assign(Object.assign({}, format), { decimalLimit: this.getDecimalLimit(value, Number.isNaN(format.decimalLimit)
                    ? DEFAULT_DECIMAL_LIMIT
                    : format.decimalLimit, (format === null || format === void 0 ? void 0 : format.decimal) || 'not-zero') }));
            const space = (currencySymbol === null || currencySymbol === void 0 ? void 0 : currencySymbol.length) > 1 || currencyAlign === 'right'
                ? CHAR_NO_BREAK_SPACE
                : '';
            return currencyAlign === 'right'
                ? `${sign}${formatted}${space}${currencySymbol}`
                : `${sign}${currencySymbol}${space}${formatted}`;
        }));
    }
    getDecimalLimit(value, limit, decimal) {
        return decimal === 'always' || (decimal === 'not-zero' && value % 1) ? limit : 0;
    }
}
TuiAmountPipePipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiAmountPipePipe, deps: [{ token: TUI_AMOUNT_OPTIONS }, { token: TUI_NUMBER_FORMAT_OBSERVABLE }], target: i0.ɵɵFactoryTarget.Pipe });
TuiAmountPipePipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiAmountPipePipe, name: "tuiAmount" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiAmountPipePipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'tuiAmount',
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_AMOUNT_OPTIONS]
                }] }, { type: i1.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_NUMBER_FORMAT_OBSERVABLE]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW1vdW50LnBpcGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9leHBlcmltZW50YWwvcGlwZXMvYW1vdW50L2Ftb3VudC5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxNQUFNLEVBQUUsSUFBSSxFQUFnQixNQUFNLGVBQWUsQ0FBQztBQUMxRCxPQUFPLEVBQUMsaUJBQWlCLEVBQUUsbUJBQW1CLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUNoRixPQUFPLEVBQUMsbUJBQW1CLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDbEQsT0FBTyxFQUNILDRCQUE0QixFQUU1QixlQUFlLEdBRWxCLE1BQU0sZ0JBQWdCLENBQUM7QUFFeEIsT0FBTyxFQUFDLEdBQUcsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBRW5DLE9BQU8sRUFBQyxrQkFBa0IsRUFBbUIsTUFBTSxrQkFBa0IsQ0FBQzs7O0FBRXRFLE1BQU0scUJBQXFCLEdBQUcsQ0FBQyxDQUFDO0FBS2hDLE1BQU0sT0FBTyxpQkFBaUI7SUFDMUIsWUFDaUQsT0FBeUIsRUFFckQsTUFBMkM7UUFGZixZQUFPLEdBQVAsT0FBTyxDQUFrQjtRQUVyRCxXQUFNLEdBQU4sTUFBTSxDQUFxQztJQUM3RCxDQUFDO0lBRUosU0FBUyxDQUNMLEtBQWEsRUFDYixRQUFRLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQ2hDLGFBQWEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWE7UUFFMUMsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDbkIsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ1QsTUFBTSxJQUFJLEdBQUcsbUJBQW1CLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDM0QsTUFBTSxjQUFjLEdBQUcsaUJBQWlCLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDbkQsTUFBTSxTQUFTLEdBQUcsZUFBZSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLGtDQUMxQyxNQUFNLEtBQ1QsWUFBWSxFQUFFLElBQUksQ0FBQyxlQUFlLENBQzlCLEtBQUssRUFDTCxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUM7b0JBQzdCLENBQUMsQ0FBQyxxQkFBcUI7b0JBQ3ZCLENBQUMsQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUN6QixDQUFBLE1BQU0sYUFBTixNQUFNLHVCQUFOLE1BQU0sQ0FBRSxPQUFPLEtBQUksVUFBVSxDQUNoQyxJQUNILENBQUM7WUFDSCxNQUFNLEtBQUssR0FDUCxDQUFBLGNBQWMsYUFBZCxjQUFjLHVCQUFkLGNBQWMsQ0FBRSxNQUFNLElBQUcsQ0FBQyxJQUFJLGFBQWEsS0FBSyxPQUFPO2dCQUNuRCxDQUFDLENBQUMsbUJBQW1CO2dCQUNyQixDQUFDLENBQUMsRUFBRSxDQUFDO1lBRWIsT0FBTyxhQUFhLEtBQUssT0FBTztnQkFDNUIsQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLFNBQVMsR0FBRyxLQUFLLEdBQUcsY0FBYyxFQUFFO2dCQUNoRCxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsY0FBYyxHQUFHLEtBQUssR0FBRyxTQUFTLEVBQUUsQ0FBQztRQUN6RCxDQUFDLENBQUMsQ0FDTCxDQUFDO0lBQ04sQ0FBQztJQUVPLGVBQWUsQ0FBQyxLQUFhLEVBQUUsS0FBYSxFQUFFLE9BQW1CO1FBQ3JFLE9BQU8sT0FBTyxLQUFLLFFBQVEsSUFBSSxDQUFDLE9BQU8sS0FBSyxVQUFVLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNyRixDQUFDOzsrR0F4Q1EsaUJBQWlCLGtCQUVkLGtCQUFrQixhQUNsQiw0QkFBNEI7NkdBSC9CLGlCQUFpQjs0RkFBakIsaUJBQWlCO2tCQUg3QixJQUFJO21CQUFDO29CQUNGLElBQUksRUFBRSxXQUFXO2lCQUNwQjs7MEJBR1EsTUFBTTsyQkFBQyxrQkFBa0I7OzBCQUN6QixNQUFNOzJCQUFDLDRCQUE0QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0LCBQaXBlLCBQaXBlVHJhbnNmb3JtfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7dHVpRm9ybWF0Q3VycmVuY3ksIHR1aUZvcm1hdFNpZ25TeW1ib2x9IGZyb20gJ0B0YWlnYS11aS9hZGRvbi1jb21tZXJjZSc7XG5pbXBvcnQge0NIQVJfTk9fQlJFQUtfU1BBQ0V9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtcbiAgICBUVUlfTlVNQkVSX0ZPUk1BVF9PQlNFUlZBQkxFLFxuICAgIFR1aURlY2ltYWwsXG4gICAgdHVpRm9ybWF0TnVtYmVyLFxuICAgIFR1aU51bWJlckZvcm1hdFNldHRpbmdzLFxufSBmcm9tICdAdGFpZ2EtdWkvY29yZSc7XG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHttYXB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHtUVUlfQU1PVU5UX09QVElPTlMsIFR1aUFtb3VudE9wdGlvbnN9IGZyb20gJy4vYW1vdW50Lm9wdGlvbnMnO1xuXG5jb25zdCBERUZBVUxUX0RFQ0lNQUxfTElNSVQgPSAyO1xuXG5AUGlwZSh7XG4gICAgbmFtZTogJ3R1aUFtb3VudCcsXG59KVxuZXhwb3J0IGNsYXNzIFR1aUFtb3VudFBpcGVQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoVFVJX0FNT1VOVF9PUFRJT05TKSBwcml2YXRlIHJlYWRvbmx5IG9wdGlvbnM6IFR1aUFtb3VudE9wdGlvbnMsXG4gICAgICAgIEBJbmplY3QoVFVJX05VTUJFUl9GT1JNQVRfT0JTRVJWQUJMRSlcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBmb3JtYXQ6IE9ic2VydmFibGU8VHVpTnVtYmVyRm9ybWF0U2V0dGluZ3M+LFxuICAgICkge31cblxuICAgIHRyYW5zZm9ybShcbiAgICAgICAgdmFsdWU6IG51bWJlcixcbiAgICAgICAgY3VycmVuY3kgPSB0aGlzLm9wdGlvbnMuY3VycmVuY3ksXG4gICAgICAgIGN1cnJlbmN5QWxpZ24gPSB0aGlzLm9wdGlvbnMuY3VycmVuY3lBbGlnbixcbiAgICApOiBPYnNlcnZhYmxlPHN0cmluZz4ge1xuICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXQucGlwZShcbiAgICAgICAgICAgIG1hcChmb3JtYXQgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNpZ24gPSB0dWlGb3JtYXRTaWduU3ltYm9sKHZhbHVlLCB0aGlzLm9wdGlvbnMuc2lnbik7XG4gICAgICAgICAgICAgICAgY29uc3QgY3VycmVuY3lTeW1ib2wgPSB0dWlGb3JtYXRDdXJyZW5jeShjdXJyZW5jeSk7XG4gICAgICAgICAgICAgICAgY29uc3QgZm9ybWF0dGVkID0gdHVpRm9ybWF0TnVtYmVyKE1hdGguYWJzKHZhbHVlKSwge1xuICAgICAgICAgICAgICAgICAgICAuLi5mb3JtYXQsXG4gICAgICAgICAgICAgICAgICAgIGRlY2ltYWxMaW1pdDogdGhpcy5nZXREZWNpbWFsTGltaXQoXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIE51bWJlci5pc05hTihmb3JtYXQuZGVjaW1hbExpbWl0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gREVGQVVMVF9ERUNJTUFMX0xJTUlUXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBmb3JtYXQuZGVjaW1hbExpbWl0LFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0Py5kZWNpbWFsIHx8ICdub3QtemVybycsXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3BhY2UgPVxuICAgICAgICAgICAgICAgICAgICBjdXJyZW5jeVN5bWJvbD8ubGVuZ3RoID4gMSB8fCBjdXJyZW5jeUFsaWduID09PSAncmlnaHQnXG4gICAgICAgICAgICAgICAgICAgICAgICA/IENIQVJfTk9fQlJFQUtfU1BBQ0VcbiAgICAgICAgICAgICAgICAgICAgICAgIDogJyc7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gY3VycmVuY3lBbGlnbiA9PT0gJ3JpZ2h0J1xuICAgICAgICAgICAgICAgICAgICA/IGAke3NpZ259JHtmb3JtYXR0ZWR9JHtzcGFjZX0ke2N1cnJlbmN5U3ltYm9sfWBcbiAgICAgICAgICAgICAgICAgICAgOiBgJHtzaWdufSR7Y3VycmVuY3lTeW1ib2x9JHtzcGFjZX0ke2Zvcm1hdHRlZH1gO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXREZWNpbWFsTGltaXQodmFsdWU6IG51bWJlciwgbGltaXQ6IG51bWJlciwgZGVjaW1hbDogVHVpRGVjaW1hbCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiBkZWNpbWFsID09PSAnYWx3YXlzJyB8fCAoZGVjaW1hbCA9PT0gJ25vdC16ZXJvJyAmJiB2YWx1ZSAlIDEpID8gbGltaXQgOiAwO1xuICAgIH1cbn1cbiJdfQ==