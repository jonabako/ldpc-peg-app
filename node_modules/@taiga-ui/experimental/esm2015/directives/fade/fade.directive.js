import { Directive, ElementRef, HostBinding, Inject, Input, NgZone, Self, } from '@angular/core';
import { MUTATION_OBSERVER_INIT, MutationObserverService, } from '@ng-web-apis/mutation-observer';
import { TuiDestroyService, TuiDirectiveStylesService, TuiResizeService, tuiZonefree, } from '@taiga-ui/cdk';
import { fromEvent, merge } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { TuiFadeComponent } from './fade.component';
import * as i0 from "@angular/core";
import * as i1 from "rxjs";
import * as i2 from "@taiga-ui/cdk";
const BUFFER = 1; // buffer for rounding issues
export class TuiFadeDirective {
    constructor(destroy$, resize$, mutate$, element, zone, directiveStyles) {
        // TODO: Remove when lh CSS units are supported: https://caniuse.com/mdn-css_types_length_lh
        this.lineHeight = null;
        this.size = '1.5em';
        this.offset = '0em';
        this.orientation = 'horizontal';
        const el = element.nativeElement;
        directiveStyles.addComponent(TuiFadeComponent);
        merge(resize$, mutate$, fromEvent(el, 'scroll'))
            .pipe(tuiZonefree(zone), takeUntil(destroy$))
            .subscribe(() => {
            el.classList.toggle('_start', !!el.scrollLeft || !!el.scrollTop);
            el.classList.toggle('_end', this.isEnd(el));
        });
    }
    isEnd(el) {
        if (this.orientation === 'vertical') {
            return Math.round(el.scrollTop) < el.scrollHeight - el.clientHeight - BUFFER;
        }
        return (Math.round(el.scrollLeft) < el.scrollWidth - el.clientWidth - BUFFER ||
            // horizontal multiline fade can kick in early due to hanging elements of fonts so using bigger buffer
            el.scrollHeight > el.clientHeight + 4 * BUFFER);
    }
}
TuiFadeDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiFadeDirective, deps: [{ token: TuiDestroyService, self: true }, { token: TuiResizeService }, { token: MutationObserverService }, { token: ElementRef }, { token: NgZone }, { token: TuiDirectiveStylesService }], target: i0.ɵɵFactoryTarget.Directive });
TuiFadeDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiFadeDirective, selector: "[tuiFade]", inputs: { lineHeight: ["tuiFadeHeight", "lineHeight"], size: ["tuiFadeSize", "size"], offset: ["tuiFadeOffset", "offset"], orientation: ["tuiFade", "orientation"] }, host: { properties: { "style.line-height": "this.lineHeight", "style.--line-height": "this.lineHeight", "style.--fade-size": "this.size", "style.--fade-offset": "this.offset", "attr.data-orientation": "this.orientation" } }, providers: [
        TuiDestroyService,
        TuiResizeService,
        MutationObserverService,
        {
            provide: MUTATION_OBSERVER_INIT,
            useValue: { characterData: true, subtree: true },
        },
    ], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiFadeDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiFade]',
                    providers: [
                        TuiDestroyService,
                        TuiResizeService,
                        MutationObserverService,
                        {
                            provide: MUTATION_OBSERVER_INIT,
                            useValue: { characterData: true, subtree: true },
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i1.Observable, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiDestroyService]
                }] }, { type: i1.Observable, decorators: [{
                    type: Inject,
                    args: [TuiResizeService]
                }] }, { type: i1.Observable, decorators: [{
                    type: Inject,
                    args: [MutationObserverService]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: i0.NgZone, decorators: [{
                    type: Inject,
                    args: [NgZone]
                }] }, { type: i2.TuiDirectiveStylesService, decorators: [{
                    type: Inject,
                    args: [TuiDirectiveStylesService]
                }] }]; }, propDecorators: { lineHeight: [{
                type: Input,
                args: ['tuiFadeHeight']
            }, {
                type: HostBinding,
                args: ['style.line-height']
            }, {
                type: HostBinding,
                args: ['style.--line-height']
            }], size: [{
                type: Input,
                args: ['tuiFadeSize']
            }, {
                type: HostBinding,
                args: ['style.--fade-size']
            }], offset: [{
                type: Input,
                args: ['tuiFadeOffset']
            }, {
                type: HostBinding,
                args: ['style.--fade-offset']
            }], orientation: [{
                type: Input,
                args: ['tuiFade']
            }, {
                type: HostBinding,
                args: ['attr.data-orientation']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFkZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9leHBlcmltZW50YWwvZGlyZWN0aXZlcy9mYWRlL2ZhZGUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDSCxTQUFTLEVBQ1QsVUFBVSxFQUNWLFdBQVcsRUFDWCxNQUFNLEVBQ04sS0FBSyxFQUNMLE1BQU0sRUFDTixJQUFJLEdBQ1AsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUNILHNCQUFzQixFQUN0Qix1QkFBdUIsR0FDMUIsTUFBTSxnQ0FBZ0MsQ0FBQztBQUN4QyxPQUFPLEVBQ0gsaUJBQWlCLEVBQ2pCLHlCQUF5QixFQUN6QixnQkFBZ0IsRUFDaEIsV0FBVyxHQUNkLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBQyxTQUFTLEVBQUUsS0FBSyxFQUFhLE1BQU0sTUFBTSxDQUFDO0FBQ2xELE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUV6QyxPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSxrQkFBa0IsQ0FBQzs7OztBQUVsRCxNQUFNLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyw2QkFBNkI7QUFjL0MsTUFBTSxPQUFPLGdCQUFnQjtJQW1CekIsWUFDdUMsUUFBNkIsRUFDdEMsT0FBNEIsRUFDckIsT0FBNEIsRUFDekMsT0FBZ0MsRUFDcEMsSUFBWSxFQUNPLGVBQTBDO1FBeEJqRiw0RkFBNEY7UUFJNUYsZUFBVSxHQUFrQixJQUFJLENBQUM7UUFJakMsU0FBSSxHQUFHLE9BQU8sQ0FBQztRQUlmLFdBQU0sR0FBRyxLQUFLLENBQUM7UUFJZixnQkFBVyxHQUF3QixZQUFZLENBQUM7UUFVNUMsTUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQztRQUVqQyxlQUFlLENBQUMsWUFBWSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDL0MsS0FBSyxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsU0FBUyxDQUFDLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQzthQUMzQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFFLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQzthQUM1QyxTQUFTLENBQUMsR0FBRyxFQUFFO1lBQ1osRUFBRSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDakUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNoRCxDQUFDLENBQUMsQ0FBQztJQUNYLENBQUM7SUFFTyxLQUFLLENBQUMsRUFBZTtRQUN6QixJQUFJLElBQUksQ0FBQyxXQUFXLEtBQUssVUFBVSxFQUFFO1lBQ2pDLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLFlBQVksR0FBRyxFQUFFLENBQUMsWUFBWSxHQUFHLE1BQU0sQ0FBQztTQUNoRjtRQUVELE9BQU8sQ0FDSCxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsV0FBVyxHQUFHLEVBQUUsQ0FBQyxXQUFXLEdBQUcsTUFBTTtZQUNwRSxzR0FBc0c7WUFDdEcsRUFBRSxDQUFDLFlBQVksR0FBRyxFQUFFLENBQUMsWUFBWSxHQUFHLENBQUMsR0FBRyxNQUFNLENBQ2pELENBQUM7SUFDTixDQUFDOzs4R0FoRFEsZ0JBQWdCLGtCQW9CTCxpQkFBaUIseUJBQ3pCLGdCQUFnQixhQUNoQix1QkFBdUIsYUFDdkIsVUFBVSxhQUNWLE1BQU0sYUFDTix5QkFBeUI7a0dBekI1QixnQkFBZ0IsMmFBVmQ7UUFDUCxpQkFBaUI7UUFDakIsZ0JBQWdCO1FBQ2hCLHVCQUF1QjtRQUN2QjtZQUNJLE9BQU8sRUFBRSxzQkFBc0I7WUFDL0IsUUFBUSxFQUFFLEVBQUMsYUFBYSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFDO1NBQ2pEO0tBQ0o7NEZBRVEsZ0JBQWdCO2tCQVo1QixTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSxXQUFXO29CQUNyQixTQUFTLEVBQUU7d0JBQ1AsaUJBQWlCO3dCQUNqQixnQkFBZ0I7d0JBQ2hCLHVCQUF1Qjt3QkFDdkI7NEJBQ0ksT0FBTyxFQUFFLHNCQUFzQjs0QkFDL0IsUUFBUSxFQUFFLEVBQUMsYUFBYSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFDO3lCQUNqRDtxQkFDSjtpQkFDSjs7MEJBcUJRLElBQUk7OzBCQUFJLE1BQU07MkJBQUMsaUJBQWlCOzswQkFDaEMsTUFBTTsyQkFBQyxnQkFBZ0I7OzBCQUN2QixNQUFNOzJCQUFDLHVCQUF1Qjs7MEJBQzlCLE1BQU07MkJBQUMsVUFBVTs7MEJBQ2pCLE1BQU07MkJBQUMsTUFBTTs7MEJBQ2IsTUFBTTsyQkFBQyx5QkFBeUI7NENBcEJyQyxVQUFVO3NCQUhULEtBQUs7dUJBQUMsZUFBZTs7c0JBQ3JCLFdBQVc7dUJBQUMsbUJBQW1COztzQkFDL0IsV0FBVzt1QkFBQyxxQkFBcUI7Z0JBS2xDLElBQUk7c0JBRkgsS0FBSzt1QkFBQyxhQUFhOztzQkFDbkIsV0FBVzt1QkFBQyxtQkFBbUI7Z0JBS2hDLE1BQU07c0JBRkwsS0FBSzt1QkFBQyxlQUFlOztzQkFDckIsV0FBVzt1QkFBQyxxQkFBcUI7Z0JBS2xDLFdBQVc7c0JBRlYsS0FBSzt1QkFBQyxTQUFTOztzQkFDZixXQUFXO3VCQUFDLHVCQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgRGlyZWN0aXZlLFxuICAgIEVsZW1lbnRSZWYsXG4gICAgSG9zdEJpbmRpbmcsXG4gICAgSW5qZWN0LFxuICAgIElucHV0LFxuICAgIE5nWm9uZSxcbiAgICBTZWxmLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gICAgTVVUQVRJT05fT0JTRVJWRVJfSU5JVCxcbiAgICBNdXRhdGlvbk9ic2VydmVyU2VydmljZSxcbn0gZnJvbSAnQG5nLXdlYi1hcGlzL211dGF0aW9uLW9ic2VydmVyJztcbmltcG9ydCB7XG4gICAgVHVpRGVzdHJveVNlcnZpY2UsXG4gICAgVHVpRGlyZWN0aXZlU3R5bGVzU2VydmljZSxcbiAgICBUdWlSZXNpemVTZXJ2aWNlLFxuICAgIHR1aVpvbmVmcmVlLFxufSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7VHVpT3JpZW50YXRpb259IGZyb20gJ0B0YWlnYS11aS9jb3JlJztcbmltcG9ydCB7ZnJvbUV2ZW50LCBtZXJnZSwgT2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5pbXBvcnQge3Rha2VVbnRpbH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQge1R1aUZhZGVDb21wb25lbnR9IGZyb20gJy4vZmFkZS5jb21wb25lbnQnO1xuXG5jb25zdCBCVUZGRVIgPSAxOyAvLyBidWZmZXIgZm9yIHJvdW5kaW5nIGlzc3Vlc1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1t0dWlGYWRlXScsXG4gICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIFR1aURlc3Ryb3lTZXJ2aWNlLFxuICAgICAgICBUdWlSZXNpemVTZXJ2aWNlLFxuICAgICAgICBNdXRhdGlvbk9ic2VydmVyU2VydmljZSxcbiAgICAgICAge1xuICAgICAgICAgICAgcHJvdmlkZTogTVVUQVRJT05fT0JTRVJWRVJfSU5JVCxcbiAgICAgICAgICAgIHVzZVZhbHVlOiB7Y2hhcmFjdGVyRGF0YTogdHJ1ZSwgc3VidHJlZTogdHJ1ZX0sXG4gICAgICAgIH0sXG4gICAgXSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpRmFkZURpcmVjdGl2ZSB7XG4gICAgLy8gVE9ETzogUmVtb3ZlIHdoZW4gbGggQ1NTIHVuaXRzIGFyZSBzdXBwb3J0ZWQ6IGh0dHBzOi8vY2FuaXVzZS5jb20vbWRuLWNzc190eXBlc19sZW5ndGhfbGhcbiAgICBASW5wdXQoJ3R1aUZhZGVIZWlnaHQnKVxuICAgIEBIb3N0QmluZGluZygnc3R5bGUubGluZS1oZWlnaHQnKVxuICAgIEBIb3N0QmluZGluZygnc3R5bGUuLS1saW5lLWhlaWdodCcpXG4gICAgbGluZUhlaWdodDogc3RyaW5nIHwgbnVsbCA9IG51bGw7XG5cbiAgICBASW5wdXQoJ3R1aUZhZGVTaXplJylcbiAgICBASG9zdEJpbmRpbmcoJ3N0eWxlLi0tZmFkZS1zaXplJylcbiAgICBzaXplID0gJzEuNWVtJztcblxuICAgIEBJbnB1dCgndHVpRmFkZU9mZnNldCcpXG4gICAgQEhvc3RCaW5kaW5nKCdzdHlsZS4tLWZhZGUtb2Zmc2V0JylcbiAgICBvZmZzZXQgPSAnMGVtJztcblxuICAgIEBJbnB1dCgndHVpRmFkZScpXG4gICAgQEhvc3RCaW5kaW5nKCdhdHRyLmRhdGEtb3JpZW50YXRpb24nKVxuICAgIG9yaWVudGF0aW9uOiBUdWlPcmllbnRhdGlvbiB8ICcnID0gJ2hvcml6b250YWwnO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBTZWxmKCkgQEluamVjdChUdWlEZXN0cm95U2VydmljZSkgZGVzdHJveSQ6IE9ic2VydmFibGU8dW5rbm93bj4sXG4gICAgICAgIEBJbmplY3QoVHVpUmVzaXplU2VydmljZSkgcmVzaXplJDogT2JzZXJ2YWJsZTx1bmtub3duPixcbiAgICAgICAgQEluamVjdChNdXRhdGlvbk9ic2VydmVyU2VydmljZSkgbXV0YXRlJDogT2JzZXJ2YWJsZTx1bmtub3duPixcbiAgICAgICAgQEluamVjdChFbGVtZW50UmVmKSBlbGVtZW50OiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PixcbiAgICAgICAgQEluamVjdChOZ1pvbmUpIHpvbmU6IE5nWm9uZSxcbiAgICAgICAgQEluamVjdChUdWlEaXJlY3RpdmVTdHlsZXNTZXJ2aWNlKSBkaXJlY3RpdmVTdHlsZXM6IFR1aURpcmVjdGl2ZVN0eWxlc1NlcnZpY2UsXG4gICAgKSB7XG4gICAgICAgIGNvbnN0IGVsID0gZWxlbWVudC5uYXRpdmVFbGVtZW50O1xuXG4gICAgICAgIGRpcmVjdGl2ZVN0eWxlcy5hZGRDb21wb25lbnQoVHVpRmFkZUNvbXBvbmVudCk7XG4gICAgICAgIG1lcmdlKHJlc2l6ZSQsIG11dGF0ZSQsIGZyb21FdmVudChlbCwgJ3Njcm9sbCcpKVxuICAgICAgICAgICAgLnBpcGUodHVpWm9uZWZyZWUoem9uZSksIHRha2VVbnRpbChkZXN0cm95JCkpXG4gICAgICAgICAgICAuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgICAgICAgICBlbC5jbGFzc0xpc3QudG9nZ2xlKCdfc3RhcnQnLCAhIWVsLnNjcm9sbExlZnQgfHwgISFlbC5zY3JvbGxUb3ApO1xuICAgICAgICAgICAgICAgIGVsLmNsYXNzTGlzdC50b2dnbGUoJ19lbmQnLCB0aGlzLmlzRW5kKGVsKSk7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGlzRW5kKGVsOiBIVE1MRWxlbWVudCk6IGJvb2xlYW4ge1xuICAgICAgICBpZiAodGhpcy5vcmllbnRhdGlvbiA9PT0gJ3ZlcnRpY2FsJykge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoZWwuc2Nyb2xsVG9wKSA8IGVsLnNjcm9sbEhlaWdodCAtIGVsLmNsaWVudEhlaWdodCAtIEJVRkZFUjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICBNYXRoLnJvdW5kKGVsLnNjcm9sbExlZnQpIDwgZWwuc2Nyb2xsV2lkdGggLSBlbC5jbGllbnRXaWR0aCAtIEJVRkZFUiB8fFxuICAgICAgICAgICAgLy8gaG9yaXpvbnRhbCBtdWx0aWxpbmUgZmFkZSBjYW4ga2ljayBpbiBlYXJseSBkdWUgdG8gaGFuZ2luZyBlbGVtZW50cyBvZiBmb250cyBzbyB1c2luZyBiaWdnZXIgYnVmZmVyXG4gICAgICAgICAgICBlbC5zY3JvbGxIZWlnaHQgPiBlbC5jbGllbnRIZWlnaHQgKyA0ICogQlVGRkVSXG4gICAgICAgICk7XG4gICAgfVxufVxuIl19