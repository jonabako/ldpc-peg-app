{"version":3,"file":"taiga-ui-experimental-components-segmented.umd.js","sources":["../../../projects/experimental/components/segmented/segmented.component.ts","../../../projects/experimental/components/segmented/segmented.directive.ts","../../../projects/experimental/components/segmented/segmented.module.ts","../../../projects/experimental/components/segmented/taiga-ui-experimental-components-segmented.ts"],"sourcesContent":["import {\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Inject,\n    Input,\n    OnChanges,\n    Output,\n    Self,\n    ViewEncapsulation,\n} from '@angular/core';\nimport {\n    TuiDestroyService,\n    tuiIsHTMLElement,\n    tuiPx,\n    TuiResizeService,\n} from '@taiga-ui/cdk';\nimport {TuiSizeL, TuiSizeS} from '@taiga-ui/core';\nimport {tuiBadgeNotificationOptionsProvider} from '@taiga-ui/experimental/components/badge-notification';\nimport {Observable} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\n\n@Component({\n    selector: 'tui-segmented',\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./segmented.style.less'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [\n        TuiDestroyService,\n        TuiResizeService,\n        tuiBadgeNotificationOptionsProvider({size: 's'}),\n    ],\n})\nexport class TuiSegmentedComponent implements OnChanges {\n    @Input()\n    @HostBinding('attr.data-size')\n    size: TuiSizeL | TuiSizeS = 's';\n\n    @Input()\n    activeItemIndex = 0;\n\n    @Output()\n    readonly activeItemIndexChange = new EventEmitter<number>();\n\n    constructor(\n        @Inject(ElementRef) private readonly el: ElementRef<HTMLElement>,\n        @Inject(TuiResizeService) resize$: Observable<unknown>,\n        @Self() @Inject(TuiDestroyService) destroy$: Observable<unknown>,\n    ) {\n        resize$.pipe(takeUntil(destroy$)).subscribe(() => this.refresh());\n    }\n\n    get tabs(): HTMLCollection {\n        return this.el.nativeElement.children;\n    }\n\n    ngOnChanges(): void {\n        this.refresh();\n    }\n\n    update(activeItemIndex: number): void {\n        if (activeItemIndex === this.activeItemIndex) {\n            return;\n        }\n\n        this.activeItemIndex = activeItemIndex;\n        this.activeItemIndexChange.emit(activeItemIndex);\n        this.refresh();\n    }\n\n    private get left(): number {\n        const element = this.activeElement;\n\n        return tuiIsHTMLElement(element) ? element.offsetLeft : 0;\n    }\n\n    private get width(): number {\n        return this.activeElement?.clientWidth || 0;\n    }\n\n    private get activeElement(): Element | null {\n        return this.tabs.item(this.activeItemIndex);\n    }\n\n    // TODO: Switch to HostBinding signals in Angular 17+\n    private refresh(): void {\n        this.el.nativeElement.style.setProperty('--t-left', tuiPx(this.left));\n        this.el.nativeElement.style.setProperty('--t-width', tuiPx(this.width));\n    }\n}\n","import {\n    AfterContentChecked,\n    AfterContentInit,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    HostListener,\n    Inject,\n    QueryList,\n    Self,\n} from '@angular/core';\nimport {NgControl} from '@angular/forms';\nimport {RouterLinkActive} from '@angular/router';\nimport {EMPTY_QUERY, TuiDestroyService, tuiQueryListChanges} from '@taiga-ui/cdk';\nimport {EMPTY, Observable} from 'rxjs';\nimport {switchMap, takeUntil} from 'rxjs/operators';\n\nimport {TuiSegmentedComponent} from './segmented.component';\n\n@Directive({\n    selector: 'tui-segmented',\n})\nexport class TuiSegmentedDirective implements AfterContentChecked, AfterContentInit {\n    @ContentChildren(NgControl, {descendants: true})\n    private readonly controls: QueryList<NgControl> = EMPTY_QUERY;\n\n    @ContentChildren(RouterLinkActive)\n    private readonly links: QueryList<RouterLinkActive> = EMPTY_QUERY;\n\n    @ContentChildren(RouterLinkActive, {read: ElementRef})\n    private readonly elements: QueryList<ElementRef<HTMLElement>> = EMPTY_QUERY;\n\n    constructor(\n        @Self() @Inject(TuiDestroyService) private readonly destroy$: Observable<unknown>,\n        @Inject(TuiSegmentedComponent) private readonly component: TuiSegmentedComponent,\n        @Inject(ElementRef) private readonly el: ElementRef<HTMLElement>,\n    ) {}\n\n    @HostListener('click', ['$event.target'])\n    update(target: Element | null): void {\n        const index = this.getIndex(target);\n\n        if (index >= 0) {\n            this.component.update(index);\n        }\n    }\n\n    ngAfterContentInit(): void {\n        tuiQueryListChanges(this.controls)\n            .pipe(\n                switchMap(() => this.controls.last?.valueChanges || EMPTY),\n                takeUntil(this.destroy$),\n            )\n            .subscribe(() => {\n                this.update(this.el.nativeElement.querySelector(':checked'));\n            });\n    }\n\n    ngAfterContentChecked(): void {\n        if (this.links.length) {\n            this.update(this.elements.get(this.linkIndex)?.nativeElement || null);\n        }\n    }\n\n    private get linkIndex(): number {\n        return this.links.toArray().findIndex(link => link.isActive);\n    }\n\n    private getIndex(element: Element | null): number {\n        return Array.from(this.component.tabs).findIndex(tab => tab.contains(element));\n    }\n}\n","import {NgModule} from '@angular/core';\n\nimport {TuiSegmentedComponent} from './segmented.component';\nimport {TuiSegmentedDirective} from './segmented.directive';\n\n@NgModule({\n    declarations: [TuiSegmentedComponent, TuiSegmentedDirective],\n    exports: [TuiSegmentedComponent, TuiSegmentedDirective],\n})\nexport class TuiSegmentedModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["EventEmitter","takeUntil","tuiIsHTMLElement","tuiPx","i0","ElementRef","TuiResizeService","TuiDestroyService","tuiBadgeNotificationOptionsProvider","Component","ViewEncapsulation","ChangeDetectionStrategy","Inject","Self","Input","HostBinding","Output","EMPTY_QUERY","tuiQueryListChanges","switchMap","EMPTY","NgControl","RouterLinkActive","Directive","ContentChildren","HostListener","NgModule"],"mappings":"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"}