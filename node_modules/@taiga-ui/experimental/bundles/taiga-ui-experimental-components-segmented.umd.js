(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@taiga-ui/cdk'), require('@taiga-ui/experimental/components/badge-notification'), require('rxjs/operators'), require('rxjs'), require('@angular/forms'), require('@angular/router')) :
    typeof define === 'function' && define.amd ? define('@taiga-ui/experimental/components/segmented', ['exports', '@angular/core', '@taiga-ui/cdk', '@taiga-ui/experimental/components/badge-notification', 'rxjs/operators', 'rxjs', '@angular/forms', '@angular/router'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global["taiga-ui"] = global["taiga-ui"] || {}, global["taiga-ui"].experimental = global["taiga-ui"].experimental || {}, global["taiga-ui"].experimental.components = global["taiga-ui"].experimental.components || {}, global["taiga-ui"].experimental.components.segmented = {}), global.ng.core, global.cdk, global["taiga-ui"].experimental.components["badge-notification"], global.rxjs.operators, global.rxjs, global.ng.forms, global.ng.router));
})(this, (function (exports, i0, cdk, badgeNotification, operators, i1, forms, router) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);

    var TuiSegmentedComponent = /** @class */ (function () {
        function TuiSegmentedComponent(el, resize$, destroy$) {
            var _this = this;
            this.el = el;
            this.size = 's';
            this.activeItemIndex = 0;
            this.activeItemIndexChange = new i0.EventEmitter();
            resize$.pipe(operators.takeUntil(destroy$)).subscribe(function () { return _this.refresh(); });
        }
        Object.defineProperty(TuiSegmentedComponent.prototype, "tabs", {
            get: function () {
                return this.el.nativeElement.children;
            },
            enumerable: false,
            configurable: true
        });
        TuiSegmentedComponent.prototype.ngOnChanges = function () {
            this.refresh();
        };
        TuiSegmentedComponent.prototype.update = function (activeItemIndex) {
            if (activeItemIndex === this.activeItemIndex) {
                return;
            }
            this.activeItemIndex = activeItemIndex;
            this.activeItemIndexChange.emit(activeItemIndex);
            this.refresh();
        };
        Object.defineProperty(TuiSegmentedComponent.prototype, "left", {
            get: function () {
                var element = this.activeElement;
                return cdk.tuiIsHTMLElement(element) ? element.offsetLeft : 0;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TuiSegmentedComponent.prototype, "width", {
            get: function () {
                var _a;
                return ((_a = this.activeElement) === null || _a === void 0 ? void 0 : _a.clientWidth) || 0;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TuiSegmentedComponent.prototype, "activeElement", {
            get: function () {
                return this.tabs.item(this.activeItemIndex);
            },
            enumerable: false,
            configurable: true
        });
        // TODO: Switch to HostBinding signals in Angular 17+
        TuiSegmentedComponent.prototype.refresh = function () {
            this.el.nativeElement.style.setProperty('--t-left', cdk.tuiPx(this.left));
            this.el.nativeElement.style.setProperty('--t-width', cdk.tuiPx(this.width));
        };
        return TuiSegmentedComponent;
    }());
    TuiSegmentedComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiSegmentedComponent, deps: [{ token: i0.ElementRef }, { token: cdk.TuiResizeService }, { token: cdk.TuiDestroyService, self: true }], target: i0__namespace.ɵɵFactoryTarget.Component });
    TuiSegmentedComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiSegmentedComponent, selector: "tui-segmented", inputs: { size: "size", activeItemIndex: "activeItemIndex" }, outputs: { activeItemIndexChange: "activeItemIndexChange" }, host: { properties: { "attr.data-size": "this.size" } }, providers: [
            cdk.TuiDestroyService,
            cdk.TuiResizeService,
            badgeNotification.tuiBadgeNotificationOptionsProvider({ size: 's' }),
        ], usesOnChanges: true, ngImport: i0__namespace, template: '<ng-content></ng-content>', isInline: true, styles: ["tui-segmented{position:relative;display:flex;box-sizing:border-box;isolation:isolate;color:var(--tui-clear);border:.125rem solid transparent}tui-segmented[data-size=s]{--t-padding: .625rem;--t-gap: .5rem;--t-margin: -.125rem;height:var(--tui-height-s);font:var(--tui-font-text-s);border-radius:var(--tui-radius-s)}tui-segmented[data-size=s]>*:before,tui-segmented[data-size=s]>*:after,tui-segmented[data-size=s] tui-icon{font-size:1rem}tui-segmented[data-size=m]{--t-padding: .875rem;--t-gap: 1rem;--t-margin: -.375rem;height:var(--tui-height-m);font:var(--tui-font-text-m);border-radius:var(--tui-radius-s)}tui-segmented[data-size=l]{--t-padding: 1.125rem;--t-gap: 1rem;--t-margin: -.375rem;height:var(--tui-height-l);font:var(--tui-font-text-l);border-radius:var(--tui-radius-m);border-width:.25rem}tui-segmented[data-size=l]:after{box-shadow:0 0 0 .25rem}tui-segmented>a,tui-segmented>button,tui-segmented>label,tui-segmented>label>input:not([tuiRadio]){transition-property:color;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;-webkit-appearance:none;-moz-appearance:none;appearance:none;padding:0;border:0;background:none;font-size:inherit;line-height:inherit;text-decoration:none;position:relative;display:flex;align-items:center;justify-content:center;white-space:nowrap;grid-gap:var(--t-gap);gap:var(--t-gap);margin:0;padding:0 var(--t-padding);color:var(--tui-text-01);overflow:hidden;cursor:pointer;font:inherit;border-radius:inherit}tui-segmented>a>*,tui-segmented>button>*,tui-segmented>label>*,tui-segmented>label>input:not([tuiRadio])>*,tui-segmented>a:before,tui-segmented>button:before,tui-segmented>label:before,tui-segmented>label>input:not([tuiRadio]):before,tui-segmented>a:after,tui-segmented>button:after,tui-segmented>label:after,tui-segmented>label>input:not([tuiRadio]):after{margin:0 var(--t-margin)}tui-segmented>a:focus-visible,tui-segmented>button:focus-visible,tui-segmented>label:focus-visible,tui-segmented>label>input:not([tuiRadio]):focus-visible{outline:.125rem solid var(--tui-focus);outline-offset:-.125rem}tui-segmented>label>input:not([tuiRadio]){position:absolute;top:0;left:0;width:100%;height:100%}tui-segmented:after{position:absolute;top:0;left:0;width:100%;height:100%;content:\"\";z-index:-1;border-radius:inherit;background:currentColor;box-shadow:0 0 0 .125rem}tui-segmented:before{transition-property:left,width;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;content:\"\";position:absolute;left:var(--t-left);height:100%;width:var(--t-width);border-radius:inherit;background:currentColor;color:var(--tui-base-01);box-shadow:0 .25rem 1.25rem #0000001a}\n"], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush, encapsulation: i0__namespace.ViewEncapsulation.None });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiSegmentedComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'tui-segmented',
                        template: '<ng-content></ng-content>',
                        styleUrls: ['./segmented.style.less'],
                        encapsulation: i0.ViewEncapsulation.None,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        providers: [
                            cdk.TuiDestroyService,
                            cdk.TuiResizeService,
                            badgeNotification.tuiBadgeNotificationOptionsProvider({ size: 's' }),
                        ],
                    }]
            }], ctorParameters: function () {
            return [{ type: i0__namespace.ElementRef, decorators: [{
                            type: i0.Inject,
                            args: [i0.ElementRef]
                        }] }, { type: i1__namespace.Observable, decorators: [{
                            type: i0.Inject,
                            args: [cdk.TuiResizeService]
                        }] }, { type: i1__namespace.Observable, decorators: [{
                            type: i0.Self
                        }, {
                            type: i0.Inject,
                            args: [cdk.TuiDestroyService]
                        }] }];
        }, propDecorators: { size: [{
                    type: i0.Input
                }, {
                    type: i0.HostBinding,
                    args: ['attr.data-size']
                }], activeItemIndex: [{
                    type: i0.Input
                }], activeItemIndexChange: [{
                    type: i0.Output
                }] } });

    var TuiSegmentedDirective = /** @class */ (function () {
        function TuiSegmentedDirective(destroy$, component, el) {
            this.destroy$ = destroy$;
            this.component = component;
            this.el = el;
            this.controls = cdk.EMPTY_QUERY;
            this.links = cdk.EMPTY_QUERY;
            this.elements = cdk.EMPTY_QUERY;
        }
        TuiSegmentedDirective.prototype.update = function (target) {
            var index = this.getIndex(target);
            if (index >= 0) {
                this.component.update(index);
            }
        };
        TuiSegmentedDirective.prototype.ngAfterContentInit = function () {
            var _this = this;
            cdk.tuiQueryListChanges(this.controls)
                .pipe(operators.switchMap(function () { var _a; return ((_a = _this.controls.last) === null || _a === void 0 ? void 0 : _a.valueChanges) || i1.EMPTY; }), operators.takeUntil(this.destroy$))
                .subscribe(function () {
                _this.update(_this.el.nativeElement.querySelector(':checked'));
            });
        };
        TuiSegmentedDirective.prototype.ngAfterContentChecked = function () {
            var _a;
            if (this.links.length) {
                this.update(((_a = this.elements.get(this.linkIndex)) === null || _a === void 0 ? void 0 : _a.nativeElement) || null);
            }
        };
        Object.defineProperty(TuiSegmentedDirective.prototype, "linkIndex", {
            get: function () {
                return this.links.toArray().findIndex(function (link) { return link.isActive; });
            },
            enumerable: false,
            configurable: true
        });
        TuiSegmentedDirective.prototype.getIndex = function (element) {
            return Array.from(this.component.tabs).findIndex(function (tab) { return tab.contains(element); });
        };
        return TuiSegmentedDirective;
    }());
    TuiSegmentedDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiSegmentedDirective, deps: [{ token: cdk.TuiDestroyService, self: true }, { token: TuiSegmentedComponent }, { token: i0.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    TuiSegmentedDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiSegmentedDirective, selector: "tui-segmented", host: { listeners: { "click": "update($event.target)" } }, queries: [{ propertyName: "controls", predicate: forms.NgControl, descendants: true }, { propertyName: "links", predicate: router.RouterLinkActive }, { propertyName: "elements", predicate: router.RouterLinkActive, read: i0.ElementRef }], ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiSegmentedDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: 'tui-segmented',
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.Observable, decorators: [{
                            type: i0.Self
                        }, {
                            type: i0.Inject,
                            args: [cdk.TuiDestroyService]
                        }] }, { type: TuiSegmentedComponent, decorators: [{
                            type: i0.Inject,
                            args: [TuiSegmentedComponent]
                        }] }, { type: i0__namespace.ElementRef, decorators: [{
                            type: i0.Inject,
                            args: [i0.ElementRef]
                        }] }];
        }, propDecorators: { controls: [{
                    type: i0.ContentChildren,
                    args: [forms.NgControl, { descendants: true }]
                }], links: [{
                    type: i0.ContentChildren,
                    args: [router.RouterLinkActive]
                }], elements: [{
                    type: i0.ContentChildren,
                    args: [router.RouterLinkActive, { read: i0.ElementRef }]
                }], update: [{
                    type: i0.HostListener,
                    args: ['click', ['$event.target']]
                }] } });

    var TuiSegmentedModule = /** @class */ (function () {
        function TuiSegmentedModule() {
        }
        return TuiSegmentedModule;
    }());
    TuiSegmentedModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiSegmentedModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    TuiSegmentedModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiSegmentedModule, declarations: [TuiSegmentedComponent, TuiSegmentedDirective], exports: [TuiSegmentedComponent, TuiSegmentedDirective] });
    TuiSegmentedModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiSegmentedModule });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiSegmentedModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [TuiSegmentedComponent, TuiSegmentedDirective],
                        exports: [TuiSegmentedComponent, TuiSegmentedDirective],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.TuiSegmentedComponent = TuiSegmentedComponent;
    exports.TuiSegmentedDirective = TuiSegmentedDirective;
    exports.TuiSegmentedModule = TuiSegmentedModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=taiga-ui-experimental-components-segmented.umd.js.map
