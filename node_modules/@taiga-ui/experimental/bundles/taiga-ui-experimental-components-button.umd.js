(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@taiga-ui/cdk'), require('@taiga-ui/core'), require('rxjs'), require('@angular/common'), require('@taiga-ui/experimental/directives/icons')) :
    typeof define === 'function' && define.amd ? define('@taiga-ui/experimental/components/button', ['exports', '@angular/core', '@taiga-ui/cdk', '@taiga-ui/core', 'rxjs', '@angular/common', '@taiga-ui/experimental/directives/icons'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global["taiga-ui"] = global["taiga-ui"] || {}, global["taiga-ui"].experimental = global["taiga-ui"].experimental || {}, global["taiga-ui"].experimental.components = global["taiga-ui"].experimental.components || {}, global["taiga-ui"].experimental.components.button = {}), global.ng.core, global.i2, global.i1, global.rxjs, global.ng.common, global["taiga-ui"].experimental.directives.icons));
})(this, (function (exports, i0, i2, i1, i1$1, common, icons) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i1__namespace$1 = /*#__PURE__*/_interopNamespace(i1$1);

    var TUI_BUTTON_DEFAULT_OPTIONS = {
        size: 'l',
        appearance: 'primary',
    };
    var TUI_BUTTON_OPTIONS = i2.tuiCreateToken(TUI_BUTTON_DEFAULT_OPTIONS);
    function tuiButtonOptionsProvider(options) {
        return i2.tuiProvideOptions(TUI_BUTTON_OPTIONS, options, TUI_BUTTON_DEFAULT_OPTIONS);
    }

    var TuiButtonComponent = /** @class */ (function () {
        function TuiButtonComponent(options) {
            this.options = options;
            this.size = this.options.size;
            this.loading = false;
        }
        Object.defineProperty(TuiButtonComponent.prototype, "loaderSize", {
            get: function () {
                return i1.tuiSizeBigger(this.size) ? 'm' : 's';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TuiButtonComponent.prototype, "label", {
            get: function () {
                return i2.tuiIsString(this.loading) ? this.loading : '';
            },
            enumerable: false,
            configurable: true
        });
        TuiButtonComponent.prototype.onClick = function (event) {
            if (this.loading) {
                event.stopPropagation();
            }
        };
        return TuiButtonComponent;
    }());
    TuiButtonComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiButtonComponent, deps: [{ token: TUI_BUTTON_OPTIONS }], target: i0__namespace.ɵɵFactoryTarget.Component });
    TuiButtonComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiButtonComponent, selector: "[tuiButton][loading],[tuiIconButton][loading]", inputs: { size: "size", loading: "loading" }, host: { listeners: { "click.capture": "onClick($event)" }, properties: { "attr.aria-disabled": "loading", "class._loading": "loading" } }, ngImport: i0__namespace, template: "<ng-content></ng-content>\n<tui-loader\n    aria-live=\"polite\"\n    role=\"status\"\n    class=\"t-loader\"\n    [inheritColor]=\"true\"\n    [showLoader]=\"!!loading\"\n    [size]=\"loaderSize\"\n    [textContent]=\"label\"\n></tui-loader>\n", components: [{ type: i1__namespace.TuiLoaderComponent, selector: "tui-loader", inputs: ["size", "inheritColor", "overlay", "textContent", "showLoader"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiButtonComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: '[tuiButton][loading],[tuiIconButton][loading]',
                        templateUrl: './button.template.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        host: {
                            '[attr.aria-disabled]': 'loading',
                            '[class._loading]': 'loading',
                        },
                    }]
            }], ctorParameters: function () {
            return [{ type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [TUI_BUTTON_OPTIONS]
                        }] }];
        }, propDecorators: { size: [{
                    type: i0.Input
                }], loading: [{
                    type: i0.Input
                }], onClick: [{
                    type: i0.HostListener,
                    args: ['click.capture', ['$event']]
                }] } });

    var TuiButtonStylesComponent = /** @class */ (function () {
        function TuiButtonStylesComponent() {
        }
        return TuiButtonStylesComponent;
    }());
    TuiButtonStylesComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiButtonStylesComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    TuiButtonStylesComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiButtonStylesComponent, selector: "ng-component", host: { classAttribute: "tui-button-styles" }, ngImport: i0__namespace, template: '', isInline: true, styles: ["[tuiButtonNew]{--t-gap: .125rem;-webkit-appearance:none;-moz-appearance:none;appearance:none;padding:0;border:0;background:none;font-size:inherit;line-height:inherit;text-decoration:none;position:relative;display:inline-flex;align-items:center;flex-shrink:0;box-sizing:border-box;white-space:nowrap;overflow:hidden;vertical-align:middle;max-width:100%;grid-gap:calc(var(--t-gap) - 2 * var(--t-margin));gap:calc(var(--t-gap) - 2 * var(--t-margin));height:var(--t-size);justify-content:center;border-radius:var(--t-radius);padding:var(--t-padding);-webkit-user-select:none;-moz-user-select:none;user-select:none;cursor:pointer}[tuiButtonNew]>img,[tuiButtonNew]>tui-svg,[tuiButtonNew]>tui-icon,[tuiButtonNew]>tui-avatar,[tuiButtonNew]>tui-badge,[tuiButtonNew]>[tuiBadge],[tuiButtonNew]>[tuiRadio],[tuiButtonNew]>[tuiToggle],[tuiButtonNew]>[tuiCheckbox],[tuiButtonNew]._icon-left:before,[tuiButtonNew]._icon-right:after{margin:var(--t-margin)}[tuiButtonNew]>.t-loader{position:absolute;top:50%;left:50%;transform:translate(-50%,-50%)}[tuiButtonNew]>.t-loader .t-text{position:absolute}[tuiButtonNew][data-size=xs]{--t-size: var(--tui-height-xs);--t-radius: var(--tui-radius-xs);--t-padding: 0 .375rem;--t-margin: -.125rem;font:var(--tui-font-text-s)}[tuiButtonNew][data-size=xs] tui-svg,[tuiButtonNew][data-size=xs] tui-icon,[tuiButtonNew][data-size=xs]:before{font-size:1rem}[tuiButtonNew][data-size=s]{--t-size: var(--tui-height-s);--t-radius: var(--tui-radius-s);--t-padding: 0 .625rem;--t-margin: -.125rem;font:var(--tui-font-text-s)}[tuiButtonNew][data-size=s] tui-svg,[tuiButtonNew][data-size=s] tui-icon,[tuiButtonNew][data-size=s]:not([tuiIconButton][data-appearance=\"icon\"]):before{font-size:1rem}[tuiButtonNew][data-size=m]{--t-size: var(--tui-height-m);--t-radius: var(--tui-radius-m);--t-padding: 0 1rem;--t-margin: -.375rem;font:var(--tui-font-text-m);font-weight:bold}[tuiButtonNew][data-size=m]:after{-webkit-margin-end:-.125rem;margin-inline-end:-.125rem}[tuiButtonNew][data-size=l]{--t-size: var(--tui-height-l);--t-radius: var(--tui-radius-l);--t-padding: 0 1.25rem;--t-gap: .25rem;--t-margin: -.25rem;font:var(--tui-font-text-m);font-weight:bold}[tuiButtonNew][data-size=l]:after{-webkit-margin-start:.25rem;margin-inline-start:.25rem;-webkit-margin-end:-.25rem;margin-inline-end:-.25rem}[tuiButtonNew]._loading{--tui-disabled-opacity: 1;-webkit-text-fill-color:transparent}[tuiButtonNew]._loading>*,[tuiButtonNew]._loading:before,[tuiButtonNew]._loading:after{opacity:0}[tuiButtonNew]._loading>.t-loader{opacity:1}[tuiButtonNew][tuiIcons]:after{font-size:1rem}[tuiIconButton][tuiButtonNew]{--t-gap: 0;width:var(--t-size);font-size:0;padding:0}\n"], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush, encapsulation: i0__namespace.ViewEncapsulation.None });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiButtonStylesComponent, decorators: [{
                type: i0.Component,
                args: [{
                        template: '',
                        styleUrls: ['./button.style.less'],
                        encapsulation: i0.ViewEncapsulation.None,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        host: {
                            class: 'tui-button-styles',
                        },
                    }]
            }] });
    var TuiButtonDirective = /** @class */ (function () {
        function TuiButtonDirective(options, mode$, directiveStyles) {
            this.options = options;
            this.mode$ = mode$;
            this.size = this.options.size;
            this.appearance = this.options.appearance;
            directiveStyles.addComponent(TuiButtonStylesComponent);
        }
        return TuiButtonDirective;
    }());
    TuiButtonDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiButtonDirective, deps: [{ token: TUI_BUTTON_OPTIONS }, { token: i1.TUI_MODE }, { token: i2.TuiDirectiveStylesService }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    TuiButtonDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiButtonDirective, selector: "a[tuiButton],button[tuiButton],a[tuiIconButton],button[tuiIconButton]", inputs: { size: "size", appearance: "appearance" }, host: { attributes: { "tuiButtonNew": "", "tuiAppearance": "" }, listeners: { "$.data-mode.attr": "mode$" }, properties: { "attr.data-size": "size", "attr.data-appearance": "appearance" } }, providers: [i1.MODE_PROVIDER], ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiButtonDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: 'a[tuiButton],button[tuiButton],a[tuiIconButton],button[tuiIconButton]',
                        providers: [i1.MODE_PROVIDER],
                        host: {
                            tuiButtonNew: '',
                            tuiAppearance: '',
                            '[attr.data-size]': 'size',
                            '[attr.data-appearance]': 'appearance',
                            '($.data-mode.attr)': 'mode$',
                        },
                    }]
            }], ctorParameters: function () {
            return [{ type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [TUI_BUTTON_OPTIONS]
                        }] }, { type: i1__namespace$1.Observable, decorators: [{
                            type: i0.Inject,
                            args: [i1.TUI_MODE]
                        }] }, { type: i2__namespace.TuiDirectiveStylesService, decorators: [{
                            type: i0.Inject,
                            args: [i2.TuiDirectiveStylesService]
                        }] }];
        }, propDecorators: { size: [{
                    type: i0.Input
                }], appearance: [{
                    type: i0.Input
                }] } });

    var TuiButtonModule = /** @class */ (function () {
        function TuiButtonModule() {
        }
        return TuiButtonModule;
    }());
    TuiButtonModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiButtonModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    TuiButtonModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiButtonModule, declarations: [TuiButtonComponent, TuiButtonDirective, TuiButtonStylesComponent], imports: [common.CommonModule, i1.TuiSvgModule, i1.TuiLoaderModule, icons.TuiIconsModule], exports: [TuiButtonComponent, TuiButtonDirective, icons.TuiIconsDirective] });
    TuiButtonModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiButtonModule, imports: [[common.CommonModule, i1.TuiSvgModule, i1.TuiLoaderModule, icons.TuiIconsModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiButtonModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [common.CommonModule, i1.TuiSvgModule, i1.TuiLoaderModule, icons.TuiIconsModule],
                        declarations: [TuiButtonComponent, TuiButtonDirective, TuiButtonStylesComponent],
                        exports: [TuiButtonComponent, TuiButtonDirective, icons.TuiIconsDirective],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.TUI_BUTTON_DEFAULT_OPTIONS = TUI_BUTTON_DEFAULT_OPTIONS;
    exports.TUI_BUTTON_OPTIONS = TUI_BUTTON_OPTIONS;
    exports.TuiButtonComponent = TuiButtonComponent;
    exports.TuiButtonDirective = TuiButtonDirective;
    exports.TuiButtonModule = TuiButtonModule;
    exports.TuiButtonStylesComponent = TuiButtonStylesComponent;
    exports.tuiButtonOptionsProvider = tuiButtonOptionsProvider;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=taiga-ui-experimental-components-button.umd.js.map
