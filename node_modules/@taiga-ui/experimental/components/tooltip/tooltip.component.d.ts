import { TuiPlatform } from '@taiga-ui/cdk';
import { TuiBrightness, TuiHintHoverDirective, TuiHintOptions, TuiHintOptionsDirective } from '@taiga-ui/core';
import { TuiAppearanceDirective } from '@taiga-ui/experimental/directives/appearance';
import { Observable } from 'rxjs';
import { TuiTooltipOptions } from './tooltip.options';
import * as i0 from "@angular/core";
export declare class TuiTooltipComponent<C = any> extends TuiHintOptionsDirective {
    readonly tooltipOptions: TuiTooltipOptions;
    private readonly platform;
    readonly iconAppearance: TuiAppearanceDirective | null;
    private mode;
    readonly driver$?: TuiHintHoverDirective;
    describeId: string;
    context?: C;
    constructor(destroy$: Observable<unknown>, mode$: Observable<TuiBrightness | null>, options: TuiHintOptions, tooltipOptions: TuiTooltipOptions, platform: TuiPlatform, iconAppearance: TuiAppearanceDirective | null);
    get computedAppearance(): string;
    get tooltipIcon(): string;
    stopOnMobile(event: MouseEvent): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<TuiTooltipComponent<any>, [{ self: true; }, null, null, null, null, { optional: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TuiTooltipComponent<any>, "tui-tooltip", never, { "content": "content"; "direction": "direction"; "appearance": "appearance"; "showDelay": "showDelay"; "hideDelay": "hideDelay"; "describeId": "describeId"; "context": "context"; }, {}, never, never>;
}
