{"version":3,"file":"taiga-ui-experimental-components-segmented.js","sources":["../../../projects/experimental/components/segmented/segmented.component.ts","../../../projects/experimental/components/segmented/segmented.directive.ts","../../../projects/experimental/components/segmented/segmented.module.ts","../../../projects/experimental/components/segmented/taiga-ui-experimental-components-segmented.ts"],"sourcesContent":["import {\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Inject,\n    Input,\n    OnChanges,\n    Output,\n    Self,\n    ViewEncapsulation,\n} from '@angular/core';\nimport {\n    TuiDestroyService,\n    tuiIsHTMLElement,\n    tuiPx,\n    TuiResizeService,\n} from '@taiga-ui/cdk';\nimport {TuiSizeL, TuiSizeS} from '@taiga-ui/core';\nimport {tuiBadgeNotificationOptionsProvider} from '@taiga-ui/experimental/components/badge-notification';\nimport {Observable} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\n\n@Component({\n    selector: 'tui-segmented',\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./segmented.style.less'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [\n        TuiDestroyService,\n        TuiResizeService,\n        tuiBadgeNotificationOptionsProvider({size: 's'}),\n    ],\n})\nexport class TuiSegmentedComponent implements OnChanges {\n    @Input()\n    @HostBinding('attr.data-size')\n    size: TuiSizeL | TuiSizeS = 's';\n\n    @Input()\n    activeItemIndex = 0;\n\n    @Output()\n    readonly activeItemIndexChange = new EventEmitter<number>();\n\n    constructor(\n        @Inject(ElementRef) private readonly el: ElementRef<HTMLElement>,\n        @Inject(TuiResizeService) resize$: Observable<unknown>,\n        @Self() @Inject(TuiDestroyService) destroy$: Observable<unknown>,\n    ) {\n        resize$.pipe(takeUntil(destroy$)).subscribe(() => this.refresh());\n    }\n\n    get tabs(): HTMLCollection {\n        return this.el.nativeElement.children;\n    }\n\n    ngOnChanges(): void {\n        this.refresh();\n    }\n\n    update(activeItemIndex: number): void {\n        if (activeItemIndex === this.activeItemIndex) {\n            return;\n        }\n\n        this.activeItemIndex = activeItemIndex;\n        this.activeItemIndexChange.emit(activeItemIndex);\n        this.refresh();\n    }\n\n    private get left(): number {\n        const element = this.activeElement;\n\n        return tuiIsHTMLElement(element) ? element.offsetLeft : 0;\n    }\n\n    private get width(): number {\n        return this.activeElement?.clientWidth || 0;\n    }\n\n    private get activeElement(): Element | null {\n        return this.tabs.item(this.activeItemIndex);\n    }\n\n    // TODO: Switch to HostBinding signals in Angular 17+\n    private refresh(): void {\n        this.el.nativeElement.style.setProperty('--t-left', tuiPx(this.left));\n        this.el.nativeElement.style.setProperty('--t-width', tuiPx(this.width));\n    }\n}\n","import {\n    AfterContentChecked,\n    AfterContentInit,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    HostListener,\n    Inject,\n    QueryList,\n    Self,\n} from '@angular/core';\nimport {NgControl} from '@angular/forms';\nimport {RouterLinkActive} from '@angular/router';\nimport {EMPTY_QUERY, TuiDestroyService, tuiQueryListChanges} from '@taiga-ui/cdk';\nimport {EMPTY, Observable} from 'rxjs';\nimport {switchMap, takeUntil} from 'rxjs/operators';\n\nimport {TuiSegmentedComponent} from './segmented.component';\n\n@Directive({\n    selector: 'tui-segmented',\n})\nexport class TuiSegmentedDirective implements AfterContentChecked, AfterContentInit {\n    @ContentChildren(NgControl, {descendants: true})\n    private readonly controls: QueryList<NgControl> = EMPTY_QUERY;\n\n    @ContentChildren(RouterLinkActive)\n    private readonly links: QueryList<RouterLinkActive> = EMPTY_QUERY;\n\n    @ContentChildren(RouterLinkActive, {read: ElementRef})\n    private readonly elements: QueryList<ElementRef<HTMLElement>> = EMPTY_QUERY;\n\n    constructor(\n        @Self() @Inject(TuiDestroyService) private readonly destroy$: Observable<unknown>,\n        @Inject(TuiSegmentedComponent) private readonly component: TuiSegmentedComponent,\n        @Inject(ElementRef) private readonly el: ElementRef<HTMLElement>,\n    ) {}\n\n    @HostListener('click', ['$event.target'])\n    update(target: Element | null): void {\n        const index = this.getIndex(target);\n\n        if (index >= 0) {\n            this.component.update(index);\n        }\n    }\n\n    ngAfterContentInit(): void {\n        tuiQueryListChanges(this.controls)\n            .pipe(\n                switchMap(() => this.controls.last?.valueChanges || EMPTY),\n                takeUntil(this.destroy$),\n            )\n            .subscribe(() => {\n                this.update(this.el.nativeElement.querySelector(':checked'));\n            });\n    }\n\n    ngAfterContentChecked(): void {\n        if (this.links.length) {\n            this.update(this.elements.get(this.linkIndex)?.nativeElement || null);\n        }\n    }\n\n    private get linkIndex(): number {\n        return this.links.toArray().findIndex(link => link.isActive);\n    }\n\n    private getIndex(element: Element | null): number {\n        return Array.from(this.component.tabs).findIndex(tab => tab.contains(element));\n    }\n}\n","import {NgModule} from '@angular/core';\n\nimport {TuiSegmentedComponent} from './segmented.component';\nimport {TuiSegmentedDirective} from './segmented.directive';\n\n@NgModule({\n    declarations: [TuiSegmentedComponent, TuiSegmentedDirective],\n    exports: [TuiSegmentedComponent, TuiSegmentedDirective],\n})\nexport class TuiSegmentedModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}