import * as i0 from '@angular/core';
import { Component, ChangeDetectionStrategy, Self, Inject, Optional, ViewChild, Input, HostListener, NgModule } from '@angular/core';
import { tuiCreateToken, tuiProvideOptions, tuiIsString, TuiDestroyService, TUI_PLATFORM } from '@taiga-ui/cdk';
import * as i4 from '@taiga-ui/core';
import { TuiHintOptionsDirective, TUI_MODE, TUI_HINT_OPTIONS, MODE_PROVIDER, TuiHintHoverDirective, TuiHintModule } from '@taiga-ui/core';
import * as i3 from '@taiga-ui/experimental/directives/appearance';
import { TuiAppearanceDirective, TuiAppearanceModule } from '@taiga-ui/experimental/directives/appearance';
import { takeUntil } from 'rxjs/operators';
import * as i1 from '@taiga-ui/experimental/directives/icons';
import * as i2 from '@taiga-ui/experimental/components/button';
import { TuiButtonModule } from '@taiga-ui/experimental/components/button';
import * as i5 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i6 from 'rxjs';
import { TuiIconModule } from '@taiga-ui/experimental/components/icon';
import { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';

const TUI_TOOLTIP_DEFAULT_OPTIONS = {
    icons: 'tuiIconHelpCircle',
};
const TUI_TOOLTIP_OPTIONS = tuiCreateToken(TUI_TOOLTIP_DEFAULT_OPTIONS);
function tuiTooltipOptionsProvider(options) {
    return tuiProvideOptions(TUI_TOOLTIP_OPTIONS, options, TUI_TOOLTIP_DEFAULT_OPTIONS);
}

// TODO: Turn into a directive with hint as hostDirective in 4.0
class TuiTooltipComponent extends TuiHintOptionsDirective {
    constructor(destroy$, mode$, options, tooltipOptions, platform, iconAppearance) {
        super(options);
        this.tooltipOptions = tooltipOptions;
        this.platform = platform;
        this.iconAppearance = iconAppearance;
        this.mode = null;
        this.describeId = '';
        mode$.pipe(takeUntil(destroy$)).subscribe(mode => {
            this.mode = mode;
        });
    }
    get computedAppearance() {
        return this.appearance || this.mode || '';
    }
    get tooltipIcon() {
        const { icons } = this.tooltipOptions;
        return tuiIsString(icons) ? icons : icons[this.platform];
    }
    stopOnMobile(event) {
        var _a;
        if (this.platform !== 'web') {
            event.preventDefault();
            event.stopPropagation();
        }
        (_a = this.driver$) === null || _a === void 0 ? void 0 : _a.toggle();
    }
}
TuiTooltipComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTooltipComponent, deps: [{ token: TuiDestroyService, self: true }, { token: TUI_MODE }, { token: TUI_HINT_OPTIONS }, { token: TUI_TOOLTIP_OPTIONS }, { token: TUI_PLATFORM }, { token: TuiAppearanceDirective, optional: true }], target: i0.ɵɵFactoryTarget.Component });
TuiTooltipComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiTooltipComponent, selector: "tui-tooltip", inputs: { content: "content", direction: "direction", appearance: "appearance", showDelay: "showDelay", hideDelay: "hideDelay", describeId: "describeId", context: "context" }, host: { listeners: { "mousedown": "stopOnMobile($event)" } }, providers: [TuiDestroyService, MODE_PROVIDER], viewQueries: [{ propertyName: "driver$", first: true, predicate: TuiHintHoverDirective, descendants: true }], usesInheritance: true, ngImport: i0, template: "<button\n    #driver=\"tuiHintHover\"\n    automation-id=\"tui-tooltip__icon\"\n    size=\"xs\"\n    tuiIconButton\n    class=\"t-tooltip-button\"\n    [attr.tabindex]=\"describeId ? -1 : 0\"\n    [iconLeft]=\"tooltipIcon\"\n    [tuiAppearance]=\"iconAppearance?.tuiAppearance || 'icon'\"\n    [tuiAppearanceState]=\"(driver | async) ? 'active' : null\"\n    [tuiHint]=\"content\"\n    [tuiHintAppearance]=\"computedAppearance\"\n    [tuiHintContext]=\"context\"\n    [tuiHintDescribe]=\"describeId\"\n    [tuiHintDirection]=\"direction\"\n    [tuiHintHideDelay]=\"hideDelay\"\n    [tuiHintShowDelay]=\"showDelay\"\n></button>\n", styles: [":host{transition-property:color;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;position:relative;display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;font-size:0;line-height:0;pointer-events:auto;border-radius:100%;cursor:pointer}.t-tooltip-button{border-radius:inherit;outline-offset:-4px}.t-tooltip-button:before{width:1rem;height:1rem}:host-context([tuiWrapper][data-appearance=\"textfield\"][data-state=\"disabled\"]) .t-tooltip-button{opacity:1}\n"], directives: [{ type: i1.TuiIconsDirective, selector: "[iconLeft]:is(a,button,tui-badge,tui-chip),[iconRight]:is(a,button,tui-badge,tui-chip),[tuiBadge][iconLeft],[tuiBadge][iconRight],[tuiChip][iconLeft],[tuiChip][iconRight],[tuiButtonClose]", inputs: ["iconLeft", "iconRight"] }, { type: i2.TuiButtonDirective, selector: "a[tuiButton],button[tuiButton],a[tuiIconButton],button[tuiIconButton]", inputs: ["size", "appearance"] }, { type: i3.TuiAppearanceDirective, selector: "[tuiAppearance]", inputs: ["tuiAppearance", "tuiAppearanceState", "tuiAppearanceFocus"] }, { type: i4.TuiHintDirective, selector: "[tuiHint]:not(ng-container):not(ng-template)", inputs: ["tuiHint", "tuiHintContext", "tuiHintAppearance"] }, { type: i4.TuiHintDriverDirective, selector: "[tuiHint]:not(ng-container):not(ng-template)" }, { type: i4.TuiHintHoverDirective, selector: "[tuiHint]:not(ng-container):not(ng-template)", inputs: ["tuiHintShowDelay", "tuiHintHideDelay"], exportAs: ["tuiHintHover"] }, { type: i4.TuiHintPositionDirective, selector: "[tuiHint]:not([tuiHintCustomPosition]):not(ng-container):not(ng-template)", inputs: ["tuiHintDirection"] }, { type: i4.TuiHintDescribeDirective, selector: "[tuiHintDescribe]", inputs: ["tuiHintDescribe"] }], pipes: { "async": i5.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTooltipComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-tooltip',
                    templateUrl: './tooltip.template.html',
                    styleUrls: ['./tooltip.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [TuiDestroyService, MODE_PROVIDER],
                    inputs: ['content', 'direction', 'appearance', 'showDelay', 'hideDelay'],
                }]
        }], ctorParameters: function () { return [{ type: i6.Observable, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiDestroyService]
                }] }, { type: i6.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_MODE]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_HINT_OPTIONS]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_TOOLTIP_OPTIONS]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_PLATFORM]
                }] }, { type: i3.TuiAppearanceDirective, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TuiAppearanceDirective]
                }] }]; }, propDecorators: { driver$: [{
                type: ViewChild,
                args: [TuiHintHoverDirective]
            }], describeId: [{
                type: Input
            }], context: [{
                type: Input
            }], stopOnMobile: [{
                type: HostListener,
                args: ['mousedown', ['$event']]
            }] } });

class TuiTooltipModule {
}
TuiTooltipModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTooltipModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiTooltipModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTooltipModule, declarations: [TuiTooltipComponent], imports: [CommonModule,
        TuiButtonModule,
        TuiAppearanceModule,
        TuiHintModule,
        TuiIconModule,
        PolymorpheusModule], exports: [TuiTooltipComponent] });
TuiTooltipModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTooltipModule, imports: [[
            CommonModule,
            TuiButtonModule,
            TuiAppearanceModule,
            TuiHintModule,
            TuiIconModule,
            PolymorpheusModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTooltipModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        TuiButtonModule,
                        TuiAppearanceModule,
                        TuiHintModule,
                        TuiIconModule,
                        PolymorpheusModule,
                    ],
                    declarations: [TuiTooltipComponent],
                    exports: [TuiTooltipComponent],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TUI_TOOLTIP_DEFAULT_OPTIONS, TUI_TOOLTIP_OPTIONS, TuiTooltipComponent, TuiTooltipModule, tuiTooltipOptionsProvider };
//# sourceMappingURL=taiga-ui-experimental-components-tooltip.js.map
