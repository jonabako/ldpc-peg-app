import * as i0 from '@angular/core';
import { EventEmitter, ElementRef, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, Self, Input, HostBinding, Output, Directive, ContentChildren, HostListener, NgModule } from '@angular/core';
import { tuiIsHTMLElement, tuiPx, TuiResizeService, TuiDestroyService, EMPTY_QUERY, tuiQueryListChanges } from '@taiga-ui/cdk';
import { tuiBadgeNotificationOptionsProvider } from '@taiga-ui/experimental/components/badge-notification';
import { takeUntil, switchMap } from 'rxjs/operators';
import * as i1 from 'rxjs';
import { EMPTY } from 'rxjs';
import { NgControl } from '@angular/forms';
import { RouterLinkActive } from '@angular/router';

class TuiSegmentedComponent {
    constructor(el, resize$, destroy$) {
        this.el = el;
        this.size = 's';
        this.activeItemIndex = 0;
        this.activeItemIndexChange = new EventEmitter();
        resize$.pipe(takeUntil(destroy$)).subscribe(() => this.refresh());
    }
    get tabs() {
        return this.el.nativeElement.children;
    }
    ngOnChanges() {
        this.refresh();
    }
    update(activeItemIndex) {
        if (activeItemIndex === this.activeItemIndex) {
            return;
        }
        this.activeItemIndex = activeItemIndex;
        this.activeItemIndexChange.emit(activeItemIndex);
        this.refresh();
    }
    get left() {
        const element = this.activeElement;
        return tuiIsHTMLElement(element) ? element.offsetLeft : 0;
    }
    get width() {
        var _a;
        return ((_a = this.activeElement) === null || _a === void 0 ? void 0 : _a.clientWidth) || 0;
    }
    get activeElement() {
        return this.tabs.item(this.activeItemIndex);
    }
    // TODO: Switch to HostBinding signals in Angular 17+
    refresh() {
        this.el.nativeElement.style.setProperty('--t-left', tuiPx(this.left));
        this.el.nativeElement.style.setProperty('--t-width', tuiPx(this.width));
    }
}
TuiSegmentedComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSegmentedComponent, deps: [{ token: ElementRef }, { token: TuiResizeService }, { token: TuiDestroyService, self: true }], target: i0.ɵɵFactoryTarget.Component });
TuiSegmentedComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiSegmentedComponent, selector: "tui-segmented", inputs: { size: "size", activeItemIndex: "activeItemIndex" }, outputs: { activeItemIndexChange: "activeItemIndexChange" }, host: { properties: { "attr.data-size": "this.size" } }, providers: [
        TuiDestroyService,
        TuiResizeService,
        tuiBadgeNotificationOptionsProvider({ size: 's' }),
    ], usesOnChanges: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, styles: ["tui-segmented{position:relative;display:flex;box-sizing:border-box;isolation:isolate;color:var(--tui-clear);border:.125rem solid transparent}tui-segmented[data-size=s]{--t-padding: .625rem;--t-gap: .5rem;--t-margin: -.125rem;height:var(--tui-height-s);font:var(--tui-font-text-s);border-radius:var(--tui-radius-s)}tui-segmented[data-size=s]>*:before,tui-segmented[data-size=s]>*:after,tui-segmented[data-size=s] tui-icon{font-size:1rem}tui-segmented[data-size=m]{--t-padding: .875rem;--t-gap: 1rem;--t-margin: -.375rem;height:var(--tui-height-m);font:var(--tui-font-text-m);border-radius:var(--tui-radius-s)}tui-segmented[data-size=l]{--t-padding: 1.125rem;--t-gap: 1rem;--t-margin: -.375rem;height:var(--tui-height-l);font:var(--tui-font-text-l);border-radius:var(--tui-radius-m);border-width:.25rem}tui-segmented[data-size=l]:after{box-shadow:0 0 0 .25rem}tui-segmented>a,tui-segmented>button,tui-segmented>label,tui-segmented>label>input:not([tuiRadio]){transition-property:color;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;-webkit-appearance:none;-moz-appearance:none;appearance:none;padding:0;border:0;background:none;font-size:inherit;line-height:inherit;text-decoration:none;position:relative;display:flex;align-items:center;justify-content:center;white-space:nowrap;grid-gap:var(--t-gap);gap:var(--t-gap);margin:0;padding:0 var(--t-padding);color:var(--tui-text-01);overflow:hidden;cursor:pointer;font:inherit;border-radius:inherit}tui-segmented>a>*,tui-segmented>button>*,tui-segmented>label>*,tui-segmented>label>input:not([tuiRadio])>*,tui-segmented>a:before,tui-segmented>button:before,tui-segmented>label:before,tui-segmented>label>input:not([tuiRadio]):before,tui-segmented>a:after,tui-segmented>button:after,tui-segmented>label:after,tui-segmented>label>input:not([tuiRadio]):after{margin:0 var(--t-margin)}tui-segmented>a:focus-visible,tui-segmented>button:focus-visible,tui-segmented>label:focus-visible,tui-segmented>label>input:not([tuiRadio]):focus-visible{outline:.125rem solid var(--tui-focus);outline-offset:-.125rem}tui-segmented>label>input:not([tuiRadio]){position:absolute;top:0;left:0;width:100%;height:100%}tui-segmented:after{position:absolute;top:0;left:0;width:100%;height:100%;content:\"\";z-index:-1;border-radius:inherit;background:currentColor;box-shadow:0 0 0 .125rem}tui-segmented:before{transition-property:left,width;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;content:\"\";position:absolute;left:var(--t-left);height:100%;width:var(--t-width);border-radius:inherit;background:currentColor;color:var(--tui-base-01);box-shadow:0 .25rem 1.25rem #0000001a}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSegmentedComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-segmented',
                    template: '<ng-content></ng-content>',
                    styleUrls: ['./segmented.style.less'],
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        TuiDestroyService,
                        TuiResizeService,
                        tuiBadgeNotificationOptionsProvider({ size: 's' }),
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: i1.Observable, decorators: [{
                    type: Inject,
                    args: [TuiResizeService]
                }] }, { type: i1.Observable, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiDestroyService]
                }] }]; }, propDecorators: { size: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.data-size']
            }], activeItemIndex: [{
                type: Input
            }], activeItemIndexChange: [{
                type: Output
            }] } });

class TuiSegmentedDirective {
    constructor(destroy$, component, el) {
        this.destroy$ = destroy$;
        this.component = component;
        this.el = el;
        this.controls = EMPTY_QUERY;
        this.links = EMPTY_QUERY;
        this.elements = EMPTY_QUERY;
    }
    update(target) {
        const index = this.getIndex(target);
        if (index >= 0) {
            this.component.update(index);
        }
    }
    ngAfterContentInit() {
        tuiQueryListChanges(this.controls)
            .pipe(switchMap(() => { var _a; return ((_a = this.controls.last) === null || _a === void 0 ? void 0 : _a.valueChanges) || EMPTY; }), takeUntil(this.destroy$))
            .subscribe(() => {
            this.update(this.el.nativeElement.querySelector(':checked'));
        });
    }
    ngAfterContentChecked() {
        var _a;
        if (this.links.length) {
            this.update(((_a = this.elements.get(this.linkIndex)) === null || _a === void 0 ? void 0 : _a.nativeElement) || null);
        }
    }
    get linkIndex() {
        return this.links.toArray().findIndex(link => link.isActive);
    }
    getIndex(element) {
        return Array.from(this.component.tabs).findIndex(tab => tab.contains(element));
    }
}
TuiSegmentedDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSegmentedDirective, deps: [{ token: TuiDestroyService, self: true }, { token: TuiSegmentedComponent }, { token: ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
TuiSegmentedDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiSegmentedDirective, selector: "tui-segmented", host: { listeners: { "click": "update($event.target)" } }, queries: [{ propertyName: "controls", predicate: NgControl, descendants: true }, { propertyName: "links", predicate: RouterLinkActive }, { propertyName: "elements", predicate: RouterLinkActive, read: ElementRef }], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSegmentedDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'tui-segmented',
                }]
        }], ctorParameters: function () { return [{ type: i1.Observable, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiDestroyService]
                }] }, { type: TuiSegmentedComponent, decorators: [{
                    type: Inject,
                    args: [TuiSegmentedComponent]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }]; }, propDecorators: { controls: [{
                type: ContentChildren,
                args: [NgControl, { descendants: true }]
            }], links: [{
                type: ContentChildren,
                args: [RouterLinkActive]
            }], elements: [{
                type: ContentChildren,
                args: [RouterLinkActive, { read: ElementRef }]
            }], update: [{
                type: HostListener,
                args: ['click', ['$event.target']]
            }] } });

class TuiSegmentedModule {
}
TuiSegmentedModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSegmentedModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiSegmentedModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSegmentedModule, declarations: [TuiSegmentedComponent, TuiSegmentedDirective], exports: [TuiSegmentedComponent, TuiSegmentedDirective] });
TuiSegmentedModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSegmentedModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSegmentedModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [TuiSegmentedComponent, TuiSegmentedDirective],
                    exports: [TuiSegmentedComponent, TuiSegmentedDirective],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TuiSegmentedComponent, TuiSegmentedDirective, TuiSegmentedModule };
//# sourceMappingURL=taiga-ui-experimental-components-segmented.js.map
