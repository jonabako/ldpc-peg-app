import * as i0 from '@angular/core';
import { Component, ChangeDetectionStrategy, ElementRef, Directive, Inject, Input, NgModule } from '@angular/core';
import * as i1 from '@taiga-ui/cdk';
import { tuiGetActualTarget, TuiResizeModule } from '@taiga-ui/cdk';
import { CommonModule } from '@angular/common';

class TuiSwipeActionsComponent {
    constructor() {
        this.actionsWidth = 0;
    }
    onResize({ target }) {
        this.actionsWidth = target.clientWidth;
    }
}
TuiSwipeActionsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSwipeActionsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
TuiSwipeActionsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiSwipeActionsComponent, selector: "tui-swipe-actions", host: { properties: { "style.--t-actions-width": "actionsWidth" } }, ngImport: i0, template: "<div class=\"t-content\">\n    <ng-content></ng-content>\n</div>\n\n<div\n    class=\"t-actions\"\n    (tuiResize)=\"onResize($event[0])\"\n>\n    <ng-content select=\"[tuiSwipeAction]\"></ng-content>\n</div>\n", styles: [":host{scrollbar-width:none;-ms-overflow-style:none;--tui-action-gap: 24;--tui-actions-padding: .5rem;--tui-item-size: 44;display:flex;width:-webkit-fill-available;width:stretch;align-items:center;overflow-x:scroll;overflow-y:hidden;scroll-snap-type:x mandatory;perspective:1px;perspective-origin:calc(100% + calc(1px * var(--tui-item-size) / 2) + var(--tui-actions-padding))}:host::-webkit-scrollbar,:host::-webkit-scrollbar-thumb{display:none}.t-content{scroll-snap-align:start;flex-shrink:0;width:100%}.t-actions{display:flex;grid-gap:calc(1px * var(--tui-action-gap));gap:calc(1px * var(--tui-action-gap));padding:0 1rem 0 var(--tui-actions-padding);scroll-snap-align:start;align-items:center;transform-style:preserve-3d}.t-actions:empty{display:none}::ng-deep .t-actions>*:nth-child(2){--t-distance: calc(var(--tui-item-size) + var(--tui-action-gap)) * calc(2 - 1);--t-factor: calc((var(--t-actions-width) - var(--t-distance)) / var(--t-actions-width));--t-scale: calc(1 / var(--t-factor));--t-translate: calc(1px * (1 - 1 / var(--t-factor)));transform:translate3d(calc(calc((-100% - calc(1px * var(--tui-action-gap))) * (2 - 1)) / var(--t-scale)),0,var(--t-translate));scale:var(--t-scale)}::ng-deep .t-actions>*:nth-child(3){--t-distance: calc(var(--tui-item-size) + var(--tui-action-gap)) * calc(3 - 1);--t-factor: calc((var(--t-actions-width) - var(--t-distance)) / var(--t-actions-width));--t-scale: calc(1 / var(--t-factor));--t-translate: calc(1px * (1 - 1 / var(--t-factor)));transform:translate3d(calc(calc((-100% - calc(1px * var(--tui-action-gap))) * (3 - 1)) / var(--t-scale)),0,var(--t-translate));scale:var(--t-scale)}::ng-deep .t-actions>*:nth-child(4){--t-distance: calc(var(--tui-item-size) + var(--tui-action-gap)) * calc(4 - 1);--t-factor: calc((var(--t-actions-width) - var(--t-distance)) / var(--t-actions-width));--t-scale: calc(1 / var(--t-factor));--t-translate: calc(1px * (1 - 1 / var(--t-factor)));transform:translate3d(calc(calc((-100% - calc(1px * var(--tui-action-gap))) * (4 - 1)) / var(--t-scale)),0,var(--t-translate));scale:var(--t-scale)}::ng-deep .t-actions>*:nth-child(5){--t-distance: calc(var(--tui-item-size) + var(--tui-action-gap)) * calc(5 - 1);--t-factor: calc((var(--t-actions-width) - var(--t-distance)) / var(--t-actions-width));--t-scale: calc(1 / var(--t-factor));--t-translate: calc(1px * (1 - 1 / var(--t-factor)));transform:translate3d(calc(calc((-100% - calc(1px * var(--tui-action-gap))) * (5 - 1)) / var(--t-scale)),0,var(--t-translate));scale:var(--t-scale)}::ng-deep .t-actions>*:nth-child(6){--t-distance: calc(var(--tui-item-size) + var(--tui-action-gap)) * calc(6 - 1);--t-factor: calc((var(--t-actions-width) - var(--t-distance)) / var(--t-actions-width));--t-scale: calc(1 / var(--t-factor));--t-translate: calc(1px * (1 - 1 / var(--t-factor)));transform:translate3d(calc(calc((-100% - calc(1px * var(--tui-action-gap))) * (6 - 1)) / var(--t-scale)),0,var(--t-translate));scale:var(--t-scale)}@media (hover: hover) and (pointer: fine){.t-actions{display:none}}\n"], directives: [{ type: i1.TuiResizeDirective, selector: "[tuiResize]", outputs: ["tuiResize"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSwipeActionsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-swipe-actions',
                    templateUrl: './swipe-actions.template.html',
                    styleUrls: ['./swipe-actions.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: {
                        '[style.--t-actions-width]': 'actionsWidth',
                    },
                }]
        }] });

class TuiSwipeActionsAutoCloseDirective {
    constructor(el) {
        this.el = el;
        this.autoClose = true;
    }
    handleEvent(event) {
        const target = tuiGetActualTarget(event);
        if (this.autoClose !== false && !this.el.nativeElement.contains(target)) {
            this.close();
        }
    }
    close() {
        this.el.nativeElement.scrollTo({
            left: 0,
            behavior: 'smooth',
        });
    }
}
TuiSwipeActionsAutoCloseDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSwipeActionsAutoCloseDirective, deps: [{ token: ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
TuiSwipeActionsAutoCloseDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiSwipeActionsAutoCloseDirective, selector: "tui-swipe-actions[autoClose]", inputs: { autoClose: "autoClose" }, host: { listeners: { "document:pointerdown.silent": "handleEvent($event)", "document:focusin.silent": "handleEvent($event)" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSwipeActionsAutoCloseDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'tui-swipe-actions[autoClose]',
                    host: {
                        '(document:pointerdown.silent)': 'handleEvent($event)',
                        '(document:focusin.silent)': 'handleEvent($event)',
                    },
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }]; }, propDecorators: { autoClose: [{
                type: Input
            }] } });

class TuiSwipeActionsModule {
}
TuiSwipeActionsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSwipeActionsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiSwipeActionsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSwipeActionsModule, declarations: [TuiSwipeActionsComponent, TuiSwipeActionsAutoCloseDirective], imports: [CommonModule, TuiResizeModule], exports: [TuiSwipeActionsComponent, TuiSwipeActionsAutoCloseDirective] });
TuiSwipeActionsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSwipeActionsModule, imports: [[CommonModule, TuiResizeModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSwipeActionsModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, TuiResizeModule],
                    declarations: [TuiSwipeActionsComponent, TuiSwipeActionsAutoCloseDirective],
                    exports: [TuiSwipeActionsComponent, TuiSwipeActionsAutoCloseDirective],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TuiSwipeActionsAutoCloseDirective, TuiSwipeActionsComponent, TuiSwipeActionsModule };
//# sourceMappingURL=taiga-ui-experimental-components-swipe-action.js.map
