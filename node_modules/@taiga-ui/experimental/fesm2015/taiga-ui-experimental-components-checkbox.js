import * as i0 from '@angular/core';
import { ChangeDetectorRef, ElementRef, Component, ChangeDetectionStrategy, Inject, Self, Optional, Input, NgModule } from '@angular/core';
import * as i2 from '@angular/forms';
import { NgModel, NgControl } from '@angular/forms';
import { tuiCreateToken, tuiProvideOptions, tuiIsString, tuiControlValue, tuiWatch, TuiDestroyService } from '@taiga-ui/cdk';
import { TUI_ICON_RESOLVER } from '@taiga-ui/experimental/tokens';
import { distinctUntilChanged, takeUntil } from 'rxjs/operators';
import * as i1 from 'rxjs';

const TUI_CHECKBOX_DEFAULT_OPTIONS = {
    size: 'm',
    icons: {
        checked: size => (size === 'm' ? 'tuiIconCheckLarge' : 'tuiIconCheck'),
        indeterminate: size => (size === 'm' ? 'tuiIconMinusLarge' : 'tuiIconMinus'),
    },
};
const TUI_CHECKBOX_OPTIONS = tuiCreateToken(TUI_CHECKBOX_DEFAULT_OPTIONS);
function tuiCheckboxOptionsProvider(options) {
    return tuiProvideOptions(TUI_CHECKBOX_OPTIONS, options, TUI_CHECKBOX_DEFAULT_OPTIONS);
}

class TuiCheckboxComponent {
    constructor(cdr, resolver, options, destroy$, el, control) {
        this.cdr = cdr;
        this.resolver = resolver;
        this.options = options;
        this.destroy$ = destroy$;
        this.el = el;
        this.control = control;
        this.size = this.options.size;
    }
    get icon() {
        const option = this.el.nativeElement.indeterminate
            ? this.options.icons.indeterminate
            : this.options.icons.checked;
        const icon = tuiIsString(option) ? option : option(this.size);
        return `url(${this.resolver(icon)})`;
    }
    ngOnInit() {
        var _a;
        if (!((_a = this.control) === null || _a === void 0 ? void 0 : _a.valueChanges)) {
            return;
        }
        tuiControlValue(this.control)
            .pipe(distinctUntilChanged(), tuiWatch(this.cdr), takeUntil(this.destroy$))
            .subscribe(value => {
            // https://github.com/angular/angular/issues/14988
            const fix = this.control instanceof NgModel ? this.control.model : value;
            this.el.nativeElement.indeterminate = fix === null;
        });
    }
}
TuiCheckboxComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiCheckboxComponent, deps: [{ token: ChangeDetectorRef }, { token: TUI_ICON_RESOLVER }, { token: TUI_CHECKBOX_OPTIONS }, { token: TuiDestroyService, self: true }, { token: ElementRef }, { token: NgControl, optional: true }], target: i0.ɵɵFactoryTarget.Component });
TuiCheckboxComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiCheckboxComponent, selector: "input[type=\"checkbox\"][tuiCheckbox]", inputs: { size: "size" }, host: { attributes: { "tuiAppearance": "" }, properties: { "disabled": "!control || control.disabled", "attr.data-size": "size", "class._invalid": "control?.invalid && control?.touched", "class._readonly": "!control", "style.--t-mask": "icon" } }, providers: [TuiDestroyService], ngImport: i0, template: '', isInline: true, styles: [":host{width:1.5rem;height:1.5rem;border-radius:var(--tui-radius-s);color:var(--tui-primary-text);cursor:pointer;margin:0;box-shadow:inset 0 0 0 .0625rem var(--tui-clear-active)}:host:before{position:absolute;top:0;left:0;width:100%;height:100%;content:\"\";background:currentColor;-webkit-mask:url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\"></svg>') center / 100%;mask:url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\"></svg>') center / 100%;transform:scale(0);transition:transform var(--tui-duration) ease-in-out,-webkit-mask 0s var(--tui-duration) ease-in-out;transition:transform var(--tui-duration) ease-in-out,mask 0s var(--tui-duration) ease-in-out;transition:transform var(--tui-duration) ease-in-out,mask 0s var(--tui-duration) ease-in-out,-webkit-mask 0s var(--tui-duration) ease-in-out}:host:disabled._readonly{opacity:1}:host:checked,:host:indeterminate{box-shadow:none;background:var(--tui-primary)}:host:checked:hover,:host:indeterminate:hover{background:var(--tui-primary-hover)}:host:checked:active,:host:indeterminate:active{background:var(--tui-primary-active)}:host:checked:before,:host:indeterminate:before{-webkit-mask-image:var(--t-mask);mask-image:var(--t-mask);transform:scale(1);transition:transform var(--tui-duration) ease-in-out,-webkit-mask 0s ease-in-out;transition:transform var(--tui-duration) ease-in-out,mask 0s ease-in-out;transition:transform var(--tui-duration) ease-in-out,mask 0s ease-in-out,-webkit-mask 0s ease-in-out}:host[data-size=s]{width:1rem;height:1rem;border-radius:var(--tui-radius-xs)}:host._invalid{box-shadow:inset 0 0 0 .0625rem var(--tui-error-bg-hover)}:host._invalid:checked,:host._invalid:indeterminate{background:var(--tui-error-fill)}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiCheckboxComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'input[type="checkbox"][tuiCheckbox]',
                    template: '',
                    styleUrls: ['./checkbox.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [TuiDestroyService],
                    host: {
                        tuiAppearance: '',
                        '[disabled]': '!control || control.disabled',
                        '[attr.data-size]': 'size',
                        '[class._invalid]': 'control?.invalid && control?.touched',
                        '[class._readonly]': '!control',
                        '[style.--t-mask]': 'icon',
                    },
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_ICON_RESOLVER]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_CHECKBOX_OPTIONS]
                }] }, { type: i1.Observable, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiDestroyService]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: i2.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [NgControl]
                }] }]; }, propDecorators: { size: [{
                type: Input
            }] } });

class TuiCheckboxModule {
}
TuiCheckboxModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiCheckboxModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiCheckboxModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiCheckboxModule, declarations: [TuiCheckboxComponent], exports: [TuiCheckboxComponent] });
TuiCheckboxModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiCheckboxModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiCheckboxModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [TuiCheckboxComponent],
                    exports: [TuiCheckboxComponent],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TUI_CHECKBOX_DEFAULT_OPTIONS, TUI_CHECKBOX_OPTIONS, TuiCheckboxComponent, TuiCheckboxModule, tuiCheckboxOptionsProvider };
//# sourceMappingURL=taiga-ui-experimental-components-checkbox.js.map
