(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@ng-web-apis/common'), require('@taiga-ui/cdk'), require('@taiga-ui/core'), require('rxjs'), require('@angular/common'), require('@tinkoff/ng-polymorpheus')) :
    typeof define === 'function' && define.amd ? define('@taiga-ui/addon-tablebars', ['exports', '@angular/core', '@ng-web-apis/common', '@taiga-ui/cdk', '@taiga-ui/core', 'rxjs', '@angular/common', '@tinkoff/ng-polymorpheus'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global["taiga-ui"] = global["taiga-ui"] || {}, global["taiga-ui"]["addon-tablebars"] = {}), global.ng.core, global.common, global.cdk, global.i1, global.rxjs, global.ng.common, global.i3));
})(this, (function (exports, i0, common, cdk, i1, i5, i2, i3) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i5__namespace = /*#__PURE__*/_interopNamespace(i5);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);

    var TuiTableBar = /** @class */ (function () {
        function TuiTableBar(observer, content, options) {
            if (options === void 0) { options = {}; }
            this.observer = observer;
            this.content = content;
            var _a = options.mode, mode = _a === void 0 ? 'onLight' : _a, _b = options.hasCloseButton, hasCloseButton = _b === void 0 ? false : _b, _c = options.adaptive, adaptive = _c === void 0 ? false : _c;
            this.mode = mode;
            this.hasCloseButton = hasCloseButton;
            this.adaptive = adaptive;
        }
        TuiTableBar.prototype.close = function () {
            this.observer.complete();
        };
        return TuiTableBar;
    }());

    var NO_HOST = 'Table bars are disabled, enable support by adding TuiTableBarsHostModule to your main app module ' +
        'and tui-table-bars-host component to app template';
    var TuiTableBarsService = /** @class */ (function () {
        function TuiTableBarsService() {
            this.bar$ = new i5.ReplaySubject(1);
        }
        TuiTableBarsService.prototype.open = function (content, options) {
            var _this = this;
            return new i5.Observable(function (observer) {
                ngDevMode && cdk.tuiAssert.assert(cdk.tuiIsObserved(_this.bar$), NO_HOST);
                var tableBar = new TuiTableBar(observer, content, options);
                _this.bar$.next(tableBar);
                return function () {
                    _this.bar$.next(null);
                };
            });
        };
        return TuiTableBarsService;
    }());
    TuiTableBarsService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiTableBarsService, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    TuiTableBarsService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiTableBarsService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiTableBarsService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }] });

    // TODO: Accessibility
    var TuiTableBarsHostComponent = /** @class */ (function () {
        function TuiTableBarsHostComponent(service, closeWord$, icons, animation, media, win) {
            this.service = service;
            this.closeWord$ = closeWord$;
            this.icons = icons;
            this.animation = animation;
            this.media = media;
            this.win = win;
        }
        Object.defineProperty(TuiTableBarsHostComponent.prototype, "isMobile", {
            get: function () {
                return i1.tuiIsMobile(this.win, this.media);
            },
            enumerable: false,
            configurable: true
        });
        TuiTableBarsHostComponent.prototype.getMode = function (mode) {
            return mode === 'onLight' ? 'onDark' : null;
        };
        TuiTableBarsHostComponent.prototype.onCloseClick = function (itemToRemove) {
            itemToRemove.close();
        };
        TuiTableBarsHostComponent.prototype.getItemContext = function (item) {
            return {
                $implicit: function () { return item.close(); },
            };
        };
        return TuiTableBarsHostComponent;
    }());
    TuiTableBarsHostComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiTableBarsHostComponent, deps: [{ token: TuiTableBarsService }, { token: i1.TUI_CLOSE_WORD }, { token: i1.TUI_COMMON_ICONS }, { token: i1.TUI_ANIMATION_OPTIONS }, { token: i1.TUI_MEDIA }, { token: common.WINDOW }], target: i0__namespace.ɵɵFactoryTarget.Component });
    TuiTableBarsHostComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiTableBarsHostComponent, selector: "tui-table-bars-host", ngImport: i0__namespace, template: "<div\n    *ngIf=\"service.bar$ | async as item\"\n    class=\"t-wrapper\"\n    @tuiParentAnimation\n>\n    <div\n        automation-id=\"tui-table-bar__bar\"\n        class=\"t-bar\"\n        [@tuiSlideInTop]=\"animation\"\n        [class.t-bar_light]=\"item.mode === 'onDark'\"\n    >\n        <div\n            class=\"t-container\"\n            [class.t-container_adaptive]=\"item.adaptive\"\n        >\n            <div class=\"t-inner\">\n                <div class=\"t-content\">\n                    <!-- TODO: Polymorpheus fix type -->\n                    <ng-container *polymorpheusOutlet=\"$any(item.content) as text; context: getItemContext(item)\">\n                        {{ text }}\n                    </ng-container>\n                </div>\n\n                <button\n                    *ngIf=\"item.hasCloseButton\"\n                    appearance=\"icon\"\n                    automation-id=\"tui-table-bar__close-button\"\n                    size=\"xs\"\n                    tuiIconButton\n                    type=\"button\"\n                    class=\"t-close-button\"\n                    [icon]=\"icons.close\"\n                    [title]=\"closeWord$ | async\"\n                    [tuiMode]=\"getMode(item.mode)\"\n                    (click)=\"onCloseClick(item)\"\n                ></button>\n            </div>\n        </div>\n    </div>\n</div>\n", styles: [":host{position:fixed;bottom:0;left:0;display:flex;align-items:flex-end;width:100%;height:0}.t-wrapper{display:flex;width:100%}.t-bar{box-shadow:var(--tui-shadow);flex:0 0 100%;background:var(--tui-base-07);color:var(--tui-base-01)}.t-bar_light{background:var(--tui-base-01);color:var(--tui-text-01)}.t-container{position:relative;margin:0 auto}@media screen and (min-width: 80em){.t-container.t-container_adaptive{width:69rem}}@media screen and (max-width: 79.9625em){.t-container.t-container_adaptive{width:51.5rem}}@media screen and (max-width: 47.9625em){.t-container.t-container_adaptive{width:100%;padding:0 1rem;box-sizing:border-box}}@media screen and (min-width: 80em){.t-container{width:69rem}}@media screen and (max-width: 79.9625em){.t-container{width:51.5rem;padding:0 3rem}}.t-inner{display:flex;align-items:center;height:4.5rem;width:100%;overflow:hidden}:host-context(tui-root._mobile) .t-inner{height:5.75rem}.t-close-button{margin-left:1.5rem}.t-content{width:100%;flex:1 1 0}\n"], components: [{ type: i1__namespace.TuiButtonComponent, selector: "button[tuiButton], button[tuiIconButton], a[tuiButton], a[tuiIconButton]", inputs: ["appearance", "disabled", "icon", "iconRight", "shape", "showLoader", "size"] }], directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3__namespace.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { type: i1__namespace.TuiModeDirective, selector: "[tuiMode]", inputs: ["tuiMode"] }], pipes: { "async": i2__namespace.AsyncPipe }, animations: [i1.tuiSlideInTop, cdk.TUI_PARENT_ANIMATION], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiTableBarsHostComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'tui-table-bars-host',
                        templateUrl: './table-bars-host.template.html',
                        styleUrls: ['./table-bars-host.style.less'],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        animations: [i1.tuiSlideInTop, cdk.TUI_PARENT_ANIMATION],
                    }]
            }], ctorParameters: function () {
            return [{ type: TuiTableBarsService, decorators: [{
                            type: i0.Inject,
                            args: [TuiTableBarsService]
                        }] }, { type: i5__namespace.Observable, decorators: [{
                            type: i0.Inject,
                            args: [i1.TUI_CLOSE_WORD]
                        }] }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i1.TUI_COMMON_ICONS]
                        }] }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i1.TUI_ANIMATION_OPTIONS]
                        }] }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i1.TUI_MEDIA]
                        }] }, { type: Window, decorators: [{
                            type: i0.Inject,
                            args: [common.WINDOW]
                        }] }];
        } });

    var TuiTableBarsHostModule = /** @class */ (function () {
        function TuiTableBarsHostModule() {
        }
        return TuiTableBarsHostModule;
    }());
    TuiTableBarsHostModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiTableBarsHostModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    TuiTableBarsHostModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiTableBarsHostModule, declarations: [TuiTableBarsHostComponent], imports: [i2.CommonModule, i3.PolymorpheusModule, i1.TuiModeModule, i1.TuiButtonModule], exports: [TuiTableBarsHostComponent] });
    TuiTableBarsHostModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiTableBarsHostModule, imports: [[i2.CommonModule, i3.PolymorpheusModule, i1.TuiModeModule, i1.TuiButtonModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiTableBarsHostModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i2.CommonModule, i3.PolymorpheusModule, i1.TuiModeModule, i1.TuiButtonModule],
                        declarations: [TuiTableBarsHostComponent],
                        exports: [TuiTableBarsHostComponent],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.TuiTableBar = TuiTableBar;
    exports.TuiTableBarsHostComponent = TuiTableBarsHostComponent;
    exports.TuiTableBarsHostModule = TuiTableBarsHostModule;
    exports.TuiTableBarsService = TuiTableBarsService;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=taiga-ui-addon-tablebars.umd.js.map
