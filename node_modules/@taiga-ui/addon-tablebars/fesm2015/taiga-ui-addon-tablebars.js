import * as i0 from '@angular/core';
import { Injectable, Component, ChangeDetectionStrategy, Inject, NgModule } from '@angular/core';
import { WINDOW } from '@ng-web-apis/common';
import { tuiAssert, tuiIsObserved, TUI_PARENT_ANIMATION } from '@taiga-ui/cdk';
import * as i1 from '@taiga-ui/core';
import { tuiIsMobile, TUI_CLOSE_WORD, TUI_COMMON_ICONS, TUI_ANIMATION_OPTIONS, TUI_MEDIA, tuiSlideInTop, TuiModeModule, TuiButtonModule } from '@taiga-ui/core';
import * as i5 from 'rxjs';
import { ReplaySubject, Observable } from 'rxjs';
import * as i2 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i3 from '@tinkoff/ng-polymorpheus';
import { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';

class TuiTableBar {
    constructor(observer, content, options = {}) {
        this.observer = observer;
        this.content = content;
        const { mode = 'onLight', hasCloseButton = false, adaptive = false } = options;
        this.mode = mode;
        this.hasCloseButton = hasCloseButton;
        this.adaptive = adaptive;
    }
    close() {
        this.observer.complete();
    }
}

const NO_HOST = 'Table bars are disabled, enable support by adding TuiTableBarsHostModule to your main app module ' +
    'and tui-table-bars-host component to app template';
class TuiTableBarsService {
    constructor() {
        this.bar$ = new ReplaySubject(1);
    }
    open(content, options) {
        return new Observable(observer => {
            ngDevMode && tuiAssert.assert(tuiIsObserved(this.bar$), NO_HOST);
            const tableBar = new TuiTableBar(observer, content, options);
            this.bar$.next(tableBar);
            return () => {
                this.bar$.next(null);
            };
        });
    }
}
TuiTableBarsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTableBarsService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
TuiTableBarsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTableBarsService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTableBarsService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });

// TODO: Accessibility
class TuiTableBarsHostComponent {
    constructor(service, closeWord$, icons, animation, media, win) {
        this.service = service;
        this.closeWord$ = closeWord$;
        this.icons = icons;
        this.animation = animation;
        this.media = media;
        this.win = win;
    }
    get isMobile() {
        return tuiIsMobile(this.win, this.media);
    }
    getMode(mode) {
        return mode === 'onLight' ? 'onDark' : null;
    }
    onCloseClick(itemToRemove) {
        itemToRemove.close();
    }
    getItemContext(item) {
        return {
            $implicit: () => item.close(),
        };
    }
}
TuiTableBarsHostComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTableBarsHostComponent, deps: [{ token: TuiTableBarsService }, { token: TUI_CLOSE_WORD }, { token: TUI_COMMON_ICONS }, { token: TUI_ANIMATION_OPTIONS }, { token: TUI_MEDIA }, { token: WINDOW }], target: i0.ɵɵFactoryTarget.Component });
TuiTableBarsHostComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiTableBarsHostComponent, selector: "tui-table-bars-host", ngImport: i0, template: "<div\n    *ngIf=\"service.bar$ | async as item\"\n    class=\"t-wrapper\"\n    @tuiParentAnimation\n>\n    <div\n        automation-id=\"tui-table-bar__bar\"\n        class=\"t-bar\"\n        [@tuiSlideInTop]=\"animation\"\n        [class.t-bar_light]=\"item.mode === 'onDark'\"\n    >\n        <div\n            class=\"t-container\"\n            [class.t-container_adaptive]=\"item.adaptive\"\n        >\n            <div class=\"t-inner\">\n                <div class=\"t-content\">\n                    <!-- TODO: Polymorpheus fix type -->\n                    <ng-container *polymorpheusOutlet=\"$any(item.content) as text; context: getItemContext(item)\">\n                        {{ text }}\n                    </ng-container>\n                </div>\n\n                <button\n                    *ngIf=\"item.hasCloseButton\"\n                    appearance=\"icon\"\n                    automation-id=\"tui-table-bar__close-button\"\n                    size=\"xs\"\n                    tuiIconButton\n                    type=\"button\"\n                    class=\"t-close-button\"\n                    [icon]=\"icons.close\"\n                    [title]=\"closeWord$ | async\"\n                    [tuiMode]=\"getMode(item.mode)\"\n                    (click)=\"onCloseClick(item)\"\n                ></button>\n            </div>\n        </div>\n    </div>\n</div>\n", styles: [":host{position:fixed;bottom:0;left:0;display:flex;align-items:flex-end;width:100%;height:0}.t-wrapper{display:flex;width:100%}.t-bar{box-shadow:var(--tui-shadow);flex:0 0 100%;background:var(--tui-base-07);color:var(--tui-base-01)}.t-bar_light{background:var(--tui-base-01);color:var(--tui-text-01)}.t-container{position:relative;margin:0 auto}@media screen and (min-width: 80em){.t-container.t-container_adaptive{width:69rem}}@media screen and (max-width: 79.9625em){.t-container.t-container_adaptive{width:51.5rem}}@media screen and (max-width: 47.9625em){.t-container.t-container_adaptive{width:100%;padding:0 1rem;box-sizing:border-box}}@media screen and (min-width: 80em){.t-container{width:69rem}}@media screen and (max-width: 79.9625em){.t-container{width:51.5rem;padding:0 3rem}}.t-inner{display:flex;align-items:center;height:4.5rem;width:100%;overflow:hidden}:host-context(tui-root._mobile) .t-inner{height:5.75rem}.t-close-button{margin-left:1.5rem}.t-content{width:100%;flex:1 1 0}\n"], components: [{ type: i1.TuiButtonComponent, selector: "button[tuiButton], button[tuiIconButton], a[tuiButton], a[tuiIconButton]", inputs: ["appearance", "disabled", "icon", "iconRight", "shape", "showLoader", "size"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { type: i1.TuiModeDirective, selector: "[tuiMode]", inputs: ["tuiMode"] }], pipes: { "async": i2.AsyncPipe }, animations: [tuiSlideInTop, TUI_PARENT_ANIMATION], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTableBarsHostComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-table-bars-host',
                    templateUrl: './table-bars-host.template.html',
                    styleUrls: ['./table-bars-host.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    animations: [tuiSlideInTop, TUI_PARENT_ANIMATION],
                }]
        }], ctorParameters: function () { return [{ type: TuiTableBarsService, decorators: [{
                    type: Inject,
                    args: [TuiTableBarsService]
                }] }, { type: i5.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_CLOSE_WORD]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_COMMON_ICONS]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_ANIMATION_OPTIONS]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_MEDIA]
                }] }, { type: Window, decorators: [{
                    type: Inject,
                    args: [WINDOW]
                }] }]; } });

class TuiTableBarsHostModule {
}
TuiTableBarsHostModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTableBarsHostModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiTableBarsHostModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTableBarsHostModule, declarations: [TuiTableBarsHostComponent], imports: [CommonModule, PolymorpheusModule, TuiModeModule, TuiButtonModule], exports: [TuiTableBarsHostComponent] });
TuiTableBarsHostModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTableBarsHostModule, imports: [[CommonModule, PolymorpheusModule, TuiModeModule, TuiButtonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTableBarsHostModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, PolymorpheusModule, TuiModeModule, TuiButtonModule],
                    declarations: [TuiTableBarsHostComponent],
                    exports: [TuiTableBarsHostComponent],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TuiTableBar, TuiTableBarsHostComponent, TuiTableBarsHostModule, TuiTableBarsService };
//# sourceMappingURL=taiga-ui-addon-tablebars.js.map
