import { ChangeDetectionStrategy, Component, Inject } from '@angular/core';
import { WINDOW } from '@ng-web-apis/common';
import { TUI_PARENT_ANIMATION } from '@taiga-ui/cdk';
import { TUI_ANIMATION_OPTIONS, TUI_CLOSE_WORD, TUI_COMMON_ICONS, TUI_MEDIA, tuiIsMobile, tuiSlideInTop, } from '@taiga-ui/core';
import { TuiTableBarsService } from '../../services/table-bars.service';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core";
import * as i2 from "@angular/common";
import * as i3 from "@tinkoff/ng-polymorpheus";
import * as i4 from "../../services/table-bars.service";
import * as i5 from "rxjs";
// TODO: Accessibility
export class TuiTableBarsHostComponent {
    constructor(service, closeWord$, icons, animation, media, win) {
        this.service = service;
        this.closeWord$ = closeWord$;
        this.icons = icons;
        this.animation = animation;
        this.media = media;
        this.win = win;
    }
    get isMobile() {
        return tuiIsMobile(this.win, this.media);
    }
    getMode(mode) {
        return mode === 'onLight' ? 'onDark' : null;
    }
    onCloseClick(itemToRemove) {
        itemToRemove.close();
    }
    getItemContext(item) {
        return {
            $implicit: () => item.close(),
        };
    }
}
TuiTableBarsHostComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTableBarsHostComponent, deps: [{ token: TuiTableBarsService }, { token: TUI_CLOSE_WORD }, { token: TUI_COMMON_ICONS }, { token: TUI_ANIMATION_OPTIONS }, { token: TUI_MEDIA }, { token: WINDOW }], target: i0.ɵɵFactoryTarget.Component });
TuiTableBarsHostComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiTableBarsHostComponent, selector: "tui-table-bars-host", ngImport: i0, template: "<div\n    *ngIf=\"service.bar$ | async as item\"\n    class=\"t-wrapper\"\n    @tuiParentAnimation\n>\n    <div\n        automation-id=\"tui-table-bar__bar\"\n        class=\"t-bar\"\n        [@tuiSlideInTop]=\"animation\"\n        [class.t-bar_light]=\"item.mode === 'onDark'\"\n    >\n        <div\n            class=\"t-container\"\n            [class.t-container_adaptive]=\"item.adaptive\"\n        >\n            <div class=\"t-inner\">\n                <div class=\"t-content\">\n                    <!-- TODO: Polymorpheus fix type -->\n                    <ng-container *polymorpheusOutlet=\"$any(item.content) as text; context: getItemContext(item)\">\n                        {{ text }}\n                    </ng-container>\n                </div>\n\n                <button\n                    *ngIf=\"item.hasCloseButton\"\n                    appearance=\"icon\"\n                    automation-id=\"tui-table-bar__close-button\"\n                    size=\"xs\"\n                    tuiIconButton\n                    type=\"button\"\n                    class=\"t-close-button\"\n                    [icon]=\"icons.close\"\n                    [title]=\"closeWord$ | async\"\n                    [tuiMode]=\"getMode(item.mode)\"\n                    (click)=\"onCloseClick(item)\"\n                ></button>\n            </div>\n        </div>\n    </div>\n</div>\n", styles: [":host{position:fixed;bottom:0;left:0;display:flex;align-items:flex-end;width:100%;height:0}.t-wrapper{display:flex;width:100%}.t-bar{box-shadow:var(--tui-shadow);flex:0 0 100%;background:var(--tui-base-07);color:var(--tui-base-01)}.t-bar_light{background:var(--tui-base-01);color:var(--tui-text-01)}.t-container{position:relative;margin:0 auto}@media screen and (min-width: 80em){.t-container.t-container_adaptive{width:69rem}}@media screen and (max-width: 79.9625em){.t-container.t-container_adaptive{width:51.5rem}}@media screen and (max-width: 47.9625em){.t-container.t-container_adaptive{width:100%;padding:0 1rem;box-sizing:border-box}}@media screen and (min-width: 80em){.t-container{width:69rem}}@media screen and (max-width: 79.9625em){.t-container{width:51.5rem;padding:0 3rem}}.t-inner{display:flex;align-items:center;height:4.5rem;width:100%;overflow:hidden}:host-context(tui-root._mobile) .t-inner{height:5.75rem}.t-close-button{margin-left:1.5rem}.t-content{width:100%;flex:1 1 0}\n"], components: [{ type: i1.TuiButtonComponent, selector: "button[tuiButton], button[tuiIconButton], a[tuiButton], a[tuiIconButton]", inputs: ["appearance", "disabled", "icon", "iconRight", "shape", "showLoader", "size"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { type: i1.TuiModeDirective, selector: "[tuiMode]", inputs: ["tuiMode"] }], pipes: { "async": i2.AsyncPipe }, animations: [tuiSlideInTop, TUI_PARENT_ANIMATION], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTableBarsHostComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-table-bars-host',
                    templateUrl: './table-bars-host.template.html',
                    styleUrls: ['./table-bars-host.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    animations: [tuiSlideInTop, TUI_PARENT_ANIMATION],
                }]
        }], ctorParameters: function () { return [{ type: i4.TuiTableBarsService, decorators: [{
                    type: Inject,
                    args: [TuiTableBarsService]
                }] }, { type: i5.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_CLOSE_WORD]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_COMMON_ICONS]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_ANIMATION_OPTIONS]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_MEDIA]
                }] }, { type: Window, decorators: [{
                    type: Inject,
                    args: [WINDOW]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUtYmFycy1ob3N0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FkZG9uLXRhYmxlYmFycy9jb21wb25lbnRzL3RhYmxlLWJhcnMtaG9zdC90YWJsZS1iYXJzLWhvc3QuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYWRkb24tdGFibGViYXJzL2NvbXBvbmVudHMvdGFibGUtYmFycy1ob3N0L3RhYmxlLWJhcnMtaG9zdC50ZW1wbGF0ZS5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBQyx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3pFLE9BQU8sRUFBQyxNQUFNLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQUMzQyxPQUFPLEVBQUMsb0JBQW9CLEVBQXlCLE1BQU0sZUFBZSxDQUFDO0FBQzNFLE9BQU8sRUFDSCxxQkFBcUIsRUFDckIsY0FBYyxFQUNkLGdCQUFnQixFQUNoQixTQUFTLEVBR1QsV0FBVyxFQUVYLGFBQWEsR0FDaEIsTUFBTSxnQkFBZ0IsQ0FBQztBQUl4QixPQUFPLEVBQUMsbUJBQW1CLEVBQUMsTUFBTSxtQ0FBbUMsQ0FBQzs7Ozs7OztBQUV0RSxzQkFBc0I7QUFRdEIsTUFBTSxPQUFPLHlCQUF5QjtJQUNsQyxZQUMwQyxPQUE0QixFQUNqQyxVQUE4QixFQUM1QixLQUFxQixFQUNoQixTQUEyQixFQUMvQixLQUFlLEVBQ2xCLEdBQVc7UUFMTixZQUFPLEdBQVAsT0FBTyxDQUFxQjtRQUNqQyxlQUFVLEdBQVYsVUFBVSxDQUFvQjtRQUM1QixVQUFLLEdBQUwsS0FBSyxDQUFnQjtRQUNoQixjQUFTLEdBQVQsU0FBUyxDQUFrQjtRQUMvQixVQUFLLEdBQUwsS0FBSyxDQUFVO1FBQ2xCLFFBQUcsR0FBSCxHQUFHLENBQVE7SUFDN0MsQ0FBQztJQUVKLElBQUksUUFBUTtRQUNSLE9BQU8sV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFRCxPQUFPLENBQUMsSUFBbUI7UUFDdkIsT0FBTyxJQUFJLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUNoRCxDQUFDO0lBRUQsWUFBWSxDQUFDLFlBQXlCO1FBQ2xDLFlBQVksQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUN6QixDQUFDO0lBRUQsY0FBYyxDQUFDLElBQWlCO1FBQzVCLE9BQU87WUFDSCxTQUFTLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRTtTQUNoQyxDQUFDO0lBQ04sQ0FBQzs7dUhBMUJRLHlCQUF5QixrQkFFdEIsbUJBQW1CLGFBQ25CLGNBQWMsYUFDZCxnQkFBZ0IsYUFDaEIscUJBQXFCLGFBQ3JCLFNBQVMsYUFDVCxNQUFNOzJHQVBULHlCQUF5QiwyREM1QnRDLHkyQ0F3Q0EsaWpERGRnQixDQUFDLGFBQWEsRUFBRSxvQkFBb0IsQ0FBQzs0RkFFeEMseUJBQXlCO2tCQVByQyxTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSxxQkFBcUI7b0JBQy9CLFdBQVcsRUFBRSxpQ0FBaUM7b0JBQzlDLFNBQVMsRUFBRSxDQUFDLDhCQUE4QixDQUFDO29CQUMzQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFDL0MsVUFBVSxFQUFFLENBQUMsYUFBYSxFQUFFLG9CQUFvQixDQUFDO2lCQUNwRDs7MEJBR1EsTUFBTTsyQkFBQyxtQkFBbUI7OzBCQUMxQixNQUFNOzJCQUFDLGNBQWM7OzBCQUNyQixNQUFNOzJCQUFDLGdCQUFnQjs7MEJBQ3ZCLE1BQU07MkJBQUMscUJBQXFCOzswQkFDNUIsTUFBTTsyQkFBQyxTQUFTOzhCQUNxQixNQUFNOzBCQUEzQyxNQUFNOzJCQUFDLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0FuaW1hdGlvbk9wdGlvbnN9IGZyb20gJ0Bhbmd1bGFyL2FuaW1hdGlvbnMnO1xuaW1wb3J0IHtDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBJbmplY3R9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtXSU5ET1d9IGZyb20gJ0BuZy13ZWItYXBpcy9jb21tb24nO1xuaW1wb3J0IHtUVUlfUEFSRU5UX0FOSU1BVElPTiwgVHVpQ29udGV4dFdpdGhJbXBsaWNpdH0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge1xuICAgIFRVSV9BTklNQVRJT05fT1BUSU9OUyxcbiAgICBUVUlfQ0xPU0VfV09SRCxcbiAgICBUVUlfQ09NTU9OX0lDT05TLFxuICAgIFRVSV9NRURJQSxcbiAgICBUdWlCcmlnaHRuZXNzLFxuICAgIFR1aUNvbW1vbkljb25zLFxuICAgIHR1aUlzTW9iaWxlLFxuICAgIFR1aU1lZGlhLFxuICAgIHR1aVNsaWRlSW5Ub3AsXG59IGZyb20gJ0B0YWlnYS11aS9jb3JlJztcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7VHVpVGFibGVCYXJ9IGZyb20gJy4uLy4uL2NsYXNzZXMvdGFibGUtYmFyJztcbmltcG9ydCB7VHVpVGFibGVCYXJzU2VydmljZX0gZnJvbSAnLi4vLi4vc2VydmljZXMvdGFibGUtYmFycy5zZXJ2aWNlJztcblxuLy8gVE9ETzogQWNjZXNzaWJpbGl0eVxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICd0dWktdGFibGUtYmFycy1ob3N0JyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vdGFibGUtYmFycy1ob3N0LnRlbXBsYXRlLmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL3RhYmxlLWJhcnMtaG9zdC5zdHlsZS5sZXNzJ10sXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gICAgYW5pbWF0aW9uczogW3R1aVNsaWRlSW5Ub3AsIFRVSV9QQVJFTlRfQU5JTUFUSU9OXSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpVGFibGVCYXJzSG9zdENvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoVHVpVGFibGVCYXJzU2VydmljZSkgcmVhZG9ubHkgc2VydmljZTogVHVpVGFibGVCYXJzU2VydmljZSxcbiAgICAgICAgQEluamVjdChUVUlfQ0xPU0VfV09SRCkgcmVhZG9ubHkgY2xvc2VXb3JkJDogT2JzZXJ2YWJsZTxzdHJpbmc+LFxuICAgICAgICBASW5qZWN0KFRVSV9DT01NT05fSUNPTlMpIHJlYWRvbmx5IGljb25zOiBUdWlDb21tb25JY29ucyxcbiAgICAgICAgQEluamVjdChUVUlfQU5JTUFUSU9OX09QVElPTlMpIHJlYWRvbmx5IGFuaW1hdGlvbjogQW5pbWF0aW9uT3B0aW9ucyxcbiAgICAgICAgQEluamVjdChUVUlfTUVESUEpIHByaXZhdGUgcmVhZG9ubHkgbWVkaWE6IFR1aU1lZGlhLFxuICAgICAgICBASW5qZWN0KFdJTkRPVykgcHJpdmF0ZSByZWFkb25seSB3aW46IFdpbmRvdyxcbiAgICApIHt9XG5cbiAgICBnZXQgaXNNb2JpbGUoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0dWlJc01vYmlsZSh0aGlzLndpbiwgdGhpcy5tZWRpYSk7XG4gICAgfVxuXG4gICAgZ2V0TW9kZShtb2RlOiBUdWlCcmlnaHRuZXNzKTogVHVpQnJpZ2h0bmVzcyB8IG51bGwge1xuICAgICAgICByZXR1cm4gbW9kZSA9PT0gJ29uTGlnaHQnID8gJ29uRGFyaycgOiBudWxsO1xuICAgIH1cblxuICAgIG9uQ2xvc2VDbGljayhpdGVtVG9SZW1vdmU6IFR1aVRhYmxlQmFyKTogdm9pZCB7XG4gICAgICAgIGl0ZW1Ub1JlbW92ZS5jbG9zZSgpO1xuICAgIH1cblxuICAgIGdldEl0ZW1Db250ZXh0KGl0ZW06IFR1aVRhYmxlQmFyKTogVHVpQ29udGV4dFdpdGhJbXBsaWNpdDwoKSA9PiB2b2lkPiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAkaW1wbGljaXQ6ICgpID0+IGl0ZW0uY2xvc2UoKSxcbiAgICAgICAgfTtcbiAgICB9XG59XG4iLCI8ZGl2XG4gICAgKm5nSWY9XCJzZXJ2aWNlLmJhciQgfCBhc3luYyBhcyBpdGVtXCJcbiAgICBjbGFzcz1cInQtd3JhcHBlclwiXG4gICAgQHR1aVBhcmVudEFuaW1hdGlvblxuPlxuICAgIDxkaXZcbiAgICAgICAgYXV0b21hdGlvbi1pZD1cInR1aS10YWJsZS1iYXJfX2JhclwiXG4gICAgICAgIGNsYXNzPVwidC1iYXJcIlxuICAgICAgICBbQHR1aVNsaWRlSW5Ub3BdPVwiYW5pbWF0aW9uXCJcbiAgICAgICAgW2NsYXNzLnQtYmFyX2xpZ2h0XT1cIml0ZW0ubW9kZSA9PT0gJ29uRGFyaydcIlxuICAgID5cbiAgICAgICAgPGRpdlxuICAgICAgICAgICAgY2xhc3M9XCJ0LWNvbnRhaW5lclwiXG4gICAgICAgICAgICBbY2xhc3MudC1jb250YWluZXJfYWRhcHRpdmVdPVwiaXRlbS5hZGFwdGl2ZVwiXG4gICAgICAgID5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0LWlubmVyXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInQtY29udGVudFwiPlxuICAgICAgICAgICAgICAgICAgICA8IS0tIFRPRE86IFBvbHltb3JwaGV1cyBmaXggdHlwZSAtLT5cbiAgICAgICAgICAgICAgICAgICAgPG5nLWNvbnRhaW5lciAqcG9seW1vcnBoZXVzT3V0bGV0PVwiJGFueShpdGVtLmNvbnRlbnQpIGFzIHRleHQ7IGNvbnRleHQ6IGdldEl0ZW1Db250ZXh0KGl0ZW0pXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICB7eyB0ZXh0IH19XG4gICAgICAgICAgICAgICAgICAgIDwvbmctY29udGFpbmVyPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAqbmdJZj1cIml0ZW0uaGFzQ2xvc2VCdXR0b25cIlxuICAgICAgICAgICAgICAgICAgICBhcHBlYXJhbmNlPVwiaWNvblwiXG4gICAgICAgICAgICAgICAgICAgIGF1dG9tYXRpb24taWQ9XCJ0dWktdGFibGUtYmFyX19jbG9zZS1idXR0b25cIlxuICAgICAgICAgICAgICAgICAgICBzaXplPVwieHNcIlxuICAgICAgICAgICAgICAgICAgICB0dWlJY29uQnV0dG9uXG4gICAgICAgICAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgICAgICAgICAgICBjbGFzcz1cInQtY2xvc2UtYnV0dG9uXCJcbiAgICAgICAgICAgICAgICAgICAgW2ljb25dPVwiaWNvbnMuY2xvc2VcIlxuICAgICAgICAgICAgICAgICAgICBbdGl0bGVdPVwiY2xvc2VXb3JkJCB8IGFzeW5jXCJcbiAgICAgICAgICAgICAgICAgICAgW3R1aU1vZGVdPVwiZ2V0TW9kZShpdGVtLm1vZGUpXCJcbiAgICAgICAgICAgICAgICAgICAgKGNsaWNrKT1cIm9uQ2xvc2VDbGljayhpdGVtKVwiXG4gICAgICAgICAgICAgICAgPjwvYnV0dG9uPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuPC9kaXY+XG4iXX0=