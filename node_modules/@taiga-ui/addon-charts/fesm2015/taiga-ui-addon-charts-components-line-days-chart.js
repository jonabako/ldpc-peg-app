import { __decorate } from 'tslib';
import * as i0 from '@angular/core';
import { NgZone, Directive, Self, Inject, ContentChildren, forwardRef, Input, Component, ChangeDetectionStrategy, Optional, ViewChildren, HostBinding, NgModule } from '@angular/core';
import * as i1$1 from '@taiga-ui/addon-charts/components/line-chart';
import { tuiLineChartDrivers, TUI_LINE_CHART_OPTIONS, TuiLineChartHintDirective, TuiLineChartComponent, TuiLineChartModule } from '@taiga-ui/addon-charts/components/line-chart';
import * as i1 from '@taiga-ui/cdk';
import { EMPTY_QUERY, tuiZonefree, TuiDestroyService, TuiHoveredService, tuiPure, TuiDay, EMPTY_ARRAY, TuiMonth, tuiIsNumber, tuiIsPresent } from '@taiga-ui/cdk';
import * as i2 from 'rxjs';
import { combineLatest } from 'rxjs';
import { filter, takeUntil } from 'rxjs/operators';
import * as i2$1 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i3 from '@taiga-ui/core';
import { TuiHintModule } from '@taiga-ui/core';
import * as i4 from '@tinkoff/ng-polymorpheus';
import { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';

function find(value, current) {
    return value.find(([day]) => day.daySame(current)) || [current, NaN];
}
// TODO: Consider extending TuiLineChartHintDirective
class TuiLineDaysChartHintDirective {
    constructor(destroy$, zone, hovered$) {
        this.destroy$ = destroy$;
        this.zone = zone;
        this.hovered$ = hovered$;
        this.charts = EMPTY_QUERY;
    }
    ngAfterContentInit() {
        combineLatest([
            ...this.charts.map(({ charts }) => tuiLineChartDrivers(charts)),
            this.hovered$,
        ])
            .pipe(filter(result => !result.some(Boolean)), tuiZonefree(this.zone), takeUntil(this.destroy$))
            .subscribe(() => {
            this.charts.forEach(chart => chart.onHovered(NaN));
        });
    }
    getContext(day) {
        return this.getMap(...this.charts.map(({ value }) => value)).get(String(day)) || [];
    }
    raise(day) {
        const current = this.charts
            .map(({ value }) => find(value, day))
            .filter(([_, value]) => !Number.isNaN(value));
        const sorted = [...current].sort((a, b) => a[1] - b[1]);
        this.charts.forEach((chart, index) => {
            chart.onHovered(day);
            chart.zIndex = Math.max(sorted.indexOf(current[index]), 0);
        });
    }
    getMap(...values) {
        return (values[0] || []).reduce((map, [day]) => map.set(String(day), values.map(value => find(value, day))), new Map());
    }
}
TuiLineDaysChartHintDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiLineDaysChartHintDirective, deps: [{ token: TuiDestroyService, self: true }, { token: NgZone }, { token: TuiHoveredService }], target: i0.ɵɵFactoryTarget.Directive });
TuiLineDaysChartHintDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiLineDaysChartHintDirective, selector: "[tuiLineChartHint]", inputs: { hint: ["tuiLineChartHint", "hint"] }, providers: [TuiDestroyService, TuiHoveredService], queries: [{ propertyName: "charts", predicate: i0.forwardRef(function () { return TuiLineDaysChartComponent; }) }], ngImport: i0 });
__decorate([
    tuiPure
], TuiLineDaysChartHintDirective.prototype, "getMap", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiLineDaysChartHintDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiLineChartHint]',
                    providers: [TuiDestroyService, TuiHoveredService],
                }]
        }], ctorParameters: function () { return [{ type: i1.TuiDestroyService, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiDestroyService]
                }] }, { type: i0.NgZone, decorators: [{
                    type: Inject,
                    args: [NgZone]
                }] }, { type: i2.Observable, decorators: [{
                    type: Inject,
                    args: [TuiHoveredService]
                }] }]; }, propDecorators: { charts: [{
                type: ContentChildren,
                args: [forwardRef(() => TuiLineDaysChartComponent)]
            }], hint: [{
                type: Input,
                args: ['tuiLineChartHint']
            }], getMap: [] } });

const DUMMY = [NaN, NaN];
class TuiLineDaysChartComponent {
    constructor(hintDirective, destroy$, zone, hovered$, options) {
        this.hintDirective = hintDirective;
        this.destroy$ = destroy$;
        this.zone = zone;
        this.hovered$ = hovered$;
        this.options = options;
        this.charts = EMPTY_QUERY;
        this.y = 0;
        this.height = 0;
        this.smoothingFactor = this.options.smoothingFactor;
        this.xStringify = null;
        this.yStringify = null;
        this.dots = this.options.dots;
        this.zIndex = 0;
        this.value = [];
        this.daysStringify = index => this.xStringify ? this.xStringify(this.getDay(index)) : '';
    }
    set valueSetter(value) {
        if (!value.length) {
            this.value = [];
            return;
        }
        const start = value[0][0];
        const mutable = [...value];
        const length = TuiDay.lengthBetween(start, value[value.length - 1][0]) + 1;
        this.value = Array.from({ length }, (_, day) => {
            const currentDay = start.append({ day });
            const shifted = currentDay.daySame(mutable[0][0]) ? mutable.shift() : null;
            const currentValue = shifted ? shifted[1] : NaN;
            return [currentDay, currentValue];
        });
    }
    get months() {
        return this.value.length ? this.breakMonths(this.value) : EMPTY_ARRAY;
    }
    get firstWidth() {
        return this.months.length * this.value[0][0].daysCount;
    }
    get hint() {
        var _a, _b;
        return (_b = (_a = this.hintDirective) === null || _a === void 0 ? void 0 : _a.hint) !== null && _b !== void 0 ? _b : this.hintContent;
    }
    getHintContext(x, value) {
        return value[x - value[0][0].day + 1];
    }
    ngAfterViewInit() {
        combineLatest([tuiLineChartDrivers(this.charts), this.hovered$])
            .pipe(filter(result => !result.some(Boolean)), tuiZonefree(this.zone), takeUntil(this.destroy$))
            .subscribe(() => {
            this.onHovered(NaN);
        });
    }
    getX(index) {
        const current = this.getDay(index);
        const months = TuiMonth.lengthBetween(this.value[0][0], current);
        const offset = months * current.daysCount;
        return index - offset;
    }
    onHovered(day) {
        if (tuiIsNumber(day)) {
            this.charts.forEach(chart => chart.onHovered(NaN));
            return;
        }
        const index = TuiMonth.lengthBetween(this.value[0][0], day);
        const x = TuiDay.lengthBetween(this.value[0][0], day) + this.value[0][0].day - 1;
        const current = this.charts.get(index);
        this.charts.forEach(chart => {
            if (chart === current) {
                current.onHovered(current.value.findIndex(point => point[0] === x));
            }
            else {
                chart.onHovered(NaN);
            }
        });
    }
    raise(index, { value }) {
        const x = value[index][0];
        const month = this.getDay(x);
        if (this.hintDirective) {
            this.hintDirective.raise(month);
        }
        else {
            this.onHovered(month);
        }
    }
    getWidth(index) {
        return this.getDay(index).daysCount * this.months.length;
    }
    getContext(index, { value }) {
        const x = value[index][0];
        return this.hintDirective
            ? this.hintDirective.getContext(this.getDay(x))
            : this.getHintContext(x, this.value);
    }
    breakMonths(value) {
        const offset = value[0][0].day - 1;
        return Array.from({ length: TuiMonth.lengthBetween(value[0][0], value[value.length - 1][0]) + 1 }, (_, i) => i + value[0][0].month + value[0][0].year * 12)
            .map(absoluteMonth => value
            .map(([{ month, year }, y], index) => month + year * 12 === absoluteMonth ? [index + offset, y] : null)
            .filter(tuiIsPresent))
            .map((month, index, array) => index === array.length - 1
            ? month
            : [
                ...month,
                array[index + 1].find(day => !Number.isNaN(day[1])) || DUMMY,
            ]);
    }
    getDay(index) {
        return this.value[index - this.value[0][0].day + 1][0];
    }
}
TuiLineDaysChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiLineDaysChartComponent, deps: [{ token: TuiLineDaysChartHintDirective, optional: true }, { token: TuiDestroyService, self: true }, { token: NgZone }, { token: TuiHoveredService }, { token: TUI_LINE_CHART_OPTIONS }], target: i0.ɵɵFactoryTarget.Component });
TuiLineDaysChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiLineDaysChartComponent, selector: "tui-line-days-chart", inputs: { valueSetter: ["value", "valueSetter"], y: "y", height: "height", smoothingFactor: "smoothingFactor", hintContent: "hintContent", xStringify: "xStringify", yStringify: "yStringify", dots: "dots" }, host: { properties: { "style.zIndex": "this.zIndex" } }, providers: [
        TuiDestroyService,
        TuiHoveredService,
        {
            provide: TuiLineChartHintDirective,
            useExisting: TuiLineDaysChartComponent,
        },
    ], viewQueries: [{ propertyName: "charts", predicate: TuiLineChartComponent, descendants: true }], ngImport: i0, template: "<tui-line-chart\n    *ngFor=\"let month of months; let first = first\"\n    class=\"t-chart\"\n    [dots]=\"dots\"\n    [height]=\"height\"\n    [smoothingFactor]=\"smoothingFactor\"\n    [style.zIndex]=\"zIndex\"\n    [tuiHintContent]=\"hintContent ? hint : ''\"\n    [value]=\"month\"\n    [width]=\"first ? firstWidth : getWidth(month[0][0])\"\n    [x]=\"first ? 0 : getX(month[0][0])\"\n    [xStringify]=\"xStringify ? daysStringify : null\"\n    [y]=\"y\"\n    [yStringify]=\"yStringify\"\n></tui-line-chart>\n<ng-template\n    #hint\n    let-point\n>\n    <ng-container *polymorpheusOutlet=\"hintContent as text; context: {$implicit: getHintContext(point[0], value)}\">\n        {{ text }}\n    </ng-container>\n</ng-template>\n", styles: [":host{display:block}.t-chart{position:absolute;top:0;left:0;width:100%;height:100%}\n"], components: [{ type: i1$1.TuiLineChartComponent, selector: "tui-line-chart", inputs: ["value", "x", "y", "width", "height", "smoothingFactor", "xStringify", "yStringify", "filled", "dots"] }], directives: [{ type: i2$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3.TuiHintOptionsDirective, selector: "[tuiHintContent]", inputs: ["tuiHintContent", "tuiHintDirection", "tuiHintAppearance", "tuiHintShowDelay", "tuiHintHideDelay"] }, { type: i4.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiPure
], TuiLineDaysChartComponent.prototype, "getHintContext", null);
__decorate([
    tuiPure
], TuiLineDaysChartComponent.prototype, "breakMonths", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiLineDaysChartComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-line-days-chart',
                    templateUrl: './line-days-chart.template.html',
                    styleUrls: ['./line-days-chart.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        TuiDestroyService,
                        TuiHoveredService,
                        {
                            provide: TuiLineChartHintDirective,
                            useExisting: TuiLineDaysChartComponent,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: TuiLineDaysChartHintDirective, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TuiLineDaysChartHintDirective]
                }] }, { type: i1.TuiDestroyService, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiDestroyService]
                }] }, { type: i0.NgZone, decorators: [{
                    type: Inject,
                    args: [NgZone]
                }] }, { type: i2.Observable, decorators: [{
                    type: Inject,
                    args: [TuiHoveredService]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_LINE_CHART_OPTIONS]
                }] }]; }, propDecorators: { charts: [{
                type: ViewChildren,
                args: [TuiLineChartComponent]
            }], valueSetter: [{
                type: Input,
                args: ['value']
            }], y: [{
                type: Input
            }], height: [{
                type: Input
            }], smoothingFactor: [{
                type: Input
            }], hintContent: [{
                type: Input
            }], xStringify: [{
                type: Input
            }], yStringify: [{
                type: Input
            }], dots: [{
                type: Input
            }], zIndex: [{
                type: HostBinding,
                args: ['style.zIndex']
            }], getHintContext: [], breakMonths: [] } });

class TuiLineDaysChartModule {
}
TuiLineDaysChartModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiLineDaysChartModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiLineDaysChartModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiLineDaysChartModule, declarations: [TuiLineDaysChartComponent, TuiLineDaysChartHintDirective], imports: [CommonModule, TuiLineChartModule, PolymorpheusModule, TuiHintModule], exports: [TuiLineDaysChartComponent, TuiLineDaysChartHintDirective] });
TuiLineDaysChartModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiLineDaysChartModule, imports: [[CommonModule, TuiLineChartModule, PolymorpheusModule, TuiHintModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiLineDaysChartModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, TuiLineChartModule, PolymorpheusModule, TuiHintModule],
                    declarations: [TuiLineDaysChartComponent, TuiLineDaysChartHintDirective],
                    exports: [TuiLineDaysChartComponent, TuiLineDaysChartHintDirective],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TuiLineDaysChartComponent, TuiLineDaysChartHintDirective, TuiLineDaysChartModule };
//# sourceMappingURL=taiga-ui-addon-charts-components-line-days-chart.js.map
