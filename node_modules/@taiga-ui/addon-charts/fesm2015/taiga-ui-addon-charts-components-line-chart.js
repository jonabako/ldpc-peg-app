import { __decorate } from 'tslib';
import * as i0 from '@angular/core';
import { Renderer2, NgZone, ElementRef, Directive, Inject, Self, ContentChildren, forwardRef, Input, Component, ChangeDetectionStrategy, Optional, ViewChildren, HostListener, NgModule } from '@angular/core';
import { tuiDraw } from '@taiga-ui/addon-charts/utils';
import * as i1 from '@taiga-ui/cdk';
import { tuiCreateToken, tuiProvideOptions, EMPTY_QUERY, tuiZonefree, TuiDestroyService, TuiHoveredService, tuiPure, tuiQueryListChanges, tuiZoneOptimized, tuiIsPresent, TuiIdService, TuiFocusableModule, TuiLetModule } from '@taiga-ui/cdk';
import * as i3 from '@taiga-ui/core';
import { TuiHintOptionsDirective, TuiHintHoverDirective, tuiHintOptionsProvider, TuiHintModule } from '@taiga-ui/core';
import * as i2 from 'rxjs';
import { combineLatest, Subject } from 'rxjs';
import { filter, takeUntil, map, startWith, switchMap, distinctUntilChanged } from 'rxjs/operators';
import * as i2$1 from '@angular/common';
import { CommonModule } from '@angular/common';
import { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';

const TUI_LINE_CHART_DEFAULT_OPTIONS = {
    dots: false,
    filled: false,
    smoothingFactor: 0,
};
const TUI_LINE_CHART_OPTIONS = tuiCreateToken(TUI_LINE_CHART_DEFAULT_OPTIONS);
function tuiLineChartOptionsProvider(options) {
    return tuiProvideOptions(TUI_LINE_CHART_OPTIONS, options, TUI_LINE_CHART_DEFAULT_OPTIONS);
}

class TuiLineChartHintDirective {
    constructor(renderer, destroy$, zone, hovered$) {
        this.renderer = renderer;
        this.destroy$ = destroy$;
        this.zone = zone;
        this.hovered$ = hovered$;
        this.charts = EMPTY_QUERY;
        this.chartsRef = EMPTY_QUERY;
    }
    ngAfterViewInit() {
        combineLatest([tuiLineChartDrivers(this.charts), this.hovered$])
            .pipe(filter(result => !result.some(Boolean)), tuiZonefree(this.zone), takeUntil(this.destroy$))
            .subscribe(() => {
            this.charts.forEach(chart => chart.onHovered(NaN));
        });
    }
    // _chart is required by TuiLineDaysChartComponent that impersonates this directive
    getContext(index, _chart) {
        return this.computeContext(...this.charts.map(({ value }) => value))[index];
    }
    // _chart is required by TuiLineDaysChartComponent that impersonates this directive
    raise(index, _chart) {
        const current = this.charts.map(chart => chart.value[index]);
        const sorted = [...current].sort((a, b) => a[1] - b[1]);
        this.charts.forEach(chart => chart.onHovered(index));
        this.chartsRef.forEach(({ nativeElement }, index) => this.renderer.setStyle(nativeElement, 'z-index', sorted.indexOf(current[index])));
    }
    computeContext(...values) {
        return (values[0] || []).map((_, index) => values.map(value => value[index]));
    }
}
TuiLineChartHintDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiLineChartHintDirective, deps: [{ token: Renderer2 }, { token: TuiDestroyService, self: true }, { token: NgZone }, { token: TuiHoveredService }], target: i0.ɵɵFactoryTarget.Directive });
TuiLineChartHintDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiLineChartHintDirective, selector: "[tuiLineChartHint]", inputs: { hint: ["tuiLineChartHint", "hint"] }, providers: [TuiDestroyService, TuiHoveredService], queries: [{ propertyName: "charts", predicate: i0.forwardRef(function () { return TuiLineChartComponent; }) }, { propertyName: "chartsRef", predicate: i0.forwardRef(function () { return TuiLineChartComponent; }), read: ElementRef }], ngImport: i0 });
__decorate([
    tuiPure
], TuiLineChartHintDirective.prototype, "computeContext", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiLineChartHintDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiLineChartHint]',
                    providers: [TuiDestroyService, TuiHoveredService],
                }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2, decorators: [{
                    type: Inject,
                    args: [Renderer2]
                }] }, { type: i1.TuiDestroyService, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiDestroyService]
                }] }, { type: i0.NgZone, decorators: [{
                    type: Inject,
                    args: [NgZone]
                }] }, { type: i2.Observable, decorators: [{
                    type: Inject,
                    args: [TuiHoveredService]
                }] }]; }, propDecorators: { charts: [{
                type: ContentChildren,
                args: [forwardRef(() => TuiLineChartComponent)]
            }], chartsRef: [{
                type: ContentChildren,
                args: [forwardRef(() => TuiLineChartComponent), { read: ElementRef }]
            }], hint: [{
                type: Input,
                args: ['tuiLineChartHint']
            }], computeContext: [] } });
function tuiLineChartDrivers(charts) {
    return combineLatest(charts.map(({ drivers }) => tuiQueryListChanges(drivers).pipe(map(drivers => drivers.map(driver => driver.pipe(startWith(false))))))).pipe(map(all => all.reduce((acc, drivers) => acc.concat(drivers), [])), switchMap(drivers => combineLatest(drivers)), map(values => values.some(Boolean)), distinctUntilChanged());
}

class TuiLineChartComponent {
    constructor(idService, zone, hintDirective, hintOptions, options) {
        this.zone = zone;
        this.hintDirective = hintDirective;
        this.hintOptions = hintOptions;
        this.options = options;
        this.hover$ = new Subject();
        this.drivers = EMPTY_QUERY;
        this.x = 0;
        this.y = 0;
        this.width = 0;
        this.height = 0;
        this.smoothingFactor = this.options.smoothingFactor;
        this.xStringify = null;
        this.yStringify = null;
        this.filled = this.options.filled;
        this.dots = this.options.dots;
        this.value = [];
        this.autoIdString = idService.generate();
    }
    set valueSetter(value) {
        this.value = value.filter(item => !item.some(Number.isNaN));
    }
    get hovered$() {
        return this.hover$.pipe(distinctUntilChanged(), tuiZoneOptimized(this.zone));
    }
    get hintContent() {
        var _a;
        return ((_a = this.hintOptions) === null || _a === void 0 ? void 0 : _a.content) || '';
    }
    get fillId() {
        return `tui-line-chart-${this.autoIdString}`;
    }
    get fill() {
        return this.filled ? `url(#${this.fillId})` : 'none';
    }
    get viewBox() {
        return `${this.x} ${this.y} ${this.width} ${this.height}`;
    }
    get d() {
        return this.getD(this.value, this.smoothingFactor);
    }
    get fillD() {
        return this.value.length
            ? `${this.d}V ${this.y} H ${this.value[0][0]} V ${this.value[0][1]}`
            : this.d;
    }
    get isFocusable() {
        return !this.hintDirective && this.hasHints;
    }
    get hasHints() {
        var _a;
        return (!!this.xStringify ||
            !!this.yStringify ||
            !!((_a = this.hintDirective) === null || _a === void 0 ? void 0 : _a.hint) ||
            !!this.hintContent);
    }
    onMouseLeave() {
        if (!this.hintDirective) {
            this.onHovered(NaN);
        }
    }
    getX(index) {
        if (this.isSinglePoint) {
            return this.value[0][0] / 2;
        }
        return index
            ? (this.value[index - 1][0] + this.value[index][0]) / 2
            : 2 * this.value[0][0] - this.getX(1);
    }
    getWidth(index) {
        return (100 * this.computeWidth(index)) / this.width;
    }
    getHintId(index) {
        return `${this.autoIdString}_${index}`;
    }
    getImplicit($implicit) {
        var _a;
        return (((_a = this.hintDirective) === null || _a === void 0 ? void 0 : _a.getContext(this.value.indexOf($implicit), this)) ||
            $implicit);
    }
    getHovered(hovered) {
        // This checks for NaN and null too since async pipe returns null before first item
        return tuiIsPresent(hovered) && Number.isInteger(hovered)
            ? this.value[hovered]
            : null;
    }
    getBottom(y) {
        return (100 * (y - this.y)) / this.height;
    }
    getLeft(x) {
        return (100 * (x - this.x)) / this.width;
    }
    getOffset(x) {
        return (100 * (this.value[x][0] - this.getX(x))) / this.computeWidth(x);
    }
    onMouseEnter(index) {
        if (this.hintDirective) {
            this.hintDirective.raise(index, this);
        }
        else {
            this.onHovered(index);
        }
    }
    onHovered(index) {
        this.hover$.next(index);
    }
    get isSinglePoint() {
        return this.value.length === 1;
    }
    getD(value, smoothingFactor) {
        return value.reduce((d, point, index) => index ? `${d} ${tuiDraw(value, index, smoothingFactor)}` : `M ${point}`, '');
    }
    computeWidth(index) {
        return index === this.value.length - 1
            ? 2 * (this.value[index][0] - this.getX(index))
            : this.getX(index + 1) - this.getX(index);
    }
}
TuiLineChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiLineChartComponent, deps: [{ token: TuiIdService }, { token: NgZone }, { token: TuiLineChartHintDirective, optional: true }, { token: TuiHintOptionsDirective, optional: true }, { token: TUI_LINE_CHART_OPTIONS }], target: i0.ɵɵFactoryTarget.Component });
TuiLineChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiLineChartComponent, selector: "tui-line-chart", inputs: { valueSetter: ["value", "valueSetter"], x: "x", y: "y", width: "width", height: "height", smoothingFactor: "smoothingFactor", xStringify: "xStringify", yStringify: "yStringify", filled: "filled", dots: "dots" }, host: { listeners: { "mouseleave": "onMouseLeave()" } }, viewQueries: [{ propertyName: "drivers", predicate: TuiHintHoverDirective, descendants: true }], ngImport: i0, template: "<ng-container *tuiLet=\"hovered$ | async as hovered\">\n    <svg\n        focusable=\"false\"\n        height=\"100%\"\n        preserveAspectRatio=\"none\"\n        width=\"100%\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        class=\"t-svg\"\n        [attr.viewBox]=\"viewBox\"\n    >\n        <defs>\n            <linearGradient\n                x1=\"0\"\n                x2=\"0\"\n                y1=\"1\"\n                y2=\"0\"\n                [attr.id]=\"fillId\"\n            >\n                <stop\n                    offset=\"0%\"\n                    stop-color=\"currentColor\"\n                    stop-opacity=\"0.5\"\n                />\n                <stop\n                    offset=\"100%\"\n                    stop-color=\"currentColor\"\n                    stop-opacity=\"0\"\n                />\n            </linearGradient>\n        </defs>\n        <path\n            stroke=\"none\"\n            [attr.d]=\"fillD\"\n            [attr.fill]=\"fill\"\n        />\n        <path\n            fill=\"none\"\n            stroke=\"currentColor\"\n            stroke-width=\"2\"\n            vector-effect=\"non-scaling-stroke\"\n            [attr.d]=\"d\"\n        />\n    </svg>\n    <ng-container *ngIf=\"dots\">\n        <div\n            *ngFor=\"let point of value\"\n            class=\"t-dot\"\n            [style.bottom.%]=\"getBottom(point[1])\"\n            [style.left.%]=\"getLeft(point[0])\"\n        ></div>\n    </ng-container>\n    <ng-container *ngIf=\"hasHints\">\n        <ng-container *ngFor=\"let point of value; let index = index\">\n            <!-- TODO: Fix hint type -->\n            <div\n                *ngIf=\"value.length > 1 || dots\"\n                class=\"t-column\"\n                [class.t-column_hint_hovered]=\"drivers.get(index) | async\"\n                [class.t-column_hovered]=\"hovered === index\"\n                [style.left.%]=\"getLeft(getX(index))\"\n                [style.width.%]=\"getWidth(index)\"\n                [tuiHint]=\"$any(hintDirective?.hint || hintContent)\"\n                [tuiHintContext]=\"{$implicit: getImplicit(point), index: index}\"\n                [tuiHintDescribe]=\"isFocusable ? getHintId(index) : null\"\n                [tuiHintHost]=\"hintHost\"\n                (mouseenter)=\"onMouseEnter(index)\"\n            >\n                <div\n                    class=\"t-line t-line_vertical\"\n                    [style.left.%]=\"getOffset(index)\"\n                ></div>\n                <div\n                    #hintHost\n                    class=\"t-host\"\n                    [id]=\"getHintId(index)\"\n                    [style.bottom.%]=\"getBottom(point[1])\"\n                    [style.left.%]=\"getOffset(index)\"\n                    [tuiFocusable]=\"isFocusable\"\n                ></div>\n            </div>\n            <div\n                *ngIf=\"isFocusable\"\n                class=\"t-line t-line_horizontal\"\n                [style.bottom.%]=\"getBottom(point[1])\"\n            ></div>\n        </ng-container>\n    </ng-container>\n    <ng-container *ngIf=\"getHovered(hovered) as point\">\n        <div\n            *ngIf=\"xStringify\"\n            class=\"t-hint t-hint_x\"\n            [style.left.%]=\"getLeft(point[0])\"\n        >\n            {{ xStringify(point[0]) }}\n        </div>\n        <div\n            *ngIf=\"yStringify\"\n            class=\"t-hint t-hint_y\"\n            [style.bottom.%]=\"getBottom(point[1])\"\n        >\n            {{ yStringify(point[1]) }}\n        </div>\n    </ng-container>\n</ng-container>\n", styles: [":host{display:flex;width:100%;height:100%;pointer-events:none}.t-svg{transform:scaleY(-1)}.t-column{position:absolute;top:0;height:100%;pointer-events:auto}.t-dot{position:absolute;width:.375rem;height:.375rem;border-radius:100%;background:currentColor;margin:-.1875rem;box-shadow:0 0 0 2px #fff}.t-host{position:absolute;left:50%;width:.5rem;height:.5rem;border-radius:100%;opacity:0;background:#fff;margin:-.25rem;box-shadow:0 0 0 2px currentColor,0 .0625rem .1875rem .125rem #0000001a;outline:none;pointer-events:none}.t-host:focus,.t-column_hovered .t-host,.t-column:hover .t-host,.t-column_hint_hovered .t-host{opacity:1}.t-line{position:absolute;opacity:0;background:var(--tui-base-03)}.t-line_vertical{top:0;bottom:0;left:50%;width:1px}.t-line_horizontal{z-index:-1;width:100%;height:1px}:host[style^=\"z-index: 0\"] .t-column_hovered .t-line,:host:not([style]) .t-column:hover .t-line,:host:not([style]) .t-column_hint_hovered .t-line,:host[style^=\"z-index: 0\"] .t-column_hovered+.t-line,:host:not([style]) .t-column:hover+.t-line,:host:not([style]) .t-column_hint_hovered+.t-line{opacity:1}.t-hint{position:absolute;box-shadow:var(--tui-shadow);font:var(--tui-font-text-xs);height:1.25rem;line-height:1.25rem;margin-bottom:-.625rem;padding:0 .375rem;white-space:nowrap;color:var(--tui-base-09);background:var(--tui-base-01);transform:translate(-50%)}.t-hint_x{bottom:0}.t-hint_y{left:0}\n"], directives: [{ type: i1.TuiLetDirective, selector: "[tuiLet]", inputs: ["tuiLet"] }, { type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3.TuiHintDirective, selector: "[tuiHint]:not(ng-container):not(ng-template)", inputs: ["tuiHint", "tuiHintContext", "tuiHintAppearance"] }, { type: i3.TuiHintDriverDirective, selector: "[tuiHint]:not(ng-container):not(ng-template)" }, { type: i3.TuiHintHoverDirective, selector: "[tuiHint]:not(ng-container):not(ng-template)", inputs: ["tuiHintShowDelay", "tuiHintHideDelay"], exportAs: ["tuiHintHover"] }, { type: i3.TuiHintPositionDirective, selector: "[tuiHint]:not([tuiHintCustomPosition]):not(ng-container):not(ng-template)", inputs: ["tuiHintDirection"] }, { type: i3.TuiHintHostDirective, selector: "[tuiHint][tuiHintHost]", inputs: ["tuiHintHost"] }, { type: i3.TuiHintDescribeDirective, selector: "[tuiHintDescribe]", inputs: ["tuiHintDescribe"] }, { type: i1.TuiFocusableDirective, selector: "[tuiFocusable]", inputs: ["tuiFocusable"] }], pipes: { "async": i2$1.AsyncPipe }, viewProviders: [tuiHintOptionsProvider({ direction: 'top', hideDelay: 0 })], changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiPure
], TuiLineChartComponent.prototype, "hovered$", null);
__decorate([
    tuiPure
], TuiLineChartComponent.prototype, "getD", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiLineChartComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-line-chart',
                    templateUrl: './line-chart.template.html',
                    styleUrls: ['./line-chart.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    viewProviders: [tuiHintOptionsProvider({ direction: 'top', hideDelay: 0 })],
                }]
        }], ctorParameters: function () { return [{ type: i1.TuiIdService, decorators: [{
                    type: Inject,
                    args: [TuiIdService]
                }] }, { type: i0.NgZone, decorators: [{
                    type: Inject,
                    args: [NgZone]
                }] }, { type: TuiLineChartHintDirective, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TuiLineChartHintDirective]
                }] }, { type: i3.TuiHintOptionsDirective, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TuiHintOptionsDirective]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_LINE_CHART_OPTIONS]
                }] }]; }, propDecorators: { drivers: [{
                type: ViewChildren,
                args: [TuiHintHoverDirective]
            }], valueSetter: [{
                type: Input,
                args: ['value']
            }], x: [{
                type: Input
            }], y: [{
                type: Input
            }], width: [{
                type: Input
            }], height: [{
                type: Input
            }], smoothingFactor: [{
                type: Input
            }], xStringify: [{
                type: Input
            }], yStringify: [{
                type: Input
            }], filled: [{
                type: Input
            }], dots: [{
                type: Input
            }], hovered$: [], onMouseLeave: [{
                type: HostListener,
                args: ['mouseleave']
            }], getD: [] } });

class TuiLineChartModule {
}
TuiLineChartModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiLineChartModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiLineChartModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiLineChartModule, declarations: [TuiLineChartComponent, TuiLineChartHintDirective], imports: [CommonModule,
        PolymorpheusModule,
        TuiHintModule,
        TuiFocusableModule,
        TuiLetModule], exports: [TuiLineChartComponent, TuiLineChartHintDirective] });
TuiLineChartModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiLineChartModule, imports: [[
            CommonModule,
            PolymorpheusModule,
            TuiHintModule,
            TuiFocusableModule,
            TuiLetModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiLineChartModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        PolymorpheusModule,
                        TuiHintModule,
                        TuiFocusableModule,
                        TuiLetModule,
                    ],
                    declarations: [TuiLineChartComponent, TuiLineChartHintDirective],
                    exports: [TuiLineChartComponent, TuiLineChartHintDirective],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TUI_LINE_CHART_DEFAULT_OPTIONS, TUI_LINE_CHART_OPTIONS, TuiLineChartComponent, TuiLineChartHintDirective, TuiLineChartModule, tuiLineChartDrivers, tuiLineChartOptionsProvider };
//# sourceMappingURL=taiga-ui-addon-charts-components-line-chart.js.map
