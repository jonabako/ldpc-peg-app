import { __decorate } from 'tslib';
import * as i0 from '@angular/core';
import { ElementRef, NgZone, Directive, Inject, Self, Input, EventEmitter, Component, ChangeDetectionStrategy, Optional, HostBinding, Output, NgModule } from '@angular/core';
import * as i1$1 from '@taiga-ui/cdk';
import { tuiEaseInOutQuad, tuiClamp, tuiZonefree, TuiDestroyService, tuiSum, TuiIdService, tuiPure, TuiRepeatTimesModule, TuiHoveredModule } from '@taiga-ui/cdk';
import * as i3 from '@taiga-ui/core';
import { TUI_ANIMATIONS_DURATION, TuiHintOptionsDirective, tuiHintOptionsProvider, TuiHintModule } from '@taiga-ui/core';
import { PERFORMANCE, ANIMATION_FRAME } from '@ng-web-apis/common';
import { tuiDescribeSector } from '@taiga-ui/addon-charts/utils';
import * as i1 from 'rxjs';
import { BehaviorSubject } from 'rxjs';
import { pairwise, switchMap, map, takeWhile, takeUntil } from 'rxjs/operators';
import { CommonModule } from '@angular/common';
import { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';

class TuiPieChartDirective {
    constructor({ nativeElement }, zone, destroy$, performance, animationFrame$, duration) {
        this.sector$ = new BehaviorSubject([0, 0]);
        this.sector$
            .pipe(pairwise(), switchMap(([prev, cur]) => {
            const now = performance.now();
            const startDelta = cur[0] - prev[0];
            const endDelta = cur[1] - prev[1];
            return animationFrame$.pipe(map(timestamp => tuiEaseInOutQuad(tuiClamp((timestamp - now) / duration, 0, 1))), takeWhile(progress => progress < 1, true), map(progress => [
                prev[0] + startDelta * progress,
                cur[1] > 359 ? cur[1] : prev[1] + endDelta * progress,
            ]));
        }), tuiZonefree(zone), takeUntil(destroy$))
            .subscribe(([start, end]) => {
            nativeElement.setAttribute('d', tuiDescribeSector(start, end));
        });
    }
    set tuiPieChart(sector) {
        this.sector$.next(sector);
    }
}
TuiPieChartDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPieChartDirective, deps: [{ token: ElementRef }, { token: NgZone }, { token: TuiDestroyService, self: true }, { token: PERFORMANCE }, { token: ANIMATION_FRAME }, { token: TUI_ANIMATIONS_DURATION }], target: i0.ɵɵFactoryTarget.Directive });
TuiPieChartDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiPieChartDirective, selector: "path[tuiPieChart]", inputs: { tuiPieChart: "tuiPieChart" }, providers: [TuiDestroyService], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPieChartDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'path[tuiPieChart]',
                    providers: [TuiDestroyService],
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: i0.NgZone, decorators: [{
                    type: Inject,
                    args: [NgZone]
                }] }, { type: i1.Observable, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiDestroyService]
                }] }, { type: Performance, decorators: [{
                    type: Inject,
                    args: [PERFORMANCE]
                }] }, { type: i1.Observable, decorators: [{
                    type: Inject,
                    args: [ANIMATION_FRAME]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_ANIMATIONS_DURATION]
                }] }]; }, propDecorators: { tuiPieChart: [{
                type: Input
            }] } });

const RADII = {
    xs: '50',
    s: '50',
    m: '77.8',
    l: '81.9',
    xl: '81.3',
};
const TRANSFORM = {
    xs: 1.15,
    s: 1.25,
    m: 1.11,
    l: 1.09,
    xl: 1.08,
};
class TuiPieChartComponent {
    constructor(idService, hintOptions) {
        this.hintOptions = hintOptions;
        this.value = [];
        this.size = 'm';
        this.masked = false;
        this.activeItemIndex = NaN;
        this.activeItemIndexChange = new EventEmitter();
        this.autoIdString = idService.generate();
        if (this.hintOptions) {
            this.hintOptions.showDelay = 0;
            this.hintOptions.hideDelay = 0;
        }
    }
    get empty() {
        return !this.getSum(this.value);
    }
    get hintContent() {
        var _a;
        return ((_a = this.hintOptions) === null || _a === void 0 ? void 0 : _a.content) || '';
    }
    get maskId() {
        return `tui-ring-chart-${this.autoIdString}`;
    }
    get mask() {
        return this.masked ? `url(#${this.maskId})` : null;
    }
    get radius() {
        return RADII[this.size];
    }
    get segments() {
        return this.getSegments(this.value);
    }
    getTransform(index) {
        const transform = this.masked
            ? `scale(${TRANSFORM[this.size]})`
            : `scale(${TRANSFORM.xs})`;
        return index === this.activeItemIndex ? transform : null;
    }
    onHovered(hovered, index) {
        this.updateActiveItemIndex(hovered ? index : NaN);
    }
    getColor(index) {
        return `var(--tui-chart-${index})`;
    }
    getSum(value) {
        return tuiSum(...value);
    }
    getSegments(value) {
        return value
            .map((initial, i, array) => array.reduce((sum, current, j) => (j < i ? this.getDeg(current) + sum : sum), this.getDeg(initial)))
            .map((angle, index, array) => [
            array[index - 1] || 0,
            Math.min(angle, 359.9999),
        ]);
    }
    getDeg(value) {
        return 360 * (value / this.getSum(this.value));
    }
    updateActiveItemIndex(index) {
        if (index === this.activeItemIndex) {
            return;
        }
        this.activeItemIndex = index;
        this.activeItemIndexChange.next(index);
    }
}
TuiPieChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPieChartComponent, deps: [{ token: TuiIdService }, { token: TuiHintOptionsDirective, optional: true }], target: i0.ɵɵFactoryTarget.Component });
TuiPieChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiPieChartComponent, selector: "tui-pie-chart", inputs: { value: "value", size: "size", masked: "masked", activeItemIndex: "activeItemIndex" }, outputs: { activeItemIndexChange: "activeItemIndexChange" }, host: { properties: { "attr.data-size": "this.size", "class._empty": "this.empty" } }, ngImport: i0, template: "<svg\n    focusable=\"false\"\n    height=\"100%\"\n    viewBox=\"-100 -100 200 200\"\n    width=\"100%\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    class=\"t-svg\"\n>\n    <defs>\n        <mask [attr.id]=\"maskId\">\n            <rect\n                fill=\"white\"\n                height=\"400\"\n                width=\"400\"\n                x=\"-200\"\n                y=\"-200\"\n            />\n            <circle\n                cx=\"0\"\n                cy=\"0\"\n                [attr.r]=\"radius\"\n            />\n        </mask>\n    </defs>\n    <g [style.mask]=\"mask\">\n        <circle\n            cx=\"0\"\n            cy=\"0\"\n            r=\"100\"\n            class=\"t-placeholder\"\n        />\n        <path\n            *tuiRepeatTimes=\"let index of segments.length\"\n            automation-id=\"tui-pie-chart__segment\"\n            d=\"\"\n            fill=\"currentColor\"\n            tuiHintPointer\n            class=\"t-segment\"\n            [attr.transform]=\"getTransform(index)\"\n            [style.color]=\"getColor(index)\"\n            [tuiHint]=\"hintContent\"\n            [tuiHintContext]=\"{$implicit: index}\"\n            [tuiPieChart]=\"segments[index]\"\n            (tuiHoveredChange)=\"onHovered($event, index)\"\n        />\n    </g>\n</svg>\n", styles: [":host{position:relative;display:block;width:var(--t-size);height:var(--t-size)}:host[data-size=xs]{--t-size: 2rem;pointer-events:none}:host[data-size=s]{--t-size: 4rem}:host[data-size=m]{--t-size: 9rem}:host[data-size=l]{--t-size: 11rem}:host[data-size=xl]{--t-size: 16rem}.t-svg{position:relative;overflow:visible;transform:rotate(-90deg)}.t-segment{transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out}:host._empty .t-segment{display:none}.t-placeholder{fill:var(--tui-base-03)}\n"], directives: [{ type: i1$1.TuiRepeatTimesDirective, selector: "[tuiRepeatTimes][tuiRepeatTimesOf]", inputs: ["tuiRepeatTimesOf"] }, { type: TuiPieChartDirective, selector: "path[tuiPieChart]", inputs: ["tuiPieChart"] }, { type: i3.TuiHintDirective, selector: "[tuiHint]:not(ng-container):not(ng-template)", inputs: ["tuiHint", "tuiHintContext", "tuiHintAppearance"] }, { type: i3.TuiHintDriverDirective, selector: "[tuiHint]:not(ng-container):not(ng-template)" }, { type: i3.TuiHintHoverDirective, selector: "[tuiHint]:not(ng-container):not(ng-template)", inputs: ["tuiHintShowDelay", "tuiHintHideDelay"], exportAs: ["tuiHintHover"] }, { type: i3.TuiHintPositionDirective, selector: "[tuiHint]:not([tuiHintCustomPosition]):not(ng-container):not(ng-template)", inputs: ["tuiHintDirection"] }, { type: i3.TuiHintPointerDirective, selector: "[tuiHint][tuiHintPointer]" }, { type: i1$1.TuiHoveredDirective, selector: "[tuiHoveredChange]", outputs: ["tuiHoveredChange"] }], viewProviders: [
        tuiHintOptionsProvider({ direction: 'top-right', appearance: 'onDark' }),
    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiPure
], TuiPieChartComponent.prototype, "getSum", null);
__decorate([
    tuiPure
], TuiPieChartComponent.prototype, "getSegments", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPieChartComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-pie-chart',
                    templateUrl: './pie-chart.template.html',
                    styleUrls: ['./pie-chart.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    viewProviders: [
                        tuiHintOptionsProvider({ direction: 'top-right', appearance: 'onDark' }),
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i1$1.TuiIdService, decorators: [{
                    type: Inject,
                    args: [TuiIdService]
                }] }, { type: i3.TuiHintOptionsDirective, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TuiHintOptionsDirective]
                }] }]; }, propDecorators: { value: [{
                type: Input
            }], size: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.data-size']
            }], masked: [{
                type: Input
            }], activeItemIndex: [{
                type: Input
            }], activeItemIndexChange: [{
                type: Output
            }], empty: [{
                type: HostBinding,
                args: ['class._empty']
            }], getSum: [], getSegments: [] } });

class TuiPieChartModule {
}
TuiPieChartModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPieChartModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiPieChartModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPieChartModule, declarations: [TuiPieChartComponent, TuiPieChartDirective], imports: [CommonModule,
        TuiRepeatTimesModule,
        TuiHoveredModule,
        PolymorpheusModule,
        TuiHintModule], exports: [TuiPieChartComponent] });
TuiPieChartModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPieChartModule, imports: [[
            CommonModule,
            TuiRepeatTimesModule,
            TuiHoveredModule,
            PolymorpheusModule,
            TuiHintModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPieChartModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        TuiRepeatTimesModule,
                        TuiHoveredModule,
                        PolymorpheusModule,
                        TuiHintModule,
                    ],
                    declarations: [TuiPieChartComponent, TuiPieChartDirective],
                    exports: [TuiPieChartComponent],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TuiPieChartComponent, TuiPieChartDirective, TuiPieChartModule };
//# sourceMappingURL=taiga-ui-addon-charts-components-pie-chart.js.map
