import * as i0 from '@angular/core';
import { ChangeDetectorRef, Component, ChangeDetectionStrategy, Inject, Self, ViewChildren, Input, HostBinding, Output, NgModule } from '@angular/core';
import * as i2 from '@angular/platform-browser';
import { DomSanitizer } from '@angular/platform-browser';
import * as i1 from '@taiga-ui/cdk';
import { tuiTypedFromEvent, tuiWatch, TuiDestroyService, TuiRepeatTimesModule } from '@taiga-ui/cdk';
import * as i3 from 'rxjs';
import { merge, ReplaySubject, timer } from 'rxjs';
import { map, switchMap, startWith, tap, takeUntil } from 'rxjs/operators';

// 3/4 with 1% safety offset
const ARC = 0.76;
const SIZE = {
    m: 9,
    l: 11,
    xl: 16,
};
const WIDTH = {
    m: 0.25,
    l: 0.375,
    xl: 0.5625,
};
const GAP = {
    m: 0.125,
    l: 0.1875,
    xl: 0.25,
};
function arcsToIndex(arcs) {
    return arcs.map(({ nativeElement }, index) => merge(tuiTypedFromEvent(nativeElement, 'mouseenter').pipe(map(() => index)), tuiTypedFromEvent(nativeElement, 'mouseleave').pipe(map(() => NaN))));
}
class TuiArcChartComponent {
    constructor(sanitizer, cdr, destroy$) {
        this.sanitizer = sanitizer;
        this.arcs$ = new ReplaySubject(1);
        this.value = [];
        this.size = 'm';
        this.max = 100;
        this.minLabel = '0%';
        this.maxLabel = '100%';
        this.activeItemIndex = NaN;
        this.activeItemIndexChange = this.arcs$.pipe(switchMap(arcs => arcs.changes.pipe(startWith(null), switchMap(() => merge(...arcsToIndex(arcs))))), tap(index => {
            this.activeItemIndex = index;
        }));
        this.initialized = false;
        timer(0)
            .pipe(tuiWatch(cdr), takeUntil(destroy$))
            .subscribe(() => {
            this.initialized = true;
        });
    }
    set arcs(arcs) {
        this.arcs$.next(arcs);
    }
    get width() {
        return SIZE[this.size];
    }
    get strokeWidth() {
        return WIDTH[this.size];
    }
    isInactive(index) {
        return !Number.isNaN(this.activeItemIndex) && index !== this.activeItemIndex;
    }
    getInset(index) {
        return this.strokeWidth / 2 + index * (this.strokeWidth + GAP[this.size]);
    }
    getDiameter(index) {
        return SIZE[this.size] - 2 * this.getInset(index);
    }
    getLength(index) {
        return Math.PI * this.getDiameter(index) * ARC;
    }
    getOffset(index) {
        return this.getLength(index) * (1 - Math.min(this.value[index] / this.max, 1));
    }
    getColor(index) {
        return this.sanitizer.bypassSecurityTrustStyle(`var(--tui-chart-${index}, var(--tui-support-0${index + 1}))`);
    }
}
TuiArcChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiArcChartComponent, deps: [{ token: DomSanitizer }, { token: ChangeDetectorRef }, { token: TuiDestroyService, self: true }], target: i0.ɵɵFactoryTarget.Component });
TuiArcChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiArcChartComponent, selector: "tui-arc-chart", inputs: { value: "value", size: "size", max: "max", minLabel: "minLabel", maxLabel: "maxLabel", activeItemIndex: "activeItemIndex" }, outputs: { activeItemIndexChange: "activeItemIndexChange" }, host: { properties: { "attr.data-size": "this.size", "style.width.rem": "this.width", "style.height.rem": "this.width", "style.strokeWidth.rem": "this.strokeWidth" } }, providers: [TuiDestroyService], viewQueries: [{ propertyName: "arcs", predicate: ["arc"], descendants: true }], ngImport: i0, template: "<svg\n    *tuiRepeatTimes=\"let index of value.length\"\n    focusable=\"false\"\n    viewBox=\"-100 -100 200 200\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    class=\"t-svg\"\n    [style.height.em]=\"getDiameter(index)\"\n    [style.left.em]=\"getInset(index)\"\n    [style.top.em]=\"getInset(index)\"\n    [style.width.em]=\"getDiameter(index)\"\n>\n    <path\n        d=\"M -70 70 A 100 100 0 1 1 70 70\"\n        vector-effect=\"non-scaling-stroke\"\n    />\n    <path\n        #arc\n        d=\"M -70 70 A 100 100 0 1 1 70 70\"\n        vector-effect=\"non-scaling-stroke\"\n        class=\"t-value\"\n        [class.t-value_inactive]=\"isInactive(index)\"\n        [style.stroke]=\"getColor(index)\"\n        [style.strokeDasharray.em]=\"getLength(index)\"\n        [style.strokeDashoffset.em]=\"initialized ? getOffset(index) : getLength(index)\"\n    />\n</svg>\n<div class=\"t-content\">\n    <div class=\"t-wrapper\">\n        <ng-content></ng-content>\n    </div>\n</div>\n<div class=\"t-percent\">\n    <span>{{ minLabel }}</span>\n    <span>{{ maxLabel }}</span>\n</div>\n", styles: [":host{position:relative;display:block;flex-shrink:0}.t-svg{position:absolute;top:0;left:0;bottom:0;right:0;overflow:visible;fill:none;stroke:currentColor;stroke-linecap:round;color:var(--tui-secondary);font-size:1rem;pointer-events:none}.t-value{pointer-events:auto;transition:stroke-dashoffset var(--tui-duration) ease-in-out,opacity var(--tui-duration) ease-in-out .1s}.t-value_inactive{transition-property:stroke-dashoffset,opacity;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;opacity:.16}.t-content{position:absolute;top:0;left:0;width:100%;height:100%;display:flex;justify-content:center;align-items:center;text-align:center;color:var(--tui-text-02);font:var(--tui-font-text-xs);pointer-events:none}:host[data-size=xl] .t-content{font:var(--tui-font-text-m)}.t-wrapper{pointer-events:auto}.t-wrapper:first-line{color:var(--tui-text-01)}:host[data-size=m] .t-wrapper:first-line{font:var(--tui-font-text-s);font-weight:bold}:host[data-size=l] .t-wrapper:first-line{font:var(--tui-font-text-m);font-weight:bold}:host[data-size=xl] .t-wrapper:first-line{font:var(--tui-font-heading-5)}.t-percent{position:absolute;left:25%;bottom:11%;display:flex;width:50%;justify-content:space-between;font:var(--tui-font-text-xs);color:var(--tui-text-02)}:host[data-size=xl] .t-percent{font:var(--tui-font-text-m)}\n"], directives: [{ type: i1.TuiRepeatTimesDirective, selector: "[tuiRepeatTimes][tuiRepeatTimesOf]", inputs: ["tuiRepeatTimesOf"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiArcChartComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-arc-chart',
                    templateUrl: './arc-chart.template.html',
                    styleUrls: ['./arc-chart.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [TuiDestroyService],
                }]
        }], ctorParameters: function () { return [{ type: i2.DomSanitizer, decorators: [{
                    type: Inject,
                    args: [DomSanitizer]
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: i3.Observable, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiDestroyService]
                }] }]; }, propDecorators: { arcs: [{
                type: ViewChildren,
                args: ['arc']
            }], value: [{
                type: Input
            }], size: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.data-size']
            }], max: [{
                type: Input
            }], minLabel: [{
                type: Input
            }], maxLabel: [{
                type: Input
            }], activeItemIndex: [{
                type: Input
            }], activeItemIndexChange: [{
                type: Output
            }], width: [{
                type: HostBinding,
                args: ['style.width.rem']
            }, {
                type: HostBinding,
                args: ['style.height.rem']
            }], strokeWidth: [{
                type: HostBinding,
                args: ['style.strokeWidth.rem']
            }] } });

class TuiArcChartModule {
}
TuiArcChartModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiArcChartModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiArcChartModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiArcChartModule, declarations: [TuiArcChartComponent], imports: [TuiRepeatTimesModule], exports: [TuiArcChartComponent] });
TuiArcChartModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiArcChartModule, imports: [[TuiRepeatTimesModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiArcChartModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [TuiRepeatTimesModule],
                    declarations: [TuiArcChartComponent],
                    exports: [TuiArcChartComponent],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TuiArcChartComponent, TuiArcChartModule };
//# sourceMappingURL=taiga-ui-addon-charts-components-arc-chart.js.map
