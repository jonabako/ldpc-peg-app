import { NgZone, QueryList } from '@angular/core';
import { TuiLineChartHintContext } from '@taiga-ui/addon-charts/interfaces';
import { TuiIdService, TuiStringHandler } from '@taiga-ui/cdk';
import { TuiHintOptionsDirective, TuiPoint } from '@taiga-ui/core';
import { PolymorpheusContent } from '@tinkoff/ng-polymorpheus';
import { Observable } from 'rxjs';
import { TuiLineChartOptions } from './line-chart.options';
import { TuiLineChartHintDirective } from './line-chart-hint.directive';
import * as i0 from "@angular/core";
export declare class TuiLineChartComponent {
    private readonly zone;
    readonly hintDirective: TuiLineChartHintDirective | null;
    readonly hintOptions: TuiHintOptionsDirective | null;
    private readonly options;
    private readonly hover$;
    private readonly autoIdString;
    readonly drivers: QueryList<Observable<boolean>>;
    set valueSetter(value: readonly TuiPoint[]);
    x: number;
    y: number;
    width: number;
    height: number;
    smoothingFactor: number;
    xStringify: TuiStringHandler<number> | null;
    yStringify: TuiStringHandler<number> | null;
    filled: boolean;
    dots: boolean;
    value: readonly TuiPoint[];
    constructor(idService: TuiIdService, zone: NgZone, hintDirective: TuiLineChartHintDirective | null, hintOptions: TuiHintOptionsDirective | null, options: TuiLineChartOptions);
    get hovered$(): Observable<number>;
    get hintContent(): PolymorpheusContent<TuiLineChartHintContext<TuiPoint>>;
    get fillId(): string;
    get fill(): string;
    get viewBox(): string;
    get d(): string;
    get fillD(): string;
    get isFocusable(): boolean;
    get hasHints(): boolean;
    onMouseLeave(): void;
    getX(index: number): number;
    getWidth(index: number): number;
    getHintId(index: number): string;
    getImplicit($implicit: TuiPoint): TuiPoint | readonly TuiPoint[];
    getHovered(hovered: number | null): TuiPoint | null;
    getBottom(y: number): number;
    getLeft(x: number): number;
    getOffset(x: number): number;
    onMouseEnter(index: number): void;
    onHovered(index: number): void;
    private get isSinglePoint();
    private getD;
    private computeWidth;
    static ɵfac: i0.ɵɵFactoryDeclaration<TuiLineChartComponent, [null, null, { optional: true; }, { optional: true; }, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TuiLineChartComponent, "tui-line-chart", never, { "valueSetter": "value"; "x": "x"; "y": "y"; "width": "width"; "height": "height"; "smoothingFactor": "smoothingFactor"; "xStringify": "xStringify"; "yStringify": "yStringify"; "filled": "filled"; "dots": "dots"; }, {}, never, never>;
}
