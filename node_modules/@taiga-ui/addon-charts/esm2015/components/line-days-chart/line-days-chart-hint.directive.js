import { __decorate } from "tslib";
import { ContentChildren, Directive, forwardRef, Inject, Input, NgZone, Self, } from '@angular/core';
import { tuiLineChartDrivers } from '@taiga-ui/addon-charts/components/line-chart';
import { EMPTY_QUERY, TuiDestroyService, TuiHoveredService, tuiPure, tuiZonefree, } from '@taiga-ui/cdk';
import { combineLatest } from 'rxjs';
import { filter, takeUntil } from 'rxjs/operators';
import { TuiLineDaysChartComponent } from './line-days-chart.component';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/cdk";
import * as i2 from "rxjs";
function find(value, current) {
    return value.find(([day]) => day.daySame(current)) || [current, NaN];
}
// TODO: Consider extending TuiLineChartHintDirective
export class TuiLineDaysChartHintDirective {
    constructor(destroy$, zone, hovered$) {
        this.destroy$ = destroy$;
        this.zone = zone;
        this.hovered$ = hovered$;
        this.charts = EMPTY_QUERY;
    }
    ngAfterContentInit() {
        combineLatest([
            ...this.charts.map(({ charts }) => tuiLineChartDrivers(charts)),
            this.hovered$,
        ])
            .pipe(filter(result => !result.some(Boolean)), tuiZonefree(this.zone), takeUntil(this.destroy$))
            .subscribe(() => {
            this.charts.forEach(chart => chart.onHovered(NaN));
        });
    }
    getContext(day) {
        return this.getMap(...this.charts.map(({ value }) => value)).get(String(day)) || [];
    }
    raise(day) {
        const current = this.charts
            .map(({ value }) => find(value, day))
            .filter(([_, value]) => !Number.isNaN(value));
        const sorted = [...current].sort((a, b) => a[1] - b[1]);
        this.charts.forEach((chart, index) => {
            chart.onHovered(day);
            chart.zIndex = Math.max(sorted.indexOf(current[index]), 0);
        });
    }
    getMap(...values) {
        return (values[0] || []).reduce((map, [day]) => map.set(String(day), values.map(value => find(value, day))), new Map());
    }
}
TuiLineDaysChartHintDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiLineDaysChartHintDirective, deps: [{ token: TuiDestroyService, self: true }, { token: NgZone }, { token: TuiHoveredService }], target: i0.ɵɵFactoryTarget.Directive });
TuiLineDaysChartHintDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiLineDaysChartHintDirective, selector: "[tuiLineChartHint]", inputs: { hint: ["tuiLineChartHint", "hint"] }, providers: [TuiDestroyService, TuiHoveredService], queries: [{ propertyName: "charts", predicate: i0.forwardRef(function () { return TuiLineDaysChartComponent; }) }], ngImport: i0 });
__decorate([
    tuiPure
], TuiLineDaysChartHintDirective.prototype, "getMap", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiLineDaysChartHintDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiLineChartHint]',
                    providers: [TuiDestroyService, TuiHoveredService],
                }]
        }], ctorParameters: function () { return [{ type: i1.TuiDestroyService, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiDestroyService]
                }] }, { type: i0.NgZone, decorators: [{
                    type: Inject,
                    args: [NgZone]
                }] }, { type: i2.Observable, decorators: [{
                    type: Inject,
                    args: [TuiHoveredService]
                }] }]; }, propDecorators: { charts: [{
                type: ContentChildren,
                args: [forwardRef(() => TuiLineDaysChartComponent)]
            }], hint: [{
                type: Input,
                args: ['tuiLineChartHint']
            }], getMap: [] } });
//# sourceMappingURL=data:application/json;base64,