import { __decorate } from "tslib";
import { ContentChildren, Directive, ElementRef, forwardRef, Inject, Input, NgZone, Renderer2, Self, } from '@angular/core';
import { EMPTY_QUERY, TuiDestroyService, TuiHoveredService, tuiPure, tuiQueryListChanges, tuiZonefree, } from '@taiga-ui/cdk';
import { combineLatest } from 'rxjs';
import { distinctUntilChanged, filter, map, startWith, switchMap, takeUntil, } from 'rxjs/operators';
import { TuiLineChartComponent } from './line-chart.component';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/cdk";
import * as i2 from "rxjs";
export class TuiLineChartHintDirective {
    constructor(renderer, destroy$, zone, hovered$) {
        this.renderer = renderer;
        this.destroy$ = destroy$;
        this.zone = zone;
        this.hovered$ = hovered$;
        this.charts = EMPTY_QUERY;
        this.chartsRef = EMPTY_QUERY;
    }
    ngAfterViewInit() {
        combineLatest([tuiLineChartDrivers(this.charts), this.hovered$])
            .pipe(filter(result => !result.some(Boolean)), tuiZonefree(this.zone), takeUntil(this.destroy$))
            .subscribe(() => {
            this.charts.forEach(chart => chart.onHovered(NaN));
        });
    }
    // _chart is required by TuiLineDaysChartComponent that impersonates this directive
    getContext(index, _chart) {
        return this.computeContext(...this.charts.map(({ value }) => value))[index];
    }
    // _chart is required by TuiLineDaysChartComponent that impersonates this directive
    raise(index, _chart) {
        const current = this.charts.map(chart => chart.value[index]);
        const sorted = [...current].sort((a, b) => a[1] - b[1]);
        this.charts.forEach(chart => chart.onHovered(index));
        this.chartsRef.forEach(({ nativeElement }, index) => this.renderer.setStyle(nativeElement, 'z-index', sorted.indexOf(current[index])));
    }
    computeContext(...values) {
        return (values[0] || []).map((_, index) => values.map(value => value[index]));
    }
}
TuiLineChartHintDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiLineChartHintDirective, deps: [{ token: Renderer2 }, { token: TuiDestroyService, self: true }, { token: NgZone }, { token: TuiHoveredService }], target: i0.ɵɵFactoryTarget.Directive });
TuiLineChartHintDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiLineChartHintDirective, selector: "[tuiLineChartHint]", inputs: { hint: ["tuiLineChartHint", "hint"] }, providers: [TuiDestroyService, TuiHoveredService], queries: [{ propertyName: "charts", predicate: i0.forwardRef(function () { return TuiLineChartComponent; }) }, { propertyName: "chartsRef", predicate: i0.forwardRef(function () { return TuiLineChartComponent; }), read: ElementRef }], ngImport: i0 });
__decorate([
    tuiPure
], TuiLineChartHintDirective.prototype, "computeContext", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiLineChartHintDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiLineChartHint]',
                    providers: [TuiDestroyService, TuiHoveredService],
                }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2, decorators: [{
                    type: Inject,
                    args: [Renderer2]
                }] }, { type: i1.TuiDestroyService, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiDestroyService]
                }] }, { type: i0.NgZone, decorators: [{
                    type: Inject,
                    args: [NgZone]
                }] }, { type: i2.Observable, decorators: [{
                    type: Inject,
                    args: [TuiHoveredService]
                }] }]; }, propDecorators: { charts: [{
                type: ContentChildren,
                args: [forwardRef(() => TuiLineChartComponent)]
            }], chartsRef: [{
                type: ContentChildren,
                args: [forwardRef(() => TuiLineChartComponent), { read: ElementRef }]
            }], hint: [{
                type: Input,
                args: ['tuiLineChartHint']
            }], computeContext: [] } });
export function tuiLineChartDrivers(charts) {
    return combineLatest(charts.map(({ drivers }) => tuiQueryListChanges(drivers).pipe(map(drivers => drivers.map(driver => driver.pipe(startWith(false))))))).pipe(map(all => all.reduce((acc, drivers) => acc.concat(drivers), [])), switchMap(drivers => combineLatest(drivers)), map(values => values.some(Boolean)), distinctUntilChanged());
}
//# sourceMappingURL=data:application/json;base64,