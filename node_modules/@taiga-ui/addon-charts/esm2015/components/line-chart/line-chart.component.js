import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, HostListener, Inject, Input, NgZone, Optional, ViewChildren, } from '@angular/core';
import { tuiDraw } from '@taiga-ui/addon-charts/utils';
import { EMPTY_QUERY, TuiIdService, tuiIsPresent, tuiPure, tuiZoneOptimized, } from '@taiga-ui/cdk';
import { TuiHintHoverDirective, TuiHintOptionsDirective, tuiHintOptionsProvider, } from '@taiga-ui/core';
import { Subject } from 'rxjs';
import { distinctUntilChanged } from 'rxjs/operators';
import { TUI_LINE_CHART_OPTIONS } from './line-chart.options';
import { TuiLineChartHintDirective } from './line-chart-hint.directive';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/cdk";
import * as i2 from "@angular/common";
import * as i3 from "@taiga-ui/core";
import * as i4 from "./line-chart-hint.directive";
export class TuiLineChartComponent {
    constructor(idService, zone, hintDirective, hintOptions, options) {
        this.zone = zone;
        this.hintDirective = hintDirective;
        this.hintOptions = hintOptions;
        this.options = options;
        this.hover$ = new Subject();
        this.drivers = EMPTY_QUERY;
        this.x = 0;
        this.y = 0;
        this.width = 0;
        this.height = 0;
        this.smoothingFactor = this.options.smoothingFactor;
        this.xStringify = null;
        this.yStringify = null;
        this.filled = this.options.filled;
        this.dots = this.options.dots;
        this.value = [];
        this.autoIdString = idService.generate();
    }
    set valueSetter(value) {
        this.value = value.filter(item => !item.some(Number.isNaN));
    }
    get hovered$() {
        return this.hover$.pipe(distinctUntilChanged(), tuiZoneOptimized(this.zone));
    }
    get hintContent() {
        var _a;
        return ((_a = this.hintOptions) === null || _a === void 0 ? void 0 : _a.content) || '';
    }
    get fillId() {
        return `tui-line-chart-${this.autoIdString}`;
    }
    get fill() {
        return this.filled ? `url(#${this.fillId})` : 'none';
    }
    get viewBox() {
        return `${this.x} ${this.y} ${this.width} ${this.height}`;
    }
    get d() {
        return this.getD(this.value, this.smoothingFactor);
    }
    get fillD() {
        return this.value.length
            ? `${this.d}V ${this.y} H ${this.value[0][0]} V ${this.value[0][1]}`
            : this.d;
    }
    get isFocusable() {
        return !this.hintDirective && this.hasHints;
    }
    get hasHints() {
        var _a;
        return (!!this.xStringify ||
            !!this.yStringify ||
            !!((_a = this.hintDirective) === null || _a === void 0 ? void 0 : _a.hint) ||
            !!this.hintContent);
    }
    onMouseLeave() {
        if (!this.hintDirective) {
            this.onHovered(NaN);
        }
    }
    getX(index) {
        if (this.isSinglePoint) {
            return this.value[0][0] / 2;
        }
        return index
            ? (this.value[index - 1][0] + this.value[index][0]) / 2
            : 2 * this.value[0][0] - this.getX(1);
    }
    getWidth(index) {
        return (100 * this.computeWidth(index)) / this.width;
    }
    getHintId(index) {
        return `${this.autoIdString}_${index}`;
    }
    getImplicit($implicit) {
        var _a;
        return (((_a = this.hintDirective) === null || _a === void 0 ? void 0 : _a.getContext(this.value.indexOf($implicit), this)) ||
            $implicit);
    }
    getHovered(hovered) {
        // This checks for NaN and null too since async pipe returns null before first item
        return tuiIsPresent(hovered) && Number.isInteger(hovered)
            ? this.value[hovered]
            : null;
    }
    getBottom(y) {
        return (100 * (y - this.y)) / this.height;
    }
    getLeft(x) {
        return (100 * (x - this.x)) / this.width;
    }
    getOffset(x) {
        return (100 * (this.value[x][0] - this.getX(x))) / this.computeWidth(x);
    }
    onMouseEnter(index) {
        if (this.hintDirective) {
            this.hintDirective.raise(index, this);
        }
        else {
            this.onHovered(index);
        }
    }
    onHovered(index) {
        this.hover$.next(index);
    }
    get isSinglePoint() {
        return this.value.length === 1;
    }
    getD(value, smoothingFactor) {
        return value.reduce((d, point, index) => index ? `${d} ${tuiDraw(value, index, smoothingFactor)}` : `M ${point}`, '');
    }
    computeWidth(index) {
        return index === this.value.length - 1
            ? 2 * (this.value[index][0] - this.getX(index))
            : this.getX(index + 1) - this.getX(index);
    }
}
TuiLineChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiLineChartComponent, deps: [{ token: TuiIdService }, { token: NgZone }, { token: TuiLineChartHintDirective, optional: true }, { token: TuiHintOptionsDirective, optional: true }, { token: TUI_LINE_CHART_OPTIONS }], target: i0.ɵɵFactoryTarget.Component });
TuiLineChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiLineChartComponent, selector: "tui-line-chart", inputs: { valueSetter: ["value", "valueSetter"], x: "x", y: "y", width: "width", height: "height", smoothingFactor: "smoothingFactor", xStringify: "xStringify", yStringify: "yStringify", filled: "filled", dots: "dots" }, host: { listeners: { "mouseleave": "onMouseLeave()" } }, viewQueries: [{ propertyName: "drivers", predicate: TuiHintHoverDirective, descendants: true }], ngImport: i0, template: "<ng-container *tuiLet=\"hovered$ | async as hovered\">\n    <svg\n        focusable=\"false\"\n        height=\"100%\"\n        preserveAspectRatio=\"none\"\n        width=\"100%\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        class=\"t-svg\"\n        [attr.viewBox]=\"viewBox\"\n    >\n        <defs>\n            <linearGradient\n                x1=\"0\"\n                x2=\"0\"\n                y1=\"1\"\n                y2=\"0\"\n                [attr.id]=\"fillId\"\n            >\n                <stop\n                    offset=\"0%\"\n                    stop-color=\"currentColor\"\n                    stop-opacity=\"0.5\"\n                />\n                <stop\n                    offset=\"100%\"\n                    stop-color=\"currentColor\"\n                    stop-opacity=\"0\"\n                />\n            </linearGradient>\n        </defs>\n        <path\n            stroke=\"none\"\n            [attr.d]=\"fillD\"\n            [attr.fill]=\"fill\"\n        />\n        <path\n            fill=\"none\"\n            stroke=\"currentColor\"\n            stroke-width=\"2\"\n            vector-effect=\"non-scaling-stroke\"\n            [attr.d]=\"d\"\n        />\n    </svg>\n    <ng-container *ngIf=\"dots\">\n        <div\n            *ngFor=\"let point of value\"\n            class=\"t-dot\"\n            [style.bottom.%]=\"getBottom(point[1])\"\n            [style.left.%]=\"getLeft(point[0])\"\n        ></div>\n    </ng-container>\n    <ng-container *ngIf=\"hasHints\">\n        <ng-container *ngFor=\"let point of value; let index = index\">\n            <!-- TODO: Fix hint type -->\n            <div\n                *ngIf=\"value.length > 1 || dots\"\n                class=\"t-column\"\n                [class.t-column_hint_hovered]=\"drivers.get(index) | async\"\n                [class.t-column_hovered]=\"hovered === index\"\n                [style.left.%]=\"getLeft(getX(index))\"\n                [style.width.%]=\"getWidth(index)\"\n                [tuiHint]=\"$any(hintDirective?.hint || hintContent)\"\n                [tuiHintContext]=\"{$implicit: getImplicit(point), index: index}\"\n                [tuiHintDescribe]=\"isFocusable ? getHintId(index) : null\"\n                [tuiHintHost]=\"hintHost\"\n                (mouseenter)=\"onMouseEnter(index)\"\n            >\n                <div\n                    class=\"t-line t-line_vertical\"\n                    [style.left.%]=\"getOffset(index)\"\n                ></div>\n                <div\n                    #hintHost\n                    class=\"t-host\"\n                    [id]=\"getHintId(index)\"\n                    [style.bottom.%]=\"getBottom(point[1])\"\n                    [style.left.%]=\"getOffset(index)\"\n                    [tuiFocusable]=\"isFocusable\"\n                ></div>\n            </div>\n            <div\n                *ngIf=\"isFocusable\"\n                class=\"t-line t-line_horizontal\"\n                [style.bottom.%]=\"getBottom(point[1])\"\n            ></div>\n        </ng-container>\n    </ng-container>\n    <ng-container *ngIf=\"getHovered(hovered) as point\">\n        <div\n            *ngIf=\"xStringify\"\n            class=\"t-hint t-hint_x\"\n            [style.left.%]=\"getLeft(point[0])\"\n        >\n            {{ xStringify(point[0]) }}\n        </div>\n        <div\n            *ngIf=\"yStringify\"\n            class=\"t-hint t-hint_y\"\n            [style.bottom.%]=\"getBottom(point[1])\"\n        >\n            {{ yStringify(point[1]) }}\n        </div>\n    </ng-container>\n</ng-container>\n", styles: [":host{display:flex;width:100%;height:100%;pointer-events:none}.t-svg{transform:scaleY(-1)}.t-column{position:absolute;top:0;height:100%;pointer-events:auto}.t-dot{position:absolute;width:.375rem;height:.375rem;border-radius:100%;background:currentColor;margin:-.1875rem;box-shadow:0 0 0 2px #fff}.t-host{position:absolute;left:50%;width:.5rem;height:.5rem;border-radius:100%;opacity:0;background:#fff;margin:-.25rem;box-shadow:0 0 0 2px currentColor,0 .0625rem .1875rem .125rem #0000001a;outline:none;pointer-events:none}.t-host:focus,.t-column_hovered .t-host,.t-column:hover .t-host,.t-column_hint_hovered .t-host{opacity:1}.t-line{position:absolute;opacity:0;background:var(--tui-base-03)}.t-line_vertical{top:0;bottom:0;left:50%;width:1px}.t-line_horizontal{z-index:-1;width:100%;height:1px}:host[style^=\"z-index: 0\"] .t-column_hovered .t-line,:host:not([style]) .t-column:hover .t-line,:host:not([style]) .t-column_hint_hovered .t-line,:host[style^=\"z-index: 0\"] .t-column_hovered+.t-line,:host:not([style]) .t-column:hover+.t-line,:host:not([style]) .t-column_hint_hovered+.t-line{opacity:1}.t-hint{position:absolute;box-shadow:var(--tui-shadow);font:var(--tui-font-text-xs);height:1.25rem;line-height:1.25rem;margin-bottom:-.625rem;padding:0 .375rem;white-space:nowrap;color:var(--tui-base-09);background:var(--tui-base-01);transform:translate(-50%)}.t-hint_x{bottom:0}.t-hint_y{left:0}\n"], directives: [{ type: i1.TuiLetDirective, selector: "[tuiLet]", inputs: ["tuiLet"] }, { type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3.TuiHintDirective, selector: "[tuiHint]:not(ng-container):not(ng-template)", inputs: ["tuiHint", "tuiHintContext", "tuiHintAppearance"] }, { type: i3.TuiHintDriverDirective, selector: "[tuiHint]:not(ng-container):not(ng-template)" }, { type: i3.TuiHintHoverDirective, selector: "[tuiHint]:not(ng-container):not(ng-template)", inputs: ["tuiHintShowDelay", "tuiHintHideDelay"], exportAs: ["tuiHintHover"] }, { type: i3.TuiHintPositionDirective, selector: "[tuiHint]:not([tuiHintCustomPosition]):not(ng-container):not(ng-template)", inputs: ["tuiHintDirection"] }, { type: i3.TuiHintHostDirective, selector: "[tuiHint][tuiHintHost]", inputs: ["tuiHintHost"] }, { type: i3.TuiHintDescribeDirective, selector: "[tuiHintDescribe]", inputs: ["tuiHintDescribe"] }, { type: i1.TuiFocusableDirective, selector: "[tuiFocusable]", inputs: ["tuiFocusable"] }], pipes: { "async": i2.AsyncPipe }, viewProviders: [tuiHintOptionsProvider({ direction: 'top', hideDelay: 0 })], changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiPure
], TuiLineChartComponent.prototype, "hovered$", null);
__decorate([
    tuiPure
], TuiLineChartComponent.prototype, "getD", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiLineChartComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-line-chart',
                    templateUrl: './line-chart.template.html',
                    styleUrls: ['./line-chart.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    viewProviders: [tuiHintOptionsProvider({ direction: 'top', hideDelay: 0 })],
                }]
        }], ctorParameters: function () { return [{ type: i1.TuiIdService, decorators: [{
                    type: Inject,
                    args: [TuiIdService]
                }] }, { type: i0.NgZone, decorators: [{
                    type: Inject,
                    args: [NgZone]
                }] }, { type: i4.TuiLineChartHintDirective, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TuiLineChartHintDirective]
                }] }, { type: i3.TuiHintOptionsDirective, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TuiHintOptionsDirective]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_LINE_CHART_OPTIONS]
                }] }]; }, propDecorators: { drivers: [{
                type: ViewChildren,
                args: [TuiHintHoverDirective]
            }], valueSetter: [{
                type: Input,
                args: ['value']
            }], x: [{
                type: Input
            }], y: [{
                type: Input
            }], width: [{
                type: Input
            }], height: [{
                type: Input
            }], smoothingFactor: [{
                type: Input
            }], xStringify: [{
                type: Input
            }], yStringify: [{
                type: Input
            }], filled: [{
                type: Input
            }], dots: [{
                type: Input
            }], hovered$: [], onMouseLeave: [{
                type: HostListener,
                args: ['mouseleave']
            }], getD: [] } });
//# sourceMappingURL=data:application/json;base64,