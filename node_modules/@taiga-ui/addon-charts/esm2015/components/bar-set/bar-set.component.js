import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import { tuiPure } from '@taiga-ui/cdk';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/addon-charts/components/bar";
import * as i2 from "@angular/common";
const PERCENT = 100;
const EMPTY_ARRAY = [];
const FILLER_ARRAY = [1];
export class TuiBarSetComponent {
    constructor() {
        this.value = [];
        this.size = 'm';
        this.collapsed = false;
    }
    get computedValue() {
        return this.collapsed ? FILLER_ARRAY : this.value;
    }
    get computedSegments() {
        return this.collapsed ? this.value : EMPTY_ARRAY;
    }
    get computedSize() {
        return this.size || 'm';
    }
    getHeight(value) {
        return Math.abs((PERCENT * value) / this.getLargest(this.computedValue));
    }
    getColor(index) {
        return `var(--tui-chart-${index})`;
    }
    getLargest(value) {
        return value.some(a => a > 0)
            ? value.reduce((a, b) => (a > b ? a : b), 0)
            : Math.abs(value.reduce((a, b) => (a < b ? a : b), 0));
    }
}
TuiBarSetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiBarSetComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
TuiBarSetComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiBarSetComponent, selector: "tui-bar-set", inputs: { value: "value", size: "size", collapsed: "collapsed" }, ngImport: i0, template: "<ng-container *ngIf=\"size; else flexible\">\n    <ng-container\n        *ngFor=\"let item of computedValue; let index = index\"\n        [ngTemplateOutlet]=\"bar\"\n        [ngTemplateOutletContext]=\"{$implicit: item, index: index, flexible: false}\"\n    ></ng-container>\n</ng-container>\n<ng-template #flexible>\n    <div\n        *ngFor=\"let item of computedValue; let index = index\"\n        class=\"t-wrapper\"\n    >\n        <ng-container\n            [ngTemplateOutlet]=\"bar\"\n            [ngTemplateOutletContext]=\"{$implicit: item, index: index, flexible: true}\"\n        ></ng-container>\n    </div>\n</ng-template>\n<ng-template\n    #bar\n    let-flexible=\"flexible\"\n    let-index=\"index\"\n    let-item\n>\n    <tui-bar\n        automation-id=\"tui-bar-set__bar\"\n        class=\"t-bar\"\n        [class.t-bar_flexible]=\"flexible\"\n        [class.t-bar_negative]=\"item < 0\"\n        [size]=\"computedSize\"\n        [style.background]=\"getColor(index)\"\n        [style.height.%]=\"getHeight(item)\"\n        [value]=\"computedSegments\"\n    ></tui-bar>\n</ng-template>\n<span class=\"t-label\">\n    <ng-content></ng-content>\n</span>\n", styles: [":host{position:relative;display:flex;height:100%;align-items:flex-end;justify-content:center}.t-wrapper{display:flex;flex:1;height:100%;align-items:flex-end}.t-wrapper:first-of-type{margin-left:25%}.t-wrapper:last-of-type{margin-right:25%}.t-bar{transform-origin:bottom center}.t-bar_negative{transform:rotate(180deg);opacity:var(--tui-disabled-opacity)}.t-bar.t-bar_flexible{max-width:none;width:75%;margin:0 auto}.t-label{position:absolute;top:-1.5rem;font:var(--tui-font-text-xs);color:var(--tui-text-02)}\n"], components: [{ type: i1.TuiBarComponent, selector: "tui-bar", inputs: ["value", "size"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiPure
], TuiBarSetComponent.prototype, "getLargest", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiBarSetComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-bar-set',
                    templateUrl: './bar-set.template.html',
                    styleUrls: ['./bar-set.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { value: [{
                type: Input
            }], size: [{
                type: Input
            }], collapsed: [{
                type: Input
            }], getLargest: [] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFyLXNldC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hZGRvbi1jaGFydHMvY29tcG9uZW50cy9iYXItc2V0L2Jhci1zZXQuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYWRkb24tY2hhcnRzL2NvbXBvbmVudHMvYmFyLXNldC9iYXItc2V0LnRlbXBsYXRlLmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRXhFLE9BQU8sRUFBQyxPQUFPLEVBQUMsTUFBTSxlQUFlLENBQUM7Ozs7QUFHdEMsTUFBTSxPQUFPLEdBQUcsR0FBRyxDQUFDO0FBQ3BCLE1BQU0sV0FBVyxHQUFzQixFQUFFLENBQUM7QUFDMUMsTUFBTSxZQUFZLEdBQXNCLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFRNUMsTUFBTSxPQUFPLGtCQUFrQjtJQU4vQjtRQVFJLFVBQUssR0FBc0IsRUFBRSxDQUFDO1FBRzlCLFNBQUksR0FBK0IsR0FBRyxDQUFDO1FBR3ZDLGNBQVMsR0FBRyxLQUFLLENBQUM7S0E0QnJCO0lBMUJHLElBQUksYUFBYTtRQUNiLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3RELENBQUM7SUFFRCxJQUFJLGdCQUFnQjtRQUNoQixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQztJQUNyRCxDQUFDO0lBRUQsSUFBSSxZQUFZO1FBQ1osT0FBTyxJQUFJLENBQUMsSUFBSSxJQUFJLEdBQUcsQ0FBQztJQUM1QixDQUFDO0lBRUQsU0FBUyxDQUFDLEtBQWE7UUFDbkIsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7SUFDN0UsQ0FBQztJQUVELFFBQVEsQ0FBQyxLQUFhO1FBQ2xCLE9BQU8sbUJBQW1CLEtBQUssR0FBRyxDQUFDO0lBQ3ZDLENBQUM7SUFHTyxVQUFVLENBQUMsS0FBd0I7UUFDdkMsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUN6QixDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDNUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9ELENBQUM7O2dIQW5DUSxrQkFBa0I7b0dBQWxCLGtCQUFrQixxSENmL0IscXBDQXNDQTtBRFFJO0lBREMsT0FBTztvREFLUDs0RkFuQ1Esa0JBQWtCO2tCQU45QixTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSxhQUFhO29CQUN2QixXQUFXLEVBQUUseUJBQXlCO29CQUN0QyxTQUFTLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQztvQkFDbkMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07aUJBQ2xEOzhCQUdHLEtBQUs7c0JBREosS0FBSztnQkFJTixJQUFJO3NCQURILEtBQUs7Z0JBSU4sU0FBUztzQkFEUixLQUFLO2dCQXdCRSxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBJbnB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1NhZmVWYWx1ZX0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5pbXBvcnQge3R1aVB1cmV9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtUdWlTaXplTCwgVHVpU2l6ZVN9IGZyb20gJ0B0YWlnYS11aS9jb3JlJztcblxuY29uc3QgUEVSQ0VOVCA9IDEwMDtcbmNvbnN0IEVNUFRZX0FSUkFZOiByZWFkb25seSBudW1iZXJbXSA9IFtdO1xuY29uc3QgRklMTEVSX0FSUkFZOiByZWFkb25seSBudW1iZXJbXSA9IFsxXTtcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICd0dWktYmFyLXNldCcsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2Jhci1zZXQudGVtcGxhdGUuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vYmFyLXNldC5zdHlsZS5sZXNzJ10sXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuZXhwb3J0IGNsYXNzIFR1aUJhclNldENvbXBvbmVudCB7XG4gICAgQElucHV0KClcbiAgICB2YWx1ZTogcmVhZG9ubHkgbnVtYmVyW10gPSBbXTtcblxuICAgIEBJbnB1dCgpXG4gICAgc2l6ZTogVHVpU2l6ZUwgfCBUdWlTaXplUyB8IG51bGwgPSAnbSc7XG5cbiAgICBASW5wdXQoKVxuICAgIGNvbGxhcHNlZCA9IGZhbHNlO1xuXG4gICAgZ2V0IGNvbXB1dGVkVmFsdWUoKTogcmVhZG9ubHkgbnVtYmVyW10ge1xuICAgICAgICByZXR1cm4gdGhpcy5jb2xsYXBzZWQgPyBGSUxMRVJfQVJSQVkgOiB0aGlzLnZhbHVlO1xuICAgIH1cblxuICAgIGdldCBjb21wdXRlZFNlZ21lbnRzKCk6IHJlYWRvbmx5IG51bWJlcltdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29sbGFwc2VkID8gdGhpcy52YWx1ZSA6IEVNUFRZX0FSUkFZO1xuICAgIH1cblxuICAgIGdldCBjb21wdXRlZFNpemUoKTogVHVpU2l6ZUwgfCBUdWlTaXplUyB7XG4gICAgICAgIHJldHVybiB0aGlzLnNpemUgfHwgJ20nO1xuICAgIH1cblxuICAgIGdldEhlaWdodCh2YWx1ZTogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIE1hdGguYWJzKChQRVJDRU5UICogdmFsdWUpIC8gdGhpcy5nZXRMYXJnZXN0KHRoaXMuY29tcHV0ZWRWYWx1ZSkpO1xuICAgIH1cblxuICAgIGdldENvbG9yKGluZGV4OiBudW1iZXIpOiBTYWZlVmFsdWUge1xuICAgICAgICByZXR1cm4gYHZhcigtLXR1aS1jaGFydC0ke2luZGV4fSlgO1xuICAgIH1cblxuICAgIEB0dWlQdXJlXG4gICAgcHJpdmF0ZSBnZXRMYXJnZXN0KHZhbHVlOiByZWFkb25seSBudW1iZXJbXSk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB2YWx1ZS5zb21lKGEgPT4gYSA+IDApXG4gICAgICAgICAgICA/IHZhbHVlLnJlZHVjZSgoYSwgYikgPT4gKGEgPiBiID8gYSA6IGIpLCAwKVxuICAgICAgICAgICAgOiBNYXRoLmFicyh2YWx1ZS5yZWR1Y2UoKGEsIGIpID0+IChhIDwgYiA/IGEgOiBiKSwgMCkpO1xuICAgIH1cbn1cbiIsIjxuZy1jb250YWluZXIgKm5nSWY9XCJzaXplOyBlbHNlIGZsZXhpYmxlXCI+XG4gICAgPG5nLWNvbnRhaW5lclxuICAgICAgICAqbmdGb3I9XCJsZXQgaXRlbSBvZiBjb21wdXRlZFZhbHVlOyBsZXQgaW5kZXggPSBpbmRleFwiXG4gICAgICAgIFtuZ1RlbXBsYXRlT3V0bGV0XT1cImJhclwiXG4gICAgICAgIFtuZ1RlbXBsYXRlT3V0bGV0Q29udGV4dF09XCJ7JGltcGxpY2l0OiBpdGVtLCBpbmRleDogaW5kZXgsIGZsZXhpYmxlOiBmYWxzZX1cIlxuICAgID48L25nLWNvbnRhaW5lcj5cbjwvbmctY29udGFpbmVyPlxuPG5nLXRlbXBsYXRlICNmbGV4aWJsZT5cbiAgICA8ZGl2XG4gICAgICAgICpuZ0Zvcj1cImxldCBpdGVtIG9mIGNvbXB1dGVkVmFsdWU7IGxldCBpbmRleCA9IGluZGV4XCJcbiAgICAgICAgY2xhc3M9XCJ0LXdyYXBwZXJcIlxuICAgID5cbiAgICAgICAgPG5nLWNvbnRhaW5lclxuICAgICAgICAgICAgW25nVGVtcGxhdGVPdXRsZXRdPVwiYmFyXCJcbiAgICAgICAgICAgIFtuZ1RlbXBsYXRlT3V0bGV0Q29udGV4dF09XCJ7JGltcGxpY2l0OiBpdGVtLCBpbmRleDogaW5kZXgsIGZsZXhpYmxlOiB0cnVlfVwiXG4gICAgICAgID48L25nLWNvbnRhaW5lcj5cbiAgICA8L2Rpdj5cbjwvbmctdGVtcGxhdGU+XG48bmctdGVtcGxhdGVcbiAgICAjYmFyXG4gICAgbGV0LWZsZXhpYmxlPVwiZmxleGlibGVcIlxuICAgIGxldC1pbmRleD1cImluZGV4XCJcbiAgICBsZXQtaXRlbVxuPlxuICAgIDx0dWktYmFyXG4gICAgICAgIGF1dG9tYXRpb24taWQ9XCJ0dWktYmFyLXNldF9fYmFyXCJcbiAgICAgICAgY2xhc3M9XCJ0LWJhclwiXG4gICAgICAgIFtjbGFzcy50LWJhcl9mbGV4aWJsZV09XCJmbGV4aWJsZVwiXG4gICAgICAgIFtjbGFzcy50LWJhcl9uZWdhdGl2ZV09XCJpdGVtIDwgMFwiXG4gICAgICAgIFtzaXplXT1cImNvbXB1dGVkU2l6ZVwiXG4gICAgICAgIFtzdHlsZS5iYWNrZ3JvdW5kXT1cImdldENvbG9yKGluZGV4KVwiXG4gICAgICAgIFtzdHlsZS5oZWlnaHQuJV09XCJnZXRIZWlnaHQoaXRlbSlcIlxuICAgICAgICBbdmFsdWVdPVwiY29tcHV0ZWRTZWdtZW50c1wiXG4gICAgPjwvdHVpLWJhcj5cbjwvbmctdGVtcGxhdGU+XG48c3BhbiBjbGFzcz1cInQtbGFiZWxcIj5cbiAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG48L3NwYW4+XG4iXX0=