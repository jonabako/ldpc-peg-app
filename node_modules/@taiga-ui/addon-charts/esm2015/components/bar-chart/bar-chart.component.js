import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, Inject, Input, Optional, ViewChildren, } from '@angular/core';
import { EMPTY_QUERY, TuiIdService, tuiPure, tuiSum, } from '@taiga-ui/cdk';
import { TuiHintHoverDirective, TuiHintOptionsDirective, tuiHintOptionsProvider, } from '@taiga-ui/core';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/addon-charts/components/bar-set";
import * as i2 from "@angular/common";
import * as i3 from "@taiga-ui/core";
import * as i4 from "@taiga-ui/cdk";
export class TuiBarChartComponent {
    constructor(hintOptions, idService) {
        this.hintOptions = hintOptions;
        this.drivers = EMPTY_QUERY;
        this.value = [];
        this.max = NaN;
        this.size = 'm';
        this.collapsed = false;
        this.percentMapper = (set, collapsed, max) => (100 * (collapsed ? tuiSum(...set) : Math.max(...set))) / max;
        this.autoIdString = idService.generate();
    }
    get hintContent() {
        var _a;
        return ((_a = this.hintOptions) === null || _a === void 0 ? void 0 : _a.content) || '';
    }
    get transposed() {
        return this.transpose(this.value);
    }
    get computedMax() {
        return this.max || this.getMax(this.value, this.collapsed);
    }
    getHintId(index) {
        return `${this.autoIdString}_${index}`;
    }
    transpose(value) {
        return value.reduce((result, next) => next.map((_, index) => [...(result[index] || []), next[index]]), []);
    }
    getMax(values, collapsed) {
        return collapsed
            ? Math.max(
            // eslint-disable-next-line no-restricted-syntax
            ...values.reduce((result, next) => result.map((value, index) => value + next[index])))
            : values.reduce((max, value) => Math.max(...value, max), 0);
    }
}
TuiBarChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiBarChartComponent, deps: [{ token: TuiHintOptionsDirective, optional: true }, { token: TuiIdService }], target: i0.ɵɵFactoryTarget.Component });
TuiBarChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiBarChartComponent, selector: "tui-bar-chart", inputs: { value: "value", max: "max", size: "size", collapsed: "collapsed" }, viewQueries: [{ propertyName: "drivers", predicate: TuiHintHoverDirective, descendants: true }], ngImport: i0, template: "<div\n    *ngFor=\"let set of transposed; let index = index\"\n    class=\"t-wrapper\"\n    [class.t-wrapper_hoverable]=\"!!hintContent\"\n    [class.t-wrapper_hovered]=\"drivers.get(index) | async\"\n    [tuiHint]=\"hintContent\"\n    [tuiHintContext]=\"{$implicit: index}\"\n    [tuiHintDescribe]=\"getHintId(index)\"\n    [tuiHintHost]=\"hintHost\"\n    (mouseenter.once)=\"(0)\"\n>\n    <div\n        class=\"t-container\"\n        [style.height.%]=\"set | tuiMapper: percentMapper : collapsed : computedMax\"\n    >\n        <div\n            #hintHost\n            class=\"t-host\"\n        ></div>\n        <tui-bar-set\n            class=\"t-set\"\n            [collapsed]=\"collapsed\"\n            [id]=\"getHintId(index)\"\n            [size]=\"size\"\n            [tuiFocusable]=\"!!hintContent\"\n            [value]=\"set\"\n        ></tui-bar-set>\n    </div>\n</div>\n", styles: [":host{display:flex;flex:1;height:100%}.t-wrapper{transition-property:background-color;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;position:relative;display:flex;flex:1;align-items:flex-end;justify-content:center;height:100%}.t-wrapper_hoverable{cursor:pointer}.t-wrapper_hoverable:hover,.t-wrapper_hoverable.t-wrapper_hovered{background-color:#0000000d}.t-container{flex:1}.t-host{position:absolute;left:50%;right:50%}.t-set{border-radius:var(--tui-radius-m);pointer-events:none;outline:none}.t-set:focus{box-shadow:0 0 0 2px var(--tui-focus)}\n"], components: [{ type: i1.TuiBarSetComponent, selector: "tui-bar-set", inputs: ["value", "size", "collapsed"] }], directives: [{ type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3.TuiHintDirective, selector: "[tuiHint]:not(ng-container):not(ng-template)", inputs: ["tuiHint", "tuiHintContext", "tuiHintAppearance"] }, { type: i3.TuiHintDriverDirective, selector: "[tuiHint]:not(ng-container):not(ng-template)" }, { type: i3.TuiHintHoverDirective, selector: "[tuiHint]:not(ng-container):not(ng-template)", inputs: ["tuiHintShowDelay", "tuiHintHideDelay"], exportAs: ["tuiHintHover"] }, { type: i3.TuiHintPositionDirective, selector: "[tuiHint]:not([tuiHintCustomPosition]):not(ng-container):not(ng-template)", inputs: ["tuiHintDirection"] }, { type: i3.TuiHintHostDirective, selector: "[tuiHint][tuiHintHost]", inputs: ["tuiHintHost"] }, { type: i3.TuiHintDescribeDirective, selector: "[tuiHintDescribe]", inputs: ["tuiHintDescribe"] }, { type: i4.TuiFocusableDirective, selector: "[tuiFocusable]", inputs: ["tuiFocusable"] }], pipes: { "async": i2.AsyncPipe, "tuiMapper": i4.TuiMapperPipe }, viewProviders: [tuiHintOptionsProvider({ direction: 'top' })], changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiPure
], TuiBarChartComponent.prototype, "transpose", null);
__decorate([
    tuiPure
], TuiBarChartComponent.prototype, "getMax", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiBarChartComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-bar-chart',
                    templateUrl: './bar-chart.template.html',
                    styleUrls: ['./bar-chart.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    viewProviders: [tuiHintOptionsProvider({ direction: 'top' })],
                }]
        }], ctorParameters: function () { return [{ type: i3.TuiHintOptionsDirective, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TuiHintOptionsDirective]
                }] }, { type: i4.TuiIdService, decorators: [{
                    type: Inject,
                    args: [TuiIdService]
                }] }]; }, propDecorators: { drivers: [{
                type: ViewChildren,
                args: [TuiHintHoverDirective]
            }], value: [{
                type: Input
            }], max: [{
                type: Input
            }], size: [{
                type: Input
            }], collapsed: [{
                type: Input
            }], transpose: [], getMax: [] } });
//# sourceMappingURL=data:application/json;base64,