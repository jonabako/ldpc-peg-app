import { __decorate } from 'tslib';
import * as i0 from '@angular/core';
import { EventEmitter, Directive, Optional, Self, Inject, ChangeDetectorRef, Input, Output, Component, ChangeDetectionStrategy, ViewChild, HostBinding, NgModule } from '@angular/core';
import * as i1 from '@angular/forms';
import { NgControl } from '@angular/forms';
import { AbstractTuiNullableControl, tuiPure, tuiCreateToken, tuiProvideOptions, tuiAsFocusableItemAccessor, tuiAsControl } from '@taiga-ui/cdk';
import { TUI_CARD_MASK } from '@taiga-ui/addon-commerce/constants';
import * as i1$1 from '@taiga-ui/core';
import { TUI_TEXTFIELD_SIZE, TuiPrimitiveTextfieldComponent, AbstractTuiTextfieldHost, tuiAsTextfieldHost, TuiPrimitiveTextfieldModule, TuiTextfieldControllerModule, TuiSvgModule, TuiTextfieldComponent } from '@taiga-ui/core';
import { TUI_PAYMENT_SYSTEM_ICONS, tuiGetPaymentSystem } from '@taiga-ui/addon-commerce/utils';
import * as i2 from '@taiga-ui/kit';
import { TuiValueAccessorModule } from '@taiga-ui/kit';
import * as i3 from '@maskito/angular';
import { MaskitoModule } from '@maskito/angular';

class AbstractTuiInputCard extends AbstractTuiNullableControl {
    constructor(control, cdr, options) {
        super(control, cdr);
        this.options = options;
        this.autocompleteEnabled = this.options.autocompleteEnabled;
        this.binChange = new EventEmitter();
    }
    get defaultIcon() {
        const paymentSystem = this.getPaymentSystem(this.card);
        return paymentSystem && this.options.icons[paymentSystem];
    }
    get paymentSystem() {
        return this.getPaymentSystem(this.card);
    }
    /** @deprecated remove in 4.0 */
    get icon() {
        return this.cardSrc || this.defaultIcon;
    }
    get autocomplete() {
        return this.autocompleteEnabled ? 'cc-number' : 'off';
    }
    /**
     * @deprecated: drop in v4.0
     * use {@link autocomplete}
     */
    get autocompleteCard() {
        return this.autocomplete;
    }
    get bin() {
        return this.card.length < 6 ? null : this.card.slice(0, 6);
    }
    getPaymentSystem(cardNumber) {
        return this.options.paymentSystemHandler(cardNumber);
    }
}
AbstractTuiInputCard.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: AbstractTuiInputCard, deps: "invalid", target: i0.ɵɵFactoryTarget.Directive });
AbstractTuiInputCard.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: AbstractTuiInputCard, inputs: { cardSrc: "cardSrc", autocompleteEnabled: "autocompleteEnabled" }, outputs: { binChange: "binChange" }, usesInheritance: true, ngImport: i0 });
__decorate([
    tuiPure
], AbstractTuiInputCard.prototype, "getPaymentSystem", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: AbstractTuiInputCard, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i1.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }, {
                    type: Inject,
                    args: [NgControl]
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: undefined }]; }, propDecorators: { cardSrc: [{
                type: Input
            }], autocompleteEnabled: [{
                type: Input
            }], binChange: [{
                type: Output
            }], getPaymentSystem: [] } });

// TODO: Move payment system icons into its own token in 4.0
const TUI_INPUT_CARD_DEFAULT_OPTIONS = {
    icons: TUI_PAYMENT_SYSTEM_ICONS,
    cardSrc: '',
    paymentSystemHandler: tuiGetPaymentSystem,
    autocompleteEnabled: false,
};
const TUI_INPUT_CARD_OPTIONS = tuiCreateToken(TUI_INPUT_CARD_DEFAULT_OPTIONS);
function tuiInputCardOptionsProvider(options) {
    return tuiProvideOptions(TUI_INPUT_CARD_OPTIONS, options, TUI_INPUT_CARD_DEFAULT_OPTIONS);
}

class TuiInputCardComponent extends AbstractTuiInputCard {
    constructor(control, cdr, textfieldSize, options) {
        super(control, cdr, options);
        this.textfieldSize = textfieldSize;
        this.maskOptions = {
            mask: TUI_CARD_MASK,
        };
    }
    get size() {
        return this.textfieldSize.size;
    }
    get card() {
        var _a;
        return (_a = this.value) !== null && _a !== void 0 ? _a : '';
    }
    get nativeFocusableElement() {
        var _a, _b;
        return (_b = (_a = this.input) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement) !== null && _b !== void 0 ? _b : null;
    }
    get focused() {
        return !!this.input && this.input.focused;
    }
    onValueChange(value) {
        const parsed = value.split(' ').join('');
        const currentBin = this.bin;
        this.value = parsed;
        const newBin = this.bin;
        if (currentBin !== newBin) {
            this.binChange.emit(newBin);
        }
    }
    onFocused(focused) {
        this.updateFocused(focused);
    }
    writeValue(value) {
        const currentBin = this.bin;
        super.writeValue(value);
        const newBin = this.bin;
        if (currentBin !== newBin) {
            this.binChange.emit(newBin);
        }
    }
    getFallbackValue() {
        return '';
    }
}
TuiInputCardComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputCardComponent, deps: [{ token: NgControl, optional: true, self: true }, { token: ChangeDetectorRef }, { token: TUI_TEXTFIELD_SIZE }, { token: TUI_INPUT_CARD_OPTIONS }], target: i0.ɵɵFactoryTarget.Component });
TuiInputCardComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiInputCardComponent, selector: "tui-input-card", host: { properties: { "attr.data-size": "this.size" } }, providers: [
        tuiAsFocusableItemAccessor(TuiInputCardComponent),
        tuiAsControl(TuiInputCardComponent),
    ], viewQueries: [{ propertyName: "input", first: true, predicate: TuiPrimitiveTextfieldComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: "<tui-primitive-textfield\n    tuiValueAccessor\n    class=\"t-input\"\n    [disabled]=\"disabled\"\n    [focusable]=\"focusable\"\n    [invalid]=\"computedInvalid\"\n    [maskito]=\"maskOptions\"\n    [nativeId]=\"nativeId\"\n    [pseudoActive]=\"pseudoActive\"\n    [pseudoFocus]=\"pseudoFocus\"\n    [pseudoHover]=\"pseudoHover\"\n    [readOnly]=\"readOnly\"\n    [tuiTextfieldCustomContent]=\"cardSrc || (defaultIcon && logo)\"\n    [value]=\"card | maskito: maskOptions\"\n    (focusedChange)=\"onFocused($event)\"\n    (valueChange)=\"onValueChange($event)\"\n>\n    <ng-content></ng-content>\n    <ng-content\n        ngProjectAs=\"input\"\n        select=\"input\"\n    ></ng-content>\n</tui-primitive-textfield>\n<ng-template #logo>\n    <tui-svg\n        class=\"t-payment-system\"\n        [src]=\"defaultIcon\"\n    ></tui-svg>\n</ng-template>\n", styles: [":host{display:block;border-radius:var(--tui-radius-m);text-align:left}.t-input{border-radius:inherit;text-align:inherit}.t-payment-system{width:2rem;height:2rem;color:#1434cb}\n"], components: [{ type: i1$1.TuiPrimitiveTextfieldComponent, selector: "tui-primitive-textfield", inputs: ["editable", "filler", "iconCleaner", "readOnly", "invalid", "disabled", "prefix", "postfix", "value"], outputs: ["valueChange"] }, { type: i1$1.TuiSvgComponent, selector: "tui-svg", inputs: ["src"] }], directives: [{ type: i1$1.TuiPrimitiveTextfieldDirective, selector: "tui-primitive-textfield" }, { type: i2.TuiValueAccessorDirective, selector: "[tuiValueAccessor]" }, { type: i3.MaskitoDirective, selector: "[maskito]", inputs: ["maskito", "maskitoElement"] }, { type: i1$1.TuiTextfieldCustomContentDirective, selector: "[tuiTextfieldCustomContent]", inputs: ["tuiTextfieldCustomContent"] }], pipes: { "maskito": i3.MaskitoPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputCardComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-input-card',
                    templateUrl: './input-card.template.html',
                    styleUrls: ['./input-card.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        tuiAsFocusableItemAccessor(TuiInputCardComponent),
                        tuiAsControl(TuiInputCardComponent),
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i1.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }, {
                    type: Inject,
                    args: [NgControl]
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: i1$1.TuiTextfieldSizeDirective, decorators: [{
                    type: Inject,
                    args: [TUI_TEXTFIELD_SIZE]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_INPUT_CARD_OPTIONS]
                }] }]; }, propDecorators: { input: [{
                type: ViewChild,
                args: [TuiPrimitiveTextfieldComponent]
            }], size: [{
                type: HostBinding,
                args: ['attr.data-size']
            }] } });

class TuiInputCardDirective extends AbstractTuiTextfieldHost {
    onValueChange(value) {
        this.host.onValueChange(value);
    }
    ngAfterViewInit() {
        const { nativeFocusableElement } = this.host;
        if (!nativeFocusableElement) {
            return;
        }
        nativeFocusableElement.inputMode = 'numeric';
        nativeFocusableElement.placeholder =
            nativeFocusableElement.placeholder || '0000 0000 0000 0000';
    }
}
TuiInputCardDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputCardDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TuiInputCardDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiInputCardDirective, selector: "tui-input-card", providers: [tuiAsTextfieldHost(TuiInputCardDirective)], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputCardDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'tui-input-card',
                    providers: [tuiAsTextfieldHost(TuiInputCardDirective)],
                }]
        }] });

class TuiInputCardModule {
}
TuiInputCardModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputCardModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiInputCardModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputCardModule, declarations: [TuiInputCardComponent, TuiInputCardDirective], imports: [MaskitoModule,
        TuiPrimitiveTextfieldModule,
        TuiTextfieldControllerModule,
        TuiValueAccessorModule,
        TuiSvgModule], exports: [TuiInputCardComponent, TuiInputCardDirective, TuiTextfieldComponent] });
TuiInputCardModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputCardModule, imports: [[
            MaskitoModule,
            TuiPrimitiveTextfieldModule,
            TuiTextfieldControllerModule,
            TuiValueAccessorModule,
            TuiSvgModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputCardModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        MaskitoModule,
                        TuiPrimitiveTextfieldModule,
                        TuiTextfieldControllerModule,
                        TuiValueAccessorModule,
                        TuiSvgModule,
                    ],
                    declarations: [TuiInputCardComponent, TuiInputCardDirective],
                    exports: [TuiInputCardComponent, TuiInputCardDirective, TuiTextfieldComponent],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { AbstractTuiInputCard, TUI_INPUT_CARD_DEFAULT_OPTIONS, TUI_INPUT_CARD_OPTIONS, TuiInputCardComponent, TuiInputCardDirective, TuiInputCardModule, tuiInputCardOptionsProvider };
//# sourceMappingURL=taiga-ui-addon-commerce-components-input-card.js.map
