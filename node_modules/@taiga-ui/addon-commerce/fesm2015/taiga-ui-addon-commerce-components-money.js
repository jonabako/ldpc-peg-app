import * as i0 from '@angular/core';
import { Pipe, Inject, Component, ChangeDetectionStrategy, Input, HostBinding, NgModule } from '@angular/core';
import * as i1 from '@taiga-ui/cdk';
import { tuiCreateToken, tuiProvideOptions, CHAR_MINUS, CHAR_PLUS, tuiRoundWith, TuiLetModule } from '@taiga-ui/cdk';
import { TuiCurrency } from '@taiga-ui/addon-commerce/enums';
import * as i2 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i4 from '@taiga-ui/addon-commerce/pipes';
import { TuiCurrencyPipeModule } from '@taiga-ui/addon-commerce/pipes';
import { tuiFormatNumber, TUI_NUMBER_FORMAT } from '@taiga-ui/core';

const TUI_MONEY_DEFAULT_OPTIONS = {
    decimal: 'not-zero',
    currency: TuiCurrency.Ruble,
    currencyAlign: 'right',
    sign: 'negative-only',
    colored: false,
    precision: 2,
    singleColor: false,
};
/**
 * @deprecated TODO: remove in 4.0
 */
const TUI_MONEY_DEFAULT_DEFAULT_OPTIONS = TUI_MONEY_DEFAULT_OPTIONS;
const TUI_MONEY_OPTIONS = tuiCreateToken(TUI_MONEY_DEFAULT_OPTIONS);
function tuiMoneyOptionsProvider(options) {
    return tuiProvideOptions(TUI_MONEY_OPTIONS, options, TUI_MONEY_DEFAULT_OPTIONS);
}

function tuiFormatSignSymbol(value, sign) {
    if (sign === 'never' || !value || (sign === 'negative-only' && value > 0)) {
        return '';
    }
    if (sign === 'force-negative' || (value < 0 && sign !== 'force-positive')) {
        return CHAR_MINUS;
    }
    return CHAR_PLUS;
}

class TuiSignSymbolPipe {
    transform(value, sign) {
        return tuiFormatSignSymbol(value, sign);
    }
}
TuiSignSymbolPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSignSymbolPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
TuiSignSymbolPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSignSymbolPipe, name: "tuiSignSymbol" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSignSymbolPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'tuiSignSymbol' }]
        }] });

class TuiIntegerPartPipe {
    constructor(numberFormat) {
        this.numberFormat = numberFormat;
    }
    transform(value, precision = 2) {
        const rounded = tuiRoundWith({
            value: Math.abs(Number(value)),
            precision,
            method: this.numberFormat.rounding,
        });
        return tuiFormatNumber(rounded, Object.assign(Object.assign({}, this.numberFormat), { decimalLimit: 0, rounding: 'truncate' }));
    }
}
TuiIntegerPartPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiIntegerPartPipe, deps: [{ token: TUI_NUMBER_FORMAT }], target: i0.ɵɵFactoryTarget.Pipe });
TuiIntegerPartPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiIntegerPartPipe, name: "tuiIntegerPart" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiIntegerPartPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'tuiIntegerPart' }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_NUMBER_FORMAT]
                }] }]; } });

function tuiFormatFractionPart(options) {
    const { value, decimal, numberFormat, precision } = options;
    const fraction = tuiFormatNumber(value, Object.assign(Object.assign({}, numberFormat), { decimalLimit: precision })).split(numberFormat.decimalSeparator)[1];
    const shouldShow = decimal !== 'never' && (decimal === 'always' || !!parseInt(fraction, 10));
    return shouldShow ? `${numberFormat.decimalSeparator}${fraction}` : '';
}

class TuiFractionPartPipe {
    constructor(numberFormat) {
        this.numberFormat = numberFormat;
    }
    transform(value, decimal, precision) {
        return tuiFormatFractionPart({
            value,
            decimal,
            precision,
            numberFormat: this.numberFormat,
        });
    }
}
TuiFractionPartPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiFractionPartPipe, deps: [{ token: TUI_NUMBER_FORMAT }], target: i0.ɵɵFactoryTarget.Pipe });
TuiFractionPartPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiFractionPartPipe, name: "tuiFractionPart" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiFractionPartPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'tuiFractionPart' }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_NUMBER_FORMAT]
                }] }]; } });

class TuiMoneyComponent {
    constructor(options) {
        this.options = options;
        this.value = NaN;
        this.decimal = this.options.decimal;
        this.currency = this.options.currency;
        this.currencyAlign = this.options.currencyAlign;
        this.sign = this.options.sign;
        this.colored = this.options.colored;
        this.precision = this.options.precision;
        this.singleColor = this.options.singleColor;
    }
    get signSymbol() {
        return tuiFormatSignSymbol(this.value, this.sign);
    }
    get red() {
        return (this.colored &&
            (this.signSymbol === CHAR_MINUS ||
                (this.value < 0 && this.sign !== 'force-positive')));
    }
    get green() {
        return (this.colored &&
            (this.signSymbol === CHAR_PLUS ||
                (this.value > 0 && this.sign !== 'force-negative')));
    }
    get alignRight() {
        return this.currencyAlign === 'right';
    }
    get inheritColor() {
        return this.singleColor || (this.value === 0 && this.colored);
    }
}
TuiMoneyComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiMoneyComponent, deps: [{ token: TUI_MONEY_OPTIONS }], target: i0.ɵɵFactoryTarget.Component });
TuiMoneyComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiMoneyComponent, selector: "tui-money", inputs: { value: "value", decimal: "decimal", currency: "currency", currencyAlign: "currencyAlign", sign: "sign", colored: "colored", precision: "precision", singleColor: "singleColor" }, host: { properties: { "class._red": "this.red", "class._green": "this.green", "class._inherit-color": "this.inheritColor" } }, ngImport: i0, template: "<span\n    automation-id=\"tui-money__sign\"\n    [textContent]=\"value | tuiSignSymbol: sign\"\n></span>\n\n<span\n    *tuiLet=\"currency | tuiCurrency as currencySymbol\"\n    class=\"t-container\"\n    [class.t-container_reverse]=\"!alignRight\"\n>\n    <span>\n        <span\n            automation-id=\"tui-money__integer-part\"\n            [textContent]=\"value | tuiIntegerPart: precision\"\n        ></span>\n        <span\n            automation-id=\"tui-money__fraction-part\"\n            class=\"t-lighter\"\n            [textContent]=\"value | tuiFractionPart: decimal : precision\"\n        ></span>\n    </span>\n    <span *ngIf=\"(alignRight && currencySymbol) || currencySymbol.length > 1\">&nbsp;</span>\n    <span\n        automation-id=\"tui-money__currency\"\n        class=\"t-lighter\"\n        [textContent]=\"currencySymbol\"\n    ></span>\n</span>\n", styles: [":host{white-space:nowrap}:host._red{color:var(--tui-negative)}:host._green{color:var(--tui-positive)}:host:not(._inherit-color) .t-lighter{opacity:var(--tui-disabled-opacity)}.t-container_reverse{display:inline-flex;flex-direction:row-reverse}\n"], directives: [{ type: i1.TuiLetDirective, selector: "[tuiLet]", inputs: ["tuiLet"] }, { type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "tuiSignSymbol": TuiSignSymbolPipe, "tuiCurrency": i4.TuiCurrencyPipe, "tuiIntegerPart": TuiIntegerPartPipe, "tuiFractionPart": TuiFractionPartPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiMoneyComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-money',
                    templateUrl: './money.template.html',
                    styleUrls: ['./money.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_MONEY_OPTIONS]
                }] }]; }, propDecorators: { value: [{
                type: Input
            }], decimal: [{
                type: Input
            }], currency: [{
                type: Input
            }], currencyAlign: [{
                type: Input
            }], sign: [{
                type: Input
            }], colored: [{
                type: Input
            }], precision: [{
                type: Input
            }], singleColor: [{
                type: Input
            }], red: [{
                type: HostBinding,
                args: ['class._red']
            }], green: [{
                type: HostBinding,
                args: ['class._green']
            }], inheritColor: [{
                type: HostBinding,
                args: ['class._inherit-color']
            }] } });

class TuiMoneyModule {
}
TuiMoneyModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiMoneyModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiMoneyModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiMoneyModule, declarations: [TuiMoneyComponent,
        TuiFractionPartPipe,
        TuiIntegerPartPipe,
        TuiSignSymbolPipe], imports: [CommonModule, TuiCurrencyPipeModule, TuiLetModule], exports: [TuiMoneyComponent] });
TuiMoneyModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiMoneyModule, imports: [[CommonModule, TuiCurrencyPipeModule, TuiLetModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiMoneyModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, TuiCurrencyPipeModule, TuiLetModule],
                    declarations: [
                        TuiMoneyComponent,
                        TuiFractionPartPipe,
                        TuiIntegerPartPipe,
                        TuiSignSymbolPipe,
                    ],
                    exports: [TuiMoneyComponent],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TUI_MONEY_DEFAULT_DEFAULT_OPTIONS, TUI_MONEY_DEFAULT_OPTIONS, TUI_MONEY_OPTIONS, TuiFractionPartPipe, TuiIntegerPartPipe, TuiMoneyComponent, TuiMoneyModule, TuiSignSymbolPipe, tuiFormatFractionPart, tuiFormatSignSymbol, tuiMoneyOptionsProvider };
//# sourceMappingURL=taiga-ui-addon-commerce-components-money.js.map
