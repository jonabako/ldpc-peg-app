(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@taiga-ui/cdk'), require('@taiga-ui/addon-commerce/enums'), require('@angular/common'), require('@taiga-ui/addon-commerce/pipes'), require('@taiga-ui/core')) :
    typeof define === 'function' && define.amd ? define('@taiga-ui/addon-commerce/components/money', ['exports', '@angular/core', '@taiga-ui/cdk', '@taiga-ui/addon-commerce/enums', '@angular/common', '@taiga-ui/addon-commerce/pipes', '@taiga-ui/core'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global["taiga-ui"] = global["taiga-ui"] || {}, global["taiga-ui"]["addon-commerce"] = global["taiga-ui"]["addon-commerce"] || {}, global["taiga-ui"]["addon-commerce"].components = global["taiga-ui"]["addon-commerce"].components || {}, global["taiga-ui"]["addon-commerce"].components.money = {}), global.ng.core, global.i1, global["taiga-ui"]["addon-commerce"].enums, global.ng.common, global["taiga-ui"]["addon-commerce"].pipes, global.core));
})(this, (function (exports, i0, i1, enums, i2, i4, core) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i4__namespace = /*#__PURE__*/_interopNamespace(i4);

    var TUI_MONEY_DEFAULT_OPTIONS = {
        decimal: 'not-zero',
        currency: enums.TuiCurrency.Ruble,
        currencyAlign: 'right',
        sign: 'negative-only',
        colored: false,
        precision: 2,
        singleColor: false,
    };
    /**
     * @deprecated TODO: remove in 4.0
     */
    var TUI_MONEY_DEFAULT_DEFAULT_OPTIONS = TUI_MONEY_DEFAULT_OPTIONS;
    var TUI_MONEY_OPTIONS = i1.tuiCreateToken(TUI_MONEY_DEFAULT_OPTIONS);
    function tuiMoneyOptionsProvider(options) {
        return i1.tuiProvideOptions(TUI_MONEY_OPTIONS, options, TUI_MONEY_DEFAULT_OPTIONS);
    }

    function tuiFormatSignSymbol(value, sign) {
        if (sign === 'never' || !value || (sign === 'negative-only' && value > 0)) {
            return '';
        }
        if (sign === 'force-negative' || (value < 0 && sign !== 'force-positive')) {
            return i1.CHAR_MINUS;
        }
        return i1.CHAR_PLUS;
    }

    var TuiSignSymbolPipe = /** @class */ (function () {
        function TuiSignSymbolPipe() {
        }
        TuiSignSymbolPipe.prototype.transform = function (value, sign) {
            return tuiFormatSignSymbol(value, sign);
        };
        return TuiSignSymbolPipe;
    }());
    TuiSignSymbolPipe.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiSignSymbolPipe, deps: [], target: i0__namespace.ɵɵFactoryTarget.Pipe });
    TuiSignSymbolPipe.ɵpipe = i0__namespace.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiSignSymbolPipe, name: "tuiSignSymbol" });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiSignSymbolPipe, decorators: [{
                type: i0.Pipe,
                args: [{ name: 'tuiSignSymbol' }]
            }] });

    var TuiIntegerPartPipe = /** @class */ (function () {
        function TuiIntegerPartPipe(numberFormat) {
            this.numberFormat = numberFormat;
        }
        TuiIntegerPartPipe.prototype.transform = function (value, precision) {
            if (precision === void 0) { precision = 2; }
            var rounded = i1.tuiRoundWith({
                value: Math.abs(Number(value)),
                precision: precision,
                method: this.numberFormat.rounding,
            });
            return core.tuiFormatNumber(rounded, Object.assign(Object.assign({}, this.numberFormat), { decimalLimit: 0, rounding: 'truncate' }));
        };
        return TuiIntegerPartPipe;
    }());
    TuiIntegerPartPipe.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiIntegerPartPipe, deps: [{ token: core.TUI_NUMBER_FORMAT }], target: i0__namespace.ɵɵFactoryTarget.Pipe });
    TuiIntegerPartPipe.ɵpipe = i0__namespace.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiIntegerPartPipe, name: "tuiIntegerPart" });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiIntegerPartPipe, decorators: [{
                type: i0.Pipe,
                args: [{ name: 'tuiIntegerPart' }]
            }], ctorParameters: function () {
            return [{ type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [core.TUI_NUMBER_FORMAT]
                        }] }];
        } });

    function tuiFormatFractionPart(options) {
        var value = options.value, decimal = options.decimal, numberFormat = options.numberFormat, precision = options.precision;
        var fraction = core.tuiFormatNumber(value, Object.assign(Object.assign({}, numberFormat), { decimalLimit: precision })).split(numberFormat.decimalSeparator)[1];
        var shouldShow = decimal !== 'never' && (decimal === 'always' || !!parseInt(fraction, 10));
        return shouldShow ? "" + numberFormat.decimalSeparator + fraction : '';
    }

    var TuiFractionPartPipe = /** @class */ (function () {
        function TuiFractionPartPipe(numberFormat) {
            this.numberFormat = numberFormat;
        }
        TuiFractionPartPipe.prototype.transform = function (value, decimal, precision) {
            return tuiFormatFractionPart({
                value: value,
                decimal: decimal,
                precision: precision,
                numberFormat: this.numberFormat,
            });
        };
        return TuiFractionPartPipe;
    }());
    TuiFractionPartPipe.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiFractionPartPipe, deps: [{ token: core.TUI_NUMBER_FORMAT }], target: i0__namespace.ɵɵFactoryTarget.Pipe });
    TuiFractionPartPipe.ɵpipe = i0__namespace.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiFractionPartPipe, name: "tuiFractionPart" });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiFractionPartPipe, decorators: [{
                type: i0.Pipe,
                args: [{ name: 'tuiFractionPart' }]
            }], ctorParameters: function () {
            return [{ type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [core.TUI_NUMBER_FORMAT]
                        }] }];
        } });

    var TuiMoneyComponent = /** @class */ (function () {
        function TuiMoneyComponent(options) {
            this.options = options;
            this.value = NaN;
            this.decimal = this.options.decimal;
            this.currency = this.options.currency;
            this.currencyAlign = this.options.currencyAlign;
            this.sign = this.options.sign;
            this.colored = this.options.colored;
            this.precision = this.options.precision;
            this.singleColor = this.options.singleColor;
        }
        Object.defineProperty(TuiMoneyComponent.prototype, "signSymbol", {
            get: function () {
                return tuiFormatSignSymbol(this.value, this.sign);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TuiMoneyComponent.prototype, "red", {
            get: function () {
                return (this.colored &&
                    (this.signSymbol === i1.CHAR_MINUS ||
                        (this.value < 0 && this.sign !== 'force-positive')));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TuiMoneyComponent.prototype, "green", {
            get: function () {
                return (this.colored &&
                    (this.signSymbol === i1.CHAR_PLUS ||
                        (this.value > 0 && this.sign !== 'force-negative')));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TuiMoneyComponent.prototype, "alignRight", {
            get: function () {
                return this.currencyAlign === 'right';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TuiMoneyComponent.prototype, "inheritColor", {
            get: function () {
                return this.singleColor || (this.value === 0 && this.colored);
            },
            enumerable: false,
            configurable: true
        });
        return TuiMoneyComponent;
    }());
    TuiMoneyComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiMoneyComponent, deps: [{ token: TUI_MONEY_OPTIONS }], target: i0__namespace.ɵɵFactoryTarget.Component });
    TuiMoneyComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiMoneyComponent, selector: "tui-money", inputs: { value: "value", decimal: "decimal", currency: "currency", currencyAlign: "currencyAlign", sign: "sign", colored: "colored", precision: "precision", singleColor: "singleColor" }, host: { properties: { "class._red": "this.red", "class._green": "this.green", "class._inherit-color": "this.inheritColor" } }, ngImport: i0__namespace, template: "<span\n    automation-id=\"tui-money__sign\"\n    [textContent]=\"value | tuiSignSymbol: sign\"\n></span>\n\n<span\n    *tuiLet=\"currency | tuiCurrency as currencySymbol\"\n    class=\"t-container\"\n    [class.t-container_reverse]=\"!alignRight\"\n>\n    <span>\n        <span\n            automation-id=\"tui-money__integer-part\"\n            [textContent]=\"value | tuiIntegerPart: precision\"\n        ></span>\n        <span\n            automation-id=\"tui-money__fraction-part\"\n            class=\"t-lighter\"\n            [textContent]=\"value | tuiFractionPart: decimal : precision\"\n        ></span>\n    </span>\n    <span *ngIf=\"(alignRight && currencySymbol) || currencySymbol.length > 1\">&nbsp;</span>\n    <span\n        automation-id=\"tui-money__currency\"\n        class=\"t-lighter\"\n        [textContent]=\"currencySymbol\"\n    ></span>\n</span>\n", styles: [":host{white-space:nowrap}:host._red{color:var(--tui-negative)}:host._green{color:var(--tui-positive)}:host:not(._inherit-color) .t-lighter{opacity:var(--tui-disabled-opacity)}.t-container_reverse{display:inline-flex;flex-direction:row-reverse}\n"], directives: [{ type: i1__namespace.TuiLetDirective, selector: "[tuiLet]", inputs: ["tuiLet"] }, { type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "tuiSignSymbol": TuiSignSymbolPipe, "tuiCurrency": i4__namespace.TuiCurrencyPipe, "tuiIntegerPart": TuiIntegerPartPipe, "tuiFractionPart": TuiFractionPartPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiMoneyComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'tui-money',
                        templateUrl: './money.template.html',
                        styleUrls: ['./money.style.less'],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () {
            return [{ type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [TUI_MONEY_OPTIONS]
                        }] }];
        }, propDecorators: { value: [{
                    type: i0.Input
                }], decimal: [{
                    type: i0.Input
                }], currency: [{
                    type: i0.Input
                }], currencyAlign: [{
                    type: i0.Input
                }], sign: [{
                    type: i0.Input
                }], colored: [{
                    type: i0.Input
                }], precision: [{
                    type: i0.Input
                }], singleColor: [{
                    type: i0.Input
                }], red: [{
                    type: i0.HostBinding,
                    args: ['class._red']
                }], green: [{
                    type: i0.HostBinding,
                    args: ['class._green']
                }], inheritColor: [{
                    type: i0.HostBinding,
                    args: ['class._inherit-color']
                }] } });

    var TuiMoneyModule = /** @class */ (function () {
        function TuiMoneyModule() {
        }
        return TuiMoneyModule;
    }());
    TuiMoneyModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiMoneyModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    TuiMoneyModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiMoneyModule, declarations: [TuiMoneyComponent,
            TuiFractionPartPipe,
            TuiIntegerPartPipe,
            TuiSignSymbolPipe], imports: [i2.CommonModule, i4.TuiCurrencyPipeModule, i1.TuiLetModule], exports: [TuiMoneyComponent] });
    TuiMoneyModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiMoneyModule, imports: [[i2.CommonModule, i4.TuiCurrencyPipeModule, i1.TuiLetModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiMoneyModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i2.CommonModule, i4.TuiCurrencyPipeModule, i1.TuiLetModule],
                        declarations: [
                            TuiMoneyComponent,
                            TuiFractionPartPipe,
                            TuiIntegerPartPipe,
                            TuiSignSymbolPipe,
                        ],
                        exports: [TuiMoneyComponent],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.TUI_MONEY_DEFAULT_DEFAULT_OPTIONS = TUI_MONEY_DEFAULT_DEFAULT_OPTIONS;
    exports.TUI_MONEY_DEFAULT_OPTIONS = TUI_MONEY_DEFAULT_OPTIONS;
    exports.TUI_MONEY_OPTIONS = TUI_MONEY_OPTIONS;
    exports.TuiFractionPartPipe = TuiFractionPartPipe;
    exports.TuiIntegerPartPipe = TuiIntegerPartPipe;
    exports.TuiMoneyComponent = TuiMoneyComponent;
    exports.TuiMoneyModule = TuiMoneyModule;
    exports.TuiSignSymbolPipe = TuiSignSymbolPipe;
    exports.tuiFormatFractionPart = tuiFormatFractionPart;
    exports.tuiFormatSignSymbol = tuiFormatSignSymbol;
    exports.tuiMoneyOptionsProvider = tuiMoneyOptionsProvider;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=taiga-ui-addon-commerce-components-money.umd.js.map
