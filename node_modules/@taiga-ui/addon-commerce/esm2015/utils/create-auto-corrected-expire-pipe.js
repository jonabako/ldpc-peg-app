import { TUI_NON_DIGIT_REGEXP } from '@taiga-ui/core';
const TUI_EXP_YEAR_MONTH = /^\d{2}[/|.]\d{4}$/;
const TUI_EXP_SAFARI = /^\d{1,4}.\d{1,2}.\d{1,4}$/;
/**
 * @deprecated Use {@link https://maskito.dev/kit/date Date} from {@link https://github.com/taiga-family/maskito Maskito} instead
 * TODO: delete in v4.0
 * Correct expiration date text allowing only valid months
 * @internal
 *
 * @returns MM/YY
 */
export function tuiCreateAutoCorrectedExpirePipe() {
    return (conformedValue, { rawValue }) => {
        // Autofilled with MM/YYYY format
        if (TUI_EXP_YEAR_MONTH.test(rawValue)) {
            conformedValue = `${rawValue.slice(0, 2)}/${rawValue.slice(5)}`;
        }
        // Autofilled with Safari crazy format
        if (rawValue.length > 7 &&
            rawValue.length < 11 &&
            TUI_EXP_SAFARI.test(rawValue)) {
            const array = rawValue.split(TUI_NON_DIGIT_REGEXP);
            // TODO: investigate why the month is sometimes more than 2-length in safari
            const month = array[1].slice(2);
            const year = array.find(({ length }) => length === 4);
            conformedValue = `${'0'.repeat(2 - month.length)}${month}/${year ? year.slice(2) : ''}`;
        }
        const indexesOfPipedChars = [];
        const conformedValueArr = conformedValue.split('');
        if (parseInt(conformedValueArr[0], 10) > 1) {
            conformedValueArr[2] = '/';
            conformedValueArr[1] = conformedValueArr[0];
            conformedValueArr[0] = '0';
            indexesOfPipedChars.push(0);
        }
        return {
            value: conformedValueArr.join(''),
            indexesOfPipedChars,
        };
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLWF1dG8tY29ycmVjdGVkLWV4cGlyZS1waXBlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvYWRkb24tY29tbWVyY2UvdXRpbHMvY3JlYXRlLWF1dG8tY29ycmVjdGVkLWV4cGlyZS1waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxvQkFBb0IsRUFBeUIsTUFBTSxnQkFBZ0IsQ0FBQztBQUU1RSxNQUFNLGtCQUFrQixHQUFHLG1CQUFtQixDQUFDO0FBQy9DLE1BQU0sY0FBYyxHQUFHLDJCQUEyQixDQUFDO0FBRW5EOzs7Ozs7O0dBT0c7QUFDSCxNQUFNLFVBQVUsZ0NBQWdDO0lBQzVDLE9BQU8sQ0FBQyxjQUFjLEVBQUUsRUFBQyxRQUFRLEVBQUMsRUFBRSxFQUFFO1FBQ2xDLGlDQUFpQztRQUNqQyxJQUFJLGtCQUFrQixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUNuQyxjQUFjLEdBQUcsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7U0FDbkU7UUFFRCxzQ0FBc0M7UUFDdEMsSUFDSSxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUM7WUFDbkIsUUFBUSxDQUFDLE1BQU0sR0FBRyxFQUFFO1lBQ3BCLGNBQWMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQy9CO1lBQ0UsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1lBRW5ELDRFQUE0RTtZQUM1RSxNQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2hDLE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFDLE1BQU0sRUFBQyxFQUFFLEVBQUUsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFFcEQsY0FBYyxHQUFHLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEtBQUssSUFDcEQsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUMzQixFQUFFLENBQUM7U0FDTjtRQUVELE1BQU0sbUJBQW1CLEdBQWEsRUFBRSxDQUFDO1FBQ3pDLE1BQU0saUJBQWlCLEdBQUcsY0FBYyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUVuRCxJQUFJLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDeEMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBQzNCLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxHQUFHLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzVDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztZQUMzQixtQkFBbUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDL0I7UUFFRCxPQUFPO1lBQ0gsS0FBSyxFQUFFLGlCQUFpQixDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7WUFDakMsbUJBQW1CO1NBQ3RCLENBQUM7SUFDTixDQUFDLENBQUM7QUFDTixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtUVUlfTk9OX0RJR0lUX1JFR0VYUCwgVHVpVGV4dE1hc2tQaXBlSGFuZGxlcn0gZnJvbSAnQHRhaWdhLXVpL2NvcmUnO1xuXG5jb25zdCBUVUlfRVhQX1lFQVJfTU9OVEggPSAvXlxcZHsyfVsvfC5dXFxkezR9JC87XG5jb25zdCBUVUlfRVhQX1NBRkFSSSA9IC9eXFxkezEsNH0uXFxkezEsMn0uXFxkezEsNH0kLztcblxuLyoqXG4gKiBAZGVwcmVjYXRlZCBVc2Uge0BsaW5rIGh0dHBzOi8vbWFza2l0by5kZXYva2l0L2RhdGUgRGF0ZX0gZnJvbSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL3RhaWdhLWZhbWlseS9tYXNraXRvIE1hc2tpdG99IGluc3RlYWRcbiAqIFRPRE86IGRlbGV0ZSBpbiB2NC4wXG4gKiBDb3JyZWN0IGV4cGlyYXRpb24gZGF0ZSB0ZXh0IGFsbG93aW5nIG9ubHkgdmFsaWQgbW9udGhzXG4gKiBAaW50ZXJuYWxcbiAqXG4gKiBAcmV0dXJucyBNTS9ZWVxuICovXG5leHBvcnQgZnVuY3Rpb24gdHVpQ3JlYXRlQXV0b0NvcnJlY3RlZEV4cGlyZVBpcGUoKTogVHVpVGV4dE1hc2tQaXBlSGFuZGxlciB7XG4gICAgcmV0dXJuIChjb25mb3JtZWRWYWx1ZSwge3Jhd1ZhbHVlfSkgPT4ge1xuICAgICAgICAvLyBBdXRvZmlsbGVkIHdpdGggTU0vWVlZWSBmb3JtYXRcbiAgICAgICAgaWYgKFRVSV9FWFBfWUVBUl9NT05USC50ZXN0KHJhd1ZhbHVlKSkge1xuICAgICAgICAgICAgY29uZm9ybWVkVmFsdWUgPSBgJHtyYXdWYWx1ZS5zbGljZSgwLCAyKX0vJHtyYXdWYWx1ZS5zbGljZSg1KX1gO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQXV0b2ZpbGxlZCB3aXRoIFNhZmFyaSBjcmF6eSBmb3JtYXRcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgcmF3VmFsdWUubGVuZ3RoID4gNyAmJlxuICAgICAgICAgICAgcmF3VmFsdWUubGVuZ3RoIDwgMTEgJiZcbiAgICAgICAgICAgIFRVSV9FWFBfU0FGQVJJLnRlc3QocmF3VmFsdWUpXG4gICAgICAgICkge1xuICAgICAgICAgICAgY29uc3QgYXJyYXkgPSByYXdWYWx1ZS5zcGxpdChUVUlfTk9OX0RJR0lUX1JFR0VYUCk7XG5cbiAgICAgICAgICAgIC8vIFRPRE86IGludmVzdGlnYXRlIHdoeSB0aGUgbW9udGggaXMgc29tZXRpbWVzIG1vcmUgdGhhbiAyLWxlbmd0aCBpbiBzYWZhcmlcbiAgICAgICAgICAgIGNvbnN0IG1vbnRoID0gYXJyYXlbMV0uc2xpY2UoMik7XG4gICAgICAgICAgICBjb25zdCB5ZWFyID0gYXJyYXkuZmluZCgoe2xlbmd0aH0pID0+IGxlbmd0aCA9PT0gNCk7XG5cbiAgICAgICAgICAgIGNvbmZvcm1lZFZhbHVlID0gYCR7JzAnLnJlcGVhdCgyIC0gbW9udGgubGVuZ3RoKX0ke21vbnRofS8ke1xuICAgICAgICAgICAgICAgIHllYXIgPyB5ZWFyLnNsaWNlKDIpIDogJydcbiAgICAgICAgICAgIH1gO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgaW5kZXhlc09mUGlwZWRDaGFyczogbnVtYmVyW10gPSBbXTtcbiAgICAgICAgY29uc3QgY29uZm9ybWVkVmFsdWVBcnIgPSBjb25mb3JtZWRWYWx1ZS5zcGxpdCgnJyk7XG5cbiAgICAgICAgaWYgKHBhcnNlSW50KGNvbmZvcm1lZFZhbHVlQXJyWzBdLCAxMCkgPiAxKSB7XG4gICAgICAgICAgICBjb25mb3JtZWRWYWx1ZUFyclsyXSA9ICcvJztcbiAgICAgICAgICAgIGNvbmZvcm1lZFZhbHVlQXJyWzFdID0gY29uZm9ybWVkVmFsdWVBcnJbMF07XG4gICAgICAgICAgICBjb25mb3JtZWRWYWx1ZUFyclswXSA9ICcwJztcbiAgICAgICAgICAgIGluZGV4ZXNPZlBpcGVkQ2hhcnMucHVzaCgwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogY29uZm9ybWVkVmFsdWVBcnIuam9pbignJyksXG4gICAgICAgICAgICBpbmRleGVzT2ZQaXBlZENoYXJzLFxuICAgICAgICB9O1xuICAgIH07XG59XG4iXX0=