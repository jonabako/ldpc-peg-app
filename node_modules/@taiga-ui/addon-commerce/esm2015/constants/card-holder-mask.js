import { tuiCreateCorrectionMask } from '@taiga-ui/core';
const ALLOWED_REGEXP = /[A-Z]| /;
const MAP = {
    А: 'F',
    В: 'D',
    Г: 'U',
    Д: 'L',
    Е: 'T',
    З: 'P',
    И: 'B',
    Й: 'Q',
    К: 'R',
    Л: 'K',
    М: 'V',
    Н: 'Y',
    О: 'J',
    П: 'G',
    Р: 'H',
    С: 'C',
    Т: 'N',
    У: 'E',
    Ф: 'A',
    Ц: 'W',
    Ч: 'X',
    Ш: 'I',
    Щ: 'O',
    Ы: 'S',
    Ь: 'M',
    Я: 'Z',
};
// TODO: delete in v4.0
function toEnglishUppercaseLegacy(char) {
    const uppercase = char.toUpperCase();
    const result = ALLOWED_REGEXP.test(uppercase) ? uppercase : MAP[uppercase];
    return result || null;
}
function toEnglishUppercase(value) {
    return value
        .toUpperCase()
        .split('')
        .map(char => MAP[char] || char)
        .join('');
}
export const TUI_CARD_HOLDER_MASK = {
    mask: /^[a-z\s]+$/i,
    preprocessors: [
        ({ elementState, data }) => {
            const { value, selection } = elementState;
            return {
                elementState: {
                    selection,
                    value: toEnglishUppercase(value),
                },
                data: toEnglishUppercase(data),
            };
        },
    ],
};
/**
 * @deprecated Use {@link TUI_CARD_HOLDER_MASK} with {@link https://github.com/taiga-family/maskito Maskito}
 * TODO: delete in v4.0
 */
export const cardHolderMask = tuiCreateCorrectionMask(ALLOWED_REGEXP, toEnglishUppercaseLegacy);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZC1ob2xkZXItbWFzay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL2FkZG9uLWNvbW1lcmNlL2NvbnN0YW50cy9jYXJkLWhvbGRlci1tYXNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBQyx1QkFBdUIsRUFBeUIsTUFBTSxnQkFBZ0IsQ0FBQztBQUUvRSxNQUFNLGNBQWMsR0FBRyxTQUFTLENBQUM7QUFDakMsTUFBTSxHQUFHLEdBQTJCO0lBQ2hDLENBQUMsRUFBRSxHQUFHO0lBQ04sQ0FBQyxFQUFFLEdBQUc7SUFDTixDQUFDLEVBQUUsR0FBRztJQUNOLENBQUMsRUFBRSxHQUFHO0lBQ04sQ0FBQyxFQUFFLEdBQUc7SUFDTixDQUFDLEVBQUUsR0FBRztJQUNOLENBQUMsRUFBRSxHQUFHO0lBQ04sQ0FBQyxFQUFFLEdBQUc7SUFDTixDQUFDLEVBQUUsR0FBRztJQUNOLENBQUMsRUFBRSxHQUFHO0lBQ04sQ0FBQyxFQUFFLEdBQUc7SUFDTixDQUFDLEVBQUUsR0FBRztJQUNOLENBQUMsRUFBRSxHQUFHO0lBQ04sQ0FBQyxFQUFFLEdBQUc7SUFDTixDQUFDLEVBQUUsR0FBRztJQUNOLENBQUMsRUFBRSxHQUFHO0lBQ04sQ0FBQyxFQUFFLEdBQUc7SUFDTixDQUFDLEVBQUUsR0FBRztJQUNOLENBQUMsRUFBRSxHQUFHO0lBQ04sQ0FBQyxFQUFFLEdBQUc7SUFDTixDQUFDLEVBQUUsR0FBRztJQUNOLENBQUMsRUFBRSxHQUFHO0lBQ04sQ0FBQyxFQUFFLEdBQUc7SUFDTixDQUFDLEVBQUUsR0FBRztJQUNOLENBQUMsRUFBRSxHQUFHO0lBQ04sQ0FBQyxFQUFFLEdBQUc7Q0FDVCxDQUFDO0FBRUYsdUJBQXVCO0FBQ3ZCLFNBQVMsd0JBQXdCLENBQUMsSUFBWTtJQUMxQyxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDckMsTUFBTSxNQUFNLEdBQUcsY0FBYyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7SUFFM0UsT0FBTyxNQUFNLElBQUksSUFBSSxDQUFDO0FBQzFCLENBQUM7QUFFRCxTQUFTLGtCQUFrQixDQUFDLEtBQWE7SUFDckMsT0FBTyxLQUFLO1NBQ1AsV0FBVyxFQUFFO1NBQ2IsS0FBSyxDQUFDLEVBQUUsQ0FBQztTQUNULEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUM7U0FDOUIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2xCLENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBbUI7SUFDaEQsSUFBSSxFQUFFLGFBQWE7SUFDbkIsYUFBYSxFQUFFO1FBQ1gsQ0FBQyxFQUFDLFlBQVksRUFBRSxJQUFJLEVBQUMsRUFBRSxFQUFFO1lBQ3JCLE1BQU0sRUFBQyxLQUFLLEVBQUUsU0FBUyxFQUFDLEdBQUcsWUFBWSxDQUFDO1lBRXhDLE9BQU87Z0JBQ0gsWUFBWSxFQUFFO29CQUNWLFNBQVM7b0JBQ1QsS0FBSyxFQUFFLGtCQUFrQixDQUFDLEtBQUssQ0FBQztpQkFDbkM7Z0JBQ0QsSUFBSSxFQUFFLGtCQUFrQixDQUFDLElBQUksQ0FBQzthQUNqQyxDQUFDO1FBQ04sQ0FBQztLQUNKO0NBQ0osQ0FBQztBQUVGOzs7R0FHRztBQUNILE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBMkIsdUJBQXVCLENBQ3pFLGNBQWMsRUFDZCx3QkFBd0IsQ0FDM0IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7TWFza2l0b09wdGlvbnN9IGZyb20gJ0BtYXNraXRvL2NvcmUnO1xuaW1wb3J0IHt0dWlDcmVhdGVDb3JyZWN0aW9uTWFzaywgVHVpVGV4dE1hc2tMaXN0SGFuZGxlcn0gZnJvbSAnQHRhaWdhLXVpL2NvcmUnO1xuXG5jb25zdCBBTExPV0VEX1JFR0VYUCA9IC9bQS1aXXwgLztcbmNvbnN0IE1BUDogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHtcbiAgICDQkDogJ0YnLFxuICAgINCSOiAnRCcsXG4gICAg0JM6ICdVJyxcbiAgICDQlDogJ0wnLFxuICAgINCVOiAnVCcsXG4gICAg0Jc6ICdQJyxcbiAgICDQmDogJ0InLFxuICAgINCZOiAnUScsXG4gICAg0Jo6ICdSJyxcbiAgICDQmzogJ0snLFxuICAgINCcOiAnVicsXG4gICAg0J06ICdZJyxcbiAgICDQnjogJ0onLFxuICAgINCfOiAnRycsXG4gICAg0KA6ICdIJyxcbiAgICDQoTogJ0MnLFxuICAgINCiOiAnTicsXG4gICAg0KM6ICdFJyxcbiAgICDQpDogJ0EnLFxuICAgINCmOiAnVycsXG4gICAg0Kc6ICdYJyxcbiAgICDQqDogJ0knLFxuICAgINCpOiAnTycsXG4gICAg0Ks6ICdTJyxcbiAgICDQrDogJ00nLFxuICAgINCvOiAnWicsXG59O1xuXG4vLyBUT0RPOiBkZWxldGUgaW4gdjQuMFxuZnVuY3Rpb24gdG9FbmdsaXNoVXBwZXJjYXNlTGVnYWN5KGNoYXI6IHN0cmluZyk6IHN0cmluZyB8IG51bGwge1xuICAgIGNvbnN0IHVwcGVyY2FzZSA9IGNoYXIudG9VcHBlckNhc2UoKTtcbiAgICBjb25zdCByZXN1bHQgPSBBTExPV0VEX1JFR0VYUC50ZXN0KHVwcGVyY2FzZSkgPyB1cHBlcmNhc2UgOiBNQVBbdXBwZXJjYXNlXTtcblxuICAgIHJldHVybiByZXN1bHQgfHwgbnVsbDtcbn1cblxuZnVuY3Rpb24gdG9FbmdsaXNoVXBwZXJjYXNlKHZhbHVlOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiB2YWx1ZVxuICAgICAgICAudG9VcHBlckNhc2UoKVxuICAgICAgICAuc3BsaXQoJycpXG4gICAgICAgIC5tYXAoY2hhciA9PiBNQVBbY2hhcl0gfHwgY2hhcilcbiAgICAgICAgLmpvaW4oJycpO1xufVxuXG5leHBvcnQgY29uc3QgVFVJX0NBUkRfSE9MREVSX01BU0s6IE1hc2tpdG9PcHRpb25zID0ge1xuICAgIG1hc2s6IC9eW2Etelxcc10rJC9pLFxuICAgIHByZXByb2Nlc3NvcnM6IFtcbiAgICAgICAgKHtlbGVtZW50U3RhdGUsIGRhdGF9KSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7dmFsdWUsIHNlbGVjdGlvbn0gPSBlbGVtZW50U3RhdGU7XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZWxlbWVudFN0YXRlOiB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGlvbixcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRvRW5nbGlzaFVwcGVyY2FzZSh2YWx1ZSksXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkYXRhOiB0b0VuZ2xpc2hVcHBlcmNhc2UoZGF0YSksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgIF0sXG59O1xuXG4vKipcbiAqIEBkZXByZWNhdGVkIFVzZSB7QGxpbmsgVFVJX0NBUkRfSE9MREVSX01BU0t9IHdpdGgge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS90YWlnYS1mYW1pbHkvbWFza2l0byBNYXNraXRvfVxuICogVE9ETzogZGVsZXRlIGluIHY0LjBcbiAqL1xuZXhwb3J0IGNvbnN0IGNhcmRIb2xkZXJNYXNrOiBUdWlUZXh0TWFza0xpc3RIYW5kbGVyID0gdHVpQ3JlYXRlQ29ycmVjdGlvbk1hc2soXG4gICAgQUxMT1dFRF9SRUdFWFAsXG4gICAgdG9FbmdsaXNoVXBwZXJjYXNlTGVnYWN5LFxuKTtcbiJdfQ==