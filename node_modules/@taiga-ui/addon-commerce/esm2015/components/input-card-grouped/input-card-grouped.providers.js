import { inject } from '@angular/core';
import { WINDOW } from '@ng-web-apis/common';
import { TUI_CARD_CVC_TEXTS, TUI_CARD_EXPIRY_TEXTS, TUI_CARD_NUMBER_TEXTS, } from '@taiga-ui/addon-commerce/tokens';
import { tuiCreateTokenFromFactory, tuiTypedFromEvent } from '@taiga-ui/cdk';
import { TUI_MEDIA } from '@taiga-ui/core';
import { combineLatest, of } from 'rxjs';
import { map, startWith, switchMap } from 'rxjs/operators';
/**
 * InputCardGrouped texts
 */
export const TUI_INPUT_CARD_GROUPED_TEXTS = tuiCreateTokenFromFactory(() => {
    const win = inject(WINDOW);
    const cardNumberTexts = inject(TUI_CARD_NUMBER_TEXTS);
    const expiryTexts = inject(TUI_CARD_EXPIRY_TEXTS);
    const cvcTexts = inject(TUI_CARD_CVC_TEXTS);
    const { desktopSmall } = inject(TUI_MEDIA);
    const media = win.matchMedia(`screen and (min-width: ${(desktopSmall - 1) / 16}em)`);
    return tuiTypedFromEvent(media, 'change').pipe(startWith(null), switchMap(() => combineLatest([
        of(Number(media.matches)),
        cardNumberTexts,
        expiryTexts,
        cvcTexts,
    ])), map(([index, cardNumber, expiry, cvcTexts]) => ({
        cardNumberText: cardNumber[index],
        expiryText: expiry[index],
        cvcText: cvcTexts[index],
    })));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtY2FyZC1ncm91cGVkLnByb3ZpZGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FkZG9uLWNvbW1lcmNlL2NvbXBvbmVudHMvaW5wdXQtY2FyZC1ncm91cGVkL2lucHV0LWNhcmQtZ3JvdXBlZC5wcm92aWRlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLE1BQU0sRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNyQyxPQUFPLEVBQUMsTUFBTSxFQUFDLE1BQU0scUJBQXFCLENBQUM7QUFDM0MsT0FBTyxFQUNILGtCQUFrQixFQUNsQixxQkFBcUIsRUFDckIscUJBQXFCLEdBQ3hCLE1BQU0saUNBQWlDLENBQUM7QUFDekMsT0FBTyxFQUFDLHlCQUF5QixFQUFFLGlCQUFpQixFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzNFLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUN6QyxPQUFPLEVBQUMsYUFBYSxFQUFjLEVBQUUsRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUNuRCxPQUFPLEVBQUMsR0FBRyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQVF6RDs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLDRCQUE0QixHQUFHLHlCQUF5QixDQUVuRSxHQUFHLEVBQUU7SUFDSCxNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDM0IsTUFBTSxlQUFlLEdBQUcsTUFBTSxDQUFDLHFCQUFxQixDQUFDLENBQUM7SUFDdEQsTUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLHFCQUFxQixDQUFDLENBQUM7SUFDbEQsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLGtCQUFrQixDQUFDLENBQUM7SUFDNUMsTUFBTSxFQUFDLFlBQVksRUFBQyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUV6QyxNQUFNLEtBQUssR0FBRyxHQUFHLENBQUMsVUFBVSxDQUFDLDBCQUEwQixDQUFDLFlBQVksR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBRXJGLE9BQU8saUJBQWlCLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FDMUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUNmLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FDWCxhQUFhLENBQUM7UUFDVixFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN6QixlQUFlO1FBQ2YsV0FBVztRQUNYLFFBQVE7S0FDWCxDQUFDLENBQ0wsRUFDRCxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLFFBQVEsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQzVDLGNBQWMsRUFBRSxVQUFVLENBQUMsS0FBSyxDQUFDO1FBQ2pDLFVBQVUsRUFBRSxNQUFNLENBQUMsS0FBSyxDQUFDO1FBQ3pCLE9BQU8sRUFBRSxRQUFRLENBQUMsS0FBSyxDQUFDO0tBQzNCLENBQUMsQ0FBQyxDQUNOLENBQUM7QUFDTixDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7aW5qZWN0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7V0lORE9XfSBmcm9tICdAbmctd2ViLWFwaXMvY29tbW9uJztcbmltcG9ydCB7XG4gICAgVFVJX0NBUkRfQ1ZDX1RFWFRTLFxuICAgIFRVSV9DQVJEX0VYUElSWV9URVhUUyxcbiAgICBUVUlfQ0FSRF9OVU1CRVJfVEVYVFMsXG59IGZyb20gJ0B0YWlnYS11aS9hZGRvbi1jb21tZXJjZS90b2tlbnMnO1xuaW1wb3J0IHt0dWlDcmVhdGVUb2tlbkZyb21GYWN0b3J5LCB0dWlUeXBlZEZyb21FdmVudH0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge1RVSV9NRURJQX0gZnJvbSAnQHRhaWdhLXVpL2NvcmUnO1xuaW1wb3J0IHtjb21iaW5lTGF0ZXN0LCBPYnNlcnZhYmxlLCBvZn0gZnJvbSAncnhqcyc7XG5pbXBvcnQge21hcCwgc3RhcnRXaXRoLCBzd2l0Y2hNYXB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuZXhwb3J0IGludGVyZmFjZSBUdWlDYXJkR3JvdXBlZFRleHRzIHtcbiAgICByZWFkb25seSBjYXJkTnVtYmVyVGV4dDogc3RyaW5nO1xuICAgIHJlYWRvbmx5IGN2Y1RleHQ6IHN0cmluZztcbiAgICByZWFkb25seSBleHBpcnlUZXh0OiBzdHJpbmc7XG59XG5cbi8qKlxuICogSW5wdXRDYXJkR3JvdXBlZCB0ZXh0c1xuICovXG5leHBvcnQgY29uc3QgVFVJX0lOUFVUX0NBUkRfR1JPVVBFRF9URVhUUyA9IHR1aUNyZWF0ZVRva2VuRnJvbUZhY3Rvcnk8XG4gICAgT2JzZXJ2YWJsZTxUdWlDYXJkR3JvdXBlZFRleHRzPlxuPigoKSA9PiB7XG4gICAgY29uc3Qgd2luID0gaW5qZWN0KFdJTkRPVyk7XG4gICAgY29uc3QgY2FyZE51bWJlclRleHRzID0gaW5qZWN0KFRVSV9DQVJEX05VTUJFUl9URVhUUyk7XG4gICAgY29uc3QgZXhwaXJ5VGV4dHMgPSBpbmplY3QoVFVJX0NBUkRfRVhQSVJZX1RFWFRTKTtcbiAgICBjb25zdCBjdmNUZXh0cyA9IGluamVjdChUVUlfQ0FSRF9DVkNfVEVYVFMpO1xuICAgIGNvbnN0IHtkZXNrdG9wU21hbGx9ID0gaW5qZWN0KFRVSV9NRURJQSk7XG5cbiAgICBjb25zdCBtZWRpYSA9IHdpbi5tYXRjaE1lZGlhKGBzY3JlZW4gYW5kIChtaW4td2lkdGg6ICR7KGRlc2t0b3BTbWFsbCAtIDEpIC8gMTZ9ZW0pYCk7XG5cbiAgICByZXR1cm4gdHVpVHlwZWRGcm9tRXZlbnQobWVkaWEsICdjaGFuZ2UnKS5waXBlKFxuICAgICAgICBzdGFydFdpdGgobnVsbCksXG4gICAgICAgIHN3aXRjaE1hcCgoKSA9PlxuICAgICAgICAgICAgY29tYmluZUxhdGVzdChbXG4gICAgICAgICAgICAgICAgb2YoTnVtYmVyKG1lZGlhLm1hdGNoZXMpKSxcbiAgICAgICAgICAgICAgICBjYXJkTnVtYmVyVGV4dHMsXG4gICAgICAgICAgICAgICAgZXhwaXJ5VGV4dHMsXG4gICAgICAgICAgICAgICAgY3ZjVGV4dHMsXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgKSxcbiAgICAgICAgbWFwKChbaW5kZXgsIGNhcmROdW1iZXIsIGV4cGlyeSwgY3ZjVGV4dHNdKSA9PiAoe1xuICAgICAgICAgICAgY2FyZE51bWJlclRleHQ6IGNhcmROdW1iZXJbaW5kZXhdLFxuICAgICAgICAgICAgZXhwaXJ5VGV4dDogZXhwaXJ5W2luZGV4XSxcbiAgICAgICAgICAgIGN2Y1RleHQ6IGN2Y1RleHRzW2luZGV4XSxcbiAgICAgICAgfSkpLFxuICAgICk7XG59KTtcbiJdfQ==