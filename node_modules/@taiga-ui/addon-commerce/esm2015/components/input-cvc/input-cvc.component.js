import { ChangeDetectionStrategy, ChangeDetectorRef, Component, HostBinding, Inject, Input, Optional, Self, ViewChild, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AbstractTuiControl, tuiAsControl, tuiAsFocusableItemAccessor, } from '@taiga-ui/cdk';
import { TUI_DIGIT_REGEXP, TUI_TEXTFIELD_LABEL_OUTSIDE, TUI_TEXTFIELD_SIZE, TuiPrimitiveTextfieldComponent, } from '@taiga-ui/core';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core";
import * as i2 from "@taiga-ui/kit";
import * as i3 from "@maskito/angular";
import * as i4 from "@angular/forms";
export class TuiInputCVCComponent extends AbstractTuiControl {
    constructor(control, cdr, textfieldLabelOutside, textfieldSize) {
        super(control, cdr);
        this.textfieldLabelOutside = textfieldLabelOutside;
        this.textfieldSize = textfieldSize;
        this.autocompleteEnabled = false;
        this.hidden = false;
        this.exampleText = '000';
        this.maskOptions = {
            mask: new Array(3).fill(TUI_DIGIT_REGEXP),
        };
    }
    set length(length) {
        this.exampleText = '0'.repeat(length);
        this.maskOptions = {
            mask: new Array(length).fill(TUI_DIGIT_REGEXP),
        };
    }
    get size() {
        return this.textfieldSize.size;
    }
    get nativeFocusableElement() {
        var _a, _b;
        return (_b = (_a = this.input) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement) !== null && _b !== void 0 ? _b : null;
    }
    get focused() {
        return !!this.input && this.input.focused;
    }
    get autocomplete() {
        return this.autocompleteEnabled ? 'cc-csc' : 'off';
    }
    get computedPlaceholder() {
        return this.textfieldLabelOutside.labelOutside ? '' : this.exampleText;
    }
    onFocused(focused) {
        this.updateFocused(focused);
    }
    /** deprecated use 'value' setter */
    onValueChange(value) {
        this.value = value;
    }
    getFallbackValue() {
        return '';
    }
}
TuiInputCVCComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputCVCComponent, deps: [{ token: NgControl, optional: true, self: true }, { token: ChangeDetectorRef }, { token: TUI_TEXTFIELD_LABEL_OUTSIDE }, { token: TUI_TEXTFIELD_SIZE }], target: i0.ɵɵFactoryTarget.Component });
TuiInputCVCComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiInputCVCComponent, selector: "tui-input-cvc", inputs: { autocompleteEnabled: "autocompleteEnabled", hidden: "hidden", length: "length" }, host: { properties: { "attr.data-size": "this.size" } }, providers: [
        tuiAsFocusableItemAccessor(TuiInputCVCComponent),
        tuiAsControl(TuiInputCVCComponent),
    ], viewQueries: [{ propertyName: "input", first: true, predicate: TuiPrimitiveTextfieldComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: "<tui-primitive-textfield\n    tuiValueAccessor\n    class=\"t-input\"\n    [disabled]=\"disabled\"\n    [focusable]=\"focusable\"\n    [invalid]=\"computedInvalid\"\n    [maskito]=\"maskOptions\"\n    [nativeId]=\"nativeId\"\n    [pseudoActive]=\"pseudoActive\"\n    [pseudoFocus]=\"pseudoFocus\"\n    [pseudoHover]=\"pseudoHover\"\n    [readOnly]=\"readOnly\"\n    [(value)]=\"value\"\n    (copy.prevent)=\"(0)\"\n    (focusedChange)=\"onFocused($event)\"\n>\n    <ng-content></ng-content>\n    <input\n        inputmode=\"numeric\"\n        tuiTextfield\n        [autocomplete]=\"autocomplete\"\n        [class.t-input_hidden]=\"hidden\"\n        [placeholder]=\"computedPlaceholder\"\n    />\n</tui-primitive-textfield>\n", styles: [":host{display:block;max-width:11rem;border-radius:var(--tui-radius-m);text-align:left}.t-input{border-radius:inherit;text-align:inherit}.t-input_hidden{-webkit-text-security:disc}\n"], components: [{ type: i1.TuiPrimitiveTextfieldComponent, selector: "tui-primitive-textfield", inputs: ["editable", "filler", "iconCleaner", "readOnly", "invalid", "disabled", "prefix", "postfix", "value"], outputs: ["valueChange"] }, { type: i1.TuiTextfieldComponent, selector: "input[tuiTextfield], textarea[tuiTextfield]" }], directives: [{ type: i1.TuiPrimitiveTextfieldDirective, selector: "tui-primitive-textfield" }, { type: i2.TuiValueAccessorDirective, selector: "[tuiValueAccessor]" }, { type: i3.MaskitoDirective, selector: "[maskito]", inputs: ["maskito", "maskitoElement"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputCVCComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-input-cvc',
                    templateUrl: './input-cvc.template.html',
                    styleUrls: ['./input-cvc.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        tuiAsFocusableItemAccessor(TuiInputCVCComponent),
                        tuiAsControl(TuiInputCVCComponent),
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i4.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }, {
                    type: Inject,
                    args: [NgControl]
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: i1.TuiTextfieldLabelOutsideDirective, decorators: [{
                    type: Inject,
                    args: [TUI_TEXTFIELD_LABEL_OUTSIDE]
                }] }, { type: i1.TuiTextfieldSizeDirective, decorators: [{
                    type: Inject,
                    args: [TUI_TEXTFIELD_SIZE]
                }] }]; }, propDecorators: { input: [{
                type: ViewChild,
                args: [TuiPrimitiveTextfieldComponent]
            }], autocompleteEnabled: [{
                type: Input
            }], hidden: [{
                type: Input
            }], length: [{
                type: Input
            }], size: [{
                type: HostBinding,
                args: ['attr.data-size']
            }] } });
//# sourceMappingURL=data:application/json;base64,