import { __decorate } from "tslib";
import { ChangeDetectorRef, Directive, EventEmitter, Inject, Input, Optional, Output, Self, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AbstractTuiNullableControl, tuiPure, } from '@taiga-ui/cdk';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
export class AbstractTuiInputCard extends AbstractTuiNullableControl {
    constructor(control, cdr, options) {
        super(control, cdr);
        this.options = options;
        this.autocompleteEnabled = this.options.autocompleteEnabled;
        this.binChange = new EventEmitter();
    }
    get defaultIcon() {
        const paymentSystem = this.getPaymentSystem(this.card);
        return paymentSystem && this.options.icons[paymentSystem];
    }
    get paymentSystem() {
        return this.getPaymentSystem(this.card);
    }
    /** @deprecated remove in 4.0 */
    get icon() {
        return this.cardSrc || this.defaultIcon;
    }
    get autocomplete() {
        return this.autocompleteEnabled ? 'cc-number' : 'off';
    }
    /**
     * @deprecated: drop in v4.0
     * use {@link autocomplete}
     */
    get autocompleteCard() {
        return this.autocomplete;
    }
    get bin() {
        return this.card.length < 6 ? null : this.card.slice(0, 6);
    }
    getPaymentSystem(cardNumber) {
        return this.options.paymentSystemHandler(cardNumber);
    }
}
AbstractTuiInputCard.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: AbstractTuiInputCard, deps: "invalid", target: i0.ɵɵFactoryTarget.Directive });
AbstractTuiInputCard.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: AbstractTuiInputCard, inputs: { cardSrc: "cardSrc", autocompleteEnabled: "autocompleteEnabled" }, outputs: { binChange: "binChange" }, usesInheritance: true, ngImport: i0 });
__decorate([
    tuiPure
], AbstractTuiInputCard.prototype, "getPaymentSystem", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: AbstractTuiInputCard, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i1.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }, {
                    type: Inject,
                    args: [NgControl]
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: undefined }]; }, propDecorators: { cardSrc: [{
                type: Input
            }], autocompleteEnabled: [{
                type: Input
            }], binChange: [{
                type: Output
            }], getPaymentSystem: [] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJzdHJhY3QtaW5wdXQtY2FyZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FkZG9uLWNvbW1lcmNlL2NvbXBvbmVudHMvaW5wdXQtY2FyZC9hYnN0cmFjdC1pbnB1dC1jYXJkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0gsaUJBQWlCLEVBQ2pCLFNBQVMsRUFDVCxZQUFZLEVBQ1osTUFBTSxFQUNOLEtBQUssRUFDTCxRQUFRLEVBQ1IsTUFBTSxFQUNOLElBQUksR0FDUCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFFekMsT0FBTyxFQUNILDBCQUEwQixFQUkxQixPQUFPLEdBQ1YsTUFBTSxlQUFlLENBQUM7OztBQU12QixNQUFNLE9BQWdCLG9CQUlsQixTQUFRLDBCQUE2QjtJQVlyQyxZQUlJLE9BQXlCLEVBQ0UsR0FBc0IsRUFDOUIsT0FBZ0I7UUFFbkMsS0FBSyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQztRQUZELFlBQU8sR0FBUCxPQUFPLENBQVM7UUFYdkMsd0JBQW1CLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQztRQUc5QyxjQUFTLEdBQUcsSUFBSSxZQUFZLEVBQWlCLENBQUM7SUFXdkQsQ0FBQztJQU1ELElBQUksV0FBVztRQUNYLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFdkQsT0FBTyxhQUFhLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDOUQsQ0FBQztJQUVELElBQUksYUFBYTtRQUNiLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBRUQsZ0NBQWdDO0lBQ2hDLElBQUksSUFBSTtRQUNKLE9BQU8sSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDO0lBQzVDLENBQUM7SUFFRCxJQUFJLFlBQVk7UUFDWixPQUFPLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7SUFDMUQsQ0FBQztJQUVEOzs7T0FHRztJQUNILElBQUksZ0JBQWdCO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztJQUM3QixDQUFDO0lBRUQsSUFBSSxHQUFHO1FBQ0gsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQy9ELENBQUM7SUFHUyxnQkFBZ0IsQ0FBQyxVQUEwQjtRQUNqRCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsb0JBQW9CLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDekQsQ0FBQzs7a0hBakVpQixvQkFBb0I7c0dBQXBCLG9CQUFvQjtBQStEdEM7SUFEQyxPQUFPOzREQUdQOzRGQWpFaUIsb0JBQW9CO2tCQUR6QyxTQUFTOzswQkFrQkQsUUFBUTs7MEJBQ1IsSUFBSTs7MEJBQ0osTUFBTTsyQkFBQyxTQUFTOzswQkFFaEIsTUFBTTsyQkFBQyxpQkFBaUI7aUVBYjdCLE9BQU87c0JBRE4sS0FBSztnQkFJTixtQkFBbUI7c0JBRGxCLEtBQUs7Z0JBSUcsU0FBUztzQkFEakIsTUFBTTtnQkFrREcsZ0JBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICBEaXJlY3RpdmUsXG4gICAgRXZlbnRFbWl0dGVyLFxuICAgIEluamVjdCxcbiAgICBJbnB1dCxcbiAgICBPcHRpb25hbCxcbiAgICBPdXRwdXQsXG4gICAgU2VsZixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge05nQ29udHJvbH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHtUdWlQYXltZW50U3lzdGVtfSBmcm9tICdAdGFpZ2EtdWkvYWRkb24tY29tbWVyY2UvdHlwZXMnO1xuaW1wb3J0IHtcbiAgICBBYnN0cmFjdFR1aU51bGxhYmxlQ29udHJvbCxcbiAgICBUdWlBdXRvZmlsbEZpZWxkTmFtZSxcbiAgICBUdWlGb2N1c2FibGVFbGVtZW50QWNjZXNzb3IsXG4gICAgVHVpTmF0aXZlRm9jdXNhYmxlRWxlbWVudCxcbiAgICB0dWlQdXJlLFxufSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7UG9seW1vcnBoZXVzQ29udGVudH0gZnJvbSAnQHRpbmtvZmYvbmctcG9seW1vcnBoZXVzJztcblxuaW1wb3J0IHtUdWlJbnB1dENhcmRPcHRpb25zfSBmcm9tICcuL2lucHV0LWNhcmQub3B0aW9ucyc7XG5cbkBEaXJlY3RpdmUoKVxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFic3RyYWN0VHVpSW5wdXRDYXJkPFxuICAgICAgICBULFxuICAgICAgICBPcHRpb25zIGV4dGVuZHMgVHVpSW5wdXRDYXJkT3B0aW9ucyA9IFR1aUlucHV0Q2FyZE9wdGlvbnMsXG4gICAgPlxuICAgIGV4dGVuZHMgQWJzdHJhY3RUdWlOdWxsYWJsZUNvbnRyb2w8VD5cbiAgICBpbXBsZW1lbnRzIFR1aUZvY3VzYWJsZUVsZW1lbnRBY2Nlc3Nvclxue1xuICAgIEBJbnB1dCgpXG4gICAgY2FyZFNyYzogUG9seW1vcnBoZXVzQ29udGVudDtcblxuICAgIEBJbnB1dCgpXG4gICAgYXV0b2NvbXBsZXRlRW5hYmxlZCA9IHRoaXMub3B0aW9ucy5hdXRvY29tcGxldGVFbmFibGVkO1xuXG4gICAgQE91dHB1dCgpXG4gICAgcmVhZG9ubHkgYmluQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxzdHJpbmcgfCBudWxsPigpO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBPcHRpb25hbCgpXG4gICAgICAgIEBTZWxmKClcbiAgICAgICAgQEluamVjdChOZ0NvbnRyb2wpXG4gICAgICAgIGNvbnRyb2w6IE5nQ29udHJvbCB8IG51bGwsXG4gICAgICAgIEBJbmplY3QoQ2hhbmdlRGV0ZWN0b3JSZWYpIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgICAgIHByb3RlY3RlZCByZWFkb25seSBvcHRpb25zOiBPcHRpb25zLFxuICAgICkge1xuICAgICAgICBzdXBlcihjb250cm9sLCBjZHIpO1xuICAgIH1cblxuICAgIGFic3RyYWN0IGdldCBjYXJkKCk6IHN0cmluZztcblxuICAgIGFic3RyYWN0IGdldCBuYXRpdmVGb2N1c2FibGVFbGVtZW50KCk6IFR1aU5hdGl2ZUZvY3VzYWJsZUVsZW1lbnQgfCBudWxsO1xuXG4gICAgZ2V0IGRlZmF1bHRJY29uKCk6IHN0cmluZyB8IG51bGwge1xuICAgICAgICBjb25zdCBwYXltZW50U3lzdGVtID0gdGhpcy5nZXRQYXltZW50U3lzdGVtKHRoaXMuY2FyZCk7XG5cbiAgICAgICAgcmV0dXJuIHBheW1lbnRTeXN0ZW0gJiYgdGhpcy5vcHRpb25zLmljb25zW3BheW1lbnRTeXN0ZW1dO1xuICAgIH1cblxuICAgIGdldCBwYXltZW50U3lzdGVtKCk6IFR1aVBheW1lbnRTeXN0ZW0gfCBudWxsIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGF5bWVudFN5c3RlbSh0aGlzLmNhcmQpO1xuICAgIH1cblxuICAgIC8qKiBAZGVwcmVjYXRlZCByZW1vdmUgaW4gNC4wICovXG4gICAgZ2V0IGljb24oKTogUG9seW1vcnBoZXVzQ29udGVudCB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhcmRTcmMgfHwgdGhpcy5kZWZhdWx0SWNvbjtcbiAgICB9XG5cbiAgICBnZXQgYXV0b2NvbXBsZXRlKCk6IFR1aUF1dG9maWxsRmllbGROYW1lIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXV0b2NvbXBsZXRlRW5hYmxlZCA/ICdjYy1udW1iZXInIDogJ29mZic7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWQ6IGRyb3AgaW4gdjQuMFxuICAgICAqIHVzZSB7QGxpbmsgYXV0b2NvbXBsZXRlfVxuICAgICAqL1xuICAgIGdldCBhdXRvY29tcGxldGVDYXJkKCk6IFR1aUF1dG9maWxsRmllbGROYW1lIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXV0b2NvbXBsZXRlO1xuICAgIH1cblxuICAgIGdldCBiaW4oKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhcmQubGVuZ3RoIDwgNiA/IG51bGwgOiB0aGlzLmNhcmQuc2xpY2UoMCwgNik7XG4gICAgfVxuXG4gICAgQHR1aVB1cmVcbiAgICBwcm90ZWN0ZWQgZ2V0UGF5bWVudFN5c3RlbShjYXJkTnVtYmVyPzogc3RyaW5nIHwgbnVsbCk6IFR1aVBheW1lbnRTeXN0ZW0gfCBudWxsIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5wYXltZW50U3lzdGVtSGFuZGxlcihjYXJkTnVtYmVyKTtcbiAgICB9XG59XG4iXX0=