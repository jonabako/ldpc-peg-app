import { ChangeDetectionStrategy, ChangeDetectorRef, Component, HostBinding, Inject, Optional, Self, ViewChild, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { TUI_CARD_MASK } from '@taiga-ui/addon-commerce/constants';
import { tuiAsControl, tuiAsFocusableItemAccessor } from '@taiga-ui/cdk';
import { TUI_TEXTFIELD_SIZE, TuiPrimitiveTextfieldComponent, } from '@taiga-ui/core';
import { AbstractTuiInputCard } from './abstract-input-card';
import { TUI_INPUT_CARD_OPTIONS } from './input-card.options';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core";
import * as i2 from "@taiga-ui/kit";
import * as i3 from "@maskito/angular";
import * as i4 from "@angular/forms";
export class TuiInputCardComponent extends AbstractTuiInputCard {
    constructor(control, cdr, textfieldSize, options) {
        super(control, cdr, options);
        this.textfieldSize = textfieldSize;
        this.maskOptions = {
            mask: TUI_CARD_MASK,
        };
    }
    get size() {
        return this.textfieldSize.size;
    }
    get card() {
        var _a;
        return (_a = this.value) !== null && _a !== void 0 ? _a : '';
    }
    get nativeFocusableElement() {
        var _a, _b;
        return (_b = (_a = this.input) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement) !== null && _b !== void 0 ? _b : null;
    }
    get focused() {
        return !!this.input && this.input.focused;
    }
    onValueChange(value) {
        const parsed = value.split(' ').join('');
        const currentBin = this.bin;
        this.value = parsed;
        const newBin = this.bin;
        if (currentBin !== newBin) {
            this.binChange.emit(newBin);
        }
    }
    onFocused(focused) {
        this.updateFocused(focused);
    }
    writeValue(value) {
        const currentBin = this.bin;
        super.writeValue(value);
        const newBin = this.bin;
        if (currentBin !== newBin) {
            this.binChange.emit(newBin);
        }
    }
    getFallbackValue() {
        return '';
    }
}
TuiInputCardComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputCardComponent, deps: [{ token: NgControl, optional: true, self: true }, { token: ChangeDetectorRef }, { token: TUI_TEXTFIELD_SIZE }, { token: TUI_INPUT_CARD_OPTIONS }], target: i0.ɵɵFactoryTarget.Component });
TuiInputCardComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiInputCardComponent, selector: "tui-input-card", host: { properties: { "attr.data-size": "this.size" } }, providers: [
        tuiAsFocusableItemAccessor(TuiInputCardComponent),
        tuiAsControl(TuiInputCardComponent),
    ], viewQueries: [{ propertyName: "input", first: true, predicate: TuiPrimitiveTextfieldComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: "<tui-primitive-textfield\n    tuiValueAccessor\n    class=\"t-input\"\n    [disabled]=\"disabled\"\n    [focusable]=\"focusable\"\n    [invalid]=\"computedInvalid\"\n    [maskito]=\"maskOptions\"\n    [nativeId]=\"nativeId\"\n    [pseudoActive]=\"pseudoActive\"\n    [pseudoFocus]=\"pseudoFocus\"\n    [pseudoHover]=\"pseudoHover\"\n    [readOnly]=\"readOnly\"\n    [tuiTextfieldCustomContent]=\"cardSrc || (defaultIcon && logo)\"\n    [value]=\"card | maskito: maskOptions\"\n    (focusedChange)=\"onFocused($event)\"\n    (valueChange)=\"onValueChange($event)\"\n>\n    <ng-content></ng-content>\n    <ng-content\n        ngProjectAs=\"input\"\n        select=\"input\"\n    ></ng-content>\n</tui-primitive-textfield>\n<ng-template #logo>\n    <tui-svg\n        class=\"t-payment-system\"\n        [src]=\"defaultIcon\"\n    ></tui-svg>\n</ng-template>\n", styles: [":host{display:block;border-radius:var(--tui-radius-m);text-align:left}.t-input{border-radius:inherit;text-align:inherit}.t-payment-system{width:2rem;height:2rem;color:#1434cb}\n"], components: [{ type: i1.TuiPrimitiveTextfieldComponent, selector: "tui-primitive-textfield", inputs: ["editable", "filler", "iconCleaner", "readOnly", "invalid", "disabled", "prefix", "postfix", "value"], outputs: ["valueChange"] }, { type: i1.TuiSvgComponent, selector: "tui-svg", inputs: ["src"] }], directives: [{ type: i1.TuiPrimitiveTextfieldDirective, selector: "tui-primitive-textfield" }, { type: i2.TuiValueAccessorDirective, selector: "[tuiValueAccessor]" }, { type: i3.MaskitoDirective, selector: "[maskito]", inputs: ["maskito", "maskitoElement"] }, { type: i1.TuiTextfieldCustomContentDirective, selector: "[tuiTextfieldCustomContent]", inputs: ["tuiTextfieldCustomContent"] }], pipes: { "maskito": i3.MaskitoPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputCardComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-input-card',
                    templateUrl: './input-card.template.html',
                    styleUrls: ['./input-card.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        tuiAsFocusableItemAccessor(TuiInputCardComponent),
                        tuiAsControl(TuiInputCardComponent),
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i4.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }, {
                    type: Inject,
                    args: [NgControl]
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: i1.TuiTextfieldSizeDirective, decorators: [{
                    type: Inject,
                    args: [TUI_TEXTFIELD_SIZE]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_INPUT_CARD_OPTIONS]
                }] }]; }, propDecorators: { input: [{
                type: ViewChild,
                args: [TuiPrimitiveTextfieldComponent]
            }], size: [{
                type: HostBinding,
                args: ['attr.data-size']
            }] } });
//# sourceMappingURL=data:application/json;base64,