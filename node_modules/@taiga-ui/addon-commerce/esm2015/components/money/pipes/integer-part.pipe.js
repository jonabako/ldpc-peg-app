import { Inject, Pipe } from '@angular/core';
import { tuiRoundWith } from '@taiga-ui/cdk';
import { TUI_NUMBER_FORMAT, tuiFormatNumber, } from '@taiga-ui/core';
import * as i0 from "@angular/core";
export class TuiIntegerPartPipe {
    constructor(numberFormat) {
        this.numberFormat = numberFormat;
    }
    transform(value, precision = 2) {
        const rounded = tuiRoundWith({
            value: Math.abs(Number(value)),
            precision,
            method: this.numberFormat.rounding,
        });
        return tuiFormatNumber(rounded, Object.assign(Object.assign({}, this.numberFormat), { decimalLimit: 0, rounding: 'truncate' }));
    }
}
TuiIntegerPartPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiIntegerPartPipe, deps: [{ token: TUI_NUMBER_FORMAT }], target: i0.ɵɵFactoryTarget.Pipe });
TuiIntegerPartPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiIntegerPartPipe, name: "tuiIntegerPart" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiIntegerPartPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'tuiIntegerPart' }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_NUMBER_FORMAT]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWdlci1wYXJ0LnBpcGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hZGRvbi1jb21tZXJjZS9jb21wb25lbnRzL21vbmV5L3BpcGVzL2ludGVnZXItcGFydC5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxNQUFNLEVBQUUsSUFBSSxFQUFnQixNQUFNLGVBQWUsQ0FBQztBQUMxRCxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFDSCxpQkFBaUIsRUFDakIsZUFBZSxHQUVsQixNQUFNLGdCQUFnQixDQUFDOztBQUd4QixNQUFNLE9BQU8sa0JBQWtCO0lBQzNCLFlBQ2dELFlBQXFDO1FBQXJDLGlCQUFZLEdBQVosWUFBWSxDQUF5QjtJQUNsRixDQUFDO0lBRUosU0FBUyxDQUFDLEtBQWEsRUFBRSxTQUFTLEdBQUcsQ0FBQztRQUNsQyxNQUFNLE9BQU8sR0FBRyxZQUFZLENBQUM7WUFDekIsS0FBSyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzlCLFNBQVM7WUFDVCxNQUFNLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRO1NBQ3JDLENBQUMsQ0FBQztRQUVILE9BQU8sZUFBZSxDQUFDLE9BQU8sa0NBQ3ZCLElBQUksQ0FBQyxZQUFZLEtBQ3BCLFlBQVksRUFBRSxDQUFDLEVBQ2YsUUFBUSxFQUFFLFVBQVUsSUFDdEIsQ0FBQztJQUNQLENBQUM7O2dIQWpCUSxrQkFBa0Isa0JBRWYsaUJBQWlCOzhHQUZwQixrQkFBa0I7NEZBQWxCLGtCQUFrQjtrQkFEOUIsSUFBSTttQkFBQyxFQUFDLElBQUksRUFBRSxnQkFBZ0IsRUFBQzs7MEJBR3JCLE1BQU07MkJBQUMsaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3QsIFBpcGUsIFBpcGVUcmFuc2Zvcm19IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHt0dWlSb3VuZFdpdGh9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtcbiAgICBUVUlfTlVNQkVSX0ZPUk1BVCxcbiAgICB0dWlGb3JtYXROdW1iZXIsXG4gICAgVHVpTnVtYmVyRm9ybWF0U2V0dGluZ3MsXG59IGZyb20gJ0B0YWlnYS11aS9jb3JlJztcblxuQFBpcGUoe25hbWU6ICd0dWlJbnRlZ2VyUGFydCd9KVxuZXhwb3J0IGNsYXNzIFR1aUludGVnZXJQYXJ0UGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KFRVSV9OVU1CRVJfRk9STUFUKSBwcml2YXRlIHJlYWRvbmx5IG51bWJlckZvcm1hdDogVHVpTnVtYmVyRm9ybWF0U2V0dGluZ3MsXG4gICAgKSB7fVxuXG4gICAgdHJhbnNmb3JtKHZhbHVlOiBudW1iZXIsIHByZWNpc2lvbiA9IDIpOiBzdHJpbmcge1xuICAgICAgICBjb25zdCByb3VuZGVkID0gdHVpUm91bmRXaXRoKHtcbiAgICAgICAgICAgIHZhbHVlOiBNYXRoLmFicyhOdW1iZXIodmFsdWUpKSxcbiAgICAgICAgICAgIHByZWNpc2lvbixcbiAgICAgICAgICAgIG1ldGhvZDogdGhpcy5udW1iZXJGb3JtYXQucm91bmRpbmcsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB0dWlGb3JtYXROdW1iZXIocm91bmRlZCwge1xuICAgICAgICAgICAgLi4udGhpcy5udW1iZXJGb3JtYXQsXG4gICAgICAgICAgICBkZWNpbWFsTGltaXQ6IDAsXG4gICAgICAgICAgICByb3VuZGluZzogJ3RydW5jYXRlJyxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIl19