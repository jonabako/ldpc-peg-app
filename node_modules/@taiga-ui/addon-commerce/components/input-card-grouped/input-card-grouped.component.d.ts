import { ChangeDetectorRef, ElementRef, EventEmitter } from '@angular/core';
import { NgControl } from '@angular/forms';
import { MaskitoOptions } from '@maskito/core';
import { AbstractTuiInputCard } from '@taiga-ui/addon-commerce/components/input-card';
import { TuiCard } from '@taiga-ui/addon-commerce/interfaces';
import { TuiCodeCVCLength } from '@taiga-ui/addon-commerce/types';
import { TuiAutofillFieldName, TuiFocusableElementAccessor } from '@taiga-ui/cdk';
import { TuiBrightness, TuiCommonIcons, TuiDataListComponent, TuiDataListHost, TuiTextfieldController } from '@taiga-ui/core';
import { TuiArrowOptions } from '@taiga-ui/kit';
import { PolymorpheusContent } from '@tinkoff/ng-polymorpheus';
import { Observable } from 'rxjs';
import { TuiInputCardGroupedOptions } from './input-card-grouped.options';
import { TuiCardGroupedTexts } from './input-card-grouped.providers';
import * as i0 from "@angular/core";
export declare class TuiInputCardGroupedComponent extends AbstractTuiInputCard<TuiCard, TuiInputCardGroupedOptions> implements TuiFocusableElementAccessor, TuiDataListHost<Partial<TuiCard>> {
    private readonly el;
    readonly mode$: Observable<TuiBrightness | null>;
    readonly cardGroupedTexts$: Observable<TuiCardGroupedTexts>;
    readonly controller: TuiTextfieldController;
    readonly icons: TuiCommonIcons;
    readonly arrowOptions: TuiArrowOptions;
    private readonly inputCard?;
    private readonly cardNumberAutofocusRef?;
    private readonly inputExpire?;
    private readonly expireCardAutofocusRef?;
    private readonly inputCVC?;
    private readonly cvcCardAutofocusRef?;
    private expireInert;
    exampleText: string;
    cardValidator: import("@taiga-ui/cdk").TuiBooleanHandler<string>;
    set codeLength(length: TuiCodeCVCLength);
    readonly autofilledChange: EventEmitter<boolean>;
    readonly dropdown: PolymorpheusContent;
    readonly datalist?: TuiDataListComponent<TuiCard>;
    exampleTextCVC: string;
    cvcHidden: boolean;
    maskCVC: MaskitoOptions;
    readonly maskCard: MaskitoOptions;
    readonly maskExpire: MaskitoOptions;
    open: boolean;
    constructor(control: NgControl | null, cdr: ChangeDetectorRef, el: ElementRef<HTMLElement>, mode$: Observable<TuiBrightness | null>, cardGroupedTexts$: Observable<TuiCardGroupedTexts>, controller: TuiTextfieldController, icons: TuiCommonIcons, arrowOptions: TuiArrowOptions, options: TuiInputCardGroupedOptions);
    get nativeFocusableElement(): HTMLInputElement | null;
    get focused(): boolean;
    get appearance(): string;
    get card(): string;
    get expire(): string;
    get cvc(): string;
    get hasCleaner(): boolean;
    get hasDropdown(): boolean;
    get placeholderRaised(): boolean;
    get hasCardNumber(): boolean;
    get idCard(): string;
    get idExpire(): string;
    get idCVC(): string;
    get isCardCollapsed(): boolean;
    get autocompleteExpire(): TuiAutofillFieldName;
    get autocompleteCVC(): TuiAutofillFieldName;
    get tailLength(): number;
    get name(): 'ccexpiryyear' | null;
    get cardPrefilled(): boolean;
    get cvcPrefilled(): boolean;
    get cardFocusable(): boolean;
    get expireFocusable(): boolean;
    get cvcFocusable(): boolean;
    get masked(): string;
    private get expireSelectionStart();
    onEsc(): void;
    onArrow(element: HTMLElement, step: number): void;
    handleOption(option: Partial<TuiCard>): void;
    onCardChange(card: string): void;
    onExpireChange(expire: string): void;
    onCVCChange(cvc: string): void;
    transform({ offsetWidth }: HTMLSpanElement): string;
    onActiveZoneChange(active: boolean): void;
    onMouseDown(event: MouseEvent): void;
    onScroll({ currentTarget }: Event): void;
    clear(): void;
    toggle(): void;
    writeValue(value: TuiCard | null): void;
    /** Public API for manual focus management */
    focusCard(): void;
    focusExpire(): void;
    focusCVC(): void;
    private get cardFocused();
    private get hasExtraSpace();
    private isFocusable;
    private updateBin;
    private updateProperty;
    private focusInput;
    static ɵfac: i0.ɵɵFactoryDeclaration<TuiInputCardGroupedComponent, [{ optional: true; self: true; }, null, null, null, null, null, null, null, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TuiInputCardGroupedComponent, "tui-input-card-grouped", never, { "exampleText": "exampleText"; "cardValidator": "cardValidator"; "codeLength": "codeLength"; }, { "autofilledChange": "autofilledChange"; }, ["dropdown", "datalist"], never>;
}
