import * as i0 from '@angular/core';
import { Component, ChangeDetectionStrategy, Inject, Input, HostBinding, NgModule, ElementRef, forwardRef, TemplateRef, ViewChild, ContentChild, HostListener, EventEmitter, Directive, Output, Pipe, Renderer2, ChangeDetectorRef, Self, ContentChildren, Optional, InjectionToken, ViewEncapsulation } from '@angular/core';
import { TUI_DOC_EXAMPLE_MARKDOWN_CODE_PROCESSOR, TUI_DOC_DEMO_TEXTS, TUI_DOC_URL_STATE_HANDLER, TUI_DOC_TYPE_REFERENCE_PARSER, TUI_DOC_TYPE_REFERENCE_HANDLER, TUI_DOC_DOCUMENTATION_TEXTS, TUI_DOC_EXCLUDED_PROPERTIES, TUI_DOC_EXAMPLE_TEXTS, TUI_DOC_CODE_EDITOR, TUI_DOC_EXAMPLE_CONTENT_PROCESSOR, TUI_DOC_CODE_ACTIONS, TUI_DOC_TITLE, TUI_DOC_PAGES, TUI_DOC_SEARCH_TEXT, TUI_DOC_PAGE_LOADED, TUI_DOC_ICONS, TUI_DOC_LOGO, TUI_DOC_MENU_TEXT, TUI_DOC_SEE_ALSO_TEXT, TUI_DOC_MAP_PAGES, TUI_DOC_SOURCE_CODE, TUI_DOC_SOURCE_CODE_TEXT, TUI_DOC_SEE_ALSO, TUI_DOC_DEFAULT_TABS } from '@taiga-ui/addon-doc/tokens';
import { tuiRawLoad, tuiCoerceValueIsTrue, tuiInspectAny, tuiCoerceValue, tuiRawLoadRecord, tuiTransliterateKeyboardLayout } from '@taiga-ui/addon-doc/utils';
import * as i10 from 'rxjs';
import { BehaviorSubject, Subject, timer, merge, combineLatest } from 'rxjs';
import { switchMap, map, startWith, takeUntil, filter, mergeMap, take, distinctUntilChanged, shareReplay } from 'rxjs/operators';
import * as i2 from '@taiga-ui/core';
import { TuiSvgModule, TuiButtonModule, TuiModeDirective, TuiLinkModule, TuiExpandModule, TuiGroupModule, TuiTooltipModule, TuiModeModule, TuiDataListModule, TuiTextfieldControllerModule, TuiHintModule, TuiAlertService, TuiPrimitiveTextfieldModule, TuiDropdownModule, TuiNotificationModule, TuiLoaderModule, TUI_COMMON_ICONS, TuiHostedDropdownModule, TuiScrollbarModule, tuiCapitalizeFirstLetter, TuiFlagPipe, TuiFlagPipeModule, TuiThemeNightModule, TuiRootModule, TuiDialogModule, TuiAlertModule } from '@taiga-ui/core';
import * as i4 from '@angular/common';
import { CommonModule, Location as Location$1, DOCUMENT } from '@angular/common';
import * as i3 from 'ngx-highlightjs';
import { HighlightModule } from 'ngx-highlightjs';
import * as i4$1 from '@angular/cdk/clipboard';
import { ClipboardModule, Clipboard } from '@angular/cdk/clipboard';
import { __decorate } from 'tslib';
import * as i6 from '@taiga-ui/cdk';
import { ALWAYS_FALSE_HANDLER, TuiDestroyService, tuiPure, tuiToInteger, tuiClamp, tuiPx, tuiCleanObject, TUI_IS_MOBILE, TuiResizeableDirective, TuiResizerModule, tuiIsNumber, tuiRgbToHex, TUI_FOCUSABLE_ITEM_ACCESSOR, TUI_IS_E2E, tuiIsString, EMPTY_QUERY, tuiQueryListChanges, tuiWatch, tuiHexToRgb, TuiFilterPipeModule, tuiCreateToken, tuiProvideOptions, TuiMapperPipeModule, tuiIsPresent, tuiControlValue, tuiUniqBy, TuiActiveZoneModule, TuiLetModule, TuiAutoFocusModule, TuiSwipeService, TuiReplacePipeModule } from '@taiga-ui/cdk';
import * as i1 from '@taiga-ui/kit';
import { TUI_COPY_TEXTS, TUI_ARROW_OPTIONS, TuiSelectModule, TuiRadioBlockModule, TuiCheckboxLabeledModule, TuiDataListWrapperModule, TuiBadgeModule, TuiToggleModule, TuiInputNumberModule, TuiTabsModule, TuiInputModule, TuiAccordionModule, TuiTagModule } from '@taiga-ui/kit';
import * as i5 from '@angular/forms';
import { FormGroup, ReactiveFormsModule, FormsModule, FormControl } from '@angular/forms';
import * as i7 from '@angular/router';
import { UrlSerializer, RouterModule, ActivatedRoute, Router, NavigationEnd, Scroll } from '@angular/router';
import { trigger, transition, style, animate } from '@angular/animations';
import { LOCATION } from '@ng-web-apis/common';
import { TUI_EXAMPLE_PRIMARY_FILE_NAME } from '@taiga-ui/addon-doc/interfaces';
import * as i5$1 from '@tinkoff/ng-polymorpheus';
import { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';
import * as i9 from '@angular/platform-browser';
import { Title } from '@angular/platform-browser';
import * as i4$2 from '@taiga-ui/addon-mobile';
import { TuiSidebarDirective, TuiSidebarModule } from '@taiga-ui/addon-mobile';
import * as i8 from '@taiga-ui/addon-doc/directives';
import { TuiScrollIntoViewLinkModule } from '@taiga-ui/addon-doc/directives';
import * as i5$2 from '@taiga-ui/i18n';
import { TuiCountryIsoCode, TuiLanguageSwitcher } from '@taiga-ui/i18n';
import * as i6$1 from '@taiga-ui/addon-doc/services';
import { TuiThemeService, TuiThemeNightService } from '@taiga-ui/addon-doc/services';

class TuiDocCodeComponent {
    constructor(markdownCodeProcessor) {
        this.markdownCodeProcessor = markdownCodeProcessor;
        this.rawLoader$$ = new BehaviorSubject('');
        this.filename = '';
        this.copy$ = new Subject();
        this.icon$ = this.copy$.pipe(switchMap(() => timer(2000).pipe(map(() => 'tuiIconCopyLarge'), startWith('tuiIconCheckLarge'))));
        this.processor$ = this.rawLoader$$.pipe(switchMap(tuiRawLoad), map((value) => this.markdownCodeProcessor(value)));
    }
    set code(code) {
        this.rawLoader$$.next(code);
    }
    get hasFilename() {
        return !!this.filename;
    }
}
TuiDocCodeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocCodeComponent, deps: [{ token: TUI_DOC_EXAMPLE_MARKDOWN_CODE_PROCESSOR }], target: i0.ɵɵFactoryTarget.Component });
TuiDocCodeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiDocCodeComponent, selector: "tui-doc-code", inputs: { filename: "filename", code: "code" }, host: { properties: { "class._has-filename": "this.hasFilename" } }, ngImport: i0, template: "<p\n    *ngIf=\"filename\"\n    class=\"t-header\"\n>\n    {{ filename }}\n</p>\n<pre\n    *ngFor=\"let content of processor$ | async\"\n    class=\"t-code\"\n>\n    <code [lineNumbers]=\"true\" [highlight]=\"content\"></code>\n    <div class=\"t-code-actions\">\n        <button\n            tuiIconButton\n            appearance=\"icon\"\n            size=\"xs\"\n            class=\"t-copy-button\"\n            [icon]=\"(icon$ | async) || 'tuiIconCopyLarge'\"\n            [cdkCopyToClipboard]=\"content\"\n            (click)=\"copy$.next()\"\n        >\n        </button>\n        <ng-content></ng-content>\n    </div>\n</pre>\n", styles: [":host{display:block}.t-header{font:var(--tui-font-text-s);font-weight:bold}.t-header+.t-code{border-radius:.25rem}.t-code{position:relative;margin:0;white-space:normal;outline:1px solid var(--tui-base-03)}.t-code ::ng-deep .hljs-ln{width:-webkit-max-content;width:max-content}.t-code+.t-code{margin-top:1rem}.t-code-actions{position:absolute;top:.75rem;right:.75rem;display:flex;justify-content:center;align-items:center;flex-direction:row-reverse}:host-context(tui-root._mobile) .t-code-actions{padding:.3125rem;border-radius:.25rem;border:1px solid var(--tui-base-04)}.t-copy-button::ng-deep+*:not(:empty){margin-right:.375rem}.hljs:not(:empty){font:var(--tui-font-text-m);font-size:.875rem;padding:1.5rem 2rem;font-family:monospace;word-wrap:break-word;white-space:pre-wrap}@media all and (-webkit-min-device-pixel-ratio: 0) and (min-resolution: .001dpcm){.hljs:not(:empty)::-webkit-scrollbar,.hljs:not(:empty)::-webkit-scrollbar-thumb{width:1rem;height:1rem;border-radius:6.25rem;background-clip:padding-box;border:.375rem solid transparent}.hljs:not(:empty)::-webkit-scrollbar{background-color:transparent}.hljs:not(:empty)::-webkit-scrollbar-thumb{background-color:var(--tui-clear-hover)}.hljs:not(:empty)::-webkit-scrollbar-thumb:hover{background-color:var(--tui-clear-active)}.hljs:not(:empty)::-webkit-scrollbar-thumb:active{background-color:var(--tui-text-03)}}:host-context(tui-root._mobile) .hljs:not(:empty){padding:1rem}.t-code-actions,.hljs:not(:empty){background:var(--tui-base-01)}@supports (background: color-mix(in srgb,var(--tui-base-01),#222 2%)){.t-code-actions,.hljs:not(:empty){background:color-mix(in srgb,var(--tui-base-01),#222 2%)}}\n"], components: [{ type: i2.TuiButtonComponent, selector: "button[tuiButton], button[tuiIconButton], a[tuiButton], a[tuiIconButton]", inputs: ["appearance", "disabled", "icon", "iconRight", "shape", "showLoader", "size"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3.Highlight, selector: "[highlight]", inputs: ["highlight", "languages", "lineNumbers"], outputs: ["highlighted"] }, { type: i4$1.CdkCopyToClipboard, selector: "[cdkCopyToClipboard]", inputs: ["cdkCopyToClipboard", "cdkCopyToClipboardAttempts"], outputs: ["cdkCopyToClipboardCopied"] }], pipes: { "async": i4.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocCodeComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-doc-code',
                    templateUrl: './code.template.html',
                    styleUrls: ['./code.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_DOC_EXAMPLE_MARKDOWN_CODE_PROCESSOR]
                }] }]; }, propDecorators: { filename: [{
                type: Input
            }], code: [{
                type: Input
            }], hasFilename: [{
                type: HostBinding,
                args: ['class._has-filename']
            }] } });

class TuiDocCodeModule {
}
TuiDocCodeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocCodeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiDocCodeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocCodeModule, declarations: [TuiDocCodeComponent], imports: [CommonModule,
        TuiSvgModule,
        HighlightModule,
        TuiButtonModule,
        ClipboardModule], exports: [TuiDocCodeComponent] });
TuiDocCodeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocCodeModule, imports: [[
            CommonModule,
            TuiSvgModule,
            HighlightModule,
            TuiButtonModule,
            ClipboardModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocCodeModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        TuiSvgModule,
                        HighlightModule,
                        TuiButtonModule,
                        ClipboardModule,
                    ],
                    declarations: [TuiDocCodeComponent],
                    exports: [TuiDocCodeComponent],
                }]
        }] });

const COPIED_TIMEOUT = 1500;
class TuiDocCopyComponent {
    constructor(texts$) {
        this.texts$ = texts$;
        this.copy$ = new Subject();
    }
    get copied$() {
        return this.copy$.pipe(switchMap(() => timer(COPIED_TIMEOUT).pipe(map(ALWAYS_FALSE_HANDLER), startWith(true))));
    }
    onClick() {
        this.copy$.next();
    }
}
TuiDocCopyComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocCopyComponent, deps: [{ token: TUI_COPY_TEXTS }], target: i0.ɵɵFactoryTarget.Component });
TuiDocCopyComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiDocCopyComponent, selector: "tui-doc-copy", providers: [TuiDestroyService], ngImport: i0, template: "<button\n    *ngIf=\"texts$ | async as texts\"\n    appearance=\"\"\n    size=\"s\"\n    tuiButton\n    type=\"button\"\n    class=\"t-copy\"\n    [title]=\"texts[0]\"\n    (click)=\"onClick()\"\n>\n    <span\n        class=\"t-content\"\n        [class.t-content_moved]=\"copied$ | async\"\n    >\n        <span\n            class=\"t-initial\"\n            [attr.data-text]=\"texts[0]\"\n        >\n            <ng-content></ng-content>\n        </span>\n        {{ texts[1] }}\n    </span>\n</button>\n", styles: [":host{position:relative;display:inline-block;vertical-align:middle;border-radius:var(--tui-radius-m)}.t-copy{transition-property:background;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;width:100%;color:var(--tui-text-01);background:var(--tui-base-01);overflow:hidden}.t-copy:hover{background:var(--tui-base-02)}.t-initial{white-space:nowrap}.t-initial:empty:before{content:attr(data-text)}.t-content{transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;display:flex;flex-direction:column;transform:translateY(1rem);text-align:center;line-height:2rem}.t-content_moved{transform:translateY(-1rem)}\n"], components: [{ type: i2.TuiButtonComponent, selector: "button[tuiButton], button[tuiIconButton], a[tuiButton], a[tuiIconButton]", inputs: ["appearance", "disabled", "icon", "iconRight", "shape", "showLoader", "size"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i4.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiPure
], TuiDocCopyComponent.prototype, "copied$", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocCopyComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-doc-copy',
                    templateUrl: './copy.template.html',
                    styleUrls: ['./copy.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [TuiDestroyService],
                }]
        }], ctorParameters: function () { return [{ type: i10.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_COPY_TEXTS]
                }] }]; }, propDecorators: { copied$: [] } });

class TuiDocCopyModule {
}
TuiDocCopyModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocCopyModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiDocCopyModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocCopyModule, declarations: [TuiDocCopyComponent], imports: [CommonModule, TuiButtonModule], exports: [TuiDocCopyComponent] });
TuiDocCopyModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocCopyModule, imports: [[CommonModule, TuiButtonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocCopyModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, TuiButtonModule],
                    declarations: [TuiDocCopyComponent],
                    exports: [TuiDocCopyComponent],
                }]
        }] });

const MIN_WIDTH = 160;
class TuiDocDemoComponent {
    constructor(options, isMobile, el, locationRef, urlSerializer, texts, urlStateHandler) {
        var _a, _b;
        this.options = options;
        this.isMobile = isMobile;
        this.el = el;
        this.locationRef = locationRef;
        this.urlSerializer = urlSerializer;
        this.texts = texts;
        this.urlStateHandler = urlStateHandler;
        this.control = null;
        this.sticky = true;
        this.template = null;
        this.updateOnVariants = ['change', 'blur', 'submit'];
        this.updateOn = this.params.updateOn || this.updateOnVariants[0];
        this.opaque = tuiCoerceValueIsTrue((_a = this.params.sandboxOpaque) !== null && _a !== void 0 ? _a : true);
        this.expanded = tuiCoerceValueIsTrue((_b = this.params.sandboxExpanded) !== null && _b !== void 0 ? _b : false);
        this.mode = this.params.tuiMode || null;
        this.sandboxWidth = tuiToInteger(this.params.sandboxWidth);
        this.change$ = new Subject();
        this.items = ['onLight', 'onDark'];
    }
    onResize() {
        this.updateWidth();
        this.onMouseUp();
    }
    onMouseUp() {
        this.updateUrl({ sandboxWidth: this.sandboxWidth });
    }
    ngOnInit() {
        this.createForm();
        this.updateWidth(this.sandboxWidth + this.delta);
    }
    onModeChange(mode) {
        this.mode = mode;
        this.updateUrl({ sandboxWidth: this.sandboxWidth });
        this.change$.next();
    }
    toggleDetails() {
        this.expanded = !this.expanded;
        this.updateUrl({ sandboxExpanded: this.expanded });
    }
    changeOpaque(opaque) {
        this.opaque = opaque;
        this.updateUrl({ sandboxOpaque: this.opaque });
    }
    updateOnChange(updateOn) {
        this.updateOn = updateOn;
        this.updateUrl({ updateOn });
        this.createForm();
    }
    updateWidth(width = NaN) {
        if (!this.resizer || !this.resizeable || !this.content) {
            return;
        }
        const safe = width || this.resizeable.nativeElement.clientWidth;
        const total = this.el.nativeElement.clientWidth;
        const clamped = Math.round(tuiClamp(safe, MIN_WIDTH, total)) - this.delta;
        const validated = safe < total ? clamped : NaN;
        this.resizer.nativeElement.textContent = String(clamped || '-');
        this.resizeable.nativeElement.style.width = validated ? tuiPx(safe) : '';
        this.sandboxWidth = validated;
    }
    get delta() {
        return this.resizeable && this.content
            ? this.resizeable.nativeElement.clientWidth -
                this.content.nativeElement.clientWidth
            : 0;
    }
    updateUrl(params) {
        const tree = this.getUrlTree();
        const { queryParams } = tree;
        delete queryParams.sandboxWidth;
        delete queryParams.tuiMode;
        tree.queryParams = Object.assign(Object.assign({}, queryParams), tuiCleanObject(Object.assign({ tuiMode: this.mode }, params)));
        this.locationRef.go(this.urlStateHandler(tree));
    }
    createForm() {
        const { control, updateOn } = this;
        if (control) {
            this.testForm = new FormGroup({ testValue: control }, { updateOn });
        }
    }
    getUrlTree() {
        return this.urlSerializer.parse(this.locationRef.path());
    }
    get params() {
        return this.getUrlTree().queryParams;
    }
}
TuiDocDemoComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocDemoComponent, deps: [{ token: TUI_ARROW_OPTIONS }, { token: TUI_IS_MOBILE }, { token: ElementRef }, { token: Location$1 }, { token: UrlSerializer }, { token: TUI_DOC_DEMO_TEXTS }, { token: TUI_DOC_URL_STATE_HANDLER }], target: i0.ɵɵFactoryTarget.Component });
TuiDocDemoComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiDocDemoComponent, selector: "tui-doc-demo", inputs: { control: "control", sticky: "sticky" }, host: { listeners: { "window:resize": "onResize()", "document:mouseup.silent": "onMouseUp()" }, properties: { "class._sticky": "this.sticky" } }, providers: [
        TuiDestroyService,
        {
            provide: TuiModeDirective,
            useExisting: forwardRef(() => TuiDocDemoComponent),
        },
    ], queries: [{ propertyName: "template", first: true, predicate: TemplateRef, descendants: true }], viewQueries: [{ propertyName: "resizeable", first: true, predicate: TuiResizeableDirective, descendants: true, static: true }, { propertyName: "content", first: true, predicate: ["content"], descendants: true, static: true }, { propertyName: "resizer", first: true, predicate: ["resizer"], descendants: true, static: true }], ngImport: i0, template: "<div\n    class=\"t-bg-toggle\"\n    [tuiMode]=\"null\"\n>\n    <ng-template #tooltip>\n        {{ texts[0] }}\n        <a\n            routerLink=\"/directives/mode\"\n            tuiLink\n            tuiMode=\"onDark\"\n        >\n            <code>tuiMode</code>\n        </a>\n    </ng-template>\n    <ng-container *ngIf=\"isMobile; else desktop\">\n        <tui-select\n            tuiTextfieldSize=\"s\"\n            class=\"t-mode\"\n            [ngModel]=\"mode\"\n            [tuiHintContent]=\"tooltip\"\n            [tuiTextfieldCleaner]=\"true\"\n            (ngModelChange)=\"onModeChange($event)\"\n        >\n            tuiMode\n            <tui-data-list-wrapper\n                *tuiDataList\n                [items]=\"items\"\n            ></tui-data-list-wrapper>\n        </tui-select>\n    </ng-container>\n    <ng-template #desktop>\n        tuiMode:\n        <tui-tooltip\n            describeId=\"form\"\n            [content]=\"tooltip\"\n        ></tui-tooltip>\n        <div\n            tuiGroup\n            class=\"t-group\"\n            [collapsed]=\"true\"\n        >\n            <tui-radio-block\n                nativeId=\"form\"\n                size=\"s\"\n                class=\"tui-group__auto-width-item\"\n                [hideRadio]=\"true\"\n                [item]=\"null\"\n                [ngModel]=\"mode\"\n                (ngModelChange)=\"onModeChange($event)\"\n            >\n                null\n            </tui-radio-block>\n            <tui-radio-block\n                item=\"onDark\"\n                nativeId=\"form\"\n                size=\"s\"\n                class=\"tui-group__auto-width-item\"\n                [hideRadio]=\"true\"\n                [ngModel]=\"mode\"\n                (ngModelChange)=\"onModeChange($event)\"\n            >\n                onDark\n            </tui-radio-block>\n            <tui-radio-block\n                item=\"onLight\"\n                nativeId=\"form\"\n                size=\"s\"\n                class=\"tui-group__auto-width-item\"\n                [hideRadio]=\"true\"\n                [ngModel]=\"mode\"\n                (ngModelChange)=\"onModeChange($event)\"\n            >\n                onLight\n            </tui-radio-block>\n        </div>\n    </ng-template>\n    <tui-checkbox-labeled\n        size=\"m\"\n        class=\"t-checkbox\"\n        [ngModel]=\"opaque\"\n        (ngModelChange)=\"changeOpaque($event)\"\n    >\n        {{ texts[1] }}\n    </tui-checkbox-labeled>\n</div>\n<div\n    tuiResizeable\n    class=\"t-wrapper\"\n    [class.t-wrapper_dark]=\"mode === 'onDark'\"\n    [class.t-wrapper_gray]=\"mode === 'onLight'\"\n    [class.t-wrapper_transparent]=\"!opaque\"\n>\n    <div\n        id=\"demo-content\"\n        class=\"t-content\"\n    >\n        <div #content>\n            <form\n                *ngIf=\"testForm\"\n                class=\"t-form\"\n                [formGroup]=\"testForm\"\n            >\n                <div class=\"t-input-wrapper\">\n                    <ng-container [ngTemplateOutlet]=\"template\"></ng-container>\n                </div>\n                <button\n                    automation-id=\"tui-demo-button__toggle-details\"\n                    size=\"s\"\n                    tuiButton\n                    type=\"button\"\n                    class=\"t-button\"\n                    [iconRight]=\"icon\"\n                    (click)=\"toggleDetails()\"\n                >\n                    {{ texts[2] }}\n                </button>\n                <ng-template #icon>\n                    <tui-svg\n                        class=\"t-icon\"\n                        [class.t-icon_rotated]=\"expanded\"\n                        [src]=\"options.iconSmall\"\n                    ></tui-svg>\n                </ng-template>\n                <tui-expand\n                    class=\"t-expand\"\n                    [expanded]=\"expanded\"\n                >\n                    <ng-template tuiExpandContent>\n                        <pre class=\"t-value\">Form data: {{ testForm.value | json }}</pre>\n                        <div\n                            tuiGroup\n                            class=\"t-form-controls\"\n                        >\n                            <tui-select\n                                automation-id=\"tui-demo-select__expand-update-on\"\n                                tuiTextfieldSize=\"s\"\n                                class=\"t-select\"\n                                [ngModel]=\"updateOn\"\n                                [ngModelOptions]=\"{standalone: true}\"\n                                (ngModelChange)=\"updateOnChange($event)\"\n                            >\n                                updateOn\n                                <tui-data-list-wrapper\n                                    *tuiDataList\n                                    [items]=\"updateOnVariants\"\n                                ></tui-data-list-wrapper>\n                            </tui-select>\n                            <button\n                                automation-id=\"tui-demo-button__reset-state\"\n                                size=\"s\"\n                                tuiButton\n                                type=\"reset\"\n                                class=\"tui-group__auto-width-item\"\n                            >\n                                Reset\n                            </button>\n                            <button\n                                automation-id=\"tui-demo-button__submit-state\"\n                                size=\"s\"\n                                tuiButton\n                                type=\"submit\"\n                                class=\"tui-group__auto-width-item\"\n                            >\n                                Submit\n                            </button>\n                        </div>\n                    </ng-template>\n                </tui-expand>\n            </form>\n            <ng-content></ng-content>\n        </div>\n    </div>\n    <div\n        #resizer\n        class=\"t-resizer\"\n        [tuiResizer]=\"[1, 0]\"\n        (tuiSizeChange)=\"updateWidth($event[0])\"\n    ></div>\n</div>\n", styles: [":host{position:relative;display:block;min-width:100%;margin:1.5rem 0}.t-bg-toggle{position:absolute;bottom:calc(100% + .75rem);display:flex;align-items:center;justify-content:flex-end;pointer-events:none;width:100%}.t-bg-toggle>*{pointer-events:auto}.t-wrapper{box-shadow:var(--tui-shadow-dropdown);display:flex;border:1px solid var(--tui-base-03);border-radius:var(--tui-radius-m);max-width:100%;min-height:6rem;width:100%;min-width:10rem;background-color:var(--tui-base-01);overflow:hidden}.t-wrapper.t-wrapper_transparent{background-image:linear-gradient(45deg,var(--tui-base-02) 25%,transparent 25%),linear-gradient(-45deg,var(--tui-base-02) 25%,transparent 25%),linear-gradient(45deg,transparent 75%,var(--tui-base-02) 75%),linear-gradient(-45deg,transparent 75%,var(--tui-base-02) 75%);background-size:1.25rem 1.25rem;background-position:0 0,0 .625rem,.625rem -.625rem,-.625rem 0}.t-wrapper.t-wrapper_dark{background-color:#454e58;color:var(--tui-base-01)}.t-wrapper.t-wrapper_gray{background-color:#e5e7ea}.t-wrapper.t-wrapper_dark.t-wrapper_transparent{background-image:linear-gradient(45deg,var(--tui-focus) 25%,transparent 25%),linear-gradient(-45deg,var(--tui-focus) 25%,transparent 25%),linear-gradient(45deg,transparent 75%,var(--tui-focus) 75%),linear-gradient(-45deg,transparent 75%,var(--tui-focus) 75%)}.t-wrapper.t-wrapper_gray.t-wrapper_transparent{background-image:linear-gradient(45deg,var(--tui-base-05) 25%,transparent 25%),linear-gradient(-45deg,var(--tui-base-05) 25%,transparent 25%),linear-gradient(45deg,transparent 75%,var(--tui-base-05) 75%),linear-gradient(-45deg,transparent 75%,var(--tui-base-05) 75%)}:host-context(tui-root._mobile) .t-wrapper{min-height:auto}.t-content{flex:1 1 0;min-width:0;padding:1.5rem;box-sizing:border-box;overflow:hidden}:host-context(tui-root._mobile) .t-content{padding:1rem}.t-form{display:flex;flex-wrap:wrap;align-items:flex-start}.t-input-wrapper{width:100%;margin-bottom:.5rem}.t-expand{width:100%}.t-icon{transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out}.t-icon_rotated{transform:rotate(180deg)}.t-value{flex:1;background:var(--tui-clear-inverse);padding:.75rem;border-radius:.25rem}.t-mode{width:12.5rem}.t-select{max-width:15rem}.t-resizer{box-shadow:var(--tui-shadow-dropdown);position:relative;width:3.5rem;min-height:inherit;display:flex;align-items:center;justify-content:center;flex-shrink:0;border-left:1px solid var(--tui-base-03);outline:none;background:var(--tui-base-01);color:var(--tui-text-01)}.t-resizer:before,.t-resizer:after{content:\"\";position:absolute;top:.75rem;left:50%;bottom:calc(50% + 1rem);width:1px;background:var(--tui-base-04);box-shadow:-.25rem 0 var(--tui-base-04);transform:translate(0)}.t-resizer:after{bottom:.75rem;top:calc(50% + 1rem)}:host-context(tui-root._mobile) .t-resizer{display:none}.t-resizer-text{font:var(--tui-font-text-s);position:relative;z-index:1;padding:.75rem;background:var(--tui-base-01)}.wrapper_light .t-resizer-text{background:#3e464e}.t-group,.t-checkbox{margin-left:.75rem}.t-button,.t-form-controls{margin-top:.75rem}@supports ((position: -webkit-sticky) or (position: sticky)){@media screen and (min-height: 37.5rem){:host._sticky{position:-webkit-sticky;position:sticky;top:4.625rem;z-index:2}}}\n"], components: [{ type: i2.TuiLinkComponent, selector: "a[tuiLink], button[tuiLink]", inputs: ["pseudo", "icon", "iconAlign", "iconRotated", "mode"], exportAs: ["tuiLink"] }, { type: i1.TuiSelectComponent, selector: "tui-select", inputs: ["stringify", "identityMatcher", "valueContent"] }, { type: i1.TuiDataListWrapperComponent, selector: "tui-data-list-wrapper:not([labels])", inputs: ["items"] }, { type: i2.TuiTooltipComponent, selector: "tui-tooltip", inputs: ["content", "direction", "appearance", "showDelay", "hideDelay", "describeId", "context"] }, { type: i1.TuiRadioBlockComponent, selector: "tui-radio-block", inputs: ["item", "identityMatcher", "contentAlign", "size", "hideRadio", "pseudoDisabled"] }, { type: i1.TuiCheckboxLabeledComponent, selector: "tui-checkbox-labeled", inputs: ["size"] }, { type: i2.TuiButtonComponent, selector: "button[tuiButton], button[tuiIconButton], a[tuiButton], a[tuiIconButton]", inputs: ["appearance", "disabled", "icon", "iconRight", "shape", "showLoader", "size"] }, { type: i2.TuiSvgComponent, selector: "tui-svg", inputs: ["src"] }, { type: i2.TuiExpandComponent, selector: "tui-expand", inputs: ["async", "expanded"] }], directives: [{ type: i2.TuiModeDirective, selector: "[tuiMode]", inputs: ["tuiMode"] }, { type: i7.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.TuiSelectDirective, selector: "tui-select" }, { type: i2.TuiTextfieldSizeDirective, selector: "[tuiTextfieldSize]", inputs: ["tuiTextfieldSize"] }, { type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i2.TuiHintOptionsDirective, selector: "[tuiHintContent]", inputs: ["tuiHintContent", "tuiHintDirection", "tuiHintAppearance", "tuiHintShowDelay", "tuiHintHideDelay"] }, { type: i2.TuiTextfieldCleanerDirective, selector: "[tuiTextfieldCleaner]", inputs: ["tuiTextfieldCleaner"] }, { type: i2.TuiDataListDirective, selector: "ng-template[tuiDataList]" }, { type: i2.TuiGroupDirective, selector: "[tuiGroup]:not(ng-container)", inputs: ["orientation", "adaptive", "collapsed", "rounded", "size"] }, { type: i6.TuiResizeableDirective, selector: "[tuiResizeable]" }, { type: i5.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i5.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i2.TuiExpandContentDirective, selector: "[tuiExpandContent]" }, { type: i6.TuiResizerDirective, selector: "[tuiResizer]", inputs: ["tuiResizer"], outputs: ["tuiSizeChange"] }], pipes: { "json": i4.JsonPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiPure
], TuiDocDemoComponent.prototype, "updateUrl", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocDemoComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-doc-demo',
                    templateUrl: './demo.template.html',
                    styleUrls: ['./demo.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        TuiDestroyService,
                        {
                            provide: TuiModeDirective,
                            useExisting: forwardRef(() => TuiDocDemoComponent),
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_ARROW_OPTIONS]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_IS_MOBILE]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: i4.Location, decorators: [{
                    type: Inject,
                    args: [Location$1]
                }] }, { type: i7.UrlSerializer, decorators: [{
                    type: Inject,
                    args: [UrlSerializer]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_DOC_DEMO_TEXTS]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_DOC_URL_STATE_HANDLER]
                }] }]; }, propDecorators: { resizeable: [{
                type: ViewChild,
                args: [TuiResizeableDirective, { static: true }]
            }], content: [{
                type: ViewChild,
                args: ['content', { static: true }]
            }], resizer: [{
                type: ViewChild,
                args: ['resizer', { static: true }]
            }], control: [{
                type: Input
            }], sticky: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['class._sticky']
            }], template: [{
                type: ContentChild,
                args: [TemplateRef]
            }], onResize: [{
                type: HostListener,
                args: ['window:resize']
            }], onMouseUp: [{
                type: HostListener,
                args: ['document:mouseup.silent']
            }], updateUrl: [] } });

class TuiDocDemoModule {
}
TuiDocDemoModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocDemoModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiDocDemoModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocDemoModule, declarations: [TuiDocDemoComponent], imports: [CommonModule,
        ReactiveFormsModule,
        FormsModule,
        RouterModule,
        TuiLinkModule,
        TuiButtonModule,
        TuiSelectModule,
        TuiExpandModule,
        TuiGroupModule,
        TuiTooltipModule,
        TuiModeModule,
        TuiRadioBlockModule,
        TuiCheckboxLabeledModule,
        TuiSvgModule,
        TuiDataListWrapperModule,
        TuiDataListModule,
        TuiTextfieldControllerModule,
        TuiHintModule,
        TuiResizerModule], exports: [TuiDocDemoComponent] });
TuiDocDemoModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocDemoModule, imports: [[
            CommonModule,
            ReactiveFormsModule,
            FormsModule,
            RouterModule,
            TuiLinkModule,
            TuiButtonModule,
            TuiSelectModule,
            TuiExpandModule,
            TuiGroupModule,
            TuiTooltipModule,
            TuiModeModule,
            TuiRadioBlockModule,
            TuiCheckboxLabeledModule,
            TuiSvgModule,
            TuiDataListWrapperModule,
            TuiDataListModule,
            TuiTextfieldControllerModule,
            TuiHintModule,
            TuiResizerModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocDemoModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        ReactiveFormsModule,
                        FormsModule,
                        RouterModule,
                        TuiLinkModule,
                        TuiButtonModule,
                        TuiSelectModule,
                        TuiExpandModule,
                        TuiGroupModule,
                        TuiTooltipModule,
                        TuiModeModule,
                        TuiRadioBlockModule,
                        TuiCheckboxLabeledModule,
                        TuiSvgModule,
                        TuiDataListWrapperModule,
                        TuiDataListModule,
                        TuiTextfieldControllerModule,
                        TuiHintModule,
                        TuiResizerModule,
                    ],
                    declarations: [TuiDocDemoComponent],
                    exports: [TuiDocDemoComponent],
                }]
        }] });

class TuiDocTabComponent {
    constructor() {
        this.src = '';
    }
}
TuiDocTabComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocTabComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
TuiDocTabComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiDocTabComponent, selector: "tui-doc-tab", inputs: { src: "src" }, ngImport: i0, template: "<div class=\"t-tab\">\n    <tui-svg\n        class=\"t-icon\"\n        [src]=\"src\"\n    ></tui-svg>\n    <ng-content></ng-content>\n</div>\n", styles: [".t-tab{display:flex;align-items:center;justify-content:center;padding:0 .5rem;grid-gap:.5rem;gap:.5rem;color:var(--tui-text-01)}.t-tab .t-icon{width:1rem;height:1rem;color:var(--tui-text-01)}\n"], components: [{ type: i2.TuiSvgComponent, selector: "tui-svg", inputs: ["src"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocTabComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-doc-tab',
                    templateUrl: './doc-tab.component.html',
                    styleUrls: ['./doc-tab.component.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { src: [{
                type: Input
            }] } });

class TuiDocTabModule {
}
TuiDocTabModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocTabModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiDocTabModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocTabModule, declarations: [TuiDocTabComponent], imports: [TuiSvgModule], exports: [TuiDocTabComponent] });
TuiDocTabModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocTabModule, imports: [[TuiSvgModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocTabModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [TuiSvgModule],
                    declarations: [TuiDocTabComponent],
                    exports: [TuiDocTabComponent],
                }]
        }] });

const SERIALIZED_SUFFIX = '$';
// @bad TODO: refactor output and value sync
class TuiDocDocumentationPropertyConnectorDirective {
    constructor(template, locationRef, activatedRoute, urlSerializer, urlStateHandler, alerts) {
        this.template = template;
        this.locationRef = locationRef;
        this.activatedRoute = activatedRoute;
        this.urlSerializer = urlSerializer;
        this.urlStateHandler = urlStateHandler;
        this.alerts = alerts;
        this.documentationPropertyName = '';
        this.documentationPropertyMode = null;
        this.documentationPropertyType = '';
        this.documentationPropertyDeprecated = false;
        this.documentationPropertyValues = null;
        this.documentationPropertyValueChange = new EventEmitter();
        this.changed$ = new Subject();
        this.emits$ = new BehaviorSubject(1);
    }
    ngOnInit() {
        this.parseParams(this.activatedRoute.snapshot.queryParams);
    }
    get attrName() {
        switch (this.documentationPropertyMode) {
            case 'input':
                return `[${this.documentationPropertyName}]`;
            case 'output':
                return `(${this.documentationPropertyName})`;
            case 'input-output':
                return `[(${this.documentationPropertyName})]`;
            default:
                return this.documentationPropertyName;
        }
    }
    get hasItems() {
        return !!this.documentationPropertyValues;
    }
    get shouldShowValues() {
        return this.documentationPropertyMode !== 'output';
    }
    ngOnChanges() {
        this.changed$.next();
    }
    onValueChange(value) {
        this.documentationPropertyValue = value;
        this.documentationPropertyValueChange.emit(value);
        this.setQueryParam(value);
    }
    emitEvent(event) {
        // For more convenient debugging
        console.info(this.attrName, event);
        this.emits$.next(this.emits$.value + 1);
        let content;
        if (event !== undefined) {
            content = tuiInspectAny(event, 2);
        }
        this.alerts.open(content, { label: this.attrName }).subscribe();
    }
    parseParams(params) {
        const propertyValue = params[this.documentationPropertyName];
        const propertyValueWithSuffix = params[`${this.documentationPropertyName}${SERIALIZED_SUFFIX}`];
        if (!propertyValue && !propertyValueWithSuffix) {
            return;
        }
        let value = !!propertyValueWithSuffix && this.documentationPropertyValues
            ? this.documentationPropertyValues[propertyValueWithSuffix]
            : tuiCoerceValue(propertyValue);
        if (this.documentationPropertyType === 'string' && tuiIsNumber(value)) {
            value = value.toString();
        }
        this.onValueChange(value);
    }
    setQueryParam(value) {
        const tree = this.urlSerializer.parse(this.locationRef.path());
        const isValueAvailableByKey = value instanceof Object;
        const computedValue = isValueAvailableByKey && this.documentationPropertyValues
            ? this.documentationPropertyValues.indexOf(value)
            : value;
        const suffix = isValueAvailableByKey ? SERIALIZED_SUFFIX : '';
        const propName = this.documentationPropertyName + suffix;
        tree.queryParams = Object.assign(Object.assign({}, tree.queryParams), { [propName]: computedValue });
        this.locationRef.go(this.urlStateHandler(tree));
    }
}
TuiDocDocumentationPropertyConnectorDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocDocumentationPropertyConnectorDirective, deps: [{ token: TemplateRef }, { token: Location$1 }, { token: ActivatedRoute }, { token: UrlSerializer }, { token: TUI_DOC_URL_STATE_HANDLER }, { token: TuiAlertService }], target: i0.ɵɵFactoryTarget.Directive });
TuiDocDocumentationPropertyConnectorDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiDocDocumentationPropertyConnectorDirective, selector: "ng-template[documentationPropertyName]", inputs: { documentationPropertyName: "documentationPropertyName", documentationPropertyMode: "documentationPropertyMode", documentationPropertyType: "documentationPropertyType", documentationPropertyValue: "documentationPropertyValue", documentationPropertyDeprecated: "documentationPropertyDeprecated", documentationPropertyValues: "documentationPropertyValues" }, outputs: { documentationPropertyValueChange: "documentationPropertyValueChange" }, exportAs: ["documentationProperty"], usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocDocumentationPropertyConnectorDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ng-template[documentationPropertyName]',
                    exportAs: 'documentationProperty',
                }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef, decorators: [{
                    type: Inject,
                    args: [TemplateRef]
                }] }, { type: i4.Location, decorators: [{
                    type: Inject,
                    args: [Location$1]
                }] }, { type: i7.ActivatedRoute, decorators: [{
                    type: Inject,
                    args: [ActivatedRoute]
                }] }, { type: i7.UrlSerializer, decorators: [{
                    type: Inject,
                    args: [UrlSerializer]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_DOC_URL_STATE_HANDLER]
                }] }, { type: i2.TuiAlertService, decorators: [{
                    type: Inject,
                    args: [TuiAlertService]
                }] }]; }, propDecorators: { documentationPropertyName: [{
                type: Input
            }], documentationPropertyMode: [{
                type: Input
            }], documentationPropertyType: [{
                type: Input
            }], documentationPropertyValue: [{
                type: Input
            }], documentationPropertyDeprecated: [{
                type: Input
            }], documentationPropertyValues: [{
                type: Input
            }], documentationPropertyValueChange: [{
                type: Output
            }] } });

class TuiGetColorPipe {
    transform(color) {
        if (color.length === 4) {
            return color
                .split('')
                .reduce((result, current) => [...result, current, current], [])
                .join('')
                .replace('#', '');
        }
        if (color.startsWith('#')) {
            return color;
        }
        if (color === 'transparent') {
            return '#000000';
        }
        const parsed = color
            .replace('rgb(', '')
            .replace('rgba(', '')
            .replace(')', '')
            .replace(' ', '')
            .split(',')
            .map(v => Number.parseInt(v, 10));
        return tuiRgbToHex(...parsed);
    }
}
TuiGetColorPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiGetColorPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
TuiGetColorPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiGetColorPipe, name: "tuiGetColorPipe" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiGetColorPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'tuiGetColorPipe' }]
        }] });

class TuiGetOpacityPipe {
    transform(color) {
        if (color.startsWith('#') || color.startsWith('rgb(')) {
            return 100;
        }
        if (color === 'transparent') {
            return 0;
        }
        const lastComma = color.lastIndexOf(',');
        const parsed = color
            .slice(lastComma)
            .replace(')', '')
            .replace(' ', '')
            .replace(',', '');
        return Math.round(Number.parseFloat(parsed) * 100);
    }
}
TuiGetOpacityPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiGetOpacityPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
TuiGetOpacityPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiGetOpacityPipe, name: "tuiGetOpacity" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiGetOpacityPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'tuiGetOpacity' }]
        }] });

class TuiInputOpacityDirective {
    constructor(renderer, focusable) {
        this.renderer = renderer;
        this.focusable = focusable;
    }
    set tuiInputOpacity(opacity) {
        const { nativeFocusableElement } = this.focusable;
        if (nativeFocusableElement) {
            this.renderer.setStyle(nativeFocusableElement, 'opacity', opacity / 100);
        }
    }
}
TuiInputOpacityDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputOpacityDirective, deps: [{ token: Renderer2 }, { token: TUI_FOCUSABLE_ITEM_ACCESSOR }], target: i0.ɵɵFactoryTarget.Directive });
TuiInputOpacityDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiInputOpacityDirective, selector: "[tuiInputOpacity]", inputs: { tuiInputOpacity: "tuiInputOpacity" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputOpacityDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiInputOpacity]',
                }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2, decorators: [{
                    type: Inject,
                    args: [Renderer2]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_FOCUSABLE_ITEM_ACCESSOR]
                }] }]; }, propDecorators: { tuiInputOpacity: [{
                type: Input
            }] } });

class TuiStripOptionalPipe {
    transform(name) {
        return name.replace('?', '');
    }
}
TuiStripOptionalPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiStripOptionalPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
TuiStripOptionalPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiStripOptionalPipe, name: "tuiStripOptionalPipe" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiStripOptionalPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'tuiStripOptionalPipe' }]
        }] });

class TuiIsOptionalPipe {
    transform(name) {
        return name.includes('?');
    }
}
TuiIsOptionalPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiIsOptionalPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
TuiIsOptionalPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiIsOptionalPipe, name: "tuiIsOptionalPipe" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiIsOptionalPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'tuiIsOptionalPipe' }]
        }] });

class TuiDocTypeReferencePipe {
    constructor(parser, linkHandler) {
        this.parser = parser;
        this.linkHandler = linkHandler;
    }
    transform(original) {
        return this.parser(original)
            .map(({ type, extracted }) => {
            var _a, _b;
            return ({
                type,
                extracted,
                reference: (_b = (_a = this.linkHandler) === null || _a === void 0 ? void 0 : _a.call(this, extracted)) !== null && _b !== void 0 ? _b : null,
            });
        })
            .sort((a, b) => { var _a, _b, _c; return (_c = (_a = b.reference) === null || _a === void 0 ? void 0 : _a.localeCompare((_b = a.reference) !== null && _b !== void 0 ? _b : '')) !== null && _c !== void 0 ? _c : -1; });
    }
}
TuiDocTypeReferencePipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocTypeReferencePipe, deps: [{ token: TUI_DOC_TYPE_REFERENCE_PARSER }, { token: TUI_DOC_TYPE_REFERENCE_HANDLER }], target: i0.ɵɵFactoryTarget.Pipe });
TuiDocTypeReferencePipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocTypeReferencePipe, name: "tuiDocTypeReference" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocTypeReferencePipe, decorators: [{
            type: Pipe,
            args: [{ name: 'tuiDocTypeReference' }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_DOC_TYPE_REFERENCE_PARSER]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_DOC_TYPE_REFERENCE_HANDLER]
                }] }]; } });

class TuiShowCleanerPipe {
    transform(type) {
        return type.includes('null');
    }
}
TuiShowCleanerPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiShowCleanerPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
TuiShowCleanerPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiShowCleanerPipe, name: "tuiShowCleanerPipe" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiShowCleanerPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'tuiShowCleanerPipe' }]
        }] });

class TuiInspectPipe {
    constructor(isE2E) {
        this.isE2E = isE2E;
    }
    transform(value, depth = 2) {
        if (this.isE2E && typeof value === 'function') {
            /**
             * @description:
             * When developing in production mode the webpack bundler minify
             * functions in different ways, then due to which the string content
             * of the function may differ from build to build, which can be to
             * various problems when screenshot testing on e2e.
             */
            return 'λ(x) => y';
        }
        return tuiInspectAny(value, depth);
    }
}
TuiInspectPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInspectPipe, deps: [{ token: TUI_IS_E2E }], target: i0.ɵɵFactoryTarget.Pipe });
TuiInspectPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInspectPipe, name: "tuiInspectAny" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInspectPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'tuiInspectAny' }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_IS_E2E]
                }] }]; } });

class TuiIsPrimitivePolymorpheusContentPipe {
    transform(value) {
        return tuiIsString(value) || tuiIsNumber(value);
    }
}
TuiIsPrimitivePolymorpheusContentPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiIsPrimitivePolymorpheusContentPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
TuiIsPrimitivePolymorpheusContentPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiIsPrimitivePolymorpheusContentPipe, name: "tuiIsPrimitivePolymorpheusContentPipe" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiIsPrimitivePolymorpheusContentPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'tuiIsPrimitivePolymorpheusContentPipe' }]
        }] });

// @bad TODO subscribe propertiesConnectors changes
// @bad TODO refactor to make more flexible
class TuiDocDocumentationComponent {
    constructor(cdr, texts, excludedProperties, destroy$, getColor, getOpacity) {
        this.cdr = cdr;
        this.texts = texts;
        this.excludedProperties = excludedProperties;
        this.destroy$ = destroy$;
        this.getColor = getColor;
        this.getOpacity = getOpacity;
        this.heading = '';
        this.showValues = true;
        this.isAPI = false;
        this.propertiesConnectors = EMPTY_QUERY;
        this.activeItemIndex = 0;
        this.matcher = (item, exclusions) => !exclusions.has(item.documentationPropertyName);
    }
    ngAfterContentInit() {
        tuiQueryListChanges(this.propertiesConnectors)
            .pipe(switchMap(items => merge(...items.map(({ changed$ }) => changed$))), tuiWatch(this.cdr), takeUntil(this.destroy$))
            .subscribe();
    }
    get type() {
        return this.isAPI ? this.texts[0] : this.texts[1];
    }
    onColorChange(connector, color) {
        const opacity = this.getOpacity.transform(connector.documentationPropertyValue || '');
        if (opacity === 100) {
            connector.onValueChange(color);
            return;
        }
        const rgb = tuiHexToRgb(color).join(', ');
        const result = `rgba(${rgb}, ${opacity / 100})`;
        connector.onValueChange(result);
    }
    onOpacityChange(connector, opacity) {
        const hex = this.getColor.transform(connector.documentationPropertyValue || '');
        const rgb = tuiHexToRgb(hex);
        const result = `rgba(${rgb}, ${(opacity || 0) / 100})`;
        connector.onValueChange(result);
    }
}
TuiDocDocumentationComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocDocumentationComponent, deps: [{ token: ChangeDetectorRef }, { token: TUI_DOC_DOCUMENTATION_TEXTS }, { token: TUI_DOC_EXCLUDED_PROPERTIES }, { token: TuiDestroyService, self: true }, { token: TuiGetColorPipe }, { token: TuiGetOpacityPipe }], target: i0.ɵɵFactoryTarget.Component });
TuiDocDocumentationComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiDocDocumentationComponent, selector: "tui-doc-documentation", inputs: { heading: "heading", showValues: "showValues", isAPI: "isAPI" }, providers: [TuiGetColorPipe, TuiGetOpacityPipe, TuiDestroyService], queries: [{ propertyName: "propertiesConnectors", predicate: TuiDocDocumentationPropertyConnectorDirective }], ngImport: i0, template: "<h1\n    *ngIf=\"heading\"\n    class=\"t-heading\"\n>\n    {{ heading }}\n</h1>\n<ng-content></ng-content>\n<ng-container *ngIf=\"$any(propertiesConnectors) | tuiFilter: matcher : excludedProperties as properties\">\n    <table\n        *ngIf=\"properties.length\"\n        class=\"t-table\"\n    >\n        <tr class=\"t-row t-row_header\">\n            <th class=\"t-th t-cell t-cell_prop\">{{ texts[2] }}</th>\n            <th class=\"t-th\">{{ type }}</th>\n            <th\n                *ngIf=\"showValues && !isAPI\"\n                class=\"t-th t-cell t-th_value\"\n            >\n                {{ texts[3] }}\n            </th>\n        </tr>\n        <tr\n            *ngFor=\"let propertyConnector of properties\"\n            class=\"t-row\"\n            [class.t-deprecated]=\"propertyConnector.documentationPropertyDeprecated\"\n        >\n            <td class=\"t-cell\">\n                <div\n                    automation-id=\"tui-documentation__property-name\"\n                    class=\"t-property t-additional-info\"\n                >\n                    <code\n                        class=\"t-property-code\"\n                        [style.color]=\"'var(--tui-accent-active)'\"\n                    >\n                        {{ propertyConnector.attrName | tuiStripOptionalPipe }}\n                    </code>\n                    <tui-badge\n                        *ngIf=\"propertyConnector.attrName | tuiIsOptionalPipe\"\n                        size=\"s\"\n                        status=\"neutral\"\n                        value=\"Optional\"\n                    ></tui-badge>\n                    <tui-badge\n                        *ngIf=\"propertyConnector.documentationPropertyDeprecated\"\n                        size=\"s\"\n                        status=\"error\"\n                        value=\"Deprecated\"\n                    ></tui-badge>\n                </div>\n                <ng-container [ngTemplateOutlet]=\"propertyConnector.template\"></ng-container>\n            </td>\n            <td class=\"t-cell\">\n                <span class=\"type\">\n                    <code class=\"t-code-type\">\n                        <ng-container\n                            *ngFor=\"\n                                let item of propertyConnector.documentationPropertyType | tuiDocTypeReference;\n                                let last = last\n                            \"\n                        >\n                            <a\n                                *ngIf=\"item.reference; else default\"\n                                target=\"_blank\"\n                                class=\"t-code-reference\"\n                                [attr.href]=\"item.reference\"\n                            >\n                                {{ item.type }}\n                            </a>\n                            <ng-template #default>\n                                {{ item.type }}\n                            </ng-template>\n                            <span *ngIf=\"!last\">&nbsp;|&nbsp;</span>\n                        </ng-container>\n                    </code>\n                </span>\n            </td>\n            <td\n                *ngIf=\"showValues\"\n                class=\"t-cell t-cell_value\"\n            >\n                <ng-container *ngIf=\"propertyConnector.shouldShowValues; else elseEmitter\">\n                    <tui-select\n                        *ngIf=\"propertyConnector.hasItems; else noItems\"\n                        tuiDropdownLimitWidth=\"min\"\n                        tuiTextfieldSize=\"m\"\n                        [nativeId]=\"propertyConnector.attrName\"\n                        [ngModel]=\"propertyConnector.documentationPropertyValue\"\n                        [tuiTextfieldCleaner]=\"propertyConnector.documentationPropertyType | tuiShowCleanerPipe\"\n                        [tuiTextfieldLabelOutside]=\"true\"\n                        [valueContent]=\"selectContent\"\n                        (ngModelChange)=\"propertyConnector.onValueChange($event)\"\n                    >\n                        <code class=\"t-exception\">null</code>\n                        <tui-data-list-wrapper\n                            *tuiDataList\n                            [itemContent]=\"selectContent\"\n                            [items]=\"propertyConnector.documentationPropertyValues\"\n                        ></tui-data-list-wrapper>\n                    </tui-select>\n                    <ng-template\n                        #selectContent\n                        let-data\n                    >\n                        <code>{{ data | tuiInspectAny }}</code>\n                    </ng-template>\n\n                    <ng-template #noItems>\n                        <ng-container [ngSwitch]=\"propertyConnector.documentationPropertyType\">\n                            <tui-toggle\n                                *ngSwitchCase=\"'boolean'\"\n                                size=\"l\"\n                                [nativeId]=\"propertyConnector.attrName\"\n                                [ngModel]=\"propertyConnector.documentationPropertyValue\"\n                                [showIcons]=\"true\"\n                                (ngModelChange)=\"propertyConnector.onValueChange($event)\"\n                            ></tui-toggle>\n\n                            <tui-primitive-textfield\n                                *ngSwitchCase=\"'string'\"\n                                tuiTextfieldSize=\"m\"\n                                [nativeId]=\"propertyConnector.attrName\"\n                                [tuiTextfieldCleaner]=\"true\"\n                                [tuiTextfieldLabelOutside]=\"true\"\n                                [value]=\"propertyConnector.documentationPropertyValue || ''\"\n                                (valueChange)=\"propertyConnector.onValueChange($event)\"\n                            ></tui-primitive-textfield>\n\n                            <div\n                                *ngSwitchCase=\"'color'\"\n                                tuiGroup\n                            >\n                                <tui-primitive-textfield\n                                    tuiTextfieldSize=\"m\"\n                                    [attr.id]=\"propertyConnector.attrName\"\n                                    [tuiInputOpacity]=\"propertyConnector.documentationPropertyValue | tuiGetOpacity\"\n                                    [tuiTextfieldLabelOutside]=\"true\"\n                                    [value]=\"propertyConnector.documentationPropertyValue | tuiGetColorPipe\"\n                                    (valueChange)=\"onColorChange(propertyConnector, $event)\"\n                                >\n                                    <input\n                                        tuiTextfield\n                                        type=\"text\"\n                                    />\n                                </tui-primitive-textfield>\n                                <tui-input-number\n                                    tuiTextfieldSize=\"m\"\n                                    [max]=\"100\"\n                                    [min]=\"0\"\n                                    [ngModel]=\"propertyConnector.documentationPropertyValue | tuiGetOpacity\"\n                                    [step]=\"1\"\n                                    (ngModelChange)=\"onOpacityChange(propertyConnector, $event)\"\n                                >\n                                    Opacity\n                                </tui-input-number>\n                            </div>\n\n                            <tui-input-number\n                                *ngSwitchCase=\"'number'\"\n                                tuiTextfieldSize=\"m\"\n                                [nativeId]=\"propertyConnector.attrName\"\n                                [ngModel]=\"propertyConnector.documentationPropertyValue\"\n                                [step]=\"1\"\n                                [tuiTextfieldLabelOutside]=\"true\"\n                                (ngModelChange)=\"propertyConnector.onValueChange($event || 0)\"\n                            ></tui-input-number>\n\n                            <ng-container *ngSwitchCase=\"'PolymorpheusContent'\">\n                                <tui-primitive-textfield\n                                    *ngIf=\"\n                                        propertyConnector.documentationPropertyValue\n                                            | tuiIsPrimitivePolymorpheusContentPipe\n                                    \"\n                                    tuiTextfieldSize=\"m\"\n                                    [nativeId]=\"propertyConnector.attrName\"\n                                    [tuiTextfieldCleaner]=\"true\"\n                                    [tuiTextfieldLabelOutside]=\"true\"\n                                    [value]=\"propertyConnector.documentationPropertyValue.toString()\"\n                                    (valueChange)=\"propertyConnector.onValueChange($event)\"\n                                >\n                                    Default content\n                                </tui-primitive-textfield>\n                            </ng-container>\n                        </ng-container>\n                    </ng-template>\n                </ng-container>\n\n                <ng-template #elseEmitter>\n                    <tui-notification\n                        class=\"t-output\"\n                        [@emitEvent]=\"propertyConnector.emits$ | async\"\n                    >\n                        Emit!\n                    </tui-notification>\n                </ng-template>\n            </td>\n        </tr>\n    </table>\n</ng-container>\n", styles: [":host{display:block;min-width:100%}.t-table{width:100%;table-layout:fixed}.t-row:not(:last-child){border-bottom:1px solid var(--tui-base-03)}:host-context(tui-root._mobile) .t-row{display:flex;flex-wrap:wrap}:host-context(tui-root._mobile) .t-row_header{display:none}.t-cell{padding:1rem 1rem .875rem}.t-cell:first-child{padding-left:0}.t-cell:last-child{padding-right:0}.t-cell_prop{width:40%}.t-cell_value{text-align:right}:host-context(tui-root._mobile) .t-cell{width:100%;height:auto;padding:.5rem 0;text-align:left}.t-th{padding:.5rem 1rem;color:var(--tui-text-02);font-weight:normal;text-align:left}.t-th_value{max-width:20rem;text-align:right}:host-context(tui-root._mobile) .t-th_value{width:9.375rem}.t-property{font:var(--tui-font-text-m);margin-bottom:.25rem;font-family:monospace;color:#8f75d1}:host-context(tui-root._mobile) .t-property{padding:.5rem 0}.t-type{font-family:monospace}.t-deprecated .t-property-code{text-decoration:line-through}.t-deprecated-label{margin-right:.125rem;color:var(--tui-error-fill);font-size:.75rem}.t-additional-info{display:flex;grid-gap:.3125rem;gap:.3125rem;align-items:center}.t-exception{display:block;width:-webkit-max-content;width:max-content}.t-output{text-align:left;opacity:0}.t-heading{font:var(--tui-font-heading-4)}.t-code-type{display:flex;flex-wrap:wrap;align-items:center;justify-content:flex-start}.t-code-reference{display:inline-flex;color:var(--tui-link);text-decoration:none;align-items:center;justify-content:center;grid-gap:3px;gap:3px}.t-code-reference:after{content:\"\";font-size:1rem;width:1rem;height:1rem;background:currentColor;-webkit-mask:url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1rem\" height=\"1rem\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6\"></path><polyline points=\"15 3 21 3 21 9\"></polyline><line x1=\"10\" y1=\"14\" x2=\"21\" y2=\"3\"></line></svg>') center / 100%;mask:url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1rem\" height=\"1rem\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6\"></path><polyline points=\"15 3 21 3 21 9\"></polyline><line x1=\"10\" y1=\"14\" x2=\"21\" y2=\"3\"></line></svg>') center / 100%}\n"], components: [{ type: i1.TuiBadgeComponent, selector: "tui-badge", inputs: ["value", "size", "status", "hoverable"] }, { type: i1.TuiSelectComponent, selector: "tui-select", inputs: ["stringify", "identityMatcher", "valueContent"] }, { type: i1.TuiDataListWrapperComponent, selector: "tui-data-list-wrapper:not([labels])", inputs: ["items"] }, { type: i1.TuiToggleComponent, selector: "tui-toggle", inputs: ["singleColor", "showIcons", "showLoader", "size"] }, { type: i2.TuiPrimitiveTextfieldComponent, selector: "tui-primitive-textfield", inputs: ["editable", "filler", "iconCleaner", "readOnly", "invalid", "disabled", "prefix", "postfix", "value"], outputs: ["valueChange"] }, { type: i2.TuiTextfieldComponent, selector: "input[tuiTextfield], textarea[tuiTextfield]" }, { type: i1.TuiInputNumberComponent, selector: "tui-input-number", inputs: ["min", "max", "decimal", "precision", "step", "prefix", "postfix"] }, { type: i2.TuiNotificationComponent, selector: "tui-notification,a[tuiNotification],button[tuiNotification]", inputs: ["hasIcon", "icon", "status", "size", "hideClose"], outputs: ["close"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i4.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i1.TuiSelectDirective, selector: "tui-select" }, { type: i2.TuiDropdownOptionsDirective, selector: "[tuiDropdownAlign], [tuiDropdownAppearance], [tuiDropdownDirection], [tuiDropdownLimitWidth], [tuiDropdownMinHeight], [tuiDropdownMaxHeight], [tuiDropdownOffset]", inputs: ["tuiDropdownAlign", "tuiDropdownAppearance", "tuiDropdownDirection", "tuiDropdownLimitWidth", "tuiDropdownMinHeight", "tuiDropdownMaxHeight", "tuiDropdownOffset"] }, { type: i2.TuiTextfieldSizeDirective, selector: "[tuiTextfieldSize]", inputs: ["tuiTextfieldSize"] }, { type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i2.TuiTextfieldCleanerDirective, selector: "[tuiTextfieldCleaner]", inputs: ["tuiTextfieldCleaner"] }, { type: i2.TuiTextfieldLabelOutsideDirective, selector: "[tuiTextfieldLabelOutside]", inputs: ["tuiTextfieldLabelOutside"] }, { type: i2.TuiDataListDirective, selector: "ng-template[tuiDataList]" }, { type: i4.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i4.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i2.TuiPrimitiveTextfieldDirective, selector: "tui-primitive-textfield" }, { type: i2.TuiGroupDirective, selector: "[tuiGroup]:not(ng-container)", inputs: ["orientation", "adaptive", "collapsed", "rounded", "size"] }, { type: TuiInputOpacityDirective, selector: "[tuiInputOpacity]", inputs: ["tuiInputOpacity"] }, { type: i1.TuiInputNumberDirective, selector: "tui-input-number" }], pipes: { "tuiFilter": i6.TuiFilterPipe, "tuiStripOptionalPipe": TuiStripOptionalPipe, "tuiIsOptionalPipe": TuiIsOptionalPipe, "tuiDocTypeReference": TuiDocTypeReferencePipe, "tuiShowCleanerPipe": TuiShowCleanerPipe, "tuiInspectAny": TuiInspectPipe, "tuiGetOpacity": TuiGetOpacityPipe, "tuiGetColorPipe": TuiGetColorPipe, "tuiIsPrimitivePolymorpheusContentPipe": TuiIsPrimitivePolymorpheusContentPipe, "async": i4.AsyncPipe }, animations: [
        trigger('emitEvent', [
            transition(':increment', [style({ opacity: 1 }), animate('500ms ease-in')]),
        ]),
    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocDocumentationComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-doc-documentation',
                    templateUrl: './documentation.template.html',
                    styleUrls: ['./documentation.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [TuiGetColorPipe, TuiGetOpacityPipe, TuiDestroyService],
                    animations: [
                        trigger('emitEvent', [
                            transition(':increment', [style({ opacity: 1 }), animate('500ms ease-in')]),
                        ]),
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_DOC_DOCUMENTATION_TEXTS]
                }] }, { type: Set, decorators: [{
                    type: Inject,
                    args: [TUI_DOC_EXCLUDED_PROPERTIES]
                }] }, { type: i6.TuiDestroyService, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiDestroyService]
                }] }, { type: TuiGetColorPipe, decorators: [{
                    type: Inject,
                    args: [TuiGetColorPipe]
                }] }, { type: TuiGetOpacityPipe, decorators: [{
                    type: Inject,
                    args: [TuiGetOpacityPipe]
                }] }]; }, propDecorators: { heading: [{
                type: Input
            }], showValues: [{
                type: Input
            }], isAPI: [{
                type: Input
            }], propertiesConnectors: [{
                type: ContentChildren,
                args: [TuiDocDocumentationPropertyConnectorDirective]
            }] } });

class TuiInputOpacityModule {
}
TuiInputOpacityModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputOpacityModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiInputOpacityModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputOpacityModule, declarations: [TuiInputOpacityDirective], exports: [TuiInputOpacityDirective] });
TuiInputOpacityModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputOpacityModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputOpacityModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [TuiInputOpacityDirective],
                    exports: [TuiInputOpacityDirective],
                }]
        }] });

class TuiDocDocumentationModule {
}
TuiDocDocumentationModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocDocumentationModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiDocDocumentationModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocDocumentationModule, declarations: [TuiInspectPipe,
        TuiGetColorPipe,
        TuiGetOpacityPipe,
        TuiIsOptionalPipe,
        TuiShowCleanerPipe,
        TuiStripOptionalPipe,
        TuiDocTypeReferencePipe,
        TuiDocDocumentationComponent,
        TuiIsPrimitivePolymorpheusContentPipe,
        TuiDocDocumentationPropertyConnectorDirective], imports: [CommonModule,
        FormsModule,
        RouterModule,
        TuiBadgeModule,
        TuiSelectModule,
        TuiToggleModule,
        TuiLinkModule,
        TuiInputNumberModule,
        TuiModeModule,
        TuiGroupModule,
        TuiInputOpacityModule,
        TuiPrimitiveTextfieldModule,
        TuiTextfieldControllerModule,
        TuiDropdownModule,
        TuiDataListModule,
        TuiDataListWrapperModule,
        TuiNotificationModule,
        TuiFilterPipeModule], exports: [TuiDocTypeReferencePipe,
        TuiDocDocumentationComponent,
        TuiDocDocumentationPropertyConnectorDirective] });
TuiDocDocumentationModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocDocumentationModule, imports: [[
            CommonModule,
            FormsModule,
            RouterModule,
            TuiBadgeModule,
            TuiSelectModule,
            TuiToggleModule,
            TuiLinkModule,
            TuiInputNumberModule,
            TuiModeModule,
            TuiGroupModule,
            TuiInputOpacityModule,
            TuiPrimitiveTextfieldModule,
            TuiTextfieldControllerModule,
            TuiDropdownModule,
            TuiDataListModule,
            TuiDataListWrapperModule,
            TuiNotificationModule,
            TuiFilterPipeModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocDocumentationModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        FormsModule,
                        RouterModule,
                        TuiBadgeModule,
                        TuiSelectModule,
                        TuiToggleModule,
                        TuiLinkModule,
                        TuiInputNumberModule,
                        TuiModeModule,
                        TuiGroupModule,
                        TuiInputOpacityModule,
                        TuiPrimitiveTextfieldModule,
                        TuiTextfieldControllerModule,
                        TuiDropdownModule,
                        TuiDataListModule,
                        TuiDataListWrapperModule,
                        TuiNotificationModule,
                        TuiFilterPipeModule,
                    ],
                    declarations: [
                        TuiInspectPipe,
                        TuiGetColorPipe,
                        TuiGetOpacityPipe,
                        TuiIsOptionalPipe,
                        TuiShowCleanerPipe,
                        TuiStripOptionalPipe,
                        TuiDocTypeReferencePipe,
                        TuiDocDocumentationComponent,
                        TuiIsPrimitivePolymorpheusContentPipe,
                        TuiDocDocumentationPropertyConnectorDirective,
                    ],
                    exports: [
                        TuiDocTypeReferencePipe,
                        TuiDocDocumentationComponent,
                        TuiDocDocumentationPropertyConnectorDirective,
                    ],
                }]
        }] });

const TUI_DOC_EXAMPLE_DEFAULT_OPTIONS = {
    codeEditorVisibilityHandler: files => Boolean(files[TUI_EXAMPLE_PRIMARY_FILE_NAME.TS] &&
        files[TUI_EXAMPLE_PRIMARY_FILE_NAME.HTML]),
    tabTitles: new Map(),
    fullsize: true,
    linkIcon: 'tuiIconLink',
};
/**
 * Default parameters for DocExample component
 */
const TUI_DOC_EXAMPLE_OPTIONS = tuiCreateToken(TUI_DOC_EXAMPLE_DEFAULT_OPTIONS);
function tuiDocExampleOptionsProvider(options) {
    return tuiProvideOptions(TUI_DOC_EXAMPLE_OPTIONS, options, TUI_DOC_EXAMPLE_DEFAULT_OPTIONS);
}

class TuiDocExampleGetTabsPipe {
    transform(content, defaultTab) {
        return [defaultTab, ...Object.keys(content)];
    }
}
TuiDocExampleGetTabsPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocExampleGetTabsPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
TuiDocExampleGetTabsPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocExampleGetTabsPipe, name: "tuiDocExampleGetTabs" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocExampleGetTabsPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'tuiDocExampleGetTabs' }]
        }] });

class TuiDocExampleComponent {
    constructor(clipboard, alerts, location, copyTexts$, texts, codeEditor, processContent, isE2E, codeActions, options) {
        this.clipboard = clipboard;
        this.alerts = alerts;
        this.location = location;
        this.copyTexts$ = copyTexts$;
        this.texts = texts;
        this.codeEditor = codeEditor;
        this.processContent = processContent;
        this.isE2E = isE2E;
        this.codeActions = codeActions;
        this.options = options;
        this.rawLoader$$ = new BehaviorSubject({});
        this.id = null;
        this.fullsize = this.options.fullsize;
        this.componentName = this.location.pathname.slice(1);
        this.defaultTabIndex = 0;
        this.defaultTab = this.texts[this.defaultTabIndex];
        this.activeItemIndex = this.defaultTabIndex;
        this.copy$ = this.copyTexts$.pipe(map(([copy]) => copy));
        this.processor$ = this.rawLoader$$.pipe(switchMap(tuiRawLoadRecord), map(value => this.processContent(value)));
        this.loading$ = new Subject();
        this.visible = (files) => Boolean(this.codeEditor && this.options.codeEditorVisibilityHandler(files));
    }
    set content(content) {
        this.rawLoader$$.next(content);
    }
    getTabTitle(fileName) {
        return this.options.tabTitles.get(fileName) || fileName;
    }
    copyExampleLink({ href }) {
        this.clipboard.copy(href);
        this.alerts
            .open(this.texts[1], { label: this.texts[2], status: 'success' })
            .subscribe();
    }
    edit(files) {
        var _a;
        this.loading$.next(true);
        (_a = this.codeEditor) === null || _a === void 0 ? void 0 : _a.edit(this.componentName, this.id || '', files).then(() => this.loading$.next(false)).catch(() => this.loading$.next(false));
    }
}
TuiDocExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocExampleComponent, deps: [{ token: Clipboard }, { token: TuiAlertService }, { token: LOCATION }, { token: TUI_COPY_TEXTS }, { token: TUI_DOC_EXAMPLE_TEXTS }, { token: TUI_DOC_CODE_EDITOR, optional: true }, { token: TUI_DOC_EXAMPLE_CONTENT_PROCESSOR }, { token: TUI_IS_E2E }, { token: TUI_DOC_CODE_ACTIONS }, { token: TUI_DOC_EXAMPLE_OPTIONS }], target: i0.ɵɵFactoryTarget.Component });
TuiDocExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiDocExampleComponent, selector: "tui-doc-example", inputs: { id: "id", heading: "heading", description: "description", content: "content", fullsize: "fullsize", componentName: "componentName" }, host: { properties: { "class._fullsize": "this.fullsize" } }, ngImport: i0, template: "<h3\n    *ngIf=\"heading\"\n    class=\"t-title\"\n>\n    <span\n        *polymorpheusOutlet=\"heading as text\"\n        [textContent]=\"text\"\n    ></span>\n    <a\n        *ngIf=\"id\"\n        appearance=\"icon\"\n        routerLink=\".\"\n        size=\"xs\"\n        tuiIconButton\n        type=\"button\"\n        class=\"t-link-icon\"\n        [fragment]=\"id\"\n        [icon]=\"options.linkIcon\"\n        [title]=\"copy$ | async\"\n        (click)=\"copyExampleLink($any($event.currentTarget))\"\n    ></a>\n</h3>\n<h4\n    *ngIf=\"description\"\n    class=\"t-description\"\n>\n    <ng-container *polymorpheusOutlet=\"description as text\">\n        {{ text }}\n    </ng-container>\n</h4>\n\n<div\n    *ngIf=\"processor$ | async as files\"\n    class=\"t-example\"\n>\n    <ng-container *ngIf=\"files | tuiDocExampleGetTabs: defaultTab as tabs\">\n        <div\n            *ngIf=\"tabs.length > 1\"\n            class=\"t-tabs-wrapper\"\n        >\n            <tui-tabs-with-more\n                class=\"t-tabs\"\n                [(activeItemIndex)]=\"activeItemIndex\"\n            >\n                <ng-container *ngFor=\"let tab of tabs\">\n                    <button\n                        *tuiItem\n                        tuiTab\n                    >\n                        <ng-container *polymorpheusOutlet=\"getTabTitle(tab) as text\">\n                            {{ text }}\n                        </ng-container>\n                    </button>\n                </ng-container>\n            </tui-tabs-with-more>\n\n            <tui-loader\n                *ngIf=\"files | tuiMapper: visible\"\n                size=\"xs\"\n                [overlay]=\"true\"\n                [showLoader]=\"!!(loading$ | async)\"\n                (click)=\"edit(files)\"\n            >\n                <ng-container *ngIf=\"codeEditor?.content as content; else defaultEditContent\">\n                    <ng-container *polymorpheusOutlet=\"content as editContent\">\n                        {{ editContent }}\n                    </ng-container>\n                </ng-container>\n\n                <ng-template #defaultEditContent>\n                    <button\n                        appearance=\"flat\"\n                        size=\"s\"\n                        tuiButton\n                        type=\"button\"\n                    >\n                        Edit on {{ codeEditor!.name }}\n                    </button>\n                </ng-template>\n            </tui-loader>\n        </div>\n\n        <div\n            *ngFor=\"let tab of tabs; let index = index\"\n            class=\"t-content\"\n            [class.t-content_animated]=\"!isE2E\"\n            [class.t-content_visible]=\"activeItemIndex === index\"\n        >\n            <ng-container\n                *ngIf=\"index === defaultTabIndex; else anotherTab\"\n                [ngTemplateOutlet]=\"preview\"\n            ></ng-container>\n            <ng-template #anotherTab>\n                <ng-container\n                    [ngTemplateOutlet]=\"codeSection\"\n                    [ngTemplateOutletContext]=\"{$implicit: files?.[tabs[activeItemIndex]] || ''}\"\n                ></ng-container>\n            </ng-template>\n        </div>\n    </ng-container>\n</div>\n\n<ng-template #preview>\n    <div\n        automation-id=\"tui-doc-example\"\n        class=\"t-demo\"\n    >\n        <ng-content></ng-content>\n    </div>\n</ng-template>\n\n<ng-template\n    #codeSection\n    let-code\n>\n    <tui-doc-code [code]=\"code\">\n        <ng-container *ngFor=\"let action of codeActions\">\n            <ng-container *polymorpheusOutlet=\"action as text; context: {$implicit: code}\">\n                {{ text }}\n            </ng-container>\n        </ng-container>\n    </tui-doc-code>\n</ng-template>\n", styles: [":host{position:relative;display:block;padding-top:3.5rem;clear:right}:host:target{animation:1s .3s tuiShaking}:host :host-context(tui-root._mobile){padding-top:2rem}.t-title{font:var(--tui-font-heading-5);margin:0 0 .5rem}:host-context(tui-root._mobile) .t-title{font:var(--tui-font-heading-6)}.t-description{font:var(--tui-font-text-m);font-weight:normal;margin:0}.t-title:first-letter,.t-description:first-letter{text-transform:capitalize}.t-example{position:relative;margin-top:1.5rem;border:1px solid var(--tui-base-03);border-radius:var(--tui-radius-m);box-shadow:0 .125rem .1875rem #0000001a;overflow:hidden}:host-context(tui-root._mobile) .t-example{margin-top:.75rem}.t-tabs-wrapper{display:flex;padding:0 .875rem 0 2rem;box-shadow:inset 0 -1px var(--tui-base-03);justify-content:space-between;align-items:center}:host-context(tui-root._mobile) .t-tabs-wrapper{padding:0 .875rem 0 1rem}.t-tabs{flex-grow:1}.t-demo{padding:2rem;max-width:100%;box-sizing:border-box;overflow-x:auto}@media all and (-webkit-min-device-pixel-ratio: 0) and (min-resolution: .001dpcm){.t-demo::-webkit-scrollbar,.t-demo::-webkit-scrollbar-thumb{width:1rem;height:1rem;border-radius:6.25rem;background-clip:padding-box;border:.375rem solid transparent}.t-demo::-webkit-scrollbar{background-color:transparent}.t-demo::-webkit-scrollbar-thumb{background-color:var(--tui-clear-hover)}.t-demo::-webkit-scrollbar-thumb:hover{background-color:var(--tui-clear-active)}.t-demo::-webkit-scrollbar-thumb:active{background-color:var(--tui-text-03)}}:host-context(tui-root._mobile) .t-demo{padding:1rem}:host:not(._fullsize) .t-demo{width:-webkit-min-content;width:min-content;min-width:20rem}.t-link-icon{margin-left:.3rem;vertical-align:baseline}.t-content{will-change:opacity;height:0;visibility:hidden;opacity:0}.t-content_animated{transition:opacity .3s ease-in-out}.t-content_visible{height:auto;visibility:visible;opacity:1}\n"], components: [{ type: i2.TuiButtonComponent, selector: "button[tuiButton], button[tuiIconButton], a[tuiButton], a[tuiIconButton]", inputs: ["appearance", "disabled", "icon", "iconRight", "shape", "showLoader", "size"] }, { type: i1.TuiTabsWithMoreComponent, selector: "tui-tabs-with-more, nav[tuiTabsWithMore]", inputs: ["moreContent", "dropdownContent", "underline", "activeItemIndex", "itemsLimit"], outputs: ["activeItemIndexChange"] }, { type: i1.TuiTabComponent, selector: "a[tuiTab]:not([routerLink]), a[tuiTab][routerLink][routerLinkActive], button[tuiTab]" }, { type: i2.TuiLoaderComponent, selector: "tui-loader", inputs: ["size", "inheritColor", "overlay", "textContent", "showLoader"] }, { type: TuiDocCodeComponent, selector: "tui-doc-code", inputs: ["filename", "code"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5$1.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { type: i7.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i6.TuiItemDirective, selector: "[tuiItem]" }, { type: i4.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], pipes: { "async": i4.AsyncPipe, "tuiDocExampleGetTabs": TuiDocExampleGetTabsPipe, "tuiMapper": i6.TuiMapperPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-doc-example',
                    templateUrl: './example.template.html',
                    styleUrls: ['./example.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i4$1.Clipboard, decorators: [{
                    type: Inject,
                    args: [Clipboard]
                }] }, { type: i2.TuiAlertService, decorators: [{
                    type: Inject,
                    args: [TuiAlertService]
                }] }, { type: Location, decorators: [{
                    type: Inject,
                    args: [LOCATION]
                }] }, { type: i10.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_COPY_TEXTS]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_DOC_EXAMPLE_TEXTS]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TUI_DOC_CODE_EDITOR]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_DOC_EXAMPLE_CONTENT_PROCESSOR]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_IS_E2E]
                }] }, { type: Array, decorators: [{
                    type: Inject,
                    args: [TUI_DOC_CODE_ACTIONS]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_DOC_EXAMPLE_OPTIONS]
                }] }]; }, propDecorators: { id: [{
                type: Input
            }], heading: [{
                type: Input
            }], description: [{
                type: Input
            }], content: [{
                type: Input
            }], fullsize: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['class._fullsize']
            }], componentName: [{
                type: Input
            }] } });

class TuiDocExampleModule {
}
TuiDocExampleModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocExampleModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiDocExampleModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocExampleModule, declarations: [TuiDocExampleComponent, TuiDocExampleGetTabsPipe], imports: [CommonModule,
        ClipboardModule,
        TuiTabsModule,
        TuiButtonModule,
        TuiDocCopyModule,
        TuiDocCodeModule,
        PolymorpheusModule,
        TuiMapperPipeModule,
        TuiLoaderModule,
        RouterModule], exports: [TuiDocExampleComponent, TuiDocExampleGetTabsPipe] });
TuiDocExampleModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocExampleModule, imports: [[
            CommonModule,
            ClipboardModule,
            TuiTabsModule,
            TuiButtonModule,
            TuiDocCopyModule,
            TuiDocCodeModule,
            PolymorpheusModule,
            TuiMapperPipeModule,
            TuiLoaderModule,
            RouterModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocExampleModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        ClipboardModule,
                        TuiTabsModule,
                        TuiButtonModule,
                        TuiDocCopyModule,
                        TuiDocCodeModule,
                        PolymorpheusModule,
                        TuiMapperPipeModule,
                        TuiLoaderModule,
                        RouterModule,
                    ],
                    declarations: [TuiDocExampleComponent, TuiDocExampleGetTabsPipe],
                    exports: [TuiDocExampleComponent, TuiDocExampleGetTabsPipe],
                }]
        }] });

function labelsProviderFactory(pages) {
    return pages
        .map(({ section }) => section)
        .filter(tuiIsPresent)
        .filter((item, index, array) => array.indexOf(item) === index);
}
/**
 * Page title
 */
const NAVIGATION_TITLE = new InjectionToken('[NAVIGATION_TITLE]');
/**
 * Navigation sections labels for search
 */
const NAVIGATION_LABELS = new InjectionToken('[NAVIGATION_LABELS]');
/**
 * Navigation pages
 */
const NAVIGATION_ITEMS = new InjectionToken('[NAVIGATION_ITEMS]');
const NAVIGATION_PROVIDERS = [
    TuiDestroyService,
    {
        provide: NAVIGATION_TITLE,
        deps: [Router, ActivatedRoute, TUI_DOC_TITLE, TuiDestroyService],
        useFactory: (router, activatedRoute, titlePrefix, destroy$) => router.events.pipe(filter(event => event instanceof NavigationEnd), map(() => activatedRoute.firstChild), filter(tuiIsPresent), mergeMap(({ data }) => data), map(({ title }) => `${titlePrefix}${title}`), takeUntil(destroy$)),
    },
    {
        provide: NAVIGATION_LABELS,
        deps: [TUI_DOC_PAGES],
        useFactory: labelsProviderFactory,
    },
    {
        provide: NAVIGATION_ITEMS,
        deps: [TUI_DOC_PAGES],
        useFactory: (pages) => {
            const labels = labelsProviderFactory(pages);
            return [
                ...labels.map(label => pages.filter(({ section }) => section === label)),
                pages.filter(page => !page.section),
            ];
        },
    },
];

class TuiDocNavigationComponent {
    constructor(cdr, titleService, title$, mode, sidebar, labels, items, searchText, router, activatedRoute, destroy$, readyToScroll$, docIcons, icons, doc) {
        this.title$ = title$;
        this.mode = mode;
        this.sidebar = sidebar;
        this.labels = labels;
        this.items = items;
        this.searchText = searchText;
        this.router = router;
        this.activatedRoute = activatedRoute;
        this.destroy$ = destroy$;
        this.readyToScroll$ = readyToScroll$;
        this.docIcons = docIcons;
        this.icons = icons;
        this.doc = doc;
        this.menuOpen = false;
        this.openPagesArr = [];
        this.openPagesGroupsArr = [];
        this.active = '';
        this.search = new FormControl('');
        this.filtered$ = tuiControlValue(this.search).pipe(filter(search => search.trim().length > 2), map(search => this.filterItems(this.flattenSubPages(this.items), search)));
        this.mode$ = this.mode.change$.pipe(startWith(null), map(() => this.mode.mode || 'onLight'));
        title$.subscribe(title => {
            cdr.markForCheck();
            titleService.setTitle(title);
            this.openActivePageGroup();
        });
        combineLatest([
            this.router.events.pipe(filter((event) => event instanceof Scroll)),
            this.title$.pipe(switchMap(() => this.readyToScroll$.pipe(filter(Boolean)))),
        ])
            .pipe(take(1), map(([event]) => event.anchor || ''), filter(Boolean), takeUntil(this.destroy$))
            .subscribe(anchor => this.navigateToAnchorLink(anchor));
    }
    get canOpen() {
        var _a, _b;
        return ((_b = (_a = this.search.value) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 2;
    }
    get itemsWithoutSections() {
        return this.items[this.items.length - 1];
    }
    $pages(pages) {
        return pages;
    }
    isActive(route) {
        return route === this.active;
    }
    onGroupClick(index) {
        this.openPagesGroupsArr[index] = !this.openPagesGroupsArr[index];
    }
    closeMenu() {
        this.menuOpen = false;
    }
    onClick(input) {
        input.open = false;
        this.menuOpen = false;
        this.search.setValue('');
        this.openActivePageGroup();
    }
    filterItems(items, search) {
        return items.map(section => tuiUniqBy(section.filter(({ title, keywords = '' }) => {
            search = search.toLowerCase().trim();
            keywords = keywords.toLowerCase();
            title = title.toLowerCase();
            return (title.includes(search) ||
                keywords.includes(search) ||
                title.includes(tuiTransliterateKeyboardLayout(search)) ||
                keywords.includes(tuiTransliterateKeyboardLayout(search)) ||
                search.replace(/-/gi, '').includes(title) ||
                title.includes(search.replace(/\s|tui/g, '')) ||
                keywords.includes(search.replace(/\s|tui/g, '')) ||
                search.split(/\s/).find(word => title.includes(word)));
        }), 'title'));
    }
    flattenSubPages(items) {
        return items.reduce((array, item) => [
            ...array,
            item.reduce((pages, page) => 'subPages' in page
                ? [...pages, ...page.subPages]
                : [...pages, page], []),
        ], []);
    }
    isActiveRoute(route) {
        return this.router.isActive(route, {
            paths: 'subset',
            queryParams: 'subset',
            fragment: 'ignored',
            matrixParams: 'ignored',
        });
    }
    openActivePageGroup() {
        this.items.forEach((pages, pagesIndex) => {
            pages.forEach((page, pageIndex) => {
                if ('route' in page && this.isActiveRoute(page.route)) {
                    this.openPagesArr[pagesIndex] = true;
                    this.active = page.route;
                }
                if ('subPages' in page) {
                    page.subPages.forEach(subPage => {
                        if (this.isActiveRoute(subPage.route)) {
                            this.openPagesArr[pagesIndex] = true;
                            this.openPagesGroupsArr[pagesIndex * 100 + pageIndex] = true;
                            this.active = subPage.route;
                        }
                    });
                }
            });
        });
    }
    navigateToAnchorLink(fragment) {
        const nodes = fragment ? this.doc.querySelectorAll(`#${fragment}`) : [];
        const element = nodes.length && nodes[nodes.length - 1];
        if (!element) {
            return;
        }
        // emulate :target event
        const target = this.doc.createElement('a');
        target.href = `${this.doc.location.pathname}#${fragment}`;
        target.style.display = 'none';
        target.style.position = 'absolute';
        this.doc.body.appendChild(target);
        target.click();
        target.remove();
    }
}
TuiDocNavigationComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocNavigationComponent, deps: [{ token: ChangeDetectorRef }, { token: Title }, { token: NAVIGATION_TITLE }, { token: TuiModeDirective }, { token: TuiSidebarDirective, optional: true }, { token: NAVIGATION_LABELS }, { token: NAVIGATION_ITEMS }, { token: TUI_DOC_SEARCH_TEXT }, { token: Router }, { token: ActivatedRoute }, { token: TuiDestroyService, self: true }, { token: TUI_DOC_PAGE_LOADED }, { token: TUI_DOC_ICONS }, { token: TUI_COMMON_ICONS }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Component });
TuiDocNavigationComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiDocNavigationComponent, selector: "tui-doc-navigation", host: { properties: { "class._open": "this.menuOpen" } }, providers: NAVIGATION_PROVIDERS, ngImport: i0, template: "<tui-input\n    #input\n    tuiTextfieldSize=\"m\"\n    class=\"t-input\"\n    [formControl]=\"search\"\n    [tuiAutoFocus]=\"!!sidebar\"\n    [tuiTextfieldCleaner]=\"true\"\n    [tuiTextfieldIconLeft]=\"docIcons.search\"\n    [tuiTextfieldLabelOutside]=\"true\"\n>\n    {{ searchText }}\n    <ng-container *ngIf=\"canOpen\">\n        <tui-data-list *tuiDataList>\n            <tui-opt-group\n                *ngFor=\"let group of filtered$ | async; let index = index\"\n                [label]=\"labels[index] || ''\"\n            >\n                <ng-container *ngFor=\"let item of group\">\n                    <a\n                        *ngIf=\"item.route.includes('://'); else internal\"\n                        tuiOption\n                        [attr.rel]=\"item.rel\"\n                        [href]=\"item.route\"\n                        [target]=\"item.target || '_self'\"\n                    >\n                        {{ item.title }}\n                        <tui-svg\n                            *polymorpheusOutlet=\"item.icon as icon\"\n                            class=\"t-icon\"\n                            [src]=\"icon\"\n                        ></tui-svg>\n                    </a>\n\n                    <ng-template #internal>\n                        <a\n                            tuiOption\n                            [attr.rel]=\"item.rel\"\n                            [fragment]=\"item.fragment\"\n                            [routerLink]=\"item.route\"\n                            [target]=\"item.target || '_self'\"\n                            (click)=\"onClick(input)\"\n                        >\n                            {{ item.title }}\n                            <tui-svg\n                                *polymorpheusOutlet=\"item.icon as icon\"\n                                class=\"t-icon\"\n                                [src]=\"icon\"\n                            ></tui-svg>\n                        </a>\n                    </ng-template>\n                </ng-container>\n            </tui-opt-group>\n        </tui-data-list>\n    </ng-container>\n</tui-input>\n\n<nav class=\"t-navigation\">\n    <tui-scrollbar\n        class=\"t-scrollbar\"\n        [tuiMode]=\"mode$ | async\"\n    >\n        <tui-accordion\n            [closeOthers]=\"false\"\n            [rounded]=\"false\"\n        >\n            <tui-accordion-item\n                *ngFor=\"let label of labels; index as index\"\n                size=\"s\"\n                [borders]=\"null\"\n                [(open)]=\"!!openPagesArr[index]\"\n            >\n                <span class=\"t-label\">\n                    <strong>{{ label }}</strong>\n                </span>\n                <ng-template tuiAccordionItemContent>\n                    <div class=\"t-section\">\n                        <ng-container\n                            *ngFor=\"let item of items[index]; index as subIndex\"\n                            [ngTemplateOutlet]=\"pages\"\n                            [ngTemplateOutletContext]=\"{item: item, index: index * 100 + subIndex}\"\n                        ></ng-container>\n                    </div>\n                </ng-template>\n            </tui-accordion-item>\n        </tui-accordion>\n        <div class=\"t-items-container\">\n            <ng-container\n                *ngFor=\"let item of itemsWithoutSections; let index = index\"\n                [ngTemplateOutlet]=\"pages\"\n                [ngTemplateOutletContext]=\"{item: item, index: items.length - 1 + index}\"\n            ></ng-container>\n        </div>\n\n        <ng-template\n            #pages\n            let-index=\"index\"\n            let-item=\"item\"\n        >\n            <ng-container *ngIf=\"!item.subPages; else subPagesTemplate\">\n                <a\n                    *ngIf=\"item.route.includes('://'); else internal\"\n                    tuiLink\n                    class=\"t-sublink\"\n                    [attr.rel]=\"item.rel\"\n                    [href]=\"item.route\"\n                    [target]=\"item.target || '_self'\"\n                >\n                    {{ item.title }}\n                    <tui-svg\n                        *polymorpheusOutlet=\"item.icon as icon\"\n                        class=\"t-icon\"\n                        [src]=\"icon\"\n                    ></tui-svg>\n                </a>\n\n                <ng-template #internal>\n                    <a\n                        routerLinkActive=\"t-sublink_active\"\n                        tuiLink\n                        class=\"t-sublink\"\n                        [attr.rel]=\"item.rel\"\n                        [routerLink]=\"item.route\"\n                        [target]=\"item.target || '_self'\"\n                        [tuiScrollIntoViewLink]=\"isActive(item.route)\"\n                        (click)=\"closeMenu()\"\n                    >\n                        {{ item.title }}\n                        <tui-svg\n                            *polymorpheusOutlet=\"item.icon as icon\"\n                            class=\"t-icon\"\n                            [src]=\"icon\"\n                        ></tui-svg>\n                    </a>\n                </ng-template>\n            </ng-container>\n\n            <ng-template #subPagesTemplate>\n                <div\n                    routerLinkActive\n                    class=\"t-subsection\"\n                    [routerLinkActiveOptions]=\"{exact: false}\"\n                >\n                    <button\n                        *ngIf=\"item.subPages\"\n                        tuiLink\n                        type=\"button\"\n                        class=\"t-sublink t-sublink_subsection\"\n                        (click)=\"onGroupClick(index)\"\n                    >\n                        <tui-svg\n                            class=\"t-chevron\"\n                            [class.t-chevron_active]=\"!!openPagesGroupsArr[index]\"\n                            [src]=\"icons.more\"\n                        ></tui-svg>\n                        {{ item.title }}\n                        <tui-svg\n                            *polymorpheusOutlet=\"item.icon as icon\"\n                            class=\"t-icon\"\n                            [src]=\"icon\"\n                        ></tui-svg>\n                    </button>\n                    <tui-expand\n                        class=\"t-expand\"\n                        [expanded]=\"!!openPagesGroupsArr[index]\"\n                    >\n                        <div class=\"t-section t-section_bordered\">\n                            <ng-container *ngFor=\"let subPage of $pages(item.subPages)\">\n                                <a\n                                    *ngIf=\"subPage.route.includes('://'); else internal\"\n                                    tuiLink\n                                    class=\"t-sublink t-sublink_small\"\n                                    [attr.rel]=\"subPage.rel\"\n                                    [href]=\"subPage.route\"\n                                    [target]=\"subPage.target || '_self'\"\n                                >\n                                    {{ subPage.title }}\n                                    <tui-svg\n                                        *polymorpheusOutlet=\"subPage.icon as icon\"\n                                        class=\"t-icon\"\n                                        [src]=\"icon\"\n                                    ></tui-svg>\n                                </a>\n\n                                <ng-template #internal>\n                                    <a\n                                        routerLinkActive=\"t-sublink_active\"\n                                        tuiLink\n                                        class=\"t-sublink t-sublink_small\"\n                                        [attr.rel]=\"subPage.rel\"\n                                        [fragment]=\"subPage.fragment\"\n                                        [routerLink]=\"subPage.route\"\n                                        [target]=\"subPage.target || '_self'\"\n                                        [tuiScrollIntoViewLink]=\"isActive(subPage.route)\"\n                                        (click)=\"closeMenu()\"\n                                    >\n                                        {{ subPage.title }}\n                                        <tui-svg\n                                            *polymorpheusOutlet=\"subPage.icon as icon\"\n                                            class=\"t-icon\"\n                                            [src]=\"icon\"\n                                        ></tui-svg>\n                                    </a>\n                                </ng-template>\n                            </ng-container>\n                        </div>\n                    </tui-expand>\n                </div>\n            </ng-template>\n        </ng-template>\n    </tui-scrollbar>\n</nav>\n\n<ng-content></ng-content>\n", styles: [":host{z-index:1;display:flex;flex-direction:column;text-align:center;background:var(--tui-base-01)}.t-input{margin:1.25rem}.t-navigation{display:flex;max-height:100%;min-height:0;flex:1 1 0;text-align:left}.t-scrollbar{scroll-behavior:smooth;width:100%}:host-context(tui-root._reduced-motion) .t-scrollbar{scroll-behavior:auto}.t-items-container{display:flex;flex-direction:column;padding:0 1rem}.t-label{margin-left:.5rem}.t-expand{margin-left:.25rem}.t-section{display:flex;flex-direction:column;align-items:flex-start;margin:-1rem 0 -.5rem}.t-section_bordered{margin:.5rem 0;border-left:1px solid var(--tui-base-03)}.t-subsection{margin-left:.5rem}.t-sublink{-webkit-appearance:none;-moz-appearance:none;appearance:none;padding:1rem 0 0;border:0;background:none;font-size:inherit;line-height:inherit;text-decoration:none;font:var(--tui-font-text-m);margin-left:.5rem}.t-sublink_small{margin-left:1rem;line-height:1.5rem;padding-top:.5rem}.t-sublink_subsection{margin-left:0;line-height:1.6rem}.t-sublink.t-sublink.t-sublink_active{color:var(--tui-text-01)}.t-icon{margin-left:.5rem}.t-chevron{transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;width:1rem;height:1rem;margin:-.25rem .25rem 0 -.1875rem}.t-chevron_active{transform:rotate(90deg)}\n"], components: [{ type: i1.TuiInputComponent, selector: "tui-input" }, { type: i2.TuiDataListComponent, selector: "tui-data-list", inputs: ["role", "emptyContent", "size"] }, { type: i2.TuiOptionComponent, selector: "button[tuiOption], a[tuiOption]", inputs: ["size", "role", "disabled", "value"] }, { type: i2.TuiSvgComponent, selector: "tui-svg", inputs: ["src"] }, { type: i2.TuiScrollbarComponent, selector: "tui-scrollbar", inputs: ["hidden"] }, { type: i1.TuiAccordionComponent, selector: "tui-accordion", inputs: ["closeOthers", "rounded"] }, { type: i1.TuiAccordionItemComponent, selector: "tui-accordion-item", inputs: ["noPadding", "showArrow", "borders", "size", "disabled", "disableHover", "open", "async"], outputs: ["openChange"] }, { type: i2.TuiLinkComponent, selector: "a[tuiLink], button[tuiLink]", inputs: ["pseudo", "icon", "iconAlign", "iconRotated", "mode"], exportAs: ["tuiLink"] }, { type: i2.TuiExpandComponent, selector: "tui-expand", inputs: ["async", "expanded"] }], directives: [{ type: i1.TuiInputDirective, selector: "tui-input" }, { type: i2.TuiTextfieldSizeDirective, selector: "[tuiTextfieldSize]", inputs: ["tuiTextfieldSize"] }, { type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i6.TuiAutoFocusDirective, selector: "[tuiAutoFocus]", inputs: ["tuiAutoFocus"] }, { type: i2.TuiTextfieldCleanerDirective, selector: "[tuiTextfieldCleaner]", inputs: ["tuiTextfieldCleaner"] }, { type: i2.TuiTextfieldIconLeftDirective, selector: "[tuiTextfieldIconLeft]", inputs: ["tuiTextfieldIconLeft"] }, { type: i2.TuiTextfieldLabelOutsideDirective, selector: "[tuiTextfieldLabelOutside]", inputs: ["tuiTextfieldLabelOutside"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.TuiDataListDirective, selector: "ng-template[tuiDataList]" }, { type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2.TuiOptGroupDirective, selector: "tui-opt-group", inputs: ["label"] }, { type: i5$1.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { type: i7.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: i2.TuiModeDirective, selector: "[tuiMode]", inputs: ["tuiMode"] }, { type: i1.TuiAccordionItemContentDirective, selector: "ng-template[tuiAccordionItemContent]" }, { type: i4.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i7.RouterLinkActive, selector: "[routerLinkActive]", inputs: ["routerLinkActiveOptions", "routerLinkActive"], exportAs: ["routerLinkActive"] }, { type: i8.TuiScrollIntoViewLinkDirective, selector: "[tuiScrollIntoViewLink]", inputs: ["tuiScrollIntoViewLink"] }], pipes: { "async": i4.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiPure
], TuiDocNavigationComponent.prototype, "filterItems", null);
__decorate([
    tuiPure
], TuiDocNavigationComponent.prototype, "flattenSubPages", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocNavigationComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-doc-navigation',
                    templateUrl: './navigation.template.html',
                    styleUrls: ['./navigation.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: NAVIGATION_PROVIDERS,
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: i9.Title, decorators: [{
                    type: Inject,
                    args: [Title]
                }] }, { type: i10.Observable, decorators: [{
                    type: Inject,
                    args: [NAVIGATION_TITLE]
                }] }, { type: i2.TuiModeDirective, decorators: [{
                    type: Inject,
                    args: [TuiModeDirective]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TuiSidebarDirective]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [NAVIGATION_LABELS]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [NAVIGATION_ITEMS]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_DOC_SEARCH_TEXT]
                }] }, { type: i7.Router, decorators: [{
                    type: Inject,
                    args: [Router]
                }] }, { type: i7.ActivatedRoute, decorators: [{
                    type: Inject,
                    args: [ActivatedRoute]
                }] }, { type: i10.Observable, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiDestroyService]
                }] }, { type: i10.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_DOC_PAGE_LOADED]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_DOC_ICONS]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_COMMON_ICONS]
                }] }, { type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; }, propDecorators: { menuOpen: [{
                type: HostBinding,
                args: ['class._open']
            }], filterItems: [], flattenSubPages: [] } });

class TuiDocHeaderComponent {
    constructor(icons, logo, menu, router) {
        this.icons = icons;
        this.logo = logo;
        this.menu = menu;
        this.router = router;
        this.stream$ = new Subject();
        this.open$ = merge(this.router.events.pipe(map(ALWAYS_FALSE_HANDLER)), this.stream$).pipe(startWith(false), distinctUntilChanged());
    }
    onClick() {
        this.stream$.next(true);
    }
    onActiveZone(active) {
        if (!active) {
            this.stream$.next(false);
        }
    }
}
TuiDocHeaderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocHeaderComponent, deps: [{ token: TUI_DOC_ICONS }, { token: TUI_DOC_LOGO }, { token: TUI_DOC_MENU_TEXT }, { token: Router }], target: i0.ɵɵFactoryTarget.Component });
TuiDocHeaderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiDocHeaderComponent, selector: "header[tuiDocHeader]", ngImport: i0, template: "<button\n    appearance=\"icon\"\n    tuiIconButton\n    type=\"button\"\n    class=\"t-menu\"\n    [icon]=\"icons.menu\"\n    [title]=\"menu\"\n    (click)=\"onClick()\"\n    (tuiActiveZoneChange)=\"onActiveZone($event)\"\n>\n    <tui-doc-navigation\n        *tuiSidebar=\"!!(open$ | async)\"\n        class=\"t-navigation\"\n    ></tui-doc-navigation>\n</button>\n<div class=\"t-logo\">\n    <img\n        *polymorpheusOutlet=\"logo as src\"\n        alt=\"Logo\"\n        class=\"t-img\"\n        [src]=\"src\"\n    />\n</div>\n<ng-content></ng-content>\n", styles: [":host{position:fixed;top:0;left:0;right:0;z-index:1;display:flex;box-shadow:var(--tui-shadow-navigation);height:3.9375rem;align-items:center;padding:0 1.25rem;background:var(--tui-base-01);border-bottom:1px solid var(--tui-base-03)}@supports (background: color-mix(in srgb,var(--tui-base-01),transparent 50%)){:host{background:color-mix(in srgb,var(--tui-base-01),transparent 50%);-webkit-backdrop-filter:blur(1.25rem);backdrop-filter:blur(1.25rem)}}.t-logo{margin-right:auto;font:var(--tui-font-heading-5)}.t-img{display:block}.t-menu{margin-left:-1.25rem}@media screen and (min-width: 48em){.t-menu{display:none}}.t-navigation{min-height:100%}\n"], components: [{ type: i2.TuiButtonComponent, selector: "button[tuiButton], button[tuiIconButton], a[tuiButton], a[tuiIconButton]", inputs: ["appearance", "disabled", "icon", "iconRight", "shape", "showLoader", "size"] }, { type: TuiDocNavigationComponent, selector: "tui-doc-navigation" }], directives: [{ type: i6.TuiActiveZoneDirective, selector: "[tuiActiveZone]:not(ng-container), [tuiActiveZoneChange]:not(ng-container), [tuiActiveZoneParent]:not(ng-container)", inputs: ["tuiActiveZoneParent"], outputs: ["tuiActiveZoneChange"], exportAs: ["tuiActiveZone"] }, { type: i4$2.TuiSidebarDirective, selector: "[tuiSidebar]", inputs: ["tuiSidebarDirection", "tuiSidebarAutoWidth", "tuiSidebar"] }, { type: i5$1.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }], pipes: { "async": i4.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocHeaderComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'header[tuiDocHeader]',
                    templateUrl: './header.template.html',
                    styleUrls: ['./header.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_DOC_ICONS]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_DOC_LOGO]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_DOC_MENU_TEXT]
                }] }, { type: i7.Router, decorators: [{
                    type: Inject,
                    args: [Router]
                }] }]; } });

class TuiDocNavigationModule {
}
TuiDocNavigationModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocNavigationModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiDocNavigationModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocNavigationModule, declarations: [TuiDocNavigationComponent], imports: [CommonModule,
        ReactiveFormsModule,
        RouterModule,
        PolymorpheusModule,
        TuiScrollIntoViewLinkModule,
        TuiButtonModule,
        TuiInputModule,
        TuiTextfieldControllerModule,
        TuiActiveZoneModule,
        TuiLetModule,
        TuiModeModule,
        TuiLinkModule,
        TuiExpandModule,
        TuiHostedDropdownModule,
        TuiDropdownModule,
        TuiAccordionModule,
        TuiScrollbarModule,
        TuiSvgModule,
        TuiDataListModule,
        TuiAutoFocusModule], exports: [TuiDocNavigationComponent] });
TuiDocNavigationModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocNavigationModule, imports: [[
            CommonModule,
            ReactiveFormsModule,
            RouterModule,
            PolymorpheusModule,
            TuiScrollIntoViewLinkModule,
            TuiButtonModule,
            TuiInputModule,
            TuiTextfieldControllerModule,
            TuiActiveZoneModule,
            TuiLetModule,
            TuiModeModule,
            TuiLinkModule,
            TuiExpandModule,
            TuiHostedDropdownModule,
            TuiDropdownModule,
            TuiAccordionModule,
            TuiScrollbarModule,
            TuiSvgModule,
            TuiDataListModule,
            TuiAutoFocusModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocNavigationModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        ReactiveFormsModule,
                        RouterModule,
                        PolymorpheusModule,
                        TuiScrollIntoViewLinkModule,
                        TuiButtonModule,
                        TuiInputModule,
                        TuiTextfieldControllerModule,
                        TuiActiveZoneModule,
                        TuiLetModule,
                        TuiModeModule,
                        TuiLinkModule,
                        TuiExpandModule,
                        TuiHostedDropdownModule,
                        TuiDropdownModule,
                        TuiAccordionModule,
                        TuiScrollbarModule,
                        TuiSvgModule,
                        TuiDataListModule,
                        TuiAutoFocusModule,
                    ],
                    declarations: [TuiDocNavigationComponent],
                    exports: [TuiDocNavigationComponent],
                }]
        }] });

class TuiDocHeaderModule {
}
TuiDocHeaderModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocHeaderModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiDocHeaderModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocHeaderModule, declarations: [TuiDocHeaderComponent], imports: [CommonModule,
        PolymorpheusModule,
        TuiButtonModule,
        TuiSidebarModule,
        TuiActiveZoneModule,
        TuiDocNavigationModule], exports: [TuiDocHeaderComponent] });
TuiDocHeaderModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocHeaderModule, imports: [[
            CommonModule,
            PolymorpheusModule,
            TuiButtonModule,
            TuiSidebarModule,
            TuiActiveZoneModule,
            TuiDocNavigationModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocHeaderModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        PolymorpheusModule,
                        TuiButtonModule,
                        TuiSidebarModule,
                        TuiActiveZoneModule,
                        TuiDocNavigationModule,
                    ],
                    declarations: [TuiDocHeaderComponent],
                    exports: [TuiDocHeaderComponent],
                }]
        }] });

class TuiDocSeeAlsoComponent {
    constructor(text, pages) {
        this.text = text;
        this.pages = pages;
        this.seeAlso = [];
    }
    getRouterLink(pageTitle) {
        var _a, _b;
        return (_b = (_a = this.pages.get(pageTitle)) === null || _a === void 0 ? void 0 : _a.route) !== null && _b !== void 0 ? _b : '';
    }
}
TuiDocSeeAlsoComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocSeeAlsoComponent, deps: [{ token: TUI_DOC_SEE_ALSO_TEXT }, { token: TUI_DOC_MAP_PAGES }], target: i0.ɵɵFactoryTarget.Component });
TuiDocSeeAlsoComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiDocSeeAlsoComponent, selector: "tui-doc-see-also", inputs: { seeAlso: "seeAlso" }, ngImport: i0, template: "<h5 class=\"t-header\">{{ text }}</h5>\n<ng-container *ngFor=\"let item of seeAlso; last as last\">\n    <a\n        tuiLink\n        [innerText]=\"item\"\n        [routerLink]=\"getRouterLink(item)\"\n    ></a>\n    <ng-container *ngIf=\"!last\">{{ ', ' }}</ng-container>\n</ng-container>\n", styles: [":host{display:block}.t-header{font-size:.6875rem;line-height:1rem;text-transform:uppercase;letter-spacing:.075em;color:var(--tui-text-02);margin:0 0 .5rem;white-space:nowrap}\n"], components: [{ type: i2.TuiLinkComponent, selector: "a[tuiLink], button[tuiLink]", inputs: ["pseudo", "icon", "iconAlign", "iconRotated", "mode"], exportAs: ["tuiLink"] }], directives: [{ type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i7.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocSeeAlsoComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-doc-see-also',
                    templateUrl: './see-also.template.html',
                    styleUrls: ['./see-also.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_DOC_SEE_ALSO_TEXT]
                }] }, { type: Map, decorators: [{
                    type: Inject,
                    args: [TUI_DOC_MAP_PAGES]
                }] }]; }, propDecorators: { seeAlso: [{
                type: Input
            }] } });

class TuiDocSeeAlsoModule {
}
TuiDocSeeAlsoModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocSeeAlsoModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiDocSeeAlsoModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocSeeAlsoModule, declarations: [TuiDocSeeAlsoComponent], imports: [CommonModule, RouterModule, TuiLinkModule], exports: [TuiDocSeeAlsoComponent] });
TuiDocSeeAlsoModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocSeeAlsoModule, imports: [[CommonModule, RouterModule, TuiLinkModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocSeeAlsoModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, RouterModule, TuiLinkModule],
                    declarations: [TuiDocSeeAlsoComponent],
                    exports: [TuiDocSeeAlsoComponent],
                }]
        }] });

class TuiDocSourceCodeComponent {
    constructor(icons, sourceCode, text) {
        this.icons = icons;
        this.sourceCode = sourceCode;
        this.text = text;
        this.header = '';
        this.package = '';
        this.type = '';
        this.path = '';
    }
    get pathOptions() {
        return this.getPathOptions(this.header, this.package, this.type, this.path);
    }
    pathIsUrl(path) {
        return path.startsWith('http');
    }
    getPathOptions(header, packageName, type, path) {
        return {
            header,
            package: packageName,
            type,
            path,
        };
    }
}
TuiDocSourceCodeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocSourceCodeComponent, deps: [{ token: TUI_DOC_ICONS }, { token: TUI_DOC_SOURCE_CODE }, { token: TUI_DOC_SOURCE_CODE_TEXT }], target: i0.ɵɵFactoryTarget.Component });
TuiDocSourceCodeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiDocSourceCodeComponent, selector: "tui-doc-source-code", inputs: { header: "header", package: "package", type: "type", path: "path" }, ngImport: i0, template: "<a\n    *polymorpheusOutlet=\"pathIsUrl(path) ? path : sourceCode as link; context: pathOptions\"\n    appearance=\"icon\"\n    size=\"s\"\n    target=\"_blank\"\n    tuiIconButton\n    type=\"button\"\n    [href]=\"link\"\n    [icon]=\"icons.code\"\n    [title]=\"text\"\n></a>\n", components: [{ type: i2.TuiButtonComponent, selector: "button[tuiButton], button[tuiIconButton], a[tuiButton], a[tuiIconButton]", inputs: ["appearance", "disabled", "icon", "iconRight", "shape", "showLoader", "size"] }], directives: [{ type: i5$1.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiPure
], TuiDocSourceCodeComponent.prototype, "pathIsUrl", null);
__decorate([
    tuiPure
], TuiDocSourceCodeComponent.prototype, "getPathOptions", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocSourceCodeComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-doc-source-code',
                    templateUrl: './source-code.template.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_DOC_ICONS]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_DOC_SOURCE_CODE]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_DOC_SOURCE_CODE_TEXT]
                }] }]; }, propDecorators: { header: [{
                type: Input
            }], package: [{
                type: Input
            }], type: [{
                type: Input
            }], path: [{
                type: Input
            }], pathIsUrl: [], getPathOptions: [] } });

class TuiDocSourceCodeModule {
}
TuiDocSourceCodeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocSourceCodeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiDocSourceCodeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocSourceCodeModule, declarations: [TuiDocSourceCodeComponent], imports: [CommonModule, PolymorpheusModule, TuiButtonModule], exports: [TuiDocSourceCodeComponent] });
TuiDocSourceCodeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocSourceCodeModule, imports: [[CommonModule, PolymorpheusModule, TuiButtonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocSourceCodeModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, PolymorpheusModule, TuiButtonModule],
                    declarations: [TuiDocSourceCodeComponent],
                    exports: [TuiDocSourceCodeComponent],
                }]
        }] });

class TuiLanguageSwitcherComponent {
    constructor(switcher, flagPipe) {
        this.switcher = switcher;
        this.flagPipe = flagPipe;
        this.language = new FormControl(tuiCapitalizeFirstLetter(this.switcher.language));
        this.flags = new Map([
            ['chinese', TuiCountryIsoCode.CN],
            ['dutch', TuiCountryIsoCode.NL],
            ['english', TuiCountryIsoCode.GB],
            ['french', TuiCountryIsoCode.FR],
            ['german', TuiCountryIsoCode.DE],
            ['italian', TuiCountryIsoCode.IT],
            ['polish', TuiCountryIsoCode.PL],
            ['portuguese', TuiCountryIsoCode.PT],
            ['russian', TuiCountryIsoCode.RU],
            ['spanish', TuiCountryIsoCode.ES],
            ['turkish', TuiCountryIsoCode.TR],
            ['ukrainian', TuiCountryIsoCode.UA],
            ['kazakh', TuiCountryIsoCode.KZ],
            ['malay', TuiCountryIsoCode.MY],
            ['vietnamese', TuiCountryIsoCode.VN],
        ]);
        this.names = Array.from(this.flags.keys());
    }
    /**
     * @deprecated use `<img [src]="countryIsoCode | tuiFlagPipe" />`
     * TODO drop in v4.0
     */
    getFlagPath(code) {
        return this.flagPipe.transform(code);
    }
}
TuiLanguageSwitcherComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiLanguageSwitcherComponent, deps: [{ token: TuiLanguageSwitcher }, { token: TuiFlagPipe }], target: i0.ɵɵFactoryTarget.Component });
TuiLanguageSwitcherComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiLanguageSwitcherComponent, selector: "tui-language-switcher", providers: [
        // TODO: for backward compatibility only. Drop in v4.0
        TuiFlagPipe,
    ], ngImport: i0, template: "<tui-select [formControl]=\"language\">\n    <ng-content></ng-content>\n    <tui-data-list *tuiDataList>\n        <button\n            *ngFor=\"let name of names\"\n            tuiOption\n            [value]=\"name | titlecase\"\n            (click)=\"switcher.setLanguage(name)\"\n        >\n            <img\n                alt=\"\"\n                class=\"t-flag\"\n                [src]=\"flags.get(name) | tuiFlag\"\n            />\n            {{ name | titlecase }}\n        </button>\n    </tui-data-list>\n</tui-select>\n", styles: [".t-flag{width:1.75rem;height:1.25rem;margin-right:.5rem}\n"], components: [{ type: i1.TuiSelectComponent, selector: "tui-select", inputs: ["stringify", "identityMatcher", "valueContent"] }, { type: i2.TuiDataListComponent, selector: "tui-data-list", inputs: ["role", "emptyContent", "size"] }, { type: i2.TuiOptionComponent, selector: "button[tuiOption], a[tuiOption]", inputs: ["size", "role", "disabled", "value"] }], directives: [{ type: i1.TuiSelectDirective, selector: "tui-select" }, { type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i2.TuiDataListDirective, selector: "ng-template[tuiDataList]" }, { type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "titlecase": i4.TitleCasePipe, "tuiFlag": i2.TuiFlagPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiLanguageSwitcherComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-language-switcher',
                    templateUrl: './language-switcher.component.html',
                    styleUrls: ['./language-switcher.component.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        // TODO: for backward compatibility only. Drop in v4.0
                        TuiFlagPipe,
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i5$2.TuiLanguageSwitcher, decorators: [{
                    type: Inject,
                    args: [TuiLanguageSwitcher]
                }] }, { type: i2.TuiFlagPipe, decorators: [{
                    type: Inject,
                    args: [TuiFlagPipe]
                }] }]; } });

class TuiLanguageSwitcherModule {
}
TuiLanguageSwitcherModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiLanguageSwitcherModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiLanguageSwitcherModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiLanguageSwitcherModule, declarations: [TuiLanguageSwitcherComponent], imports: [CommonModule,
        TuiFlagPipeModule,
        TuiSelectModule,
        TuiDataListModule,
        ReactiveFormsModule], exports: [TuiLanguageSwitcherComponent] });
TuiLanguageSwitcherModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiLanguageSwitcherModule, imports: [[
            CommonModule,
            TuiFlagPipeModule,
            TuiSelectModule,
            TuiDataListModule,
            ReactiveFormsModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiLanguageSwitcherModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        TuiFlagPipeModule,
                        TuiSelectModule,
                        TuiDataListModule,
                        ReactiveFormsModule,
                    ],
                    declarations: [TuiLanguageSwitcherComponent],
                    exports: [TuiLanguageSwitcherComponent],
                }]
        }] });

class TuiDocMainComponent {
    constructor(icons, theme, night) {
        this.icons = icons;
        this.theme = theme;
        this.night = night;
        this.change$ = this.night;
        this.night$ = this.change$.pipe(startWith(null), map(() => this.night.value), distinctUntilChanged(), shareReplay({ bufferSize: 1, refCount: true }));
    }
    get mode() {
        return this.night.value ? 'onDark' : null;
    }
    get icon() {
        return this.night.value ? this.icons.day : this.icons.night;
    }
}
TuiDocMainComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocMainComponent, deps: [{ token: TUI_DOC_ICONS }, { token: TuiThemeService }, { token: TuiThemeNightService }], target: i0.ɵɵFactoryTarget.Component });
TuiDocMainComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiDocMainComponent, selector: "tui-doc-main", host: { properties: { "attr.data-mode": "this.mode" } }, providers: [
        {
            provide: TuiModeDirective,
            useExisting: forwardRef(() => TuiDocMainComponent),
        },
        TuiSwipeService,
    ], ngImport: i0, template: "<tui-theme-night *ngIf=\"theme.isDefaultTheme && night.useDefaultNightTheme && (night$ | async)\"></tui-theme-night>\n<tui-root [attr.tuiTheme]=\"theme.isDefaultTheme && night.useDefaultNightTheme && (night$ | async) ? 'night' : null\">\n    <div class=\"tui-doc-page\">\n        <tui-doc-navigation class=\"tui-doc-navigation\">\n            <ng-content select=\"tuiDocNavigation\"></ng-content>\n        </tui-doc-navigation>\n        <div class=\"tui-doc-content\">\n            <router-outlet class=\"tui-doc-outlet\"></router-outlet>\n        </div>\n    </div>\n    <header tuiDocHeader>\n        <ng-content select=\"tuiDocHeader\"></ng-content>\n        <button\n            appearance=\"secondary\"\n            shape=\"rounded\"\n            size=\"s\"\n            tuiIconButton\n            tuiMode=\"onLight\"\n            type=\"button\"\n            class=\"tui-doc-night-mode-switch\"\n            [icon]=\"icon\"\n            (click)=\"night.toggle()\"\n        ></button>\n    </header>\n    <ng-container ngProjectAs=\"tuiOverContent\">\n        <ng-content select=\"tuiOverContent\"></ng-content>\n    </ng-container>\n    <ng-container ngProjectAs=\"tuiOverDialogs\">\n        <ng-content select=\"tuiOverDialogs\"></ng-content>\n    </ng-container>\n    <ng-container ngProjectAs=\"tuiOverAlerts\">\n        <ng-content select=\"tuiOverAlerts\"></ng-content>\n    </ng-container>\n    <ng-container ngProjectAs=\"tuiOverPortals\">\n        <ng-content select=\"tuiOverPortals\"></ng-content>\n    </ng-container>\n    <ng-container ngProjectAs=\"tuiOverHints\">\n        <ng-content select=\"tuiOverHints\"></ng-content>\n    </ng-container>\n</tui-root>\n", styles: ["@keyframes tuiShaking{0%,to{transform:translate(0)}10%,30%,50%,70%,90%{transform:translate(-.3125rem)}20%,40%,60%,80%{transform:translate(.3125rem)}}html,body{scroll-padding-top:4rem;background:var(--tui-base-01);height:auto}tui-root>tui-scroll-controls>.t-bar_vertical{top:4rem!important}tui-doc-main{display:block}code:not(pre code):not(.hljs):not([class*=\"language-\"]){transition-property:background;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;display:inline-flex;background:var(--tui-base-02);color:var(--tui-text-02);vertical-align:middle;align-items:center;border-radius:.25rem;font-weight:500;outline:1px solid var(--tui-base-04);font-size:.75rem;padding:0 .3125rem;margin:.125rem .1875rem;text-wrap:wrap}tui-notification code:not(pre code):not(.hljs):not([class*=\"language-\"]){mix-blend-mode:luminosity}a code:not(pre code):not(.hljs):not([class*=\"language-\"]){color:var(--tui-link)}button:focus code,a:focus code{background:var(--tui-base-01)}.tui-doc-page{isolation:isolate;padding-top:4rem}tui-doc-navigation.tui-doc-navigation{position:fixed;top:4rem;bottom:0;width:16.25rem;border-right:1px solid var(--tui-base-03)}@media screen and (max-width: 47.9625em){tui-doc-navigation.tui-doc-navigation{display:none}}.tui-doc-content{margin-left:16.25rem}@media screen and (max-width: 47.9625em){.tui-doc-content{margin-left:0}}.tui-doc-outlet+*{display:block}.tui-doc-night-mode-switch{margin-left:1rem}.tui-doc-night-mode-switch tui-svg{color:var(--tui-text-02)}tui-doc-code .hljs-tag{background:none}tui-doc-code .hljs{display:block;overflow-x:auto;padding:.5em;color:var(--tui-text-01);background-color:var(--tui-clear)}tui-doc-code .hljs.hljs-line-numbers{background:transparent}tui-doc-code .hljs-subst,tui-doc-code .hljs-title{font-weight:normal;color:var(--tui-text-01)}tui-doc-code .hljs-property{color:var(--tui-support-14)}tui-doc-code .hljs-comment,tui-doc-code .hljs-quote{color:var(--tui-text-02);font-style:italic}tui-doc-code .hljs-meta{color:#e38162}tui-doc-code .hljs-section,tui-doc-code .hljs-name,tui-doc-code .hljs-literal,tui-doc-code .hljs-keyword,tui-doc-code .hljs-selector-tag,tui-doc-code .hljs-type,tui-doc-code .hljs-selector-id,tui-doc-code .hljs-selector-class{font-weight:bold;color:var(--tui-link)}tui-doc-code .hljs-attr{color:var(--tui-link)}tui-doc-code .hljs-attribute,tui-doc-code .hljs-number,tui-doc-code .hljs-regexp,tui-doc-code .hljs-link,tui-doc-code .hljs-built_in{font-weight:bold;color:var(--tui-support-06)}tui-doc-code .hljs-number,tui-doc-code .hljs-regexp,tui-doc-code .hljs-link{font-weight:normal}tui-doc-code .hljs-string{color:var(--tui-positive);font-weight:bold}tui-doc-code .hljs-symbol,tui-doc-code .hljs-bullet,tui-doc-code .hljs-formula{color:var(--tui-text-01);background:var(--tui-base-02);font-style:italic}tui-doc-code .hljs-doctag{text-decoration:underline}tui-doc-code .hljs-variable,tui-doc-code .hljs-template-variable{color:var(--tui-link-hover)}tui-doc-code [data-mode=onDark] .hljs-variable,tui-doc-code [data-mode=onDark] .hljs-template-variable{color:var(--tui-warning-fill)}tui-doc-code .hljs-addition{background:var(--tui-success-bg)}tui-doc-code .hljs-deletion{background:var(--tui-error-bg)}tui-doc-code .hljs-emphasis{font-style:italic}tui-doc-code .hljs-strong{font-weight:bold}tui-doc-code .hljs .hljs-line-numbers{padding:0}tui-doc-code .hljs-ln-numbers{vertical-align:top;opacity:.3;text-align:right;padding-right:1em!important}\n"], components: [{ type: i2.TuiThemeNightComponent, selector: "tui-theme-night" }, { type: i2.TuiRootComponent, selector: "tui-root" }, { type: TuiDocNavigationComponent, selector: "tui-doc-navigation" }, { type: TuiDocHeaderComponent, selector: "header[tuiDocHeader]" }, { type: i2.TuiButtonComponent, selector: "button[tuiButton], button[tuiIconButton], a[tuiButton], a[tuiIconButton]", inputs: ["appearance", "disabled", "icon", "iconRight", "shape", "showLoader", "size"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i7.RouterOutlet, selector: "router-outlet", outputs: ["activate", "deactivate"], exportAs: ["outlet"] }, { type: i2.TuiModeDirective, selector: "[tuiMode]", inputs: ["tuiMode"] }], pipes: { "async": i4.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocMainComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-doc-main',
                    templateUrl: './main.template.html',
                    styleUrls: ['./main.style.less'],
                    encapsulation: ViewEncapsulation.None,
                    // @note: This one was default on purpose so we can test demo in default mode.
                    // eslint-disable-next-line @angular-eslint/prefer-on-push-component-change-detection
                    changeDetection: ChangeDetectionStrategy.Default,
                    providers: [
                        {
                            provide: TuiModeDirective,
                            useExisting: forwardRef(() => TuiDocMainComponent),
                        },
                        TuiSwipeService,
                    ],
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_DOC_ICONS]
                }] }, { type: i6$1.TuiThemeService, decorators: [{
                    type: Inject,
                    args: [TuiThemeService]
                }] }, { type: i6$1.TuiThemeNightService, decorators: [{
                    type: Inject,
                    args: [TuiThemeNightService]
                }] }]; }, propDecorators: { mode: [{
                type: HostBinding,
                args: ['attr.data-mode']
            }] } });

class TuiDocMainModule {
}
TuiDocMainModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocMainModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiDocMainModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocMainModule, declarations: [TuiDocMainComponent], imports: [CommonModule,
        RouterModule,
        TuiThemeNightModule,
        TuiDocHeaderModule,
        TuiRootModule,
        TuiDialogModule,
        TuiAlertModule,
        TuiButtonModule,
        TuiModeModule,
        TuiDocNavigationModule], exports: [TuiDocMainComponent] });
TuiDocMainModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocMainModule, imports: [[
            CommonModule,
            RouterModule,
            TuiThemeNightModule,
            TuiDocHeaderModule,
            TuiRootModule,
            TuiDialogModule,
            TuiAlertModule,
            TuiButtonModule,
            TuiModeModule,
            TuiDocNavigationModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocMainModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        RouterModule,
                        TuiThemeNightModule,
                        TuiDocHeaderModule,
                        TuiRootModule,
                        TuiDialogModule,
                        TuiAlertModule,
                        TuiButtonModule,
                        TuiModeModule,
                        TuiDocNavigationModule,
                    ],
                    declarations: [TuiDocMainComponent],
                    exports: [TuiDocMainComponent],
                }]
        }] });

/**
 * Array if related page titles
 */
const PAGE_SEE_ALSO = new InjectionToken('[PAGE_SEE_ALSO]');
const PAGE_PROVIDERS = [
    {
        provide: PAGE_SEE_ALSO,
        deps: [ElementRef, TUI_DOC_SEE_ALSO],
        useFactory: ({ nativeElement }, seeAlsoGroups) => {
            const currentHeader = nativeElement.getAttribute('header');
            const groups = seeAlsoGroups.filter(group => group.includes(currentHeader)) || [];
            const seeAlsoSet = new Set(groups
                .join()
                .split(',')
                .filter(component => component && component !== currentHeader));
            return Array.from(seeAlsoSet);
        },
    },
];

class TuiDocPageTabConnectorDirective {
    constructor(template) {
        this.template = template;
    }
}
TuiDocPageTabConnectorDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocPageTabConnectorDirective, deps: [{ token: TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
TuiDocPageTabConnectorDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiDocPageTabConnectorDirective, selector: "[pageTab]", inputs: { pageTab: "pageTab" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocPageTabConnectorDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[pageTab]',
                }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef, decorators: [{
                    type: Inject,
                    args: [TemplateRef]
                }] }]; }, propDecorators: { pageTab: [{
                type: Input
            }] } });

class TuiDocPageComponent {
    constructor(defaultTabs, seeAlso) {
        this.defaultTabs = defaultTabs;
        this.seeAlso = seeAlso;
        this.header = '';
        this.package = '';
        this.type = '';
        this.path = '';
        this.deprecated = false;
        this.tabConnectors = EMPTY_QUERY;
        this.activeItemIndex = 0;
        this.from = / /g;
        this.to = '_';
    }
    get showSeeAlso() {
        return !!this.seeAlso.length && this.activeItemIndex === 0;
    }
}
TuiDocPageComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocPageComponent, deps: [{ token: TUI_DOC_DEFAULT_TABS }, { token: PAGE_SEE_ALSO }], target: i0.ɵɵFactoryTarget.Component });
TuiDocPageComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiDocPageComponent, selector: "tui-doc-page", inputs: { header: "header", package: "package", type: "type", path: "path", deprecated: "deprecated" }, providers: PAGE_PROVIDERS, queries: [{ propertyName: "tabConnectors", predicate: TuiDocPageTabConnectorDirective }], ngImport: i0, template: "<header class=\"t-header\">\n    <h1 class=\"t-title\">\n        {{ header }}\n        <tui-tag\n            *ngIf=\"!!deprecated || deprecated === ''\"\n            status=\"custom\"\n            value=\"deprecated\"\n            class=\"t-tag t-tag_deprecated\"\n        ></tui-tag>\n        <tui-tag\n            *ngIf=\"package\"\n            status=\"custom\"\n            class=\"t-tag t-tag_package\"\n            [autoColor]=\"true\"\n            [value]=\"package\"\n        ></tui-tag>\n    </h1>\n    <tui-tabs-with-more\n        *ngIf=\"tabConnectors.length\"\n        class=\"t-tabs\"\n        [(activeItemIndex)]=\"activeItemIndex\"\n    >\n        <ng-container *ngFor=\"let tab of tabConnectors; first as first; index as index\">\n            <ng-container *ngIf=\"tab.pageTab || defaultTabs[index] as tabName\">\n                <a\n                    *tuiItem\n                    routerLinkActive\n                    tuiTab\n                    [routerLink]=\"first ? './' : (tabName | tuiReplace: from : to)\"\n                    [routerLinkActiveOptions]=\"{exact: first}\"\n                >\n                    {{ tabName }}\n                </a>\n            </ng-container>\n        </ng-container>\n    </tui-tabs-with-more>\n    <tui-doc-source-code\n        class=\"t-source-code\"\n        [header]=\"header\"\n        [package]=\"package\"\n        [path]=\"path\"\n        [type]=\"type\"\n    ></tui-doc-source-code>\n</header>\n<div class=\"t-content\">\n    <ng-content></ng-content>\n    <tui-doc-see-also\n        *ngIf=\"showSeeAlso\"\n        class=\"t-see-also\"\n        [seeAlso]=\"seeAlso\"\n    ></tui-doc-see-also>\n    <ng-container *ngFor=\"let tab of tabConnectors; index as index\">\n        <ng-container\n            *ngIf=\"index === activeItemIndex\"\n            [ngTemplateOutlet]=\"tab.template\"\n        ></ng-container>\n    </ng-container>\n</div>\n", styles: [":host{display:flex;flex-direction:column;min-height:0;flex-basis:0;flex-grow:1}.t-header{display:flex;font:var(--tui-font-heading-3);flex-wrap:wrap;min-height:7.25rem;color:var(--tui-text-01);box-shadow:inset 0 -1px 0 0 var(--tui-base-03);padding:3.75rem 0 0;box-sizing:border-box;flex-shrink:0;margin:0 min(10vw,8.75rem)}:host-context(tui-root._mobile) .t-header{font:var(--tui-font-heading-4);min-height:4.5rem;padding:1.25rem 1.25rem 0;margin:0}.t-title{min-width:100%;font-size:inherit;margin:0}.t-tag{vertical-align:middle;text-transform:uppercase;margin-right:.5rem}.t-tag_deprecated{background-color:var(--tui-error-fill);color:#fff}.t-tag.t-tag_package{color:#000}.t-tabs{flex:1;margin:1.125rem .3125rem 0 0}:host-context(tui-root._mobile) .t-tabs{margin-top:.25rem}.t-content{padding:2rem 0;margin:0 min(10vw,8.75rem)}:host-context(tui-root._mobile) .t-content{padding:2rem 1.25rem;margin:0}.t-see-also{min-width:18.75rem;width:30%;float:right;margin-left:1.5rem}:host-context(tui-root._mobile) .t-see-also{float:none;width:100%;margin:0 0 1.5rem}.t-source-code{align-self:flex-end;line-height:2.75rem;margin-left:auto}\n"], components: [{ type: i1.TuiTagComponent, selector: "tui-tag, a[tuiTag], button[tuiTag]", inputs: ["value", "editable", "separator", "maxLength", "size", "showLoader", "status", "hoverable", "removable", "disabled", "autoColor", "leftContent"], outputs: ["edited"] }, { type: i1.TuiTabsWithMoreComponent, selector: "tui-tabs-with-more, nav[tuiTabsWithMore]", inputs: ["moreContent", "dropdownContent", "underline", "activeItemIndex", "itemsLimit"], outputs: ["activeItemIndexChange"] }, { type: i1.TuiTabComponent, selector: "a[tuiTab]:not([routerLink]), a[tuiTab][routerLink][routerLinkActive], button[tuiTab]" }, { type: TuiDocSourceCodeComponent, selector: "tui-doc-source-code", inputs: ["header", "package", "type", "path"] }, { type: TuiDocSeeAlsoComponent, selector: "tui-doc-see-also", inputs: ["seeAlso"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i6.TuiItemDirective, selector: "[tuiItem]" }, { type: i7.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: i7.RouterLinkActive, selector: "[routerLinkActive]", inputs: ["routerLinkActiveOptions", "routerLinkActive"], exportAs: ["routerLinkActive"] }, { type: i4.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], pipes: { "tuiReplace": i6.TuiReplacePipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocPageComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-doc-page',
                    templateUrl: './page.template.html',
                    styleUrls: ['./page.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: PAGE_PROVIDERS,
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_DOC_DEFAULT_TABS]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [PAGE_SEE_ALSO]
                }] }]; }, propDecorators: { header: [{
                type: Input
            }], package: [{
                type: Input
            }], type: [{
                type: Input
            }], path: [{
                type: Input
            }], deprecated: [{
                type: Input
            }], tabConnectors: [{
                type: ContentChildren,
                args: [TuiDocPageTabConnectorDirective]
            }] } });

class TuiDocPageModule {
}
TuiDocPageModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocPageModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiDocPageModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocPageModule, declarations: [TuiDocPageComponent, TuiDocPageTabConnectorDirective], imports: [CommonModule,
        RouterModule,
        TuiDocSeeAlsoModule,
        TuiTabsModule,
        TuiTagModule,
        TuiDocSourceCodeModule,
        TuiReplacePipeModule], exports: [TuiDocPageComponent, TuiDocPageTabConnectorDirective] });
TuiDocPageModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocPageModule, imports: [[
            CommonModule,
            RouterModule,
            TuiDocSeeAlsoModule,
            TuiTabsModule,
            TuiTagModule,
            TuiDocSourceCodeModule,
            TuiReplacePipeModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocPageModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        RouterModule,
                        TuiDocSeeAlsoModule,
                        TuiTabsModule,
                        TuiTagModule,
                        TuiDocSourceCodeModule,
                        TuiReplacePipeModule,
                    ],
                    declarations: [TuiDocPageComponent, TuiDocPageTabConnectorDirective],
                    exports: [TuiDocPageComponent, TuiDocPageTabConnectorDirective],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { PAGE_PROVIDERS, PAGE_SEE_ALSO, TUI_DOC_EXAMPLE_DEFAULT_OPTIONS, TUI_DOC_EXAMPLE_OPTIONS, TuiDocCodeComponent, TuiDocCodeModule, TuiDocCopyComponent, TuiDocCopyModule, TuiDocDemoComponent, TuiDocDemoModule, TuiDocDocumentationComponent, TuiDocDocumentationModule, TuiDocDocumentationPropertyConnectorDirective, TuiDocExampleComponent, TuiDocExampleGetTabsPipe, TuiDocExampleModule, TuiDocHeaderComponent, TuiDocHeaderModule, TuiDocMainComponent, TuiDocMainModule, TuiDocNavigationComponent, TuiDocNavigationModule, TuiDocPageComponent, TuiDocPageModule, TuiDocPageTabConnectorDirective, TuiDocSeeAlsoComponent, TuiDocSeeAlsoModule, TuiDocSourceCodeComponent, TuiDocSourceCodeModule, TuiDocTabComponent, TuiDocTabModule, TuiDocTypeReferencePipe, TuiGetColorPipe, TuiGetOpacityPipe, TuiInputOpacityDirective, TuiInputOpacityModule, TuiInspectPipe, TuiIsOptionalPipe, TuiIsPrimitivePolymorpheusContentPipe, TuiLanguageSwitcherComponent, TuiLanguageSwitcherModule, TuiShowCleanerPipe, TuiStripOptionalPipe, tuiDocExampleOptionsProvider };
//# sourceMappingURL=taiga-ui-addon-doc-components.js.map
