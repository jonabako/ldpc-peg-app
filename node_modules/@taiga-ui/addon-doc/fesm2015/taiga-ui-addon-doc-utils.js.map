{"version":3,"file":"taiga-ui-addon-doc-utils.js","sources":["../../../projects/addon-doc/utils/coerce-boolean.ts","../../../projects/addon-doc/utils/coerce-value.ts","../../../projects/addon-doc/utils/generate-routes.ts","../../../projects/addon-doc/utils/inspect.ts","../../../projects/addon-doc/utils/is-page-group.ts","../../../projects/addon-doc/utils/parse-code-block.ts","../../../projects/addon-doc/utils/raw-load.ts","../../../projects/addon-doc/utils/raw-load-record.ts","../../../projects/addon-doc/utils/sort-pages.ts","../../../projects/addon-doc/utils/to-flat-map-pages.ts","../../../projects/addon-doc/utils/transliterate-keyboard-layout.ts","../../../projects/addon-doc/utils/type-reference-parser.ts","../../../projects/addon-doc/utils/taiga-ui-addon-doc-utils.ts"],"sourcesContent":["export function tuiCoerceValueIsTrue(value?: boolean | string): boolean {\n    return value?.toString() === 'true';\n}\n","function isEmptyParamValue(value: string): boolean {\n    return ['undefined', 'null', 'NaN'].includes(value);\n}\n\nfunction isBooleanParamValue(value: string): boolean {\n    return value === 'true' || value === 'false';\n}\n\nfunction isNumberParamValue(value: string): boolean {\n    return !!value.trim() && !Number.isNaN(Number(value)) && !value.startsWith('+');\n}\n\nfunction isPossibleArray(value: string): boolean {\n    return value.startsWith('[') && value.endsWith(']');\n}\n\nfunction isPossibleObject(value: string): boolean {\n    return value.startsWith('{') && value.endsWith('}');\n}\n\nexport function tuiCoerceValue<T>(\n    value?: T,\n): Record<string, any> | T | boolean | number | string | null {\n    const prepared = String(value).trim();\n\n    if (isEmptyParamValue(prepared)) {\n        return null;\n    }\n\n    if (isBooleanParamValue(prepared)) {\n        return String(prepared) === 'true';\n    }\n\n    if (isNumberParamValue(prepared)) {\n        return Number(prepared);\n    }\n\n    const decodedValue = decodeURIComponent(prepared);\n\n    try {\n        return isPossibleArray(decodedValue) || isPossibleObject(decodedValue)\n            ? JSON.parse(decodedValue)\n            : decodedValue;\n    } catch {\n        return decodedValue;\n    }\n}\n","import {Type} from '@angular/core';\nimport {Routes} from '@angular/router';\n\nexport function tuiGenerateRoutes(type: Type<unknown>): Routes {\n    return [\n        {\n            path: '',\n            component: type,\n            children: [\n                {\n                    path: ':tab',\n                    component: type,\n                },\n            ],\n        },\n    ];\n}\n","function inspectArray(array: readonly unknown[], depth: number): string {\n    if (depth === 0) {\n        return '[…]';\n    }\n\n    let result = '';\n    let first = true;\n\n    for (let index = 0; index < array.length; index++) {\n        if (first) {\n            first = false;\n        } else {\n            result += ', ';\n        }\n\n        result += index in array ? tuiInspectAny(array[index], depth - 1) : 'empty';\n    }\n\n    return `[${result}]`;\n}\n\nfunction inspectObject(object: {[key: string]: unknown}, depth: number): string {\n    if (depth === 0) {\n        return '{…}';\n    }\n\n    let result = '';\n\n    let first = true;\n\n    for (const key in object) {\n        if (!object.hasOwnProperty(key)) {\n            continue;\n        }\n\n        if (first) {\n            first = false;\n        } else {\n            result += ', ';\n        }\n\n        result += `${key}: ${tuiInspectAny(object[key], depth - 1)}`;\n    }\n\n    return `{${result}}`;\n}\n\n/**\n * Returns readable JS entity\n * @param data\n * @param depth\n * @return readable JS entity\n */\nexport function tuiInspectAny<T>(data: T, depth: number): string {\n    if (data === null) {\n        return 'null';\n    }\n\n    switch (typeof data) {\n        case 'string':\n            return `'${data}'`;\n        case 'undefined':\n        case 'number':\n        case 'boolean':\n        case 'function':\n            return String(data);\n        default:\n            break;\n    }\n\n    if (data instanceof RegExp) {\n        return String(data);\n    }\n\n    if (Array.isArray(data)) {\n        return inspectArray(data, depth);\n    }\n\n    return inspectObject(data as unknown as {[key: string]: unknown}, depth);\n}\n","import {TuiDocPage, TuiDocPageGroup} from '@taiga-ui/addon-doc/interfaces';\n\nexport function tuiIsPageGroup(\n    page: TuiDocPage | TuiDocPageGroup,\n): page is TuiDocPageGroup {\n    return 'subPages' in page;\n}\n","import MarkdownIt from 'markdown-it';\nimport Token from 'markdown-it/lib/token';\n\nexport function tuiTryParseMarkdownCodeBlock(text: string = ''): string[] {\n    const tokens: Token[] = new MarkdownIt().parse(text, {});\n    const result = tokens\n        .filter(({tag, type}) => tag === 'code' && type === 'fence')\n        .map(({content}) => content.trim());\n\n    return result.length ? result : [text];\n}\n","import {TuiRawLoaderContent} from '@taiga-ui/addon-doc/interfaces';\n\nexport async function tuiRawLoad(content: TuiRawLoaderContent): Promise<string> {\n    return content instanceof Promise ? (await content).default : content;\n}\n","import type {TuiDocExample} from '@taiga-ui/addon-doc/interfaces';\n\nimport {tuiRawLoad} from './raw-load';\n\nexport async function tuiRawLoadRecord(\n    example: TuiDocExample,\n): Promise<Record<string, string>> {\n    const processedContent: Record<string, string> = {};\n\n    for (const [key, content] of Object.entries(example)) {\n        if (content) {\n            processedContent[key] = await tuiRawLoad(content);\n        }\n    }\n\n    return processedContent;\n}\n","import {TuiDocPage, TuiDocPageGroup} from '@taiga-ui/addon-doc/interfaces';\n\nimport {tuiIsPageGroup} from './is-page-group';\n\nexport function tuiSortPages<T extends TuiDocPage | TuiDocPageGroup>(\n    pages: readonly T[],\n    excludeSections = new Set<string>(),\n): readonly T[] {\n    const sections = Array.from(new Set(pages.map(page => page.section)));\n\n    const sortedPages = pages.slice().sort((a, b) => {\n        if (\n            excludeSections.has(a.section ?? '') ||\n            excludeSections.has(b.section ?? '')\n        ) {\n            return 0;\n        }\n\n        const aSectionIndex = sections.indexOf(a.section);\n        const bSectionIndex = sections.indexOf(b.section);\n\n        if (aSectionIndex !== bSectionIndex) {\n            return aSectionIndex - bSectionIndex;\n        }\n\n        if (a.title > b.title) {\n            return 1;\n        }\n\n        return a.title.localeCompare(b.title);\n    });\n\n    return sortedPages.map(page =>\n        tuiIsPageGroup(page)\n            ? {\n                  ...page,\n                  subPages: tuiSortPages(page.subPages, excludeSections),\n              }\n            : page,\n    );\n}\n","import type {TuiDocPage} from '@taiga-ui/addon-doc/interfaces';\nimport type {TuiDocPages} from '@taiga-ui/addon-doc/types';\n\nfunction assertTitle(page: TuiDocPage, map: Map<string, TuiDocPage>): void {\n    if (map.has(page.title) && map.get(page.title)?.route !== page.route) {\n        console.error(\n            'Title for page should be unique for prevent inconsistent page names',\n            page,\n            '<== Collisions between ==>',\n            map.get(page.title),\n        );\n    }\n}\n\nexport function tuiToFlatMapPages(pages: TuiDocPages): Map<string, TuiDocPage> {\n    const map = new Map<string, TuiDocPage>();\n\n    pages.forEach(page => {\n        if ('subPages' in page) {\n            page.subPages.forEach(subPage => {\n                ngDevMode && assertTitle(subPage, map);\n                map.set(subPage.title, subPage);\n            });\n        } else {\n            ngDevMode && assertTitle(page, map);\n            map.set(page.title, page);\n        }\n    });\n\n    return map;\n}\n","const MAP: Record<string, string> = {\n    а: 'f',\n    б: ',',\n    в: 'd',\n    г: 'u',\n    д: 'l',\n    е: 't',\n    ё: '`',\n    ж: ';',\n    з: 'p',\n    и: 'b',\n    й: 'q',\n    к: 'r',\n    л: 'k',\n    м: 'v',\n    н: 'y',\n    о: 'j',\n    п: 'g',\n    р: 'h',\n    с: 'c',\n    т: 'n',\n    у: 'e',\n    ф: 'a',\n    х: '[',\n    ц: 'w',\n    ч: 'x',\n    ш: 'i',\n    щ: 'o',\n    ъ: ']',\n    ы: 's',\n    ь: 'm',\n    ю: '.',\n    я: 'z',\n};\n\n/**\n * Translates text mistakenly typed in the Russian layout into English\n * @param string string with Russian layout characters\n * @return string with English layout characters\n */\nexport function tuiTransliterateKeyboardLayout(string: string): string {\n    let newStr = '';\n\n    for (let i = 0; i < string.length; i++) {\n        newStr += string.charAt(i) in MAP ? MAP[string.charAt(i)] : string.charAt(i);\n    }\n\n    return newStr;\n}\n","export type TuiDocTypeReferenceParsed = ReadonlyArray<{type: string; extracted: string}>;\n\nexport function tuiTypeReferenceParser(types: string): TuiDocTypeReferenceParsed {\n    const generics = types.match(/<([^>]+)>/g);\n\n    const escaped = generics\n        ? generics\n              .reduce(\n                  (result, current) =>\n                      result.replace(current, current.replace(/\\|/g, '&')),\n                  types,\n              )\n              .split('|')\n              .map(item => item.trim())\n        : types.split('|').map(item => item.trim());\n\n    return escaped.reduce<TuiDocTypeReferenceParsed>((result, type) => {\n        let extracted = type\n            .trim()\n            .replace(/readonly /g, '')\n            .replace(/\\[\\]/g, '');\n\n        extracted =\n            extracted.match(/ReadonlyArray<([^>]+)>/)?.[1]?.split('&')?.[0] ?? extracted;\n        extracted = extracted.match(/\\[([^\\]]+)\\]/)?.[1]?.split(',')?.[0] ?? extracted;\n        extracted = (extracted.split('<')?.[0] ?? extracted)?.trim() ?? '';\n        extracted = Number.isNaN(parseFloat(extracted)) ? extracted : 'number';\n        extracted = /^'(.+)'$|^\"(.+)\"$|^`(.+)`$/.test(extracted) ? 'string' : extracted;\n        extracted = extracted.length === 1 ? 'unknown' : extracted;\n\n        return result.concat({type: type.replace(/&/g, '|'), extracted});\n    }, []);\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}