function inspectArray(array, depth) {
    if (depth === 0) {
        return '[…]';
    }
    let result = '';
    let first = true;
    for (let index = 0; index < array.length; index++) {
        if (first) {
            first = false;
        }
        else {
            result += ', ';
        }
        result += index in array ? tuiInspectAny(array[index], depth - 1) : 'empty';
    }
    return `[${result}]`;
}
function inspectObject(object, depth) {
    if (depth === 0) {
        return '{…}';
    }
    let result = '';
    let first = true;
    for (const key in object) {
        if (!object.hasOwnProperty(key)) {
            continue;
        }
        if (first) {
            first = false;
        }
        else {
            result += ', ';
        }
        result += `${key}: ${tuiInspectAny(object[key], depth - 1)}`;
    }
    return `{${result}}`;
}
/**
 * Returns readable JS entity
 * @param data
 * @param depth
 * @return readable JS entity
 */
export function tuiInspectAny(data, depth) {
    if (data === null) {
        return 'null';
    }
    switch (typeof data) {
        case 'string':
            return `'${data}'`;
        case 'undefined':
        case 'number':
        case 'boolean':
        case 'function':
            return String(data);
        default:
            break;
    }
    if (data instanceof RegExp) {
        return String(data);
    }
    if (Array.isArray(data)) {
        return inspectArray(data, depth);
    }
    return inspectObject(data, depth);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5zcGVjdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL2FkZG9uLWRvYy91dGlscy9pbnNwZWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFNBQVMsWUFBWSxDQUFDLEtBQXlCLEVBQUUsS0FBYTtJQUMxRCxJQUFJLEtBQUssS0FBSyxDQUFDLEVBQUU7UUFDYixPQUFPLEtBQUssQ0FBQztLQUNoQjtJQUVELElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQztJQUNoQixJQUFJLEtBQUssR0FBRyxJQUFJLENBQUM7SUFFakIsS0FBSyxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUUsS0FBSyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLEVBQUU7UUFDL0MsSUFBSSxLQUFLLEVBQUU7WUFDUCxLQUFLLEdBQUcsS0FBSyxDQUFDO1NBQ2pCO2FBQU07WUFDSCxNQUFNLElBQUksSUFBSSxDQUFDO1NBQ2xCO1FBRUQsTUFBTSxJQUFJLEtBQUssSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUUsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7S0FDL0U7SUFFRCxPQUFPLElBQUksTUFBTSxHQUFHLENBQUM7QUFDekIsQ0FBQztBQUVELFNBQVMsYUFBYSxDQUFDLE1BQWdDLEVBQUUsS0FBYTtJQUNsRSxJQUFJLEtBQUssS0FBSyxDQUFDLEVBQUU7UUFDYixPQUFPLEtBQUssQ0FBQztLQUNoQjtJQUVELElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQztJQUVoQixJQUFJLEtBQUssR0FBRyxJQUFJLENBQUM7SUFFakIsS0FBSyxNQUFNLEdBQUcsSUFBSSxNQUFNLEVBQUU7UUFDdEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDN0IsU0FBUztTQUNaO1FBRUQsSUFBSSxLQUFLLEVBQUU7WUFDUCxLQUFLLEdBQUcsS0FBSyxDQUFDO1NBQ2pCO2FBQU07WUFDSCxNQUFNLElBQUksSUFBSSxDQUFDO1NBQ2xCO1FBRUQsTUFBTSxJQUFJLEdBQUcsR0FBRyxLQUFLLGFBQWEsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUM7S0FDaEU7SUFFRCxPQUFPLElBQUksTUFBTSxHQUFHLENBQUM7QUFDekIsQ0FBQztBQUVEOzs7OztHQUtHO0FBQ0gsTUFBTSxVQUFVLGFBQWEsQ0FBSSxJQUFPLEVBQUUsS0FBYTtJQUNuRCxJQUFJLElBQUksS0FBSyxJQUFJLEVBQUU7UUFDZixPQUFPLE1BQU0sQ0FBQztLQUNqQjtJQUVELFFBQVEsT0FBTyxJQUFJLEVBQUU7UUFDakIsS0FBSyxRQUFRO1lBQ1QsT0FBTyxJQUFJLElBQUksR0FBRyxDQUFDO1FBQ3ZCLEtBQUssV0FBVyxDQUFDO1FBQ2pCLEtBQUssUUFBUSxDQUFDO1FBQ2QsS0FBSyxTQUFTLENBQUM7UUFDZixLQUFLLFVBQVU7WUFDWCxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN4QjtZQUNJLE1BQU07S0FDYjtJQUVELElBQUksSUFBSSxZQUFZLE1BQU0sRUFBRTtRQUN4QixPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUN2QjtJQUVELElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUNyQixPQUFPLFlBQVksQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7S0FDcEM7SUFFRCxPQUFPLGFBQWEsQ0FBQyxJQUEyQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQzdFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBpbnNwZWN0QXJyYXkoYXJyYXk6IHJlYWRvbmx5IHVua25vd25bXSwgZGVwdGg6IG51bWJlcik6IHN0cmluZyB7XG4gICAgaWYgKGRlcHRoID09PSAwKSB7XG4gICAgICAgIHJldHVybiAnW+KApl0nO1xuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSAnJztcbiAgICBsZXQgZmlyc3QgPSB0cnVlO1xuXG4gICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGFycmF5Lmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICBpZiAoZmlyc3QpIHtcbiAgICAgICAgICAgIGZpcnN0ID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQgKz0gJywgJztcbiAgICAgICAgfVxuXG4gICAgICAgIHJlc3VsdCArPSBpbmRleCBpbiBhcnJheSA/IHR1aUluc3BlY3RBbnkoYXJyYXlbaW5kZXhdLCBkZXB0aCAtIDEpIDogJ2VtcHR5JztcbiAgICB9XG5cbiAgICByZXR1cm4gYFske3Jlc3VsdH1dYDtcbn1cblxuZnVuY3Rpb24gaW5zcGVjdE9iamVjdChvYmplY3Q6IHtba2V5OiBzdHJpbmddOiB1bmtub3dufSwgZGVwdGg6IG51bWJlcik6IHN0cmluZyB7XG4gICAgaWYgKGRlcHRoID09PSAwKSB7XG4gICAgICAgIHJldHVybiAne+KApn0nO1xuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSAnJztcblxuICAgIGxldCBmaXJzdCA9IHRydWU7XG5cbiAgICBmb3IgKGNvbnN0IGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgaWYgKCFvYmplY3QuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZmlyc3QpIHtcbiAgICAgICAgICAgIGZpcnN0ID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQgKz0gJywgJztcbiAgICAgICAgfVxuXG4gICAgICAgIHJlc3VsdCArPSBgJHtrZXl9OiAke3R1aUluc3BlY3RBbnkob2JqZWN0W2tleV0sIGRlcHRoIC0gMSl9YDtcbiAgICB9XG5cbiAgICByZXR1cm4gYHske3Jlc3VsdH19YDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHJlYWRhYmxlIEpTIGVudGl0eVxuICogQHBhcmFtIGRhdGFcbiAqIEBwYXJhbSBkZXB0aFxuICogQHJldHVybiByZWFkYWJsZSBKUyBlbnRpdHlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHR1aUluc3BlY3RBbnk8VD4oZGF0YTogVCwgZGVwdGg6IG51bWJlcik6IHN0cmluZyB7XG4gICAgaWYgKGRhdGEgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuICdudWxsJztcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHR5cGVvZiBkYXRhKSB7XG4gICAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAgICAgICByZXR1cm4gYCcke2RhdGF9J2A7XG4gICAgICAgIGNhc2UgJ3VuZGVmaW5lZCc6XG4gICAgICAgIGNhc2UgJ251bWJlcic6XG4gICAgICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgICBjYXNlICdmdW5jdGlvbic6XG4gICAgICAgICAgICByZXR1cm4gU3RyaW5nKGRhdGEpO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgICAgcmV0dXJuIFN0cmluZyhkYXRhKTtcbiAgICB9XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheShkYXRhKSkge1xuICAgICAgICByZXR1cm4gaW5zcGVjdEFycmF5KGRhdGEsIGRlcHRoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaW5zcGVjdE9iamVjdChkYXRhIGFzIHVua25vd24gYXMge1trZXk6IHN0cmluZ106IHVua25vd259LCBkZXB0aCk7XG59XG4iXX0=