export function tuiTypeReferenceParser(types) {
    const generics = types.match(/<([^>]+)>/g);
    const escaped = generics
        ? generics
            .reduce((result, current) => result.replace(current, current.replace(/\|/g, '&')), types)
            .split('|')
            .map(item => item.trim())
        : types.split('|').map(item => item.trim());
    return escaped.reduce((result, type) => {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
        let extracted = type
            .trim()
            .replace(/readonly /g, '')
            .replace(/\[\]/g, '');
        extracted =
            (_d = (_c = (_b = (_a = extracted.match(/ReadonlyArray<([^>]+)>/)) === null || _a === void 0 ? void 0 : _a[1]) === null || _b === void 0 ? void 0 : _b.split('&')) === null || _c === void 0 ? void 0 : _c[0]) !== null && _d !== void 0 ? _d : extracted;
        extracted = (_h = (_g = (_f = (_e = extracted.match(/\[([^\]]+)\]/)) === null || _e === void 0 ? void 0 : _e[1]) === null || _f === void 0 ? void 0 : _f.split(',')) === null || _g === void 0 ? void 0 : _g[0]) !== null && _h !== void 0 ? _h : extracted;
        extracted = (_m = (_l = ((_k = (_j = extracted.split('<')) === null || _j === void 0 ? void 0 : _j[0]) !== null && _k !== void 0 ? _k : extracted)) === null || _l === void 0 ? void 0 : _l.trim()) !== null && _m !== void 0 ? _m : '';
        extracted = Number.isNaN(parseFloat(extracted)) ? extracted : 'number';
        extracted = /^'(.+)'$|^"(.+)"$|^`(.+)`$/.test(extracted) ? 'string' : extracted;
        extracted = extracted.length === 1 ? 'unknown' : extracted;
        return result.concat({ type: type.replace(/&/g, '|'), extracted });
    }, []);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZS1yZWZlcmVuY2UtcGFyc2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvYWRkb24tZG9jL3V0aWxzL3R5cGUtcmVmZXJlbmNlLXBhcnNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLFVBQVUsc0JBQXNCLENBQUMsS0FBYTtJQUNoRCxNQUFNLFFBQVEsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBRTNDLE1BQU0sT0FBTyxHQUFHLFFBQVE7UUFDcEIsQ0FBQyxDQUFDLFFBQVE7YUFDSCxNQUFNLENBQ0gsQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLEVBQUUsQ0FDaEIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFDeEQsS0FBSyxDQUNSO2FBQ0EsS0FBSyxDQUFDLEdBQUcsQ0FBQzthQUNWLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUMvQixDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUVoRCxPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQTRCLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxFQUFFOztRQUM5RCxJQUFJLFNBQVMsR0FBRyxJQUFJO2FBQ2YsSUFBSSxFQUFFO2FBQ04sT0FBTyxDQUFDLFlBQVksRUFBRSxFQUFFLENBQUM7YUFDekIsT0FBTyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztRQUUxQixTQUFTO1lBQ0wsTUFBQSxNQUFBLE1BQUEsTUFBQSxTQUFTLENBQUMsS0FBSyxDQUFDLHdCQUF3QixDQUFDLDBDQUFHLENBQUMsQ0FBQywwQ0FBRSxLQUFLLENBQUMsR0FBRyxDQUFDLDBDQUFHLENBQUMsQ0FBQyxtQ0FBSSxTQUFTLENBQUM7UUFDakYsU0FBUyxHQUFHLE1BQUEsTUFBQSxNQUFBLE1BQUEsU0FBUyxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsMENBQUcsQ0FBQyxDQUFDLDBDQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsMENBQUcsQ0FBQyxDQUFDLG1DQUFJLFNBQVMsQ0FBQztRQUMvRSxTQUFTLEdBQUcsTUFBQSxNQUFBLENBQUMsTUFBQSxNQUFBLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLDBDQUFHLENBQUMsQ0FBQyxtQ0FBSSxTQUFTLENBQUMsMENBQUUsSUFBSSxFQUFFLG1DQUFJLEVBQUUsQ0FBQztRQUNuRSxTQUFTLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUM7UUFDdkUsU0FBUyxHQUFHLDRCQUE0QixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7UUFDaEYsU0FBUyxHQUFHLFNBQVMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztRQUUzRCxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLEVBQUUsU0FBUyxFQUFDLENBQUMsQ0FBQztJQUNyRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDWCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHR5cGUgVHVpRG9jVHlwZVJlZmVyZW5jZVBhcnNlZCA9IFJlYWRvbmx5QXJyYXk8e3R5cGU6IHN0cmluZzsgZXh0cmFjdGVkOiBzdHJpbmd9PjtcblxuZXhwb3J0IGZ1bmN0aW9uIHR1aVR5cGVSZWZlcmVuY2VQYXJzZXIodHlwZXM6IHN0cmluZyk6IFR1aURvY1R5cGVSZWZlcmVuY2VQYXJzZWQge1xuICAgIGNvbnN0IGdlbmVyaWNzID0gdHlwZXMubWF0Y2goLzwoW14+XSspPi9nKTtcblxuICAgIGNvbnN0IGVzY2FwZWQgPSBnZW5lcmljc1xuICAgICAgICA/IGdlbmVyaWNzXG4gICAgICAgICAgICAgIC5yZWR1Y2UoXG4gICAgICAgICAgICAgICAgICAocmVzdWx0LCBjdXJyZW50KSA9PlxuICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5yZXBsYWNlKGN1cnJlbnQsIGN1cnJlbnQucmVwbGFjZSgvXFx8L2csICcmJykpLFxuICAgICAgICAgICAgICAgICAgdHlwZXMsXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgLnNwbGl0KCd8JylcbiAgICAgICAgICAgICAgLm1hcChpdGVtID0+IGl0ZW0udHJpbSgpKVxuICAgICAgICA6IHR5cGVzLnNwbGl0KCd8JykubWFwKGl0ZW0gPT4gaXRlbS50cmltKCkpO1xuXG4gICAgcmV0dXJuIGVzY2FwZWQucmVkdWNlPFR1aURvY1R5cGVSZWZlcmVuY2VQYXJzZWQ+KChyZXN1bHQsIHR5cGUpID0+IHtcbiAgICAgICAgbGV0IGV4dHJhY3RlZCA9IHR5cGVcbiAgICAgICAgICAgIC50cmltKClcbiAgICAgICAgICAgIC5yZXBsYWNlKC9yZWFkb25seSAvZywgJycpXG4gICAgICAgICAgICAucmVwbGFjZSgvXFxbXFxdL2csICcnKTtcblxuICAgICAgICBleHRyYWN0ZWQgPVxuICAgICAgICAgICAgZXh0cmFjdGVkLm1hdGNoKC9SZWFkb25seUFycmF5PChbXj5dKyk+Lyk/LlsxXT8uc3BsaXQoJyYnKT8uWzBdID8/IGV4dHJhY3RlZDtcbiAgICAgICAgZXh0cmFjdGVkID0gZXh0cmFjdGVkLm1hdGNoKC9cXFsoW15cXF1dKylcXF0vKT8uWzFdPy5zcGxpdCgnLCcpPy5bMF0gPz8gZXh0cmFjdGVkO1xuICAgICAgICBleHRyYWN0ZWQgPSAoZXh0cmFjdGVkLnNwbGl0KCc8Jyk/LlswXSA/PyBleHRyYWN0ZWQpPy50cmltKCkgPz8gJyc7XG4gICAgICAgIGV4dHJhY3RlZCA9IE51bWJlci5pc05hTihwYXJzZUZsb2F0KGV4dHJhY3RlZCkpID8gZXh0cmFjdGVkIDogJ251bWJlcic7XG4gICAgICAgIGV4dHJhY3RlZCA9IC9eJyguKyknJHxeXCIoLispXCIkfF5gKC4rKWAkLy50ZXN0KGV4dHJhY3RlZCkgPyAnc3RyaW5nJyA6IGV4dHJhY3RlZDtcbiAgICAgICAgZXh0cmFjdGVkID0gZXh0cmFjdGVkLmxlbmd0aCA9PT0gMSA/ICd1bmtub3duJyA6IGV4dHJhY3RlZDtcblxuICAgICAgICByZXR1cm4gcmVzdWx0LmNvbmNhdCh7dHlwZTogdHlwZS5yZXBsYWNlKC8mL2csICd8JyksIGV4dHJhY3RlZH0pO1xuICAgIH0sIFtdKTtcbn1cbiJdfQ==