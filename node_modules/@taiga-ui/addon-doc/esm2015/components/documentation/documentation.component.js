import { animate, style, transition, trigger } from '@angular/animations';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, Inject, Input, Self, } from '@angular/core';
import { TUI_DOC_DOCUMENTATION_TEXTS, TUI_DOC_EXCLUDED_PROPERTIES, } from '@taiga-ui/addon-doc/tokens';
import { EMPTY_QUERY, TuiDestroyService, tuiHexToRgb, tuiQueryListChanges, tuiWatch, } from '@taiga-ui/cdk';
import { merge } from 'rxjs';
import { switchMap, takeUntil } from 'rxjs/operators';
import { TuiDocDocumentationPropertyConnectorDirective } from './documentation-property-connector.directive';
import { TuiGetColorPipe } from './pipes/color.pipe';
import { TuiGetOpacityPipe } from './pipes/opacity.pipe';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/kit";
import * as i2 from "@taiga-ui/core";
import * as i3 from "@angular/common";
import * as i4 from "@angular/forms";
import * as i5 from "../internal/input-opacity/input-opacity.directive";
import * as i6 from "@taiga-ui/cdk";
import * as i7 from "./pipes/strip-optional.pipe";
import * as i8 from "./pipes/optional.pipe";
import * as i9 from "./pipes/type-reference.pipe";
import * as i10 from "./pipes/cleaner.pipe";
import * as i11 from "./pipes/inspect.pipe";
import * as i12 from "./pipes/opacity.pipe";
import * as i13 from "./pipes/color.pipe";
import * as i14 from "./pipes/primitive-polymorpheus-content.pipe";
// @bad TODO subscribe propertiesConnectors changes
// @bad TODO refactor to make more flexible
export class TuiDocDocumentationComponent {
    constructor(cdr, texts, excludedProperties, destroy$, getColor, getOpacity) {
        this.cdr = cdr;
        this.texts = texts;
        this.excludedProperties = excludedProperties;
        this.destroy$ = destroy$;
        this.getColor = getColor;
        this.getOpacity = getOpacity;
        this.heading = '';
        this.showValues = true;
        this.isAPI = false;
        this.propertiesConnectors = EMPTY_QUERY;
        this.activeItemIndex = 0;
        this.matcher = (item, exclusions) => !exclusions.has(item.documentationPropertyName);
    }
    ngAfterContentInit() {
        tuiQueryListChanges(this.propertiesConnectors)
            .pipe(switchMap(items => merge(...items.map(({ changed$ }) => changed$))), tuiWatch(this.cdr), takeUntil(this.destroy$))
            .subscribe();
    }
    get type() {
        return this.isAPI ? this.texts[0] : this.texts[1];
    }
    onColorChange(connector, color) {
        const opacity = this.getOpacity.transform(connector.documentationPropertyValue || '');
        if (opacity === 100) {
            connector.onValueChange(color);
            return;
        }
        const rgb = tuiHexToRgb(color).join(', ');
        const result = `rgba(${rgb}, ${opacity / 100})`;
        connector.onValueChange(result);
    }
    onOpacityChange(connector, opacity) {
        const hex = this.getColor.transform(connector.documentationPropertyValue || '');
        const rgb = tuiHexToRgb(hex);
        const result = `rgba(${rgb}, ${(opacity || 0) / 100})`;
        connector.onValueChange(result);
    }
}
TuiDocDocumentationComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocDocumentationComponent, deps: [{ token: ChangeDetectorRef }, { token: TUI_DOC_DOCUMENTATION_TEXTS }, { token: TUI_DOC_EXCLUDED_PROPERTIES }, { token: TuiDestroyService, self: true }, { token: TuiGetColorPipe }, { token: TuiGetOpacityPipe }], target: i0.ɵɵFactoryTarget.Component });
TuiDocDocumentationComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiDocDocumentationComponent, selector: "tui-doc-documentation", inputs: { heading: "heading", showValues: "showValues", isAPI: "isAPI" }, providers: [TuiGetColorPipe, TuiGetOpacityPipe, TuiDestroyService], queries: [{ propertyName: "propertiesConnectors", predicate: TuiDocDocumentationPropertyConnectorDirective }], ngImport: i0, template: "<h1\n    *ngIf=\"heading\"\n    class=\"t-heading\"\n>\n    {{ heading }}\n</h1>\n<ng-content></ng-content>\n<ng-container *ngIf=\"$any(propertiesConnectors) | tuiFilter: matcher : excludedProperties as properties\">\n    <table\n        *ngIf=\"properties.length\"\n        class=\"t-table\"\n    >\n        <tr class=\"t-row t-row_header\">\n            <th class=\"t-th t-cell t-cell_prop\">{{ texts[2] }}</th>\n            <th class=\"t-th\">{{ type }}</th>\n            <th\n                *ngIf=\"showValues && !isAPI\"\n                class=\"t-th t-cell t-th_value\"\n            >\n                {{ texts[3] }}\n            </th>\n        </tr>\n        <tr\n            *ngFor=\"let propertyConnector of properties\"\n            class=\"t-row\"\n            [class.t-deprecated]=\"propertyConnector.documentationPropertyDeprecated\"\n        >\n            <td class=\"t-cell\">\n                <div\n                    automation-id=\"tui-documentation__property-name\"\n                    class=\"t-property t-additional-info\"\n                >\n                    <code\n                        class=\"t-property-code\"\n                        [style.color]=\"'var(--tui-accent-active)'\"\n                    >\n                        {{ propertyConnector.attrName | tuiStripOptionalPipe }}\n                    </code>\n                    <tui-badge\n                        *ngIf=\"propertyConnector.attrName | tuiIsOptionalPipe\"\n                        size=\"s\"\n                        status=\"neutral\"\n                        value=\"Optional\"\n                    ></tui-badge>\n                    <tui-badge\n                        *ngIf=\"propertyConnector.documentationPropertyDeprecated\"\n                        size=\"s\"\n                        status=\"error\"\n                        value=\"Deprecated\"\n                    ></tui-badge>\n                </div>\n                <ng-container [ngTemplateOutlet]=\"propertyConnector.template\"></ng-container>\n            </td>\n            <td class=\"t-cell\">\n                <span class=\"type\">\n                    <code class=\"t-code-type\">\n                        <ng-container\n                            *ngFor=\"\n                                let item of propertyConnector.documentationPropertyType | tuiDocTypeReference;\n                                let last = last\n                            \"\n                        >\n                            <a\n                                *ngIf=\"item.reference; else default\"\n                                target=\"_blank\"\n                                class=\"t-code-reference\"\n                                [attr.href]=\"item.reference\"\n                            >\n                                {{ item.type }}\n                            </a>\n                            <ng-template #default>\n                                {{ item.type }}\n                            </ng-template>\n                            <span *ngIf=\"!last\">&nbsp;|&nbsp;</span>\n                        </ng-container>\n                    </code>\n                </span>\n            </td>\n            <td\n                *ngIf=\"showValues\"\n                class=\"t-cell t-cell_value\"\n            >\n                <ng-container *ngIf=\"propertyConnector.shouldShowValues; else elseEmitter\">\n                    <tui-select\n                        *ngIf=\"propertyConnector.hasItems; else noItems\"\n                        tuiDropdownLimitWidth=\"min\"\n                        tuiTextfieldSize=\"m\"\n                        [nativeId]=\"propertyConnector.attrName\"\n                        [ngModel]=\"propertyConnector.documentationPropertyValue\"\n                        [tuiTextfieldCleaner]=\"propertyConnector.documentationPropertyType | tuiShowCleanerPipe\"\n                        [tuiTextfieldLabelOutside]=\"true\"\n                        [valueContent]=\"selectContent\"\n                        (ngModelChange)=\"propertyConnector.onValueChange($event)\"\n                    >\n                        <code class=\"t-exception\">null</code>\n                        <tui-data-list-wrapper\n                            *tuiDataList\n                            [itemContent]=\"selectContent\"\n                            [items]=\"propertyConnector.documentationPropertyValues\"\n                        ></tui-data-list-wrapper>\n                    </tui-select>\n                    <ng-template\n                        #selectContent\n                        let-data\n                    >\n                        <code>{{ data | tuiInspectAny }}</code>\n                    </ng-template>\n\n                    <ng-template #noItems>\n                        <ng-container [ngSwitch]=\"propertyConnector.documentationPropertyType\">\n                            <tui-toggle\n                                *ngSwitchCase=\"'boolean'\"\n                                size=\"l\"\n                                [nativeId]=\"propertyConnector.attrName\"\n                                [ngModel]=\"propertyConnector.documentationPropertyValue\"\n                                [showIcons]=\"true\"\n                                (ngModelChange)=\"propertyConnector.onValueChange($event)\"\n                            ></tui-toggle>\n\n                            <tui-primitive-textfield\n                                *ngSwitchCase=\"'string'\"\n                                tuiTextfieldSize=\"m\"\n                                [nativeId]=\"propertyConnector.attrName\"\n                                [tuiTextfieldCleaner]=\"true\"\n                                [tuiTextfieldLabelOutside]=\"true\"\n                                [value]=\"propertyConnector.documentationPropertyValue || ''\"\n                                (valueChange)=\"propertyConnector.onValueChange($event)\"\n                            ></tui-primitive-textfield>\n\n                            <div\n                                *ngSwitchCase=\"'color'\"\n                                tuiGroup\n                            >\n                                <tui-primitive-textfield\n                                    tuiTextfieldSize=\"m\"\n                                    [attr.id]=\"propertyConnector.attrName\"\n                                    [tuiInputOpacity]=\"propertyConnector.documentationPropertyValue | tuiGetOpacity\"\n                                    [tuiTextfieldLabelOutside]=\"true\"\n                                    [value]=\"propertyConnector.documentationPropertyValue | tuiGetColorPipe\"\n                                    (valueChange)=\"onColorChange(propertyConnector, $event)\"\n                                >\n                                    <input\n                                        tuiTextfield\n                                        type=\"text\"\n                                    />\n                                </tui-primitive-textfield>\n                                <tui-input-number\n                                    tuiTextfieldSize=\"m\"\n                                    [max]=\"100\"\n                                    [min]=\"0\"\n                                    [ngModel]=\"propertyConnector.documentationPropertyValue | tuiGetOpacity\"\n                                    [step]=\"1\"\n                                    (ngModelChange)=\"onOpacityChange(propertyConnector, $event)\"\n                                >\n                                    Opacity\n                                </tui-input-number>\n                            </div>\n\n                            <tui-input-number\n                                *ngSwitchCase=\"'number'\"\n                                tuiTextfieldSize=\"m\"\n                                [nativeId]=\"propertyConnector.attrName\"\n                                [ngModel]=\"propertyConnector.documentationPropertyValue\"\n                                [step]=\"1\"\n                                [tuiTextfieldLabelOutside]=\"true\"\n                                (ngModelChange)=\"propertyConnector.onValueChange($event || 0)\"\n                            ></tui-input-number>\n\n                            <ng-container *ngSwitchCase=\"'PolymorpheusContent'\">\n                                <tui-primitive-textfield\n                                    *ngIf=\"\n                                        propertyConnector.documentationPropertyValue\n                                            | tuiIsPrimitivePolymorpheusContentPipe\n                                    \"\n                                    tuiTextfieldSize=\"m\"\n                                    [nativeId]=\"propertyConnector.attrName\"\n                                    [tuiTextfieldCleaner]=\"true\"\n                                    [tuiTextfieldLabelOutside]=\"true\"\n                                    [value]=\"propertyConnector.documentationPropertyValue.toString()\"\n                                    (valueChange)=\"propertyConnector.onValueChange($event)\"\n                                >\n                                    Default content\n                                </tui-primitive-textfield>\n                            </ng-container>\n                        </ng-container>\n                    </ng-template>\n                </ng-container>\n\n                <ng-template #elseEmitter>\n                    <tui-notification\n                        class=\"t-output\"\n                        [@emitEvent]=\"propertyConnector.emits$ | async\"\n                    >\n                        Emit!\n                    </tui-notification>\n                </ng-template>\n            </td>\n        </tr>\n    </table>\n</ng-container>\n", styles: [":host{display:block;min-width:100%}.t-table{width:100%;table-layout:fixed}.t-row:not(:last-child){border-bottom:1px solid var(--tui-base-03)}:host-context(tui-root._mobile) .t-row{display:flex;flex-wrap:wrap}:host-context(tui-root._mobile) .t-row_header{display:none}.t-cell{padding:1rem 1rem .875rem}.t-cell:first-child{padding-left:0}.t-cell:last-child{padding-right:0}.t-cell_prop{width:40%}.t-cell_value{text-align:right}:host-context(tui-root._mobile) .t-cell{width:100%;height:auto;padding:.5rem 0;text-align:left}.t-th{padding:.5rem 1rem;color:var(--tui-text-02);font-weight:normal;text-align:left}.t-th_value{max-width:20rem;text-align:right}:host-context(tui-root._mobile) .t-th_value{width:9.375rem}.t-property{font:var(--tui-font-text-m);margin-bottom:.25rem;font-family:monospace;color:#8f75d1}:host-context(tui-root._mobile) .t-property{padding:.5rem 0}.t-type{font-family:monospace}.t-deprecated .t-property-code{text-decoration:line-through}.t-deprecated-label{margin-right:.125rem;color:var(--tui-error-fill);font-size:.75rem}.t-additional-info{display:flex;grid-gap:.3125rem;gap:.3125rem;align-items:center}.t-exception{display:block;width:-webkit-max-content;width:max-content}.t-output{text-align:left;opacity:0}.t-heading{font:var(--tui-font-heading-4)}.t-code-type{display:flex;flex-wrap:wrap;align-items:center;justify-content:flex-start}.t-code-reference{display:inline-flex;color:var(--tui-link);text-decoration:none;align-items:center;justify-content:center;grid-gap:3px;gap:3px}.t-code-reference:after{content:\"\";font-size:1rem;width:1rem;height:1rem;background:currentColor;-webkit-mask:url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1rem\" height=\"1rem\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6\"></path><polyline points=\"15 3 21 3 21 9\"></polyline><line x1=\"10\" y1=\"14\" x2=\"21\" y2=\"3\"></line></svg>') center / 100%;mask:url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1rem\" height=\"1rem\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6\"></path><polyline points=\"15 3 21 3 21 9\"></polyline><line x1=\"10\" y1=\"14\" x2=\"21\" y2=\"3\"></line></svg>') center / 100%}\n"], components: [{ type: i1.TuiBadgeComponent, selector: "tui-badge", inputs: ["value", "size", "status", "hoverable"] }, { type: i1.TuiSelectComponent, selector: "tui-select", inputs: ["stringify", "identityMatcher", "valueContent"] }, { type: i1.TuiDataListWrapperComponent, selector: "tui-data-list-wrapper:not([labels])", inputs: ["items"] }, { type: i1.TuiToggleComponent, selector: "tui-toggle", inputs: ["singleColor", "showIcons", "showLoader", "size"] }, { type: i2.TuiPrimitiveTextfieldComponent, selector: "tui-primitive-textfield", inputs: ["editable", "filler", "iconCleaner", "readOnly", "invalid", "disabled", "prefix", "postfix", "value"], outputs: ["valueChange"] }, { type: i2.TuiTextfieldComponent, selector: "input[tuiTextfield], textarea[tuiTextfield]" }, { type: i1.TuiInputNumberComponent, selector: "tui-input-number", inputs: ["min", "max", "decimal", "precision", "step", "prefix", "postfix"] }, { type: i2.TuiNotificationComponent, selector: "tui-notification,a[tuiNotification],button[tuiNotification]", inputs: ["hasIcon", "icon", "status", "size", "hideClose"], outputs: ["close"] }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i1.TuiSelectDirective, selector: "tui-select" }, { type: i2.TuiDropdownOptionsDirective, selector: "[tuiDropdownAlign], [tuiDropdownAppearance], [tuiDropdownDirection], [tuiDropdownLimitWidth], [tuiDropdownMinHeight], [tuiDropdownMaxHeight], [tuiDropdownOffset]", inputs: ["tuiDropdownAlign", "tuiDropdownAppearance", "tuiDropdownDirection", "tuiDropdownLimitWidth", "tuiDropdownMinHeight", "tuiDropdownMaxHeight", "tuiDropdownOffset"] }, { type: i2.TuiTextfieldSizeDirective, selector: "[tuiTextfieldSize]", inputs: ["tuiTextfieldSize"] }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i2.TuiTextfieldCleanerDirective, selector: "[tuiTextfieldCleaner]", inputs: ["tuiTextfieldCleaner"] }, { type: i2.TuiTextfieldLabelOutsideDirective, selector: "[tuiTextfieldLabelOutside]", inputs: ["tuiTextfieldLabelOutside"] }, { type: i2.TuiDataListDirective, selector: "ng-template[tuiDataList]" }, { type: i3.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i3.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i2.TuiPrimitiveTextfieldDirective, selector: "tui-primitive-textfield" }, { type: i2.TuiGroupDirective, selector: "[tuiGroup]:not(ng-container)", inputs: ["orientation", "adaptive", "collapsed", "rounded", "size"] }, { type: i5.TuiInputOpacityDirective, selector: "[tuiInputOpacity]", inputs: ["tuiInputOpacity"] }, { type: i1.TuiInputNumberDirective, selector: "tui-input-number" }], pipes: { "tuiFilter": i6.TuiFilterPipe, "tuiStripOptionalPipe": i7.TuiStripOptionalPipe, "tuiIsOptionalPipe": i8.TuiIsOptionalPipe, "tuiDocTypeReference": i9.TuiDocTypeReferencePipe, "tuiShowCleanerPipe": i10.TuiShowCleanerPipe, "tuiInspectAny": i11.TuiInspectPipe, "tuiGetOpacity": i12.TuiGetOpacityPipe, "tuiGetColorPipe": i13.TuiGetColorPipe, "tuiIsPrimitivePolymorpheusContentPipe": i14.TuiIsPrimitivePolymorpheusContentPipe, "async": i3.AsyncPipe }, animations: [
        trigger('emitEvent', [
            transition(':increment', [style({ opacity: 1 }), animate('500ms ease-in')]),
        ]),
    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocDocumentationComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-doc-documentation',
                    templateUrl: './documentation.template.html',
                    styleUrls: ['./documentation.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [TuiGetColorPipe, TuiGetOpacityPipe, TuiDestroyService],
                    animations: [
                        trigger('emitEvent', [
                            transition(':increment', [style({ opacity: 1 }), animate('500ms ease-in')]),
                        ]),
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_DOC_DOCUMENTATION_TEXTS]
                }] }, { type: Set, decorators: [{
                    type: Inject,
                    args: [TUI_DOC_EXCLUDED_PROPERTIES]
                }] }, { type: i6.TuiDestroyService, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiDestroyService]
                }] }, { type: i13.TuiGetColorPipe, decorators: [{
                    type: Inject,
                    args: [TuiGetColorPipe]
                }] }, { type: i12.TuiGetOpacityPipe, decorators: [{
                    type: Inject,
                    args: [TuiGetOpacityPipe]
                }] }]; }, propDecorators: { heading: [{
                type: Input
            }], showValues: [{
                type: Input
            }], isAPI: [{
                type: Input
            }], propertiesConnectors: [{
                type: ContentChildren,
                args: [TuiDocDocumentationPropertyConnectorDirective]
            }] } });
//# sourceMappingURL=data:application/json;base64,