import { Inject, Pipe } from '@angular/core';
import { TUI_DOC_TYPE_REFERENCE_HANDLER, TUI_DOC_TYPE_REFERENCE_PARSER, } from '@taiga-ui/addon-doc/tokens';
import * as i0 from "@angular/core";
export class TuiDocTypeReferencePipe {
    constructor(parser, linkHandler) {
        this.parser = parser;
        this.linkHandler = linkHandler;
    }
    transform(original) {
        return this.parser(original)
            .map(({ type, extracted }) => {
            var _a, _b;
            return ({
                type,
                extracted,
                reference: (_b = (_a = this.linkHandler) === null || _a === void 0 ? void 0 : _a.call(this, extracted)) !== null && _b !== void 0 ? _b : null,
            });
        })
            .sort((a, b) => { var _a, _b, _c; return (_c = (_a = b.reference) === null || _a === void 0 ? void 0 : _a.localeCompare((_b = a.reference) !== null && _b !== void 0 ? _b : '')) !== null && _c !== void 0 ? _c : -1; });
    }
}
TuiDocTypeReferencePipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocTypeReferencePipe, deps: [{ token: TUI_DOC_TYPE_REFERENCE_PARSER }, { token: TUI_DOC_TYPE_REFERENCE_HANDLER }], target: i0.ɵɵFactoryTarget.Pipe });
TuiDocTypeReferencePipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocTypeReferencePipe, name: "tuiDocTypeReference" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocTypeReferencePipe, decorators: [{
            type: Pipe,
            args: [{ name: 'tuiDocTypeReference' }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_DOC_TYPE_REFERENCE_PARSER]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_DOC_TYPE_REFERENCE_HANDLER]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZS1yZWZlcmVuY2UucGlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FkZG9uLWRvYy9jb21wb25lbnRzL2RvY3VtZW50YXRpb24vcGlwZXMvdHlwZS1yZWZlcmVuY2UucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsTUFBTSxFQUFFLElBQUksRUFBZ0IsTUFBTSxlQUFlLENBQUM7QUFDMUQsT0FBTyxFQUNILDhCQUE4QixFQUM5Qiw2QkFBNkIsR0FDaEMsTUFBTSw0QkFBNEIsQ0FBQzs7QUFLcEMsTUFBTSxPQUFPLHVCQUF1QjtJQUNoQyxZQUVxQixNQUFxRCxFQUVyRCxXQUFvRDtRQUZwRCxXQUFNLEdBQU4sTUFBTSxDQUErQztRQUVyRCxnQkFBVyxHQUFYLFdBQVcsQ0FBeUM7SUFDdEUsQ0FBQztJQUVKLFNBQVMsQ0FBQyxRQUFnQjtRQUt0QixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO2FBQ3ZCLEdBQUcsQ0FBQyxDQUFDLEVBQUMsSUFBSSxFQUFFLFNBQVMsRUFBQyxFQUFFLEVBQUU7O1lBQUMsT0FBQSxDQUFDO2dCQUN6QixJQUFJO2dCQUNKLFNBQVM7Z0JBQ1QsU0FBUyxFQUFFLE1BQUEsTUFBQSxJQUFJLENBQUMsV0FBVywrQ0FBaEIsSUFBSSxFQUFlLFNBQVMsQ0FBQyxtQ0FBSSxJQUFJO2FBQ25ELENBQUMsQ0FBQTtTQUFBLENBQUM7YUFDRixJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsbUJBQUMsT0FBQSxNQUFBLE1BQUEsQ0FBQyxDQUFDLFNBQVMsMENBQUUsYUFBYSxDQUFDLE1BQUEsQ0FBQyxDQUFDLFNBQVMsbUNBQUksRUFBRSxDQUFDLG1DQUFJLENBQUMsQ0FBQyxDQUFBLEVBQUEsQ0FBQyxDQUFDO0lBQzdFLENBQUM7O3FIQXBCUSx1QkFBdUIsa0JBRXBCLDZCQUE2QixhQUU3Qiw4QkFBOEI7bUhBSmpDLHVCQUF1Qjs0RkFBdkIsdUJBQXVCO2tCQURuQyxJQUFJO21CQUFDLEVBQUMsSUFBSSxFQUFFLHFCQUFxQixFQUFDOzswQkFHMUIsTUFBTTsyQkFBQyw2QkFBNkI7OzBCQUVwQyxNQUFNOzJCQUFDLDhCQUE4QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0LCBQaXBlLCBQaXBlVHJhbnNmb3JtfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gICAgVFVJX0RPQ19UWVBFX1JFRkVSRU5DRV9IQU5ETEVSLFxuICAgIFRVSV9ET0NfVFlQRV9SRUZFUkVOQ0VfUEFSU0VSLFxufSBmcm9tICdAdGFpZ2EtdWkvYWRkb24tZG9jL3Rva2Vucyc7XG5pbXBvcnQgdHlwZSB7VHVpRG9jVHlwZVJlZmVyZW5jZVBhcnNlZH0gZnJvbSAnQHRhaWdhLXVpL2FkZG9uLWRvYy91dGlscyc7XG5pbXBvcnQge1R1aUhhbmRsZXIsIFR1aVN0cmluZ0hhbmRsZXJ9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuXG5AUGlwZSh7bmFtZTogJ3R1aURvY1R5cGVSZWZlcmVuY2UnfSlcbmV4cG9ydCBjbGFzcyBUdWlEb2NUeXBlUmVmZXJlbmNlUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KFRVSV9ET0NfVFlQRV9SRUZFUkVOQ0VfUEFSU0VSKVxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IHBhcnNlcjogVHVpSGFuZGxlcjxzdHJpbmcsIFR1aURvY1R5cGVSZWZlcmVuY2VQYXJzZWQ+LFxuICAgICAgICBASW5qZWN0KFRVSV9ET0NfVFlQRV9SRUZFUkVOQ0VfSEFORExFUilcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBsaW5rSGFuZGxlcj86IFR1aVN0cmluZ0hhbmRsZXI8c3RyaW5nIHwgbnVsbD4gfCBudWxsLFxuICAgICkge31cblxuICAgIHRyYW5zZm9ybShvcmlnaW5hbDogc3RyaW5nKTogUmVhZG9ubHlBcnJheTx7XG4gICAgICAgIHR5cGU6IHN0cmluZztcbiAgICAgICAgZXh0cmFjdGVkOiBzdHJpbmc7XG4gICAgICAgIHJlZmVyZW5jZTogc3RyaW5nIHwgbnVsbDtcbiAgICB9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlcihvcmlnaW5hbClcbiAgICAgICAgICAgIC5tYXAoKHt0eXBlLCBleHRyYWN0ZWR9KSA9PiAoe1xuICAgICAgICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgICAgICAgZXh0cmFjdGVkLFxuICAgICAgICAgICAgICAgIHJlZmVyZW5jZTogdGhpcy5saW5rSGFuZGxlcj8uKGV4dHJhY3RlZCkgPz8gbnVsbCxcbiAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgLnNvcnQoKGEsIGIpID0+IGIucmVmZXJlbmNlPy5sb2NhbGVDb21wYXJlKGEucmVmZXJlbmNlID8/ICcnKSA/PyAtMSk7XG4gICAgfVxufVxuIl19