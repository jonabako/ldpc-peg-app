import { Location } from '@angular/common';
import { Directive, EventEmitter, Inject, Input, Output, TemplateRef, } from '@angular/core';
import { ActivatedRoute, UrlSerializer } from '@angular/router';
import { TUI_DOC_URL_STATE_HANDLER } from '@taiga-ui/addon-doc/tokens';
import { tuiCoerceValue, tuiInspectAny } from '@taiga-ui/addon-doc/utils';
import { tuiIsNumber } from '@taiga-ui/cdk';
import { TuiAlertService } from '@taiga-ui/core';
import { BehaviorSubject, Subject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/router";
import * as i3 from "@taiga-ui/core";
const SERIALIZED_SUFFIX = '$';
// @bad TODO: refactor output and value sync
export class TuiDocDocumentationPropertyConnectorDirective {
    constructor(template, locationRef, activatedRoute, urlSerializer, urlStateHandler, alerts) {
        this.template = template;
        this.locationRef = locationRef;
        this.activatedRoute = activatedRoute;
        this.urlSerializer = urlSerializer;
        this.urlStateHandler = urlStateHandler;
        this.alerts = alerts;
        this.documentationPropertyName = '';
        this.documentationPropertyMode = null;
        this.documentationPropertyType = '';
        this.documentationPropertyDeprecated = false;
        this.documentationPropertyValues = null;
        this.documentationPropertyValueChange = new EventEmitter();
        this.changed$ = new Subject();
        this.emits$ = new BehaviorSubject(1);
    }
    ngOnInit() {
        this.parseParams(this.activatedRoute.snapshot.queryParams);
    }
    get attrName() {
        switch (this.documentationPropertyMode) {
            case 'input':
                return `[${this.documentationPropertyName}]`;
            case 'output':
                return `(${this.documentationPropertyName})`;
            case 'input-output':
                return `[(${this.documentationPropertyName})]`;
            default:
                return this.documentationPropertyName;
        }
    }
    get hasItems() {
        return !!this.documentationPropertyValues;
    }
    get shouldShowValues() {
        return this.documentationPropertyMode !== 'output';
    }
    ngOnChanges() {
        this.changed$.next();
    }
    onValueChange(value) {
        this.documentationPropertyValue = value;
        this.documentationPropertyValueChange.emit(value);
        this.setQueryParam(value);
    }
    emitEvent(event) {
        // For more convenient debugging
        console.info(this.attrName, event);
        this.emits$.next(this.emits$.value + 1);
        let content;
        if (event !== undefined) {
            content = tuiInspectAny(event, 2);
        }
        this.alerts.open(content, { label: this.attrName }).subscribe();
    }
    parseParams(params) {
        const propertyValue = params[this.documentationPropertyName];
        const propertyValueWithSuffix = params[`${this.documentationPropertyName}${SERIALIZED_SUFFIX}`];
        if (!propertyValue && !propertyValueWithSuffix) {
            return;
        }
        let value = !!propertyValueWithSuffix && this.documentationPropertyValues
            ? this.documentationPropertyValues[propertyValueWithSuffix]
            : tuiCoerceValue(propertyValue);
        if (this.documentationPropertyType === 'string' && tuiIsNumber(value)) {
            value = value.toString();
        }
        this.onValueChange(value);
    }
    setQueryParam(value) {
        const tree = this.urlSerializer.parse(this.locationRef.path());
        const isValueAvailableByKey = value instanceof Object;
        const computedValue = isValueAvailableByKey && this.documentationPropertyValues
            ? this.documentationPropertyValues.indexOf(value)
            : value;
        const suffix = isValueAvailableByKey ? SERIALIZED_SUFFIX : '';
        const propName = this.documentationPropertyName + suffix;
        tree.queryParams = Object.assign(Object.assign({}, tree.queryParams), { [propName]: computedValue });
        this.locationRef.go(this.urlStateHandler(tree));
    }
}
TuiDocDocumentationPropertyConnectorDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocDocumentationPropertyConnectorDirective, deps: [{ token: TemplateRef }, { token: Location }, { token: ActivatedRoute }, { token: UrlSerializer }, { token: TUI_DOC_URL_STATE_HANDLER }, { token: TuiAlertService }], target: i0.ɵɵFactoryTarget.Directive });
TuiDocDocumentationPropertyConnectorDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiDocDocumentationPropertyConnectorDirective, selector: "ng-template[documentationPropertyName]", inputs: { documentationPropertyName: "documentationPropertyName", documentationPropertyMode: "documentationPropertyMode", documentationPropertyType: "documentationPropertyType", documentationPropertyValue: "documentationPropertyValue", documentationPropertyDeprecated: "documentationPropertyDeprecated", documentationPropertyValues: "documentationPropertyValues" }, outputs: { documentationPropertyValueChange: "documentationPropertyValueChange" }, exportAs: ["documentationProperty"], usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocDocumentationPropertyConnectorDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ng-template[documentationPropertyName]',
                    exportAs: 'documentationProperty',
                }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef, decorators: [{
                    type: Inject,
                    args: [TemplateRef]
                }] }, { type: i1.Location, decorators: [{
                    type: Inject,
                    args: [Location]
                }] }, { type: i2.ActivatedRoute, decorators: [{
                    type: Inject,
                    args: [ActivatedRoute]
                }] }, { type: i2.UrlSerializer, decorators: [{
                    type: Inject,
                    args: [UrlSerializer]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_DOC_URL_STATE_HANDLER]
                }] }, { type: i3.TuiAlertService, decorators: [{
                    type: Inject,
                    args: [TuiAlertService]
                }] }]; }, propDecorators: { documentationPropertyName: [{
                type: Input
            }], documentationPropertyMode: [{
                type: Input
            }], documentationPropertyType: [{
                type: Input
            }], documentationPropertyValue: [{
                type: Input
            }], documentationPropertyDeprecated: [{
                type: Input
            }], documentationPropertyValues: [{
                type: Input
            }], documentationPropertyValueChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,