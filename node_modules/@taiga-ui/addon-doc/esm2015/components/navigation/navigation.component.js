import { __decorate } from "tslib";
import { DOCUMENT } from '@angular/common';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, HostBinding, Inject, Optional, Self, } from '@angular/core';
import { FormControl } from '@angular/forms';
import { Title } from '@angular/platform-browser';
import { ActivatedRoute, Router, Scroll } from '@angular/router';
import { TUI_DOC_ICONS, TUI_DOC_PAGE_LOADED, TUI_DOC_SEARCH_TEXT, } from '@taiga-ui/addon-doc/tokens';
import { tuiTransliterateKeyboardLayout } from '@taiga-ui/addon-doc/utils';
import { TuiSidebarDirective } from '@taiga-ui/addon-mobile';
import { tuiControlValue, TuiDestroyService, tuiPure, tuiUniqBy } from '@taiga-ui/cdk';
import { TUI_COMMON_ICONS, TuiModeDirective, } from '@taiga-ui/core';
import { combineLatest } from 'rxjs';
import { filter, map, startWith, switchMap, take, takeUntil } from 'rxjs/operators';
import { NAVIGATION_ITEMS, NAVIGATION_LABELS, NAVIGATION_PROVIDERS, NAVIGATION_TITLE, } from './navigation.providers';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/kit";
import * as i2 from "@taiga-ui/core";
import * as i3 from "@angular/forms";
import * as i4 from "@taiga-ui/cdk";
import * as i5 from "@angular/common";
import * as i6 from "@tinkoff/ng-polymorpheus";
import * as i7 from "@angular/router";
import * as i8 from "@taiga-ui/addon-doc/directives";
import * as i9 from "@angular/platform-browser";
import * as i10 from "rxjs";
export class TuiDocNavigationComponent {
    constructor(cdr, titleService, title$, mode, sidebar, labels, items, searchText, router, activatedRoute, destroy$, readyToScroll$, docIcons, icons, doc) {
        this.title$ = title$;
        this.mode = mode;
        this.sidebar = sidebar;
        this.labels = labels;
        this.items = items;
        this.searchText = searchText;
        this.router = router;
        this.activatedRoute = activatedRoute;
        this.destroy$ = destroy$;
        this.readyToScroll$ = readyToScroll$;
        this.docIcons = docIcons;
        this.icons = icons;
        this.doc = doc;
        this.menuOpen = false;
        this.openPagesArr = [];
        this.openPagesGroupsArr = [];
        this.active = '';
        this.search = new FormControl('');
        this.filtered$ = tuiControlValue(this.search).pipe(filter(search => search.trim().length > 2), map(search => this.filterItems(this.flattenSubPages(this.items), search)));
        this.mode$ = this.mode.change$.pipe(startWith(null), map(() => this.mode.mode || 'onLight'));
        title$.subscribe(title => {
            cdr.markForCheck();
            titleService.setTitle(title);
            this.openActivePageGroup();
        });
        combineLatest([
            this.router.events.pipe(filter((event) => event instanceof Scroll)),
            this.title$.pipe(switchMap(() => this.readyToScroll$.pipe(filter(Boolean)))),
        ])
            .pipe(take(1), map(([event]) => event.anchor || ''), filter(Boolean), takeUntil(this.destroy$))
            .subscribe(anchor => this.navigateToAnchorLink(anchor));
    }
    get canOpen() {
        var _a, _b;
        return ((_b = (_a = this.search.value) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 2;
    }
    get itemsWithoutSections() {
        return this.items[this.items.length - 1];
    }
    $pages(pages) {
        return pages;
    }
    isActive(route) {
        return route === this.active;
    }
    onGroupClick(index) {
        this.openPagesGroupsArr[index] = !this.openPagesGroupsArr[index];
    }
    closeMenu() {
        this.menuOpen = false;
    }
    onClick(input) {
        input.open = false;
        this.menuOpen = false;
        this.search.setValue('');
        this.openActivePageGroup();
    }
    filterItems(items, search) {
        return items.map(section => tuiUniqBy(section.filter(({ title, keywords = '' }) => {
            search = search.toLowerCase().trim();
            keywords = keywords.toLowerCase();
            title = title.toLowerCase();
            return (title.includes(search) ||
                keywords.includes(search) ||
                title.includes(tuiTransliterateKeyboardLayout(search)) ||
                keywords.includes(tuiTransliterateKeyboardLayout(search)) ||
                search.replace(/-/gi, '').includes(title) ||
                title.includes(search.replace(/\s|tui/g, '')) ||
                keywords.includes(search.replace(/\s|tui/g, '')) ||
                search.split(/\s/).find(word => title.includes(word)));
        }), 'title'));
    }
    flattenSubPages(items) {
        return items.reduce((array, item) => [
            ...array,
            item.reduce((pages, page) => 'subPages' in page
                ? [...pages, ...page.subPages]
                : [...pages, page], []),
        ], []);
    }
    isActiveRoute(route) {
        return this.router.isActive(route, {
            paths: 'subset',
            queryParams: 'subset',
            fragment: 'ignored',
            matrixParams: 'ignored',
        });
    }
    openActivePageGroup() {
        this.items.forEach((pages, pagesIndex) => {
            pages.forEach((page, pageIndex) => {
                if ('route' in page && this.isActiveRoute(page.route)) {
                    this.openPagesArr[pagesIndex] = true;
                    this.active = page.route;
                }
                if ('subPages' in page) {
                    page.subPages.forEach(subPage => {
                        if (this.isActiveRoute(subPage.route)) {
                            this.openPagesArr[pagesIndex] = true;
                            this.openPagesGroupsArr[pagesIndex * 100 + pageIndex] = true;
                            this.active = subPage.route;
                        }
                    });
                }
            });
        });
    }
    navigateToAnchorLink(fragment) {
        const nodes = fragment ? this.doc.querySelectorAll(`#${fragment}`) : [];
        const element = nodes.length && nodes[nodes.length - 1];
        if (!element) {
            return;
        }
        // emulate :target event
        const target = this.doc.createElement('a');
        target.href = `${this.doc.location.pathname}#${fragment}`;
        target.style.display = 'none';
        target.style.position = 'absolute';
        this.doc.body.appendChild(target);
        target.click();
        target.remove();
    }
}
TuiDocNavigationComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocNavigationComponent, deps: [{ token: ChangeDetectorRef }, { token: Title }, { token: NAVIGATION_TITLE }, { token: TuiModeDirective }, { token: TuiSidebarDirective, optional: true }, { token: NAVIGATION_LABELS }, { token: NAVIGATION_ITEMS }, { token: TUI_DOC_SEARCH_TEXT }, { token: Router }, { token: ActivatedRoute }, { token: TuiDestroyService, self: true }, { token: TUI_DOC_PAGE_LOADED }, { token: TUI_DOC_ICONS }, { token: TUI_COMMON_ICONS }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Component });
TuiDocNavigationComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiDocNavigationComponent, selector: "tui-doc-navigation", host: { properties: { "class._open": "this.menuOpen" } }, providers: NAVIGATION_PROVIDERS, ngImport: i0, template: "<tui-input\n    #input\n    tuiTextfieldSize=\"m\"\n    class=\"t-input\"\n    [formControl]=\"search\"\n    [tuiAutoFocus]=\"!!sidebar\"\n    [tuiTextfieldCleaner]=\"true\"\n    [tuiTextfieldIconLeft]=\"docIcons.search\"\n    [tuiTextfieldLabelOutside]=\"true\"\n>\n    {{ searchText }}\n    <ng-container *ngIf=\"canOpen\">\n        <tui-data-list *tuiDataList>\n            <tui-opt-group\n                *ngFor=\"let group of filtered$ | async; let index = index\"\n                [label]=\"labels[index] || ''\"\n            >\n                <ng-container *ngFor=\"let item of group\">\n                    <a\n                        *ngIf=\"item.route.includes('://'); else internal\"\n                        tuiOption\n                        [attr.rel]=\"item.rel\"\n                        [href]=\"item.route\"\n                        [target]=\"item.target || '_self'\"\n                    >\n                        {{ item.title }}\n                        <tui-svg\n                            *polymorpheusOutlet=\"item.icon as icon\"\n                            class=\"t-icon\"\n                            [src]=\"icon\"\n                        ></tui-svg>\n                    </a>\n\n                    <ng-template #internal>\n                        <a\n                            tuiOption\n                            [attr.rel]=\"item.rel\"\n                            [fragment]=\"item.fragment\"\n                            [routerLink]=\"item.route\"\n                            [target]=\"item.target || '_self'\"\n                            (click)=\"onClick(input)\"\n                        >\n                            {{ item.title }}\n                            <tui-svg\n                                *polymorpheusOutlet=\"item.icon as icon\"\n                                class=\"t-icon\"\n                                [src]=\"icon\"\n                            ></tui-svg>\n                        </a>\n                    </ng-template>\n                </ng-container>\n            </tui-opt-group>\n        </tui-data-list>\n    </ng-container>\n</tui-input>\n\n<nav class=\"t-navigation\">\n    <tui-scrollbar\n        class=\"t-scrollbar\"\n        [tuiMode]=\"mode$ | async\"\n    >\n        <tui-accordion\n            [closeOthers]=\"false\"\n            [rounded]=\"false\"\n        >\n            <tui-accordion-item\n                *ngFor=\"let label of labels; index as index\"\n                size=\"s\"\n                [borders]=\"null\"\n                [(open)]=\"!!openPagesArr[index]\"\n            >\n                <span class=\"t-label\">\n                    <strong>{{ label }}</strong>\n                </span>\n                <ng-template tuiAccordionItemContent>\n                    <div class=\"t-section\">\n                        <ng-container\n                            *ngFor=\"let item of items[index]; index as subIndex\"\n                            [ngTemplateOutlet]=\"pages\"\n                            [ngTemplateOutletContext]=\"{item: item, index: index * 100 + subIndex}\"\n                        ></ng-container>\n                    </div>\n                </ng-template>\n            </tui-accordion-item>\n        </tui-accordion>\n        <div class=\"t-items-container\">\n            <ng-container\n                *ngFor=\"let item of itemsWithoutSections; let index = index\"\n                [ngTemplateOutlet]=\"pages\"\n                [ngTemplateOutletContext]=\"{item: item, index: items.length - 1 + index}\"\n            ></ng-container>\n        </div>\n\n        <ng-template\n            #pages\n            let-index=\"index\"\n            let-item=\"item\"\n        >\n            <ng-container *ngIf=\"!item.subPages; else subPagesTemplate\">\n                <a\n                    *ngIf=\"item.route.includes('://'); else internal\"\n                    tuiLink\n                    class=\"t-sublink\"\n                    [attr.rel]=\"item.rel\"\n                    [href]=\"item.route\"\n                    [target]=\"item.target || '_self'\"\n                >\n                    {{ item.title }}\n                    <tui-svg\n                        *polymorpheusOutlet=\"item.icon as icon\"\n                        class=\"t-icon\"\n                        [src]=\"icon\"\n                    ></tui-svg>\n                </a>\n\n                <ng-template #internal>\n                    <a\n                        routerLinkActive=\"t-sublink_active\"\n                        tuiLink\n                        class=\"t-sublink\"\n                        [attr.rel]=\"item.rel\"\n                        [routerLink]=\"item.route\"\n                        [target]=\"item.target || '_self'\"\n                        [tuiScrollIntoViewLink]=\"isActive(item.route)\"\n                        (click)=\"closeMenu()\"\n                    >\n                        {{ item.title }}\n                        <tui-svg\n                            *polymorpheusOutlet=\"item.icon as icon\"\n                            class=\"t-icon\"\n                            [src]=\"icon\"\n                        ></tui-svg>\n                    </a>\n                </ng-template>\n            </ng-container>\n\n            <ng-template #subPagesTemplate>\n                <div\n                    routerLinkActive\n                    class=\"t-subsection\"\n                    [routerLinkActiveOptions]=\"{exact: false}\"\n                >\n                    <button\n                        *ngIf=\"item.subPages\"\n                        tuiLink\n                        type=\"button\"\n                        class=\"t-sublink t-sublink_subsection\"\n                        (click)=\"onGroupClick(index)\"\n                    >\n                        <tui-svg\n                            class=\"t-chevron\"\n                            [class.t-chevron_active]=\"!!openPagesGroupsArr[index]\"\n                            [src]=\"icons.more\"\n                        ></tui-svg>\n                        {{ item.title }}\n                        <tui-svg\n                            *polymorpheusOutlet=\"item.icon as icon\"\n                            class=\"t-icon\"\n                            [src]=\"icon\"\n                        ></tui-svg>\n                    </button>\n                    <tui-expand\n                        class=\"t-expand\"\n                        [expanded]=\"!!openPagesGroupsArr[index]\"\n                    >\n                        <div class=\"t-section t-section_bordered\">\n                            <ng-container *ngFor=\"let subPage of $pages(item.subPages)\">\n                                <a\n                                    *ngIf=\"subPage.route.includes('://'); else internal\"\n                                    tuiLink\n                                    class=\"t-sublink t-sublink_small\"\n                                    [attr.rel]=\"subPage.rel\"\n                                    [href]=\"subPage.route\"\n                                    [target]=\"subPage.target || '_self'\"\n                                >\n                                    {{ subPage.title }}\n                                    <tui-svg\n                                        *polymorpheusOutlet=\"subPage.icon as icon\"\n                                        class=\"t-icon\"\n                                        [src]=\"icon\"\n                                    ></tui-svg>\n                                </a>\n\n                                <ng-template #internal>\n                                    <a\n                                        routerLinkActive=\"t-sublink_active\"\n                                        tuiLink\n                                        class=\"t-sublink t-sublink_small\"\n                                        [attr.rel]=\"subPage.rel\"\n                                        [fragment]=\"subPage.fragment\"\n                                        [routerLink]=\"subPage.route\"\n                                        [target]=\"subPage.target || '_self'\"\n                                        [tuiScrollIntoViewLink]=\"isActive(subPage.route)\"\n                                        (click)=\"closeMenu()\"\n                                    >\n                                        {{ subPage.title }}\n                                        <tui-svg\n                                            *polymorpheusOutlet=\"subPage.icon as icon\"\n                                            class=\"t-icon\"\n                                            [src]=\"icon\"\n                                        ></tui-svg>\n                                    </a>\n                                </ng-template>\n                            </ng-container>\n                        </div>\n                    </tui-expand>\n                </div>\n            </ng-template>\n        </ng-template>\n    </tui-scrollbar>\n</nav>\n\n<ng-content></ng-content>\n", styles: [":host{z-index:1;display:flex;flex-direction:column;text-align:center;background:var(--tui-base-01)}.t-input{margin:1.25rem}.t-navigation{display:flex;max-height:100%;min-height:0;flex:1 1 0;text-align:left}.t-scrollbar{scroll-behavior:smooth;width:100%}:host-context(tui-root._reduced-motion) .t-scrollbar{scroll-behavior:auto}.t-items-container{display:flex;flex-direction:column;padding:0 1rem}.t-label{margin-left:.5rem}.t-expand{margin-left:.25rem}.t-section{display:flex;flex-direction:column;align-items:flex-start;margin:-1rem 0 -.5rem}.t-section_bordered{margin:.5rem 0;border-left:1px solid var(--tui-base-03)}.t-subsection{margin-left:.5rem}.t-sublink{-webkit-appearance:none;-moz-appearance:none;appearance:none;padding:1rem 0 0;border:0;background:none;font-size:inherit;line-height:inherit;text-decoration:none;font:var(--tui-font-text-m);margin-left:.5rem}.t-sublink_small{margin-left:1rem;line-height:1.5rem;padding-top:.5rem}.t-sublink_subsection{margin-left:0;line-height:1.6rem}.t-sublink.t-sublink.t-sublink_active{color:var(--tui-text-01)}.t-icon{margin-left:.5rem}.t-chevron{transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;width:1rem;height:1rem;margin:-.25rem .25rem 0 -.1875rem}.t-chevron_active{transform:rotate(90deg)}\n"], components: [{ type: i1.TuiInputComponent, selector: "tui-input" }, { type: i2.TuiDataListComponent, selector: "tui-data-list", inputs: ["role", "emptyContent", "size"] }, { type: i2.TuiOptionComponent, selector: "button[tuiOption], a[tuiOption]", inputs: ["size", "role", "disabled", "value"] }, { type: i2.TuiSvgComponent, selector: "tui-svg", inputs: ["src"] }, { type: i2.TuiScrollbarComponent, selector: "tui-scrollbar", inputs: ["hidden"] }, { type: i1.TuiAccordionComponent, selector: "tui-accordion", inputs: ["closeOthers", "rounded"] }, { type: i1.TuiAccordionItemComponent, selector: "tui-accordion-item", inputs: ["noPadding", "showArrow", "borders", "size", "disabled", "disableHover", "open", "async"], outputs: ["openChange"] }, { type: i2.TuiLinkComponent, selector: "a[tuiLink], button[tuiLink]", inputs: ["pseudo", "icon", "iconAlign", "iconRotated", "mode"], exportAs: ["tuiLink"] }, { type: i2.TuiExpandComponent, selector: "tui-expand", inputs: ["async", "expanded"] }], directives: [{ type: i1.TuiInputDirective, selector: "tui-input" }, { type: i2.TuiTextfieldSizeDirective, selector: "[tuiTextfieldSize]", inputs: ["tuiTextfieldSize"] }, { type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i3.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i4.TuiAutoFocusDirective, selector: "[tuiAutoFocus]", inputs: ["tuiAutoFocus"] }, { type: i2.TuiTextfieldCleanerDirective, selector: "[tuiTextfieldCleaner]", inputs: ["tuiTextfieldCleaner"] }, { type: i2.TuiTextfieldIconLeftDirective, selector: "[tuiTextfieldIconLeft]", inputs: ["tuiTextfieldIconLeft"] }, { type: i2.TuiTextfieldLabelOutsideDirective, selector: "[tuiTextfieldLabelOutside]", inputs: ["tuiTextfieldLabelOutside"] }, { type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.TuiDataListDirective, selector: "ng-template[tuiDataList]" }, { type: i5.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2.TuiOptGroupDirective, selector: "tui-opt-group", inputs: ["label"] }, { type: i6.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { type: i7.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: i2.TuiModeDirective, selector: "[tuiMode]", inputs: ["tuiMode"] }, { type: i1.TuiAccordionItemContentDirective, selector: "ng-template[tuiAccordionItemContent]" }, { type: i5.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i7.RouterLinkActive, selector: "[routerLinkActive]", inputs: ["routerLinkActiveOptions", "routerLinkActive"], exportAs: ["routerLinkActive"] }, { type: i8.TuiScrollIntoViewLinkDirective, selector: "[tuiScrollIntoViewLink]", inputs: ["tuiScrollIntoViewLink"] }], pipes: { "async": i5.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiPure
], TuiDocNavigationComponent.prototype, "filterItems", null);
__decorate([
    tuiPure
], TuiDocNavigationComponent.prototype, "flattenSubPages", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDocNavigationComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-doc-navigation',
                    templateUrl: './navigation.template.html',
                    styleUrls: ['./navigation.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: NAVIGATION_PROVIDERS,
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: i9.Title, decorators: [{
                    type: Inject,
                    args: [Title]
                }] }, { type: i10.Observable, decorators: [{
                    type: Inject,
                    args: [NAVIGATION_TITLE]
                }] }, { type: i2.TuiModeDirective, decorators: [{
                    type: Inject,
                    args: [TuiModeDirective]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TuiSidebarDirective]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [NAVIGATION_LABELS]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [NAVIGATION_ITEMS]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_DOC_SEARCH_TEXT]
                }] }, { type: i7.Router, decorators: [{
                    type: Inject,
                    args: [Router]
                }] }, { type: i7.ActivatedRoute, decorators: [{
                    type: Inject,
                    args: [ActivatedRoute]
                }] }, { type: i10.Observable, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiDestroyService]
                }] }, { type: i10.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_DOC_PAGE_LOADED]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_DOC_ICONS]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_COMMON_ICONS]
                }] }, { type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; }, propDecorators: { menuOpen: [{
                type: HostBinding,
                args: ['class._open']
            }], filterItems: [], flattenSubPages: [] } });
//# sourceMappingURL=data:application/json;base64,