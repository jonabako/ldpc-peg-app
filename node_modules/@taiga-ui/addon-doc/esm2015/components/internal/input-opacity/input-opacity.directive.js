import { Directive, Inject, Input, Renderer2 } from '@angular/core';
import { TUI_FOCUSABLE_ITEM_ACCESSOR } from '@taiga-ui/cdk';
import * as i0 from "@angular/core";
export class TuiInputOpacityDirective {
    constructor(renderer, focusable) {
        this.renderer = renderer;
        this.focusable = focusable;
    }
    set tuiInputOpacity(opacity) {
        const { nativeFocusableElement } = this.focusable;
        if (nativeFocusableElement) {
            this.renderer.setStyle(nativeFocusableElement, 'opacity', opacity / 100);
        }
    }
}
TuiInputOpacityDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputOpacityDirective, deps: [{ token: Renderer2 }, { token: TUI_FOCUSABLE_ITEM_ACCESSOR }], target: i0.ɵɵFactoryTarget.Directive });
TuiInputOpacityDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiInputOpacityDirective, selector: "[tuiInputOpacity]", inputs: { tuiInputOpacity: "tuiInputOpacity" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputOpacityDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiInputOpacity]',
                }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2, decorators: [{
                    type: Inject,
                    args: [Renderer2]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_FOCUSABLE_ITEM_ACCESSOR]
                }] }]; }, propDecorators: { tuiInputOpacity: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtb3BhY2l0eS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hZGRvbi1kb2MvY29tcG9uZW50cy9pbnRlcm5hbC9pbnB1dC1vcGFjaXR5L2lucHV0LW9wYWNpdHkuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDbEUsT0FBTyxFQUFDLDJCQUEyQixFQUE4QixNQUFNLGVBQWUsQ0FBQzs7QUFLdkYsTUFBTSxPQUFPLHdCQUF3QjtJQVVqQyxZQUN3QyxRQUFtQixFQUV0QyxTQUFzQztRQUZuQixhQUFRLEdBQVIsUUFBUSxDQUFXO1FBRXRDLGNBQVMsR0FBVCxTQUFTLENBQTZCO0lBQ3hELENBQUM7SUFiSixJQUNJLGVBQWUsQ0FBQyxPQUFlO1FBQy9CLE1BQU0sRUFBQyxzQkFBc0IsRUFBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7UUFFaEQsSUFBSSxzQkFBc0IsRUFBRTtZQUN4QixJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxzQkFBc0IsRUFBRSxTQUFTLEVBQUUsT0FBTyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1NBQzVFO0lBQ0wsQ0FBQzs7c0hBUlEsd0JBQXdCLGtCQVdyQixTQUFTLGFBQ1QsMkJBQTJCOzBHQVo5Qix3QkFBd0I7NEZBQXhCLHdCQUF3QjtrQkFIcEMsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsbUJBQW1CO2lCQUNoQzs7MEJBWVEsTUFBTTsyQkFBQyxTQUFTOzswQkFDaEIsTUFBTTsyQkFBQywyQkFBMkI7NENBVm5DLGVBQWU7c0JBRGxCLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgSW5qZWN0LCBJbnB1dCwgUmVuZGVyZXIyfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7VFVJX0ZPQ1VTQUJMRV9JVEVNX0FDQ0VTU09SLCBUdWlGb2N1c2FibGVFbGVtZW50QWNjZXNzb3J9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1t0dWlJbnB1dE9wYWNpdHldJyxcbn0pXG5leHBvcnQgY2xhc3MgVHVpSW5wdXRPcGFjaXR5RGlyZWN0aXZlIHtcbiAgICBASW5wdXQoKVxuICAgIHNldCB0dWlJbnB1dE9wYWNpdHkob3BhY2l0eTogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IHtuYXRpdmVGb2N1c2FibGVFbGVtZW50fSA9IHRoaXMuZm9jdXNhYmxlO1xuXG4gICAgICAgIGlmIChuYXRpdmVGb2N1c2FibGVFbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKG5hdGl2ZUZvY3VzYWJsZUVsZW1lbnQsICdvcGFjaXR5Jywgb3BhY2l0eSAvIDEwMCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChSZW5kZXJlcjIpIHByaXZhdGUgcmVhZG9ubHkgcmVuZGVyZXI6IFJlbmRlcmVyMixcbiAgICAgICAgQEluamVjdChUVUlfRk9DVVNBQkxFX0lURU1fQUNDRVNTT1IpXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgZm9jdXNhYmxlOiBUdWlGb2N1c2FibGVFbGVtZW50QWNjZXNzb3IsXG4gICAgKSB7fVxufVxuIl19